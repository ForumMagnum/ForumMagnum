-- GENERATED FILE
-- Do not edit this file directly. Instead, start a server and run "yarn generate"
-- as described in the README. This file should nevertheless be checked in to version control.

-- Extension "btree_gin"
CREATE EXTENSION IF NOT EXISTS "btree_gin" CASCADE;

-- Extension "earthdistance"
CREATE EXTENSION IF NOT EXISTS "earthdistance" CASCADE;

-- Extension "intarray"
CREATE EXTENSION IF NOT EXISTS "intarray" CASCADE;

-- Extension "vector"
CREATE EXTENSION IF NOT EXISTS "vector" CASCADE;

-- Extension "pg_trgm"
CREATE EXTENSION IF NOT EXISTS "pg_trgm" CASCADE;

-- Table "AdvisorRequests"
CREATE TABLE "AdvisorRequests" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27) NOT NULL,
  "interestedInMetaculus" BOOL NOT NULL DEFAULT FALSE,
  "jobAds" JSONB,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_AdvisorRequests_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_AdvisorRequests_schemaVersion" ON "AdvisorRequests" USING btree ("schemaVersion");

-- Index "idx_AdvisorRequests_userId"
CREATE INDEX IF NOT EXISTS "idx_AdvisorRequests_userId" ON "AdvisorRequests" USING btree ("userId");

-- Table "ArbitalCaches"
CREATE TABLE "ArbitalCaches" (
  _id VARCHAR(27) PRIMARY KEY,
  "pageAlias" TEXT NOT NULL,
  "title" TEXT NOT NULL,
  "fetchedAt" TIMESTAMPTZ NOT NULL,
  "sanitizedHtml" TEXT NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_ArbitalCaches_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_ArbitalCaches_schemaVersion" ON "ArbitalCaches" USING btree ("schemaVersion");

-- Index "idx_ArbitalCaches_pageAlias"
CREATE INDEX IF NOT EXISTS "idx_ArbitalCaches_pageAlias" ON "ArbitalCaches" USING btree ("pageAlias");

-- Index "idx_ArbitalCaches_fetchedAt"
CREATE INDEX IF NOT EXISTS "idx_ArbitalCaches_fetchedAt" ON "ArbitalCaches" USING btree ("fetchedAt");

-- Table "Bans"
CREATE TABLE "Bans" (
  _id VARCHAR(27) PRIMARY KEY,
  "expirationDate" TIMESTAMPTZ NOT NULL,
  "userId" VARCHAR(27) NOT NULL,
  "ip" TEXT,
  "reason" TEXT,
  "comment" TEXT NOT NULL DEFAULT '',
  "properties" JSONB,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Bans_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Bans_schemaVersion" ON "Bans" USING btree ("schemaVersion");

-- Index "idx_Bans_ip"
CREATE INDEX IF NOT EXISTS "idx_Bans_ip" ON "Bans" USING btree ("ip");

-- Table "Books"
CREATE TABLE "Books" (
  _id VARCHAR(27) PRIMARY KEY,
  "postedAt" TIMESTAMPTZ,
  "title" TEXT,
  "subtitle" TEXT,
  "tocTitle" TEXT,
  "collectionId" VARCHAR(27) NOT NULL,
  "number" DOUBLE PRECISION,
  "postIds" VARCHAR(27) [] NOT NULL DEFAULT '{}',
  "sequenceIds" VARCHAR(27) [] NOT NULL DEFAULT '{}',
  "displaySequencesAsGrid" BOOL,
  "hideProgressBar" BOOL,
  "showChapters" BOOL,
  "contents" JSONB,
  "contents_latest" TEXT,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Books_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Books_schemaVersion" ON "Books" USING btree ("schemaVersion");

-- Index "idx_Books_collectionId"
CREATE INDEX IF NOT EXISTS "idx_Books_collectionId" ON "Books" USING btree ("collectionId");

-- Table "Chapters"
CREATE TABLE "Chapters" (
  _id VARCHAR(27) PRIMARY KEY,
  "title" TEXT,
  "subtitle" TEXT,
  "number" DOUBLE PRECISION,
  "sequenceId" VARCHAR(27),
  "postIds" VARCHAR(27) [] NOT NULL DEFAULT '{}',
  "contents" JSONB,
  "contents_latest" TEXT,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Chapters_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Chapters_schemaVersion" ON "Chapters" USING btree ("schemaVersion");

-- Index "idx_Chapters_sequenceId_number"
CREATE INDEX IF NOT EXISTS "idx_Chapters_sequenceId_number" ON "Chapters" USING btree ("sequenceId", "number");

-- Table "CkEditorUserSessions"
CREATE TABLE "CkEditorUserSessions" (
  _id VARCHAR(27) PRIMARY KEY,
  "documentId" TEXT NOT NULL,
  "userId" TEXT NOT NULL,
  "endedAt" TIMESTAMPTZ,
  "endedBy" TEXT,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_CkEditorUserSessions_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_CkEditorUserSessions_schemaVersion" ON "CkEditorUserSessions" USING btree ("schemaVersion");

-- Index "idx_CkEditorUserSessions_documentId_userId"
CREATE INDEX IF NOT EXISTS "idx_CkEditorUserSessions_documentId_userId" ON "CkEditorUserSessions" USING btree ("documentId", "userId");

-- Table "ClientIds"
CREATE TABLE "ClientIds" (
  _id VARCHAR(27) PRIMARY KEY,
  "clientId" TEXT NOT NULL,
  "firstSeenReferrer" TEXT,
  "firstSeenLandingPage" TEXT,
  "userIds" TEXT[] DEFAULT '{}'::TEXT[],
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_ClientIds_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_ClientIds_schemaVersion" ON "ClientIds" USING btree ("schemaVersion");

-- Index "idx_idx_ClientIds_clientId_unique"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_idx_ClientIds_clientId_unique" ON "ClientIds" USING btree ("clientId");

-- Index "idx_ClientIds_userIds"
CREATE INDEX IF NOT EXISTS "idx_ClientIds_userIds" ON "ClientIds" USING gin ("userIds");

-- Table "Collections"
CREATE TABLE "Collections" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27) NOT NULL,
  "title" TEXT NOT NULL,
  "slug" TEXT NOT NULL,
  "gridImageId" TEXT,
  "firstPageLink" TEXT NOT NULL,
  "hideStartReadingButton" BOOL,
  "noindex" BOOL NOT NULL DEFAULT FALSE,
  "contents" JSONB,
  "contents_latest" TEXT,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Collections_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Collections_schemaVersion" ON "Collections" USING btree ("schemaVersion");

-- Index "idx_Collections_slug"
CREATE INDEX IF NOT EXISTS "idx_Collections_slug" ON "Collections" USING btree ("slug");

-- Table "CommentModeratorActions"
CREATE TABLE "CommentModeratorActions" (
  _id VARCHAR(27) PRIMARY KEY,
  "commentId" VARCHAR(27) NOT NULL,
  "type" TEXT NOT NULL,
  "endedAt" TIMESTAMPTZ,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_CommentModeratorActions_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_CommentModeratorActions_schemaVersion" ON "CommentModeratorActions" USING btree ("schemaVersion");

-- Index "idx_CommentModeratorActions_commentId_createdAt"
CREATE INDEX IF NOT EXISTS "idx_CommentModeratorActions_commentId_createdAt" ON "CommentModeratorActions" USING btree ("commentId", "createdAt");

-- Table "Comments"
CREATE TABLE "Comments" (
  _id VARCHAR(27) PRIMARY KEY,
  "parentCommentId" VARCHAR(27),
  "topLevelCommentId" VARCHAR(27),
  "postedAt" TIMESTAMPTZ NOT NULL,
  "author" TEXT,
  "postId" VARCHAR(27),
  "tagId" VARCHAR(27),
  "forumEventId" VARCHAR(27),
  "tagCommentType" TEXT NOT NULL DEFAULT 'DISCUSSION',
  "subforumStickyPriority" DOUBLE PRECISION,
  "userId" VARCHAR(27) NOT NULL,
  "userIP" TEXT,
  "userAgent" TEXT,
  "referrer" TEXT,
  "authorIsUnreviewed" BOOL NOT NULL DEFAULT FALSE,
  "answer" BOOL NOT NULL DEFAULT FALSE,
  "parentAnswerId" VARCHAR(27),
  "directChildrenCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "descendentCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "shortform" BOOL,
  "shortformFrontpage" BOOL NOT NULL DEFAULT TRUE,
  "nominatedForReview" TEXT,
  "reviewingForReview" TEXT,
  "lastSubthreadActivity" TIMESTAMPTZ,
  "postVersion" TEXT,
  "promoted" BOOL,
  "promotedByUserId" VARCHAR(27),
  "promotedAt" TIMESTAMPTZ,
  "hideKarma" BOOL,
  "legacy" BOOL NOT NULL DEFAULT FALSE,
  "legacyId" TEXT,
  "legacyPoll" BOOL NOT NULL DEFAULT FALSE,
  "legacyParentId" TEXT,
  "retracted" BOOL NOT NULL DEFAULT FALSE,
  "deleted" BOOL NOT NULL DEFAULT FALSE,
  "deletedPublic" BOOL NOT NULL DEFAULT FALSE,
  "deletedReason" TEXT,
  "deletedDate" TIMESTAMPTZ,
  "deletedByUserId" VARCHAR(27),
  "spam" BOOL NOT NULL DEFAULT FALSE,
  "repliesBlockedUntil" TIMESTAMPTZ,
  "needsReview" BOOL,
  "reviewedByUserId" VARCHAR(27),
  "hideAuthor" BOOL NOT NULL DEFAULT FALSE,
  "moderatorHat" BOOL NOT NULL DEFAULT FALSE,
  "hideModeratorHat" BOOL,
  "isPinnedOnProfile" BOOL NOT NULL DEFAULT FALSE,
  "title" VARCHAR(500),
  "relevantTagIds" VARCHAR(27) [] NOT NULL DEFAULT '{}',
  "debateResponse" BOOL,
  "rejected" BOOL NOT NULL DEFAULT FALSE,
  "modGPTAnalysis" TEXT,
  "modGPTRecommendation" TEXT,
  "rejectedReason" TEXT,
  "rejectedByUserId" VARCHAR(27),
  "af" BOOL NOT NULL DEFAULT FALSE,
  "suggestForAlignmentUserIds" TEXT[] NOT NULL DEFAULT '{}',
  "reviewForAlignmentUserId" TEXT,
  "afDate" TIMESTAMPTZ,
  "moveToAlignmentUserId" VARCHAR(27),
  "agentFoundationsId" TEXT,
  "originalDialogueId" VARCHAR(27),
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB,
  "contents" JSONB,
  "contents_latest" TEXT,
  "pingbacks" JSONB,
  "voteCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "baseScore" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "extendedScore" JSONB,
  "score" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "inactive" BOOL NOT NULL DEFAULT FALSE,
  "afBaseScore" DOUBLE PRECISION,
  "afExtendedScore" JSONB,
  "afVoteCount" DOUBLE PRECISION
);

-- Index "idx_Comments_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Comments_schemaVersion" ON "Comments" USING btree ("schemaVersion");

-- Index "idx_Comments_postId"
CREATE INDEX IF NOT EXISTS "idx_Comments_postId" ON "Comments" USING btree ("postId");

-- Index "idx_Comments_userId_postedAt"
CREATE INDEX IF NOT EXISTS "idx_Comments_userId_postedAt" ON "Comments" USING btree ("userId", "postedAt");

-- Index "idx_Comments_parentCommentId"
CREATE INDEX IF NOT EXISTS "idx_Comments_parentCommentId" ON "Comments" USING btree ("parentCommentId");

-- Index "idx_comments_top_comments"
CREATE INDEX IF NOT EXISTS "idx_comments_top_comments" ON "Comments" USING btree (
  "postId",
  "parentAnswerId",
  "answer",
  "deleted",
  "baseScore",
  "postedAt",
  "authorIsUnreviewed",
  "deletedPublic",
  "hideAuthor",
  "userId",
  "af",
  "debateResponse"
);

-- Index "idx_comments_recent_replies"
CREATE INDEX IF NOT EXISTS "idx_comments_recent_replies" ON "Comments" USING btree (
  "postId",
  "parentAnswerId",
  "answer",
  "deleted",
  "lastSubthreadActivity",
  "baseScore",
  "postedAt",
  "authorIsUnreviewed",
  "deletedPublic",
  "hideAuthor",
  "userId",
  "af",
  "debateResponse"
);

-- Index "idx_comments_magic_comments"
CREATE INDEX IF NOT EXISTS "idx_comments_magic_comments" ON "Comments" USING btree (
  "postId",
  "parentAnswerId",
  "answer",
  "deleted",
  "score",
  "postedAt",
  "authorIsUnreviewed",
  "deletedPublic",
  "hideAuthor",
  "userId",
  "af",
  "debateResponse"
);

-- Index "idx_comments_af_top_comments"
CREATE INDEX IF NOT EXISTS "idx_comments_af_top_comments" ON "Comments" USING btree (
  "postId",
  "parentAnswerId",
  "answer",
  "deleted",
  "afBaseScore",
  "postedAt",
  "authorIsUnreviewed",
  "deletedPublic",
  "hideAuthor",
  "userId",
  "af",
  "debateResponse"
);

-- Index "idx_comments_new_comments"
CREATE INDEX IF NOT EXISTS "idx_comments_new_comments" ON "Comments" USING btree (
  "postId",
  "parentAnswerId",
  "answer",
  "deleted",
  "postedAt",
  "authorIsUnreviewed",
  "deletedPublic",
  "hideAuthor",
  "userId",
  "af",
  "debateResponse"
);

-- Index "idx_Comments_userId_isPinnedOnProfile_postedAt_authorIsUnreviewed_deleted_deletedPublic_hideAuthor_af_debateResponse"
CREATE INDEX IF NOT EXISTS "idx_Comments_userId_isPinnedOnProfile_postedAt_authorIsUnreviewed_deleted_deletedPublic_hideAuthor_af_debateResponse" ON "Comments" USING btree (
  "userId",
  "isPinnedOnProfile",
  "postedAt",
  "authorIsUnreviewed",
  "deleted",
  "deletedPublic",
  "hideAuthor",
  "af",
  "debateResponse"
);

-- Index "idx_Comments_postedAt_authorIsUnreviewed_deleted_deletedPublic_hideAuthor_userId_af_debateResponse"
CREATE INDEX IF NOT EXISTS "idx_Comments_postedAt_authorIsUnreviewed_deleted_deletedPublic_hideAuthor_userId_af_debateResponse" ON "Comments" USING btree (
  "postedAt",
  "authorIsUnreviewed",
  "deleted",
  "deletedPublic",
  "hideAuthor",
  "userId",
  "af",
  "debateResponse"
);

-- Index "idx_Comments_rejected_authorIsUnreviewed_postedAt_deleted_deletedPublic_hideAuthor_userId_af_debateResponse"
CREATE INDEX IF NOT EXISTS "idx_Comments_rejected_authorIsUnreviewed_postedAt_deleted_deletedPublic_hideAuthor_userId_af_debateResponse" ON "Comments" USING btree (
  "rejected",
  "authorIsUnreviewed",
  "postedAt",
  "deleted",
  "deletedPublic",
  "hideAuthor",
  "userId",
  "af",
  "debateResponse"
);

-- Index "idx_Comments_legacyId"
CREATE INDEX IF NOT EXISTS "idx_Comments_legacyId" ON "Comments" USING btree ("legacyId");

-- Index "idx_Comments_inactive_postedAt"
CREATE INDEX IF NOT EXISTS "idx_Comments_inactive_postedAt" ON "Comments" USING btree ("inactive", "postedAt");

-- Index "idx_Comments_userId_postedAt_authorIsUnreviewed_deleted_deletedPublic_hideAuthor_af_debateResponse"
CREATE INDEX IF NOT EXISTS "idx_Comments_userId_postedAt_authorIsUnreviewed_deleted_deletedPublic_hideAuthor_af_debateResponse" ON "Comments" USING btree (
  "userId",
  "postedAt",
  "authorIsUnreviewed",
  "deleted",
  "deletedPublic",
  "hideAuthor",
  "af",
  "debateResponse"
);

-- Index "idx_Comments_parentAnswerId_baseScore_authorIsUnreviewed_deleted_deletedPublic_hideAuthor_userId_af_postedAt_debateResponse"
CREATE INDEX IF NOT EXISTS "idx_Comments_parentAnswerId_baseScore_authorIsUnreviewed_deleted_deletedPublic_hideAuthor_userId_af_postedAt_debateResponse" ON "Comments" USING btree (
  "parentAnswerId",
  "baseScore",
  "authorIsUnreviewed",
  "deleted",
  "deletedPublic",
  "hideAuthor",
  "userId",
  "af",
  "postedAt",
  "debateResponse"
);

-- Index "idx_Comments_topLevelCommentId"
CREATE INDEX IF NOT EXISTS "idx_Comments_topLevelCommentId" ON "Comments" USING btree ("topLevelCommentId");

-- Index "idx_Comments_agentFoundationsId"
CREATE INDEX IF NOT EXISTS "idx_Comments_agentFoundationsId" ON "Comments" USING btree ("agentFoundationsId");

-- Index "idx_Comments_shortform_topLevelCommentId_lastSubthreadActivity_postedAt_baseScore"
CREATE INDEX IF NOT EXISTS "idx_Comments_shortform_topLevelCommentId_lastSubthreadActivity_postedAt_baseScore" ON "Comments" USING btree (
  "shortform",
  "topLevelCommentId",
  "lastSubthreadActivity",
  "postedAt",
  "baseScore"
);

-- Index "idx_Comments_topLevelCommentId_postedAt_baseScore"
CREATE INDEX IF NOT EXISTS "idx_Comments_topLevelCommentId_postedAt_baseScore" ON "Comments" USING btree ("topLevelCommentId", "postedAt", "baseScore");

-- Index "idx_comments_nominations2018"
CREATE INDEX IF NOT EXISTS "idx_comments_nominations2018" ON "Comments" USING btree (
  "nominatedForReview",
  "userId",
  "postId",
  "authorIsUnreviewed",
  "deleted",
  "deletedPublic",
  "hideAuthor",
  "af",
  "postedAt",
  "debateResponse"
);

-- Index "idx_comments_reviews2018"
CREATE INDEX IF NOT EXISTS "idx_comments_reviews2018" ON "Comments" USING btree (
  "reviewingForReview",
  "userId",
  "postId",
  "authorIsUnreviewed",
  "deleted",
  "deletedPublic",
  "hideAuthor",
  "af",
  "postedAt",
  "debateResponse"
);

-- Index "idx_comments_tagId"
CREATE INDEX IF NOT EXISTS "idx_comments_tagId" ON "Comments" USING btree (
  "tagId",
  "authorIsUnreviewed",
  "deleted",
  "deletedPublic",
  "hideAuthor",
  "userId",
  "af",
  "postedAt",
  "debateResponse"
);

-- Index "idx_Comments_topLevelCommentId_tagCommentType_tagId_authorIsUnreviewed_deleted_deletedPublic_hideAuthor_userId_af_postedAt_debateResponse"
CREATE INDEX IF NOT EXISTS "idx_Comments_topLevelCommentId_tagCommentType_tagId_authorIsUnreviewed_deleted_deletedPublic_hideAuthor_userId_af_postedAt_debateResponse" ON "Comments" USING btree (
  "topLevelCommentId",
  "tagCommentType",
  "tagId",
  "authorIsUnreviewed",
  "deleted",
  "deletedPublic",
  "hideAuthor",
  "userId",
  "af",
  "postedAt",
  "debateResponse"
);

-- Index "idx_comments_moderatorHat"
CREATE INDEX IF NOT EXISTS "idx_comments_moderatorHat" ON "Comments" USING btree (
  "moderatorHat",
  "authorIsUnreviewed",
  "deleted",
  "deletedPublic",
  "hideAuthor",
  "userId",
  "af",
  "postedAt",
  "debateResponse"
);

-- Index "idx_Comments_forumEventId_userId_postedAt_authorIsUnreviewed_deleted_deletedPublic_hideAuthor_af_debateResponse"
CREATE INDEX IF NOT EXISTS "idx_Comments_forumEventId_userId_postedAt_authorIsUnreviewed_deleted_deletedPublic_hideAuthor_af_debateResponse" ON "Comments" USING btree (
  "forumEventId",
  "userId",
  "postedAt",
  "authorIsUnreviewed",
  "deleted",
  "deletedPublic",
  "hideAuthor",
  "af",
  "debateResponse"
);

-- Index "idx_comments_alignmentSuggestedComments"
CREATE INDEX IF NOT EXISTS "idx_comments_alignmentSuggestedComments" ON "Comments" USING gin (
  "reviewForAlignmentUserId",
  "af",
  "suggestForAlignmentUserIds",
  "postedAt",
  "authorIsUnreviewed",
  "deleted",
  "deletedPublic",
  "hideAuthor",
  "userId",
  "debateResponse"
)
WHERE
  ("suggestForAlignmentUserIds" [0]) IS NOT NULL;

-- Index "idx_Comments_userId_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Comments_userId_createdAt" ON "Comments" USING btree ("userId", "createdAt");

-- Table "Conversations"
CREATE TABLE "Conversations" (
  _id VARCHAR(27) PRIMARY KEY,
  "title" TEXT,
  "participantIds" VARCHAR(27) [] NOT NULL DEFAULT '{}',
  "latestActivity" TIMESTAMPTZ,
  "af" BOOL,
  "messageCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "moderator" BOOL,
  "archivedByIds" VARCHAR(27) [] NOT NULL DEFAULT '{}',
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Conversations_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Conversations_schemaVersion" ON "Conversations" USING btree ("schemaVersion");

-- Index "idx_Conversations_moderator_messageCount_latestActivity_participantIds"
CREATE INDEX IF NOT EXISTS "idx_Conversations_moderator_messageCount_latestActivity_participantIds" ON "Conversations" USING gin (
  "moderator",
  "messageCount",
  "latestActivity",
  "participantIds"
);

-- Index "idx_Conversations_participantIds_messageCount_latestActivity"
CREATE INDEX IF NOT EXISTS "idx_Conversations_participantIds_messageCount_latestActivity" ON "Conversations" USING gin (
  "participantIds",
  "messageCount",
  "latestActivity"
);

-- Index "idx_Conversations_participantIds_title"
CREATE INDEX IF NOT EXISTS "idx_Conversations_participantIds_title" ON "Conversations" USING gin ("participantIds", "title");

-- Table "CronHistories"
CREATE TABLE "CronHistories" (
  _id VARCHAR(27) PRIMARY KEY,
  "intendedAt" TIMESTAMPTZ NOT NULL,
  "name" TEXT NOT NULL,
  "startedAt" TIMESTAMPTZ NOT NULL,
  "finishedAt" TIMESTAMPTZ,
  "result" JSONB
);

-- Index "idx_CronHistories_startedAt"
CREATE INDEX IF NOT EXISTS "idx_CronHistories_startedAt" ON "CronHistories" USING btree ("startedAt");

-- Index "idx_CronHistories_intendedAt_name"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_CronHistories_intendedAt_name" ON "CronHistories" USING btree ("intendedAt", "name");

-- Table "CurationEmails"
CREATE TABLE "CurationEmails" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" TEXT NOT NULL,
  "postId" TEXT NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_CurationEmails_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_CurationEmails_schemaVersion" ON "CurationEmails" USING btree ("schemaVersion");

-- Index "idx_CurationEmails_userId"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_CurationEmails_userId" ON "CurationEmails" USING btree ("userId");

-- Table "CurationNotices"
CREATE TABLE "CurationNotices" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27) NOT NULL,
  "commentId" VARCHAR(27),
  "postId" VARCHAR(27),
  "deleted" BOOL NOT NULL DEFAULT FALSE,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB,
  "contents" JSONB,
  "contents_latest" TEXT
);

-- Index "idx_CurationNotices_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_CurationNotices_schemaVersion" ON "CurationNotices" USING btree ("schemaVersion");

-- Table "DatabaseMetadata"
CREATE TABLE "DatabaseMetadata" (
  _id VARCHAR(27) PRIMARY KEY,
  "name" TEXT NOT NULL,
  "value" JSONB NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_DatabaseMetadata_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_DatabaseMetadata_schemaVersion" ON "DatabaseMetadata" USING btree ("schemaVersion");

-- Table "DebouncerEvents"
CREATE TABLE "DebouncerEvents" (
  _id VARCHAR(27) PRIMARY KEY,
  "name" TEXT NOT NULL,
  "af" BOOL,
  "dispatched" BOOL NOT NULL,
  "failed" BOOL,
  "delayTime" TIMESTAMPTZ NOT NULL,
  "upperBoundTime" TIMESTAMPTZ NOT NULL,
  "key" TEXT NOT NULL,
  "pendingEvents" TEXT[],
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_DebouncerEvents_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_DebouncerEvents_schemaVersion" ON "DebouncerEvents" USING btree ("schemaVersion");

-- Index "idx_DebouncerEvents_dispatched_af_delayTime"
CREATE INDEX IF NOT EXISTS "idx_DebouncerEvents_dispatched_af_delayTime" ON "DebouncerEvents" USING btree ("dispatched", "af", "delayTime");

-- Index "idx_DebouncerEvents_dispatched_af_upperBoundTime"
CREATE INDEX IF NOT EXISTS "idx_DebouncerEvents_dispatched_af_upperBoundTime" ON "DebouncerEvents" USING btree ("dispatched", "af", "upperBoundTime");

-- Table "DialogueChecks"
CREATE TABLE "DialogueChecks" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" TEXT NOT NULL,
  "targetUserId" TEXT NOT NULL,
  "checked" BOOL NOT NULL DEFAULT FALSE,
  "checkedAt" TIMESTAMPTZ NOT NULL,
  "hideInRecommendations" BOOL NOT NULL DEFAULT FALSE,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_DialogueChecks_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_DialogueChecks_schemaVersion" ON "DialogueChecks" USING btree ("schemaVersion");

-- Index "idx_DialogueChecks_userId_targetUserId"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_DialogueChecks_userId_targetUserId" ON "DialogueChecks" USING btree ("userId", "targetUserId");

-- Table "DialogueMatchPreferences"
CREATE TABLE "DialogueMatchPreferences" (
  _id VARCHAR(27) PRIMARY KEY,
  "dialogueCheckId" VARCHAR(27) NOT NULL,
  "topicPreferences" JSONB[] NOT NULL DEFAULT '{}',
  "topicNotes" TEXT NOT NULL DEFAULT '',
  "syncPreference" TEXT NOT NULL,
  "asyncPreference" TEXT NOT NULL,
  "formatNotes" TEXT NOT NULL DEFAULT '',
  "calendlyLink" TEXT,
  "generatedDialogueId" TEXT,
  "deleted" BOOL NOT NULL DEFAULT FALSE,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_DialogueMatchPreferences_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_DialogueMatchPreferences_schemaVersion" ON "DialogueMatchPreferences" USING btree ("schemaVersion");

-- Index "idx_DialogueMatchPreferences_dialogueCheckId"
CREATE INDEX IF NOT EXISTS "idx_DialogueMatchPreferences_dialogueCheckId" ON "DialogueMatchPreferences" USING btree ("dialogueCheckId");

-- Table "DigestPosts"
CREATE TABLE "DigestPosts" (
  _id VARCHAR(27) PRIMARY KEY,
  "digestId" VARCHAR(27) NOT NULL,
  "postId" VARCHAR(27) NOT NULL,
  "emailDigestStatus" TEXT,
  "onsiteDigestStatus" TEXT,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_DigestPosts_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_DigestPosts_schemaVersion" ON "DigestPosts" USING btree ("schemaVersion");

-- Index "idx_DigestPosts_digestId"
CREATE INDEX IF NOT EXISTS "idx_DigestPosts_digestId" ON "DigestPosts" USING btree ("digestId");

-- Table "Digests"
CREATE TABLE "Digests" (
  _id VARCHAR(27) PRIMARY KEY,
  "num" DOUBLE PRECISION NOT NULL,
  "startDate" TIMESTAMPTZ NOT NULL,
  "endDate" TIMESTAMPTZ,
  "publishedDate" TIMESTAMPTZ,
  "onsiteImageId" TEXT,
  "onsitePrimaryColor" TEXT,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Digests_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Digests_schemaVersion" ON "Digests" USING btree ("schemaVersion");

-- Index "idx_Digests_num"
CREATE INDEX IF NOT EXISTS "idx_Digests_num" ON "Digests" USING btree ("num");

-- Table "ElectionCandidates"
CREATE TABLE "ElectionCandidates" (
  _id VARCHAR(27) PRIMARY KEY,
  "electionName" TEXT NOT NULL,
  "name" TEXT NOT NULL,
  "logoSrc" TEXT NOT NULL,
  "href" TEXT NOT NULL,
  "fundraiserLink" TEXT,
  "gwwcLink" TEXT,
  "gwwcId" TEXT,
  "description" TEXT NOT NULL,
  "userId" VARCHAR(27) NOT NULL,
  "postCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "tagId" VARCHAR(27) NOT NULL,
  "isElectionFundraiser" BOOL NOT NULL DEFAULT FALSE,
  "amountRaised" DOUBLE PRECISION,
  "targetAmount" DOUBLE PRECISION,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB,
  "voteCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "baseScore" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "extendedScore" JSONB,
  "score" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "inactive" BOOL NOT NULL DEFAULT FALSE,
  "afBaseScore" DOUBLE PRECISION,
  "afExtendedScore" JSONB,
  "afVoteCount" DOUBLE PRECISION
);

-- Index "idx_ElectionCandidates_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_ElectionCandidates_schemaVersion" ON "ElectionCandidates" USING btree ("schemaVersion");

-- Index "idx_ElectionCandidates_electionName"
CREATE INDEX IF NOT EXISTS "idx_ElectionCandidates_electionName" ON "ElectionCandidates" USING btree ("electionName");

-- Table "ElectionVotes"
CREATE TABLE "ElectionVotes" (
  _id VARCHAR(27) PRIMARY KEY,
  "electionName" TEXT NOT NULL,
  "userId" VARCHAR(27),
  "compareState" JSONB,
  "vote" JSONB,
  "submittedAt" TIMESTAMPTZ,
  "submissionComments" JSONB,
  "userExplanation" TEXT,
  "userOtherComments" TEXT,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_ElectionVotes_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_ElectionVotes_schemaVersion" ON "ElectionVotes" USING btree ("schemaVersion");

-- Index "idx_ElectionVotes_electionName_userId"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_ElectionVotes_electionName_userId" ON "ElectionVotes" USING btree ("electionName", COALESCE("userId", ''));

-- Index "idx_ElectionVotes_electionName"
CREATE INDEX IF NOT EXISTS "idx_ElectionVotes_electionName" ON "ElectionVotes" USING btree ("electionName");

-- Table "ElicitQuestionPredictions"
CREATE TABLE "ElicitQuestionPredictions" (
  _id VARCHAR(27) PRIMARY KEY,
  "prediction" DOUBLE PRECISION NOT NULL,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "notes" TEXT,
  "creator" JSONB NOT NULL,
  "userId" VARCHAR(27),
  "sourceUrl" TEXT,
  "sourceId" TEXT,
  "binaryQuestionId" VARCHAR(27) NOT NULL
);

-- Table "ElicitQuestions"
CREATE TABLE "ElicitQuestions" (
  _id VARCHAR(27) PRIMARY KEY,
  "title" TEXT NOT NULL,
  "notes" TEXT,
  "resolution" TEXT,
  "resolvesBy" TIMESTAMPTZ NOT NULL,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Table "EmailTokens"
CREATE TABLE "EmailTokens" (
  _id VARCHAR(27) PRIMARY KEY,
  "token" TEXT NOT NULL,
  "tokenType" TEXT NOT NULL,
  "userId" VARCHAR(27) NOT NULL,
  "usedAt" TIMESTAMPTZ,
  "params" JSONB,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_EmailTokens_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_EmailTokens_schemaVersion" ON "EmailTokens" USING btree ("schemaVersion");

-- Index "idx_EmailTokens_token"
CREATE INDEX IF NOT EXISTS "idx_EmailTokens_token" ON "EmailTokens" USING btree ("token");

-- Table "FeaturedResources"
CREATE TABLE "FeaturedResources" (
  _id VARCHAR(27) PRIMARY KEY,
  "title" TEXT NOT NULL,
  "body" TEXT,
  "ctaText" TEXT NOT NULL,
  "ctaUrl" TEXT NOT NULL,
  "expiresAt" TIMESTAMPTZ,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_FeaturedResources_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_FeaturedResources_schemaVersion" ON "FeaturedResources" USING btree ("schemaVersion");

-- Table "ForumEvents"
CREATE TABLE "ForumEvents" (
  _id VARCHAR(27) PRIMARY KEY,
  "title" TEXT NOT NULL,
  "startDate" TIMESTAMPTZ NOT NULL,
  "endDate" TIMESTAMPTZ NOT NULL,
  "darkColor" TEXT NOT NULL,
  "lightColor" TEXT NOT NULL,
  "contrastColor" TEXT,
  "tagId" VARCHAR(27) NOT NULL,
  "postId" VARCHAR(27),
  "bannerImageId" TEXT,
  "includesPoll" BOOL NOT NULL DEFAULT FALSE,
  "publicData" JSONB,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB,
  "frontpageDescription" JSONB,
  "frontpageDescription_latest" TEXT,
  "frontpageDescriptionMobile" JSONB,
  "frontpageDescriptionMobile_latest" TEXT,
  "postPageDescription" JSONB,
  "postPageDescription_latest" TEXT
);

-- Index "idx_ForumEvents_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_ForumEvents_schemaVersion" ON "ForumEvents" USING btree ("schemaVersion");

-- Index "idx_ForumEvents_endDate"
CREATE INDEX IF NOT EXISTS "idx_ForumEvents_endDate" ON "ForumEvents" USING btree ("endDate");

-- Table "GardenCodes"
CREATE TABLE "GardenCodes" (
  _id VARCHAR(27) PRIMARY KEY,
  "code" TEXT NOT NULL,
  "title" TEXT NOT NULL DEFAULT 'Guest Day Pass',
  "userId" VARCHAR(27) NOT NULL,
  "slug" TEXT NOT NULL,
  "startTime" TIMESTAMPTZ,
  "endTime" TIMESTAMPTZ NOT NULL,
  "fbLink" TEXT,
  "type" TEXT NOT NULL DEFAULT 'public',
  "hidden" BOOL NOT NULL DEFAULT FALSE,
  "deleted" BOOL NOT NULL DEFAULT FALSE,
  "afOnly" BOOL NOT NULL DEFAULT FALSE,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB,
  "contents" JSONB,
  "contents_latest" TEXT,
  "pingbacks" JSONB
);

-- Index "idx_GardenCodes_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_GardenCodes_schemaVersion" ON "GardenCodes" USING btree ("schemaVersion");

-- Index "idx_GardenCodes_code_deleted"
CREATE INDEX IF NOT EXISTS "idx_GardenCodes_code_deleted" ON "GardenCodes" USING btree ("code", "deleted");

-- Index "idx_GardenCodes_userId_deleted"
CREATE INDEX IF NOT EXISTS "idx_GardenCodes_userId_deleted" ON "GardenCodes" USING btree ("userId", "deleted");

-- Index "idx_GardenCodes_code_deleted_userId"
CREATE INDEX IF NOT EXISTS "idx_GardenCodes_code_deleted_userId" ON "GardenCodes" USING btree ("code", "deleted", "userId");

-- Table "GoogleServiceAccountSessions"
CREATE TABLE "GoogleServiceAccountSessions" (
  _id VARCHAR(27) PRIMARY KEY,
  "email" TEXT NOT NULL,
  "refreshToken" TEXT NOT NULL,
  "estimatedExpiry" TIMESTAMPTZ NOT NULL,
  "active" BOOL NOT NULL,
  "revoked" BOOL NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_GoogleServiceAccountSessions_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_GoogleServiceAccountSessions_schemaVersion" ON "GoogleServiceAccountSessions" USING btree ("schemaVersion");

-- Table "Images"
CREATE TABLE "Images" (
  _id VARCHAR(27) PRIMARY KEY,
  "originalUrl" TEXT,
  "identifier" TEXT NOT NULL,
  "identifierType" TEXT NOT NULL,
  "cdnHostedUrl" TEXT NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Images_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Images_schemaVersion" ON "Images" USING btree ("schemaVersion");

-- Index "idx_Images_identifier"
CREATE INDEX IF NOT EXISTS "idx_Images_identifier" ON "Images" USING btree ("identifier");

-- Index "idx_Images_cdnHostedUrl"
CREATE INDEX IF NOT EXISTS "idx_Images_cdnHostedUrl" ON "Images" USING btree ("cdnHostedUrl");

-- Table "JargonTerms"
CREATE TABLE "JargonTerms" (
  _id VARCHAR(27) PRIMARY KEY,
  "postId" VARCHAR(27) NOT NULL,
  "term" TEXT NOT NULL,
  "approved" BOOL NOT NULL DEFAULT FALSE,
  "deleted" BOOL NOT NULL DEFAULT FALSE,
  "altTerms" TEXT[] NOT NULL DEFAULT '{}',
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB,
  "contents" JSONB,
  "contents_latest" TEXT
);

-- Index "idx_JargonTerms_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_JargonTerms_schemaVersion" ON "JargonTerms" USING btree ("schemaVersion");

-- Index "idx_JargonTerms_postId_term_createdAt"
CREATE INDEX IF NOT EXISTS "idx_JargonTerms_postId_term_createdAt" ON "JargonTerms" USING btree ("postId", "term", "createdAt");

-- Table "LWEvents"
CREATE TABLE "LWEvents" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27),
  "name" TEXT,
  "documentId" TEXT,
  "important" BOOL,
  "properties" JSONB,
  "intercom" BOOL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_LWEvents_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_LWEvents_schemaVersion" ON "LWEvents" USING btree ("schemaVersion");

-- Index "idx_LWEvents_name_createdAt"
CREATE INDEX IF NOT EXISTS "idx_LWEvents_name_createdAt" ON "LWEvents" USING btree ("name", "createdAt");

-- Index "idx_LWEvents_name_userId_documentId_createdAt"
CREATE INDEX IF NOT EXISTS "idx_LWEvents_name_userId_documentId_createdAt" ON "LWEvents" USING btree ("name", "userId", "documentId", "createdAt");

-- Index "idx_LWEvents_name_userId_createdAt"
CREATE INDEX IF NOT EXISTS "idx_LWEvents_name_userId_createdAt" ON "LWEvents" USING btree ("name", "userId", "createdAt");

-- Table "LegacyData"
CREATE TABLE "LegacyData" (
  _id VARCHAR(27) PRIMARY KEY,
  "objectId" TEXT NOT NULL,
  "collectionName" TEXT NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_LegacyData_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_LegacyData_schemaVersion" ON "LegacyData" USING btree ("schemaVersion");

-- Index "idx_LegacyData_objectId"
CREATE INDEX IF NOT EXISTS "idx_LegacyData_objectId" ON "LegacyData" USING btree ("objectId");

-- Table "LlmConversations"
CREATE TABLE "LlmConversations" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27) NOT NULL,
  "title" TEXT NOT NULL,
  "model" TEXT NOT NULL,
  "systemPrompt" TEXT,
  "deleted" BOOL NOT NULL DEFAULT FALSE,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_LlmConversations_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_LlmConversations_schemaVersion" ON "LlmConversations" USING btree ("schemaVersion");

-- Index "idx_LlmConversations_userId_deleted_createdAt"
CREATE INDEX IF NOT EXISTS "idx_LlmConversations_userId_deleted_createdAt" ON "LlmConversations" USING btree ("userId", "deleted", "createdAt");

-- Table "LlmMessages"
CREATE TABLE "LlmMessages" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" TEXT NOT NULL,
  "conversationId" TEXT NOT NULL,
  "role" TEXT NOT NULL,
  "content" TEXT NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_LlmMessages_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_LlmMessages_schemaVersion" ON "LlmMessages" USING btree ("schemaVersion");

-- Index "idx_LlmMessages_conversationId_createdAt"
CREATE INDEX IF NOT EXISTS "idx_LlmMessages_conversationId_createdAt" ON "LlmMessages" USING btree ("conversationId", "createdAt");

-- Table "Localgroups"
CREATE TABLE "Localgroups" (
  _id VARCHAR(27) PRIMARY KEY,
  "name" TEXT,
  "nameInAnotherLanguage" TEXT,
  "organizerIds" VARCHAR(27) [] NOT NULL DEFAULT '{}',
  "lastActivity" TIMESTAMPTZ,
  "types" TEXT[] NOT NULL DEFAULT '{''LW''}',
  "categories" TEXT[],
  "isOnline" BOOL NOT NULL DEFAULT FALSE,
  "mongoLocation" JSONB,
  "googleLocation" JSONB,
  "location" TEXT,
  "contactInfo" TEXT,
  "facebookLink" TEXT,
  "facebookPageLink" TEXT,
  "meetupLink" TEXT,
  "slackLink" TEXT,
  "website" TEXT,
  "bannerImageId" TEXT,
  "inactive" BOOL NOT NULL DEFAULT FALSE,
  "deleted" BOOL NOT NULL DEFAULT FALSE,
  "salesforceId" TEXT,
  "contents" JSONB,
  "contents_latest" TEXT,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Localgroups_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Localgroups_schemaVersion" ON "Localgroups" USING btree ("schemaVersion");

-- Index "idx_Localgroups_organizerIds_deleted_name"
CREATE INDEX IF NOT EXISTS "idx_Localgroups_organizerIds_deleted_name" ON "Localgroups" USING gin ("organizerIds", "deleted", "name");

-- Index "idx_Localgroups_organizerIds_inactive_deleted_name"
CREATE INDEX IF NOT EXISTS "idx_Localgroups_organizerIds_inactive_deleted_name" ON "Localgroups" USING gin ("organizerIds", "inactive", "deleted", "name");

-- Index "idx_Localgroups_organizerIds_inactive_deleted"
CREATE INDEX IF NOT EXISTS "idx_Localgroups_organizerIds_inactive_deleted" ON "Localgroups" USING gin ("organizerIds", "inactive", "deleted");

-- Index "idx_Localgroups_inactive_deleted_name"
CREATE INDEX IF NOT EXISTS "idx_Localgroups_inactive_deleted_name" ON "Localgroups" USING btree ("inactive", "deleted", "name");

-- Index "idx_Localgroups_mongoLocation_isOnline_inactive_deleted"
CREATE INDEX IF NOT EXISTS "idx_Localgroups_mongoLocation_isOnline_inactive_deleted" ON "Localgroups" USING btree (
  "mongoLocation",
  "isOnline",
  "inactive",
  "deleted"
);

-- Index "idx_Localgroups_isOnline_inactive_deleted_name"
CREATE INDEX IF NOT EXISTS "idx_Localgroups_isOnline_inactive_deleted_name" ON "Localgroups" USING btree ("isOnline", "inactive", "deleted", "name");

-- Table "ManifoldProbabilitiesCaches"
CREATE UNLOGGED TABLE "ManifoldProbabilitiesCaches" (
  _id VARCHAR(27) PRIMARY KEY,
  "marketId" TEXT NOT NULL,
  "probability" DOUBLE PRECISION NOT NULL,
  "isResolved" BOOL NOT NULL,
  "year" DOUBLE PRECISION NOT NULL,
  "lastUpdated" TIMESTAMPTZ NOT NULL,
  "url" TEXT,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_ManifoldProbabilitiesCaches_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_ManifoldProbabilitiesCaches_schemaVersion" ON "ManifoldProbabilitiesCaches" USING btree ("schemaVersion");

-- Index "idx_ManifoldProbabilitiesCaches_marketId"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_ManifoldProbabilitiesCaches_marketId" ON "ManifoldProbabilitiesCaches" USING btree ("marketId");

-- Table "Messages"
CREATE TABLE "Messages" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27) NOT NULL,
  "conversationId" VARCHAR(27) NOT NULL,
  "noEmail" BOOL NOT NULL DEFAULT FALSE,
  "contents" JSONB,
  "contents_latest" TEXT,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Messages_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Messages_schemaVersion" ON "Messages" USING btree ("schemaVersion");

-- Index "idx_Messages_conversationId_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Messages_conversationId_createdAt" ON "Messages" USING btree ("conversationId", "createdAt");

-- Table "Migrations"
CREATE TABLE "Migrations" (
  _id VARCHAR(27) PRIMARY KEY,
  "name" TEXT NOT NULL,
  "started" TIMESTAMPTZ NOT NULL,
  "finished" BOOL NOT NULL DEFAULT FALSE,
  "succeeded" BOOL NOT NULL DEFAULT FALSE,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Migrations_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Migrations_schemaVersion" ON "Migrations" USING btree ("schemaVersion");

-- Table "ModerationTemplates"
CREATE TABLE "ModerationTemplates" (
  _id VARCHAR(27) PRIMARY KEY,
  "name" TEXT NOT NULL,
  "collectionName" TEXT NOT NULL,
  "order" DOUBLE PRECISION NOT NULL DEFAULT 10,
  "deleted" BOOL NOT NULL DEFAULT FALSE,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB,
  "contents" JSONB,
  "contents_latest" TEXT
);

-- Index "idx_ModerationTemplates_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_ModerationTemplates_schemaVersion" ON "ModerationTemplates" USING btree ("schemaVersion");

-- Index "idx_ModerationTemplates_deleted_order"
CREATE INDEX IF NOT EXISTS "idx_ModerationTemplates_deleted_order" ON "ModerationTemplates" USING btree ("deleted", "order");

-- Index "idx_ModerationTemplates_collectionName_deleted_order"
CREATE INDEX IF NOT EXISTS "idx_ModerationTemplates_collectionName_deleted_order" ON "ModerationTemplates" USING btree ("collectionName", "deleted", "order");

-- Table "ModeratorActions"
CREATE TABLE "ModeratorActions" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27) NOT NULL,
  "type" TEXT NOT NULL,
  "endedAt" TIMESTAMPTZ,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_ModeratorActions_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_ModeratorActions_schemaVersion" ON "ModeratorActions" USING btree ("schemaVersion");

-- Index "idx_ModeratorActions_userId_createdAt"
CREATE INDEX IF NOT EXISTS "idx_ModeratorActions_userId_createdAt" ON "ModeratorActions" USING btree ("userId", "createdAt");

-- Index "idx_ModeratorActions_type_createdAt_endedAt"
CREATE INDEX IF NOT EXISTS "idx_ModeratorActions_type_createdAt_endedAt" ON "ModeratorActions" USING btree ("type", "createdAt", "endedAt");

-- Table "Notifications"
CREATE TABLE "Notifications" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27) NOT NULL,
  "documentId" TEXT,
  "documentType" TEXT,
  "extraData" JSONB,
  "link" TEXT,
  "title" TEXT,
  "message" TEXT NOT NULL,
  "type" TEXT NOT NULL,
  "deleted" BOOL NOT NULL DEFAULT FALSE,
  "viewed" BOOL NOT NULL DEFAULT FALSE,
  "emailed" BOOL NOT NULL DEFAULT FALSE,
  "waitingForBatch" BOOL NOT NULL DEFAULT FALSE,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Notifications_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Notifications_schemaVersion" ON "Notifications" USING btree ("schemaVersion");

-- Index "idx_Notifications_userId_emailed_waitingForBatch_createdAt_type"
CREATE INDEX IF NOT EXISTS "idx_Notifications_userId_emailed_waitingForBatch_createdAt_type" ON "Notifications" USING btree (
  "userId",
  "emailed",
  "waitingForBatch",
  "createdAt",
  "type"
);

-- Index "idx_Notifications_userId_type_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Notifications_userId_type_createdAt" ON "Notifications" USING btree ("userId", "type", "createdAt");

-- Index "idx_Notifications_documentId"
CREATE INDEX IF NOT EXISTS "idx_Notifications_documentId" ON "Notifications" USING btree ("documentId");

-- Index "idx_Notifications_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Notifications_createdAt" ON "Notifications" USING btree ("createdAt");

-- Table "PageCache"
CREATE UNLOGGED TABLE "PageCache" (
  _id VARCHAR(27) PRIMARY KEY,
  "path" TEXT NOT NULL,
  "abTestGroups" JSONB NOT NULL,
  "bundleHash" TEXT NOT NULL,
  "renderedAt" TIMESTAMPTZ NOT NULL,
  "expiresAt" TIMESTAMPTZ NOT NULL,
  "ttlMs" DOUBLE PRECISION NOT NULL,
  "renderResult" JSONB NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_PageCache_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_PageCache_schemaVersion" ON "PageCache" USING btree ("schemaVersion");

-- Index "idx_PageCache_path_bundleHash_expiresAt"
CREATE INDEX IF NOT EXISTS "idx_PageCache_path_bundleHash_expiresAt" ON "PageCache" USING btree ("path", "bundleHash", "expiresAt");

-- Table "PetrovDayActions"
CREATE TABLE "PetrovDayActions" (
  _id VARCHAR(27) PRIMARY KEY,
  "actionType" TEXT NOT NULL,
  "data" JSONB,
  "userId" TEXT,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_PetrovDayActions_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_PetrovDayActions_schemaVersion" ON "PetrovDayActions" USING btree ("schemaVersion");

-- Index "idx_PetrovDayActions_userId_actionType"
CREATE INDEX IF NOT EXISTS "idx_PetrovDayActions_userId_actionType" ON "PetrovDayActions" USING btree ("userId", "actionType");

-- Table "PetrovDayLaunchs"
CREATE TABLE "PetrovDayLaunchs" (
  _id VARCHAR(27) PRIMARY KEY,
  "launchCode" TEXT NOT NULL,
  "hashedLaunchCode" TEXT,
  "userId" TEXT,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_PetrovDayLaunchs_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_PetrovDayLaunchs_schemaVersion" ON "PetrovDayLaunchs" USING btree ("schemaVersion");

-- Table "PodcastEpisodes"
CREATE TABLE "PodcastEpisodes" (
  _id VARCHAR(27) PRIMARY KEY,
  "podcastId" VARCHAR(27) NOT NULL,
  "title" TEXT NOT NULL,
  "episodeLink" TEXT NOT NULL,
  "externalEpisodeId" TEXT NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_PodcastEpisodes_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_PodcastEpisodes_schemaVersion" ON "PodcastEpisodes" USING btree ("schemaVersion");

-- Index "idx_PodcastEpisodes_externalEpisodeId"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_PodcastEpisodes_externalEpisodeId" ON "PodcastEpisodes" USING btree ("externalEpisodeId");

-- Table "Podcasts"
CREATE TABLE "Podcasts" (
  _id VARCHAR(27) PRIMARY KEY,
  "title" TEXT NOT NULL,
  "applePodcastLink" TEXT,
  "spotifyPodcastLink" TEXT,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Podcasts_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Podcasts_schemaVersion" ON "Podcasts" USING btree ("schemaVersion");

-- Table "PostEmbeddings"
CREATE TABLE "PostEmbeddings" (
  _id VARCHAR(27) PRIMARY KEY,
  "postId" VARCHAR(27) NOT NULL,
  "postHash" TEXT NOT NULL,
  "lastGeneratedAt" TIMESTAMPTZ NOT NULL,
  "model" TEXT NOT NULL,
  "embeddings" VECTOR (1536) NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_PostEmbeddings_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_PostEmbeddings_schemaVersion" ON "PostEmbeddings" USING btree ("schemaVersion");

-- Index "idx_PostEmbeddings_postId_model"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_PostEmbeddings_postId_model" ON "PostEmbeddings" USING btree ("postId", "model");

-- Table "PostRecommendations"
CREATE TABLE "PostRecommendations" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27),
  "clientId" TEXT,
  "postId" VARCHAR(27) NOT NULL,
  "strategyName" TEXT NOT NULL,
  "strategySettings" JSONB,
  "recommendationCount" INTEGER NOT NULL DEFAULT 0,
  "lastRecommendedAt" TIMESTAMPTZ NOT NULL,
  "clickedAt" TIMESTAMPTZ,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_PostRecommendations_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_PostRecommendations_schemaVersion" ON "PostRecommendations" USING btree ("schemaVersion");

-- Index "idx_PostRecommendations_userId_clientId_postId"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_PostRecommendations_userId_clientId_postId" ON "PostRecommendations" USING btree (
  COALESCE("userId", ''),
  COALESCE("clientId", ''),
  "postId"
);

-- Table "PostRelations"
CREATE TABLE "PostRelations" (
  _id VARCHAR(27) PRIMARY KEY,
  "type" TEXT NOT NULL,
  "sourcePostId" VARCHAR(27) NOT NULL,
  "targetPostId" VARCHAR(27) NOT NULL,
  "order" DOUBLE PRECISION,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_PostRelations_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_PostRelations_schemaVersion" ON "PostRelations" USING btree ("schemaVersion");

-- Index "idx_PostRelations_sourcePostId_order_createdAt"
CREATE INDEX IF NOT EXISTS "idx_PostRelations_sourcePostId_order_createdAt" ON "PostRelations" USING btree ("sourcePostId", "order", "createdAt");

-- Table "PostViewTimes"
CREATE TABLE "PostViewTimes" (
  _id VARCHAR(27) PRIMARY KEY,
  "updatedAt" TIMESTAMPTZ NOT NULL,
  "windowStart" TIMESTAMPTZ NOT NULL,
  "windowEnd" TIMESTAMPTZ NOT NULL,
  "clientId" VARCHAR(27) NOT NULL,
  "postId" VARCHAR(27) NOT NULL,
  "totalSeconds" DOUBLE PRECISION NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_PostViewTimes_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_PostViewTimes_schemaVersion" ON "PostViewTimes" USING btree ("schemaVersion");

-- Index "idx_PostViewTimes_clientId_postId_windowStart_windowEnd"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_PostViewTimes_clientId_postId_windowStart_windowEnd" ON "PostViewTimes" USING btree ("clientId", "postId", "windowStart", "windowEnd");

-- Index "idx_PostViewTimes_postId"
CREATE INDEX IF NOT EXISTS "idx_PostViewTimes_postId" ON "PostViewTimes" USING btree ("postId");

-- Index "idx_PostViewTimes_windowEnd"
CREATE INDEX IF NOT EXISTS "idx_PostViewTimes_windowEnd" ON "PostViewTimes" USING btree ("windowEnd");

-- Index "idx_PostViewTimes_windowStart"
CREATE INDEX IF NOT EXISTS "idx_PostViewTimes_windowStart" ON "PostViewTimes" USING btree ("windowStart");

-- Table "PostViews"
CREATE TABLE "PostViews" (
  _id VARCHAR(27) PRIMARY KEY,
  "updatedAt" TIMESTAMPTZ NOT NULL,
  "windowStart" TIMESTAMPTZ NOT NULL,
  "windowEnd" TIMESTAMPTZ NOT NULL,
  "postId" VARCHAR(27) NOT NULL,
  "viewCount" DOUBLE PRECISION NOT NULL,
  "uniqueViewCount" DOUBLE PRECISION NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_PostViews_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_PostViews_schemaVersion" ON "PostViews" USING btree ("schemaVersion");

-- Index "idx_PostViews_postId_windowStart_windowEnd"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_PostViews_postId_windowStart_windowEnd" ON "PostViews" USING btree ("postId", "windowStart", "windowEnd");

-- Index "idx_PostViews_postId"
CREATE INDEX IF NOT EXISTS "idx_PostViews_postId" ON "PostViews" USING btree ("postId");

-- Index "idx_PostViews_windowEnd"
CREATE INDEX IF NOT EXISTS "idx_PostViews_windowEnd" ON "PostViews" USING btree ("windowEnd");

-- Index "idx_PostViews_windowStart"
CREATE INDEX IF NOT EXISTS "idx_PostViews_windowStart" ON "PostViews" USING btree ("windowStart");

-- Table "Posts"
CREATE TABLE "Posts" (
  _id VARCHAR(27) PRIMARY KEY,
  "postedAt" TIMESTAMPTZ NOT NULL,
  "modifiedAt" TIMESTAMPTZ,
  "url" VARCHAR(500),
  "postCategory" TEXT NOT NULL DEFAULT 'post',
  "title" VARCHAR(500) NOT NULL,
  "slug" TEXT NOT NULL,
  "viewCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "lastCommentedAt" TIMESTAMPTZ,
  "clickCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "deletedDraft" BOOL NOT NULL DEFAULT FALSE,
  "status" DOUBLE PRECISION NOT NULL,
  "isFuture" BOOL NOT NULL,
  "sticky" BOOL NOT NULL DEFAULT FALSE,
  "stickyPriority" INTEGER NOT NULL DEFAULT 2,
  "userIP" TEXT,
  "userAgent" TEXT,
  "referrer" TEXT,
  "author" TEXT,
  "userId" VARCHAR(27) NOT NULL,
  "question" BOOL NOT NULL DEFAULT FALSE,
  "authorIsUnreviewed" BOOL NOT NULL DEFAULT FALSE,
  "readTimeMinutesOverride" DOUBLE PRECISION,
  "submitToFrontpage" BOOL NOT NULL DEFAULT TRUE,
  "hiddenRelatedQuestion" BOOL NOT NULL DEFAULT FALSE,
  "originalPostRelationSourceId" TEXT,
  "shortform" BOOL NOT NULL DEFAULT FALSE,
  "canonicalSource" TEXT,
  "nominationCount2018" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "nominationCount2019" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "reviewCount2018" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "reviewCount2019" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "reviewCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "reviewVoteCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "positiveReviewVoteCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "manifoldReviewMarketId" TEXT,
  "reviewVoteScoreAF" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "reviewVotesAF" DOUBLE PRECISION[] NOT NULL DEFAULT '{}',
  "reviewVoteScoreHighKarma" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "reviewVotesHighKarma" DOUBLE PRECISION[] NOT NULL DEFAULT '{}',
  "reviewVoteScoreAllKarma" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "reviewVotesAllKarma" DOUBLE PRECISION[] NOT NULL DEFAULT '{}',
  "finalReviewVoteScoreHighKarma" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "finalReviewVotesHighKarma" DOUBLE PRECISION[] NOT NULL DEFAULT '{}',
  "finalReviewVoteScoreAllKarma" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "finalReviewVotesAllKarma" DOUBLE PRECISION[] NOT NULL DEFAULT '{}',
  "finalReviewVoteScoreAF" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "finalReviewVotesAF" DOUBLE PRECISION[] NOT NULL DEFAULT '{}',
  "lastCommentPromotedAt" TIMESTAMPTZ,
  "tagRelevance" JSONB,
  "noIndex" BOOL NOT NULL DEFAULT FALSE,
  "rsvps" JSONB[],
  "activateRSVPs" BOOL,
  "nextDayReminderSent" BOOL NOT NULL DEFAULT FALSE,
  "onlyVisibleToLoggedIn" BOOL NOT NULL DEFAULT FALSE,
  "onlyVisibleToEstablishedAccounts" BOOL NOT NULL DEFAULT FALSE,
  "hideFromRecentDiscussions" BOOL NOT NULL DEFAULT FALSE,
  "votingSystem" TEXT DEFAULT 'twoAxis',
  "podcastEpisodeId" VARCHAR(27),
  "forceAllowType3Audio" BOOL NOT NULL DEFAULT FALSE,
  "legacy" BOOL NOT NULL DEFAULT FALSE,
  "legacyId" TEXT,
  "legacySpam" BOOL NOT NULL DEFAULT FALSE,
  "feedId" VARCHAR(27),
  "feedLink" TEXT,
  "curatedDate" TIMESTAMPTZ,
  "metaDate" TIMESTAMPTZ,
  "suggestForCuratedUserIds" VARCHAR(27) [],
  "frontpageDate" TIMESTAMPTZ,
  "autoFrontpage" TEXT,
  "collectionTitle" TEXT,
  "coauthorStatuses" JSONB[],
  "hasCoauthorPermission" BOOL NOT NULL DEFAULT TRUE,
  "socialPreviewImageId" TEXT,
  "socialPreviewImageAutoUrl" TEXT,
  "socialPreview" JSONB,
  "fmCrosspost" JSONB NOT NULL DEFAULT '{"isCrosspost":false}'::JSONB,
  "canonicalSequenceId" VARCHAR(27),
  "canonicalCollectionSlug" TEXT,
  "canonicalBookId" VARCHAR(27),
  "canonicalNextPostSlug" TEXT,
  "canonicalPrevPostSlug" TEXT,
  "unlisted" BOOL NOT NULL DEFAULT FALSE,
  "disableRecommendation" BOOL NOT NULL DEFAULT FALSE,
  "defaultRecommendation" BOOL NOT NULL DEFAULT FALSE,
  "hideFromPopularComments" BOOL NOT NULL DEFAULT FALSE,
  "draft" BOOL NOT NULL DEFAULT FALSE,
  "wasEverUndrafted" BOOL NOT NULL DEFAULT FALSE,
  "meta" BOOL NOT NULL DEFAULT FALSE,
  "hideFrontpageComments" BOOL NOT NULL DEFAULT FALSE,
  "maxBaseScore" DOUBLE PRECISION NOT NULL,
  "scoreExceeded2Date" TIMESTAMPTZ,
  "scoreExceeded30Date" TIMESTAMPTZ,
  "scoreExceeded45Date" TIMESTAMPTZ,
  "scoreExceeded75Date" TIMESTAMPTZ,
  "scoreExceeded125Date" TIMESTAMPTZ,
  "scoreExceeded200Date" TIMESTAMPTZ,
  "bannedUserIds" VARCHAR(27) [],
  "commentsLocked" BOOL,
  "commentsLockedToAccountsCreatedAfter" TIMESTAMPTZ,
  "organizerIds" VARCHAR(27) [] NOT NULL DEFAULT '{}',
  "groupId" VARCHAR(27),
  "eventType" TEXT,
  "isEvent" BOOL NOT NULL DEFAULT FALSE,
  "reviewedByUserId" VARCHAR(27),
  "reviewForCuratedUserId" VARCHAR(27),
  "startTime" TIMESTAMPTZ,
  "localStartTime" TIMESTAMPTZ,
  "endTime" TIMESTAMPTZ,
  "localEndTime" TIMESTAMPTZ,
  "eventRegistrationLink" TEXT,
  "joinEventLink" TEXT,
  "onlineEvent" BOOL NOT NULL DEFAULT FALSE,
  "globalEvent" BOOL NOT NULL DEFAULT FALSE,
  "mongoLocation" JSONB,
  "googleLocation" JSONB,
  "location" TEXT,
  "contactInfo" TEXT,
  "facebookLink" TEXT,
  "meetupLink" TEXT,
  "website" TEXT,
  "eventImageId" TEXT,
  "types" TEXT[],
  "metaSticky" BOOL NOT NULL DEFAULT FALSE,
  "sharingSettings" JSONB,
  "shareWithUsers" VARCHAR(27) [] NOT NULL DEFAULT '{}',
  "linkSharingKey" TEXT,
  "linkSharingKeyUsedBy" VARCHAR(27) [],
  "commentSortOrder" TEXT,
  "hideAuthor" BOOL NOT NULL DEFAULT FALSE,
  "sideCommentVisibility" TEXT,
  "disableSidenotes" BOOL NOT NULL DEFAULT FALSE,
  "moderationStyle" TEXT,
  "ignoreRateLimits" BOOL,
  "hideCommentKarma" BOOL NOT NULL DEFAULT FALSE,
  "commentCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "topLevelCommentCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "debate" BOOL NOT NULL DEFAULT FALSE,
  "collabEditorDialogue" BOOL NOT NULL DEFAULT FALSE,
  "mostRecentPublishedDialogueResponseDate" TIMESTAMPTZ,
  "rejected" BOOL NOT NULL DEFAULT FALSE,
  "rejectedReason" TEXT,
  "rejectedByUserId" VARCHAR(27),
  "subforumTagId" VARCHAR(27),
  "af" BOOL NOT NULL DEFAULT FALSE,
  "afDate" TIMESTAMPTZ,
  "afCommentCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "afLastCommentedAt" TIMESTAMPTZ,
  "afSticky" BOOL NOT NULL DEFAULT FALSE,
  "suggestForAlignmentUserIds" TEXT[] NOT NULL DEFAULT '{}',
  "reviewForAlignmentUserId" TEXT,
  "agentFoundationsId" TEXT,
  "swrCachingEnabled" BOOL NOT NULL DEFAULT FALSE,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB,
  "contents_latest" TEXT,
  "pingbacks" JSONB,
  "moderationGuidelines_latest" TEXT,
  "customHighlight" JSONB,
  "customHighlight_latest" TEXT,
  "voteCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "baseScore" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "extendedScore" JSONB,
  "score" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "inactive" BOOL NOT NULL DEFAULT FALSE,
  "afBaseScore" DOUBLE PRECISION,
  "afExtendedScore" JSONB,
  "afVoteCount" DOUBLE PRECISION
);

-- Index "idx_Posts_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Posts_schemaVersion" ON "Posts" USING btree ("schemaVersion");

-- Index "idx_posts_coauthorStatuses_postedAt"
CREATE INDEX IF NOT EXISTS "idx_posts_coauthorStatuses_postedAt" ON "Posts" USING gin (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "coauthorStatuses",
  "userId",
  "postedAt",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate",
  "baseScore"
);

-- Index "idx_posts_score"
CREATE INDEX IF NOT EXISTS "idx_posts_score" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "score",
  "isEvent",
  "_id",
  "meta",
  "af",
  "frontpageDate",
  "curatedDate",
  "postedAt",
  "baseScore"
);

-- Index "idx_Posts_tagRelevance__$**"
CREATE INDEX IF NOT EXISTS "idx_Posts_tagRelevance__$**" ON "Posts" USING gin (("tagRelevance" -> '$**'));

-- Index "idx_posts_sort_by_topAdjusted"
CREATE INDEX IF NOT EXISTS "idx_posts_sort_by_topAdjusted" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "postedAt",
  "baseScore",
  "maxBaseScore",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate"
)
WHERE
  (
    "status" = 2 AND
    "draft" IS FALSE AND
    "unlisted" IS FALSE AND
    "isFuture" IS FALSE AND
    "shortform" IS FALSE AND
    "authorIsUnreviewed" IS FALSE AND
    "hiddenRelatedQuestion" IS FALSE AND
    "isEvent" IS FALSE
  );

-- Index "idx_posts_postedAt_baseScore"
CREATE INDEX IF NOT EXISTS "idx_posts_postedAt_baseScore" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "postedAt",
  "baseScore",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate"
);

-- Index "idx_posts_frontpage"
CREATE INDEX IF NOT EXISTS "idx_posts_frontpage" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "sticky",
  "stickyPriority",
  "score",
  "frontpageDate",
  "_id",
  "meta",
  "isEvent",
  "af",
  "curatedDate",
  "postedAt",
  "baseScore"
)
WHERE
  "frontpageDate" > '1970-01-01T00:00:00.000Z';

-- Index "idx_posts_curated"
CREATE INDEX IF NOT EXISTS "idx_posts_curated" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "sticky",
  "curatedDate",
  "postedAt",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "baseScore"
)
WHERE
  "curatedDate" > '1970-01-01T00:00:00.000Z';

-- Index "idx_posts_community"
CREATE INDEX IF NOT EXISTS "idx_posts_community" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "sticky",
  "score",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate",
  "postedAt",
  "baseScore"
);

-- Index "idx_posts_topQuestions"
CREATE INDEX IF NOT EXISTS "idx_posts_topQuestions" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "question",
  "lastCommentedAt",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate",
  "postedAt",
  "baseScore"
);

-- Index "idx_Posts_status_isFuture_draft_unlisted_shortform_hiddenRelatedQuestion_authorIsUnreviewed_groupId_rejected_postedAt__id_meta_isEvent_af_frontpageDate_curatedDate_baseScore"
CREATE INDEX IF NOT EXISTS "idx_Posts_status_isFuture_draft_unlisted_shortform_hiddenRelatedQuestion_authorIsUnreviewed_groupId_rejected_postedAt__id_meta_isEvent_af_frontpageDate_curatedDate_baseScore" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "rejected",
  "postedAt",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate",
  "baseScore"
);

-- Index "idx_posts_userId_createdAt"
CREATE INDEX IF NOT EXISTS "idx_posts_userId_createdAt" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "userId",
  "hideAuthor",
  "deletedDraft",
  "modifiedAt",
  "createdAt",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate",
  "postedAt",
  "baseScore"
);

-- Index "idx_posts_userId_shareWithUsers"
CREATE INDEX IF NOT EXISTS "idx_posts_userId_shareWithUsers" ON "Posts" USING gin (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "shareWithUsers",
  "deletedDraft",
  "modifiedAt",
  "createdAt",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate",
  "postedAt",
  "baseScore"
);

-- Index "idx_Posts_slug"
CREATE INDEX IF NOT EXISTS "idx_Posts_slug" ON "Posts" USING btree ("slug");

-- Index "idx_Posts_legacyId"
CREATE INDEX IF NOT EXISTS "idx_Posts_legacyId" ON "Posts" USING btree ("legacyId");

-- Index "idx_Posts_status_isFuture_draft_unlisted_authorIsUnreviewed_hideFrontpageComments_lastCommentedAt__id_baseScore_af_isEvent_globalEvent_commentCount"
CREATE INDEX IF NOT EXISTS "idx_Posts_status_isFuture_draft_unlisted_authorIsUnreviewed_hideFrontpageComments_lastCommentedAt__id_baseScore_af_isEvent_globalEvent_commentCount" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "authorIsUnreviewed",
  "hideFrontpageComments",
  "lastCommentedAt",
  "_id",
  "baseScore",
  "af",
  "isEvent",
  "globalEvent",
  "commentCount"
);

-- Index "idx_posts_recentDiscussionThreadsList"
CREATE INDEX IF NOT EXISTS "idx_posts_recentDiscussionThreadsList" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "lastCommentedAt",
  "baseScore",
  "hideFrontpageComments",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate",
  "postedAt"
);

-- Index "idx_posts_globalEvents"
CREATE INDEX IF NOT EXISTS "idx_posts_globalEvents" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "globalEvent",
  "eventType",
  "startTime",
  "endTime",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate",
  "postedAt",
  "baseScore"
);

-- Index "idx_posts_2dsphere"
CREATE INDEX IF NOT EXISTS "idx_posts_2dsphere" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "mongoLocation",
  "eventType",
  "startTime",
  "endTime",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate",
  "postedAt",
  "baseScore"
);

-- Index "idx_posts_events"
CREATE INDEX IF NOT EXISTS "idx_posts_events" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "globalEvent",
  "onlineEvent",
  "startTime",
  "endTime",
  "createdAt",
  "baseScore",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate",
  "postedAt"
);

-- Index "idx_posts_postsWithBannedUsers"
CREATE INDEX IF NOT EXISTS "idx_posts_postsWithBannedUsers" ON "Posts" USING gin (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "bannedUserIds",
  "createdAt",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate",
  "postedAt",
  "baseScore"
);

-- Index "idx_posts_sunshineNewPosts"
CREATE INDEX IF NOT EXISTS "idx_posts_sunshineNewPosts" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "reviewedByUserId",
  "frontpageDate",
  "meta",
  "_id",
  "isEvent",
  "af",
  "curatedDate",
  "postedAt",
  "baseScore"
);

-- Index "idx_posts_sunshineNewUsersPosts"
CREATE INDEX IF NOT EXISTS "idx_posts_sunshineNewUsersPosts" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "userId",
  "hideAuthor",
  "reviewedByUserId",
  "frontpageDate",
  "createdAt",
  "_id",
  "meta",
  "isEvent",
  "af",
  "curatedDate",
  "postedAt",
  "baseScore"
);

-- Index "idx_posts_sunshineCuratedSuggestions"
CREATE INDEX IF NOT EXISTS "idx_posts_sunshineCuratedSuggestions" ON "Posts" USING gin (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "postedAt",
  "reviewForCuratedUserId",
  "suggestForCuratedUserIds",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate",
  "baseScore"
)
WHERE
  "suggestForCuratedUserIds" IS NOT NULL;

-- Index "idx_Posts_userId_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Posts_userId_createdAt" ON "Posts" USING btree ("userId", "createdAt");

-- Index "idx_Posts_agentFoundationsId"
CREATE INDEX IF NOT EXISTS "idx_Posts_agentFoundationsId" ON "Posts" USING btree ("agentFoundationsId");

-- Index "idx_Posts_isFuture_postedAt"
CREATE INDEX IF NOT EXISTS "idx_Posts_isFuture_postedAt" ON "Posts" USING btree ("isFuture", "postedAt");

-- Index "idx_Posts_inactive_postedAt"
CREATE INDEX IF NOT EXISTS "idx_Posts_inactive_postedAt" ON "Posts" USING btree ("inactive", "postedAt");

-- Index "idx_posts_recommendable"
CREATE INDEX IF NOT EXISTS "idx_posts_recommendable" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "meta",
  "disableRecommendation",
  "baseScore",
  "curatedDate",
  "frontpageDate",
  "_id",
  "isEvent",
  "af",
  "postedAt"
);

-- Index "idx_posts_pingbackPosts"
CREATE INDEX IF NOT EXISTS "idx_posts_pingbackPosts" ON "Posts" USING gin (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  ("pingbacks" -> 'Posts'),
  "baseScore",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate",
  "postedAt"
);

-- Index "idx_posts_nominatablePostsByVote"
CREATE INDEX IF NOT EXISTS "idx_posts_nominatablePostsByVote" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "_id",
  "userId",
  "isEvent",
  "baseScore",
  "meta",
  "af",
  "frontpageDate",
  "curatedDate",
  "postedAt"
);

-- Index "idx_posts_positiveReviewVoteCount"
CREATE INDEX IF NOT EXISTS "idx_posts_positiveReviewVoteCount" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "positiveReviewVoteCount",
  "createdAt",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate",
  "postedAt",
  "baseScore"
);

-- Index "idx_posts_positiveReviewVoteCountReviewCount"
CREATE INDEX IF NOT EXISTS "idx_posts_positiveReviewVoteCountReviewCount" ON "Posts" USING btree (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "positiveReviewVoteCount",
  "reviewCount",
  "createdAt",
  "_id",
  "meta",
  "isEvent",
  "af",
  "frontpageDate",
  "curatedDate",
  "postedAt",
  "baseScore"
);

-- Index "idx_Posts_userId_postedAt"
CREATE INDEX IF NOT EXISTS "idx_Posts_userId_postedAt" ON "Posts" USING btree ("userId", "postedAt");

-- Index "idx_posts_alignmentSuggestedPosts"
CREATE INDEX IF NOT EXISTS "idx_posts_alignmentSuggestedPosts" ON "Posts" USING gin (
  "status",
  "isFuture",
  "draft",
  "unlisted",
  "shortform",
  "hiddenRelatedQuestion",
  "authorIsUnreviewed",
  "groupId",
  "reviewForAlignmentUserId",
  "af",
  "suggestForAlignmentUserIds",
  "createdAt",
  "_id",
  "meta",
  "isEvent",
  "frontpageDate",
  "curatedDate",
  "postedAt",
  "baseScore"
)
WHERE
  ("suggestForAlignmentUserIds" [0]) IS NOT NULL;

-- Index "idx_Posts_url_postedAt"
CREATE INDEX IF NOT EXISTS "idx_Posts_url_postedAt" ON "Posts" USING btree ("url", "postedAt");

-- Index "idx_Posts_fmCrosspost__foreignPostId_postedAt"
CREATE INDEX IF NOT EXISTS "idx_Posts_fmCrosspost__foreignPostId_postedAt" ON "Posts" USING gin (("fmCrosspost" -> 'foreignPostId'), "postedAt");

-- Index "idx_Posts_defaultRecommendation"
CREATE INDEX IF NOT EXISTS "idx_Posts_defaultRecommendation" ON "Posts" USING btree ("defaultRecommendation");

-- Table "RSSFeeds"
CREATE TABLE "RSSFeeds" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27) NOT NULL,
  "ownedByUser" BOOL NOT NULL DEFAULT FALSE,
  "displayFullContent" BOOL NOT NULL DEFAULT FALSE,
  "nickname" TEXT NOT NULL,
  "url" TEXT NOT NULL,
  "status" TEXT,
  "rawFeed" JSONB NOT NULL,
  "setCanonicalUrl" BOOL NOT NULL DEFAULT FALSE,
  "importAsDraft" BOOL NOT NULL DEFAULT FALSE,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_RSSFeeds_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_RSSFeeds_schemaVersion" ON "RSSFeeds" USING btree ("schemaVersion");

-- Index "idx_RSSFeeds_userId_createdAt"
CREATE INDEX IF NOT EXISTS "idx_RSSFeeds_userId_createdAt" ON "RSSFeeds" USING btree ("userId", "createdAt");

-- Table "ReadStatuses"
CREATE TABLE "ReadStatuses" (
  _id VARCHAR(27) PRIMARY KEY,
  "postId" VARCHAR(27),
  "tagId" VARCHAR(27),
  "userId" VARCHAR(27) NOT NULL,
  "isRead" BOOL NOT NULL,
  "lastUpdated" TIMESTAMPTZ NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_ReadStatuses_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_ReadStatuses_schemaVersion" ON "ReadStatuses" USING btree ("schemaVersion");

-- Index "idx_ReadStatuses_userId_postId_isRead_lastUpdated"
CREATE INDEX IF NOT EXISTS "idx_ReadStatuses_userId_postId_isRead_lastUpdated" ON "ReadStatuses" USING btree ("userId", "postId", "isRead", "lastUpdated");

-- Index "idx_ReadStatuses_userId_tagId_isRead_lastUpdated"
CREATE INDEX IF NOT EXISTS "idx_ReadStatuses_userId_tagId_isRead_lastUpdated" ON "ReadStatuses" USING btree ("userId", "tagId", "isRead", "lastUpdated");

-- Table "RecommendationsCaches"
CREATE TABLE "RecommendationsCaches" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" TEXT NOT NULL,
  "postId" TEXT NOT NULL,
  "source" TEXT NOT NULL,
  "scenario" TEXT NOT NULL,
  "attributionId" TEXT NOT NULL,
  "ttlMs" DOUBLE PRECISION NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_RecommendationsCaches_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_RecommendationsCaches_schemaVersion" ON "RecommendationsCaches" USING btree ("schemaVersion");

-- Index "idx_RecommendationsCaches_userId_postId_source_scenario"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_RecommendationsCaches_userId_postId_source_scenario" ON "RecommendationsCaches" USING btree ("userId", "postId", "source", "scenario");

-- Table "Reports"
CREATE TABLE "Reports" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27) NOT NULL,
  "reportedUserId" VARCHAR(27),
  "commentId" VARCHAR(27),
  "postId" VARCHAR(27),
  "link" TEXT NOT NULL,
  "claimedUserId" VARCHAR(27),
  "description" TEXT,
  "closedAt" TIMESTAMPTZ,
  "markedAsSpam" BOOL,
  "reportedAsSpam" BOOL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Reports_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Reports_schemaVersion" ON "Reports" USING btree ("schemaVersion");

-- Index "idx_Reports_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Reports_createdAt" ON "Reports" USING btree ("createdAt");

-- Index "idx_Reports_claimedUserId_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Reports_claimedUserId_createdAt" ON "Reports" USING btree ("claimedUserId", "createdAt");

-- Index "idx_Reports_closedAt_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Reports_closedAt_createdAt" ON "Reports" USING btree ("closedAt", "createdAt");

-- Table "ReviewVotes"
CREATE TABLE "ReviewVotes" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27) NOT NULL,
  "postId" VARCHAR(27) NOT NULL,
  "qualitativeScore" INTEGER NOT NULL DEFAULT 4,
  "quadraticScore" INTEGER NOT NULL DEFAULT 0,
  "comment" TEXT,
  "year" TEXT NOT NULL DEFAULT '2018',
  "dummy" BOOL NOT NULL DEFAULT FALSE,
  "reactions" TEXT[],
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_ReviewVotes_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_ReviewVotes_schemaVersion" ON "ReviewVotes" USING btree ("schemaVersion");

-- Index "idx_ReviewVotes_year_userId_dummy"
CREATE INDEX IF NOT EXISTS "idx_ReviewVotes_year_userId_dummy" ON "ReviewVotes" USING btree ("year", "userId", "dummy");

-- Index "idx_ReviewVotes_postId"
CREATE INDEX IF NOT EXISTS "idx_ReviewVotes_postId" ON "ReviewVotes" USING btree ("postId");

-- Index "idx_ReviewVotes_postId_userId"
CREATE INDEX IF NOT EXISTS "idx_ReviewVotes_postId_userId" ON "ReviewVotes" USING btree ("postId", "userId");

-- Index "idx_ReviewVotes_year_dummy_createdAt"
CREATE INDEX IF NOT EXISTS "idx_ReviewVotes_year_dummy_createdAt" ON "ReviewVotes" USING btree ("year", "dummy", "createdAt");

-- Table "ReviewWinnerArts"
CREATE TABLE "ReviewWinnerArts" (
  _id VARCHAR(27) PRIMARY KEY,
  "postId" TEXT NOT NULL,
  "splashArtImagePrompt" TEXT NOT NULL,
  "splashArtImageUrl" TEXT NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_ReviewWinnerArts_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_ReviewWinnerArts_schemaVersion" ON "ReviewWinnerArts" USING btree ("schemaVersion");

-- Index "idx_ReviewWinnerArts_postId"
CREATE INDEX IF NOT EXISTS "idx_ReviewWinnerArts_postId" ON "ReviewWinnerArts" USING btree ("postId");

-- Table "ReviewWinners"
CREATE TABLE "ReviewWinners" (
  _id VARCHAR(27) PRIMARY KEY,
  "postId" VARCHAR(27) NOT NULL,
  "reviewYear" DOUBLE PRECISION NOT NULL,
  "category" TEXT NOT NULL DEFAULT 'misc',
  "curatedOrder" DOUBLE PRECISION NOT NULL,
  "reviewRanking" DOUBLE PRECISION NOT NULL,
  "isAI" BOOL NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_ReviewWinners_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_ReviewWinners_schemaVersion" ON "ReviewWinners" USING btree ("schemaVersion");

-- Index "idx_ReviewWinners_postId"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_ReviewWinners_postId" ON "ReviewWinners" USING btree ("postId");

-- Index "idx_ReviewWinners_curatedOrder_category"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_ReviewWinners_curatedOrder_category" ON "ReviewWinners" USING btree ("curatedOrder", "category");

-- Index "idx_ReviewWinners_reviewYear_reviewRanking"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_ReviewWinners_reviewYear_reviewRanking" ON "ReviewWinners" USING btree ("reviewYear", "reviewRanking");

-- Table "Revisions"
CREATE TABLE "Revisions" (
  _id VARCHAR(27) PRIMARY KEY,
  "documentId" TEXT,
  "collectionName" TEXT,
  "fieldName" TEXT,
  "editedAt" TIMESTAMPTZ,
  "autosaveTimeoutStart" TIMESTAMPTZ,
  "updateType" TEXT,
  "version" TEXT NOT NULL,
  "commitMessage" TEXT,
  "userId" VARCHAR(27),
  "draft" BOOL,
  "originalContents" JSONB,
  "html" TEXT,
  "wordCount" DOUBLE PRECISION NOT NULL,
  "changeMetrics" JSONB NOT NULL,
  "googleDocMetadata" JSONB,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB,
  "voteCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "baseScore" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "extendedScore" JSONB,
  "score" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "inactive" BOOL NOT NULL DEFAULT FALSE,
  "afBaseScore" DOUBLE PRECISION,
  "afExtendedScore" JSONB,
  "afVoteCount" DOUBLE PRECISION
);

-- Index "idx_Revisions_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Revisions_schemaVersion" ON "Revisions" USING btree ("schemaVersion");

-- Index "idx_Revisions_userId_collectionName_editedAt"
CREATE INDEX IF NOT EXISTS "idx_Revisions_userId_collectionName_editedAt" ON "Revisions" USING btree ("userId", "collectionName", "editedAt");

-- Index "idx_Revisions_collectionName_fieldName_editedAt__id_changeMetrics"
CREATE INDEX IF NOT EXISTS "idx_Revisions_collectionName_fieldName_editedAt__id_changeMetrics" ON "Revisions" USING btree (
  "collectionName",
  "fieldName",
  "editedAt",
  "_id",
  "changeMetrics"
);

-- Index "idx_Revisions_documentId_version_fieldName_editedAt"
CREATE INDEX IF NOT EXISTS "idx_Revisions_documentId_version_fieldName_editedAt" ON "Revisions" USING btree ("documentId", "version", "fieldName", "editedAt");

-- Table "Sequences"
CREATE TABLE "Sequences" (
  _id VARCHAR(27) PRIMARY KEY,
  "lastUpdated" TIMESTAMPTZ NOT NULL,
  "userId" VARCHAR(27) NOT NULL,
  "title" TEXT NOT NULL,
  "bannerImageId" TEXT,
  "gridImageId" TEXT,
  "hideFromAuthorPage" BOOL NOT NULL DEFAULT FALSE,
  "draft" BOOL NOT NULL DEFAULT FALSE,
  "isDeleted" BOOL NOT NULL DEFAULT FALSE,
  "curatedOrder" DOUBLE PRECISION,
  "userProfileOrder" DOUBLE PRECISION,
  "canonicalCollectionSlug" TEXT,
  "hidden" BOOL NOT NULL DEFAULT FALSE,
  "noindex" BOOL NOT NULL DEFAULT FALSE,
  "af" BOOL NOT NULL DEFAULT FALSE,
  "contents" JSONB,
  "contents_latest" TEXT,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Sequences_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Sequences_schemaVersion" ON "Sequences" USING btree ("schemaVersion");

-- Index "idx_Sequences_hidden_af_isDeleted_userId_userProfileOrder"
CREATE INDEX IF NOT EXISTS "idx_Sequences_hidden_af_isDeleted_userId_userProfileOrder" ON "Sequences" USING btree (
  "hidden",
  "af",
  "isDeleted",
  "userId",
  "userProfileOrder"
);

-- Index "idx_Sequences_hidden_af_isDeleted_userId_draft_hideFromAuthorPage_userProfileOrder"
CREATE INDEX IF NOT EXISTS "idx_Sequences_hidden_af_isDeleted_userId_draft_hideFromAuthorPage_userProfileOrder" ON "Sequences" USING btree (
  "hidden",
  "af",
  "isDeleted",
  "userId",
  "draft",
  "hideFromAuthorPage",
  "userProfileOrder"
);

-- Index "idx_Sequences_hidden_af_isDeleted_curatedOrder"
CREATE INDEX IF NOT EXISTS "idx_Sequences_hidden_af_isDeleted_curatedOrder" ON "Sequences" USING btree ("hidden", "af", "isDeleted", "curatedOrder");

-- Table "Sessions"
CREATE TABLE "Sessions" (
  _id TEXT NOT NULL PRIMARY KEY,
  "session" JSONB,
  "expires" TIMESTAMPTZ,
  "lastModified" TIMESTAMPTZ
);

-- Index "idx_Sessions__id_expires"
CREATE INDEX IF NOT EXISTS "idx_Sessions__id_expires" ON "Sessions" USING btree ("_id", "expires");

-- Index "idx_Sessions_expires"
CREATE INDEX IF NOT EXISTS "idx_Sessions_expires" ON "Sessions" USING btree ("expires");

-- Table "SideCommentCaches"
CREATE TABLE "SideCommentCaches" (
  _id VARCHAR(27) PRIMARY KEY,
  "postId" VARCHAR(27) NOT NULL,
  "annotatedHtml" TEXT NOT NULL,
  "commentsByBlock" JSONB NOT NULL,
  "version" DOUBLE PRECISION NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_SideCommentCaches_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_SideCommentCaches_schemaVersion" ON "SideCommentCaches" USING btree ("schemaVersion");

-- Index "idx_SideCommentCaches_postId"
CREATE INDEX IF NOT EXISTS "idx_SideCommentCaches_postId" ON "SideCommentCaches" USING btree ("postId");

-- Index "idx_SideCommentCaches_postId_version"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_SideCommentCaches_postId_version" ON "SideCommentCaches" USING btree ("postId", "version");

-- Table "SplashArtCoordinates"
CREATE TABLE "SplashArtCoordinates" (
  _id VARCHAR(27) PRIMARY KEY,
  "reviewWinnerArtId" VARCHAR(27) NOT NULL,
  "leftXPct" DOUBLE PRECISION NOT NULL,
  "leftYPct" DOUBLE PRECISION NOT NULL,
  "leftHeightPct" DOUBLE PRECISION NOT NULL,
  "leftWidthPct" DOUBLE PRECISION NOT NULL,
  "leftFlipped" BOOL NOT NULL DEFAULT FALSE,
  "middleXPct" DOUBLE PRECISION NOT NULL,
  "middleYPct" DOUBLE PRECISION NOT NULL,
  "middleHeightPct" DOUBLE PRECISION NOT NULL,
  "middleWidthPct" DOUBLE PRECISION NOT NULL,
  "middleFlipped" BOOL NOT NULL DEFAULT FALSE,
  "rightXPct" DOUBLE PRECISION NOT NULL,
  "rightYPct" DOUBLE PRECISION NOT NULL,
  "rightHeightPct" DOUBLE PRECISION NOT NULL,
  "rightWidthPct" DOUBLE PRECISION NOT NULL,
  "rightFlipped" BOOL NOT NULL DEFAULT FALSE,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_SplashArtCoordinates_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_SplashArtCoordinates_schemaVersion" ON "SplashArtCoordinates" USING btree ("schemaVersion");

-- Index "idx_SplashArtCoordinates_reviewWinnerArtId_createdAt"
CREATE INDEX IF NOT EXISTS "idx_SplashArtCoordinates_reviewWinnerArtId_createdAt" ON "SplashArtCoordinates" USING btree ("reviewWinnerArtId", "createdAt");

-- Table "Spotlights"
CREATE TABLE "Spotlights" (
  _id VARCHAR(27) PRIMARY KEY,
  "documentId" TEXT NOT NULL,
  "documentType" TEXT NOT NULL DEFAULT 'Sequence',
  "position" DOUBLE PRECISION NOT NULL,
  "duration" DOUBLE PRECISION NOT NULL DEFAULT 3,
  "customTitle" TEXT,
  "customSubtitle" TEXT,
  "subtitleUrl" TEXT,
  "headerTitle" TEXT,
  "headerTitleLeftColor" TEXT,
  "headerTitleRightColor" TEXT,
  "lastPromotedAt" TIMESTAMPTZ NOT NULL DEFAULT '1970-01-01T00:00:00.000Z',
  "spotlightSplashImageUrl" TEXT,
  "draft" BOOL NOT NULL DEFAULT TRUE,
  "deletedDraft" BOOL NOT NULL DEFAULT FALSE,
  "showAuthor" BOOL NOT NULL DEFAULT FALSE,
  "imageFade" BOOL NOT NULL DEFAULT TRUE,
  "imageFadeColor" TEXT,
  "spotlightImageId" TEXT,
  "spotlightDarkImageId" TEXT,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB,
  "description" JSONB,
  "description_latest" TEXT
);

-- Index "idx_Spotlights_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Spotlights_schemaVersion" ON "Spotlights" USING btree ("schemaVersion");

-- Index "idx_Spotlights_lastPromotedAt"
CREATE INDEX IF NOT EXISTS "idx_Spotlights_lastPromotedAt" ON "Spotlights" USING btree ("lastPromotedAt");

-- Index "idx_Spotlights_position"
CREATE INDEX IF NOT EXISTS "idx_Spotlights_position" ON "Spotlights" USING btree ("position");

-- Table "Subscriptions"
CREATE TABLE "Subscriptions" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27) NOT NULL,
  "state" TEXT NOT NULL,
  "documentId" TEXT,
  "collectionName" TEXT NOT NULL,
  "deleted" BOOL NOT NULL DEFAULT FALSE,
  "type" TEXT NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Subscriptions_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Subscriptions_schemaVersion" ON "Subscriptions" USING btree ("schemaVersion");

-- Index "idx_Subscriptions_userId_documentId_collectionName_type_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Subscriptions_userId_documentId_collectionName_type_createdAt" ON "Subscriptions" USING btree (
  "userId",
  "documentId",
  "collectionName",
  "type",
  "createdAt"
);

-- Table "SurveyQuestions"
CREATE TABLE "SurveyQuestions" (
  _id VARCHAR(27) PRIMARY KEY,
  "surveyId" VARCHAR(27) NOT NULL,
  "question" TEXT NOT NULL,
  "format" TEXT NOT NULL,
  "order" DOUBLE PRECISION NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_SurveyQuestions_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_SurveyQuestions_schemaVersion" ON "SurveyQuestions" USING btree ("schemaVersion");

-- Index "idx_SurveyQuestions_surveyId"
CREATE INDEX IF NOT EXISTS "idx_SurveyQuestions_surveyId" ON "SurveyQuestions" USING btree ("surveyId");

-- Table "SurveyResponses"
CREATE TABLE "SurveyResponses" (
  _id VARCHAR(27) PRIMARY KEY,
  "surveyId" VARCHAR(27) NOT NULL,
  "surveyScheduleId" VARCHAR(27) NOT NULL,
  "userId" VARCHAR(27) NOT NULL,
  "clientId" VARCHAR(27) NOT NULL,
  "response" JSONB NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_SurveyResponses_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_SurveyResponses_schemaVersion" ON "SurveyResponses" USING btree ("schemaVersion");

-- Index "idx_SurveyResponses_surveyId"
CREATE INDEX IF NOT EXISTS "idx_SurveyResponses_surveyId" ON "SurveyResponses" USING btree ("surveyId");

-- Index "idx_SurveyResponses_surveyScheduleId"
CREATE INDEX IF NOT EXISTS "idx_SurveyResponses_surveyScheduleId" ON "SurveyResponses" USING btree ("surveyScheduleId");

-- Index "idx_SurveyResponses_userId"
CREATE INDEX IF NOT EXISTS "idx_SurveyResponses_userId" ON "SurveyResponses" USING btree ("userId");

-- Index "idx_SurveyResponses_clientId"
CREATE INDEX IF NOT EXISTS "idx_SurveyResponses_clientId" ON "SurveyResponses" USING btree ("clientId");

-- Table "SurveySchedules"
CREATE TABLE "SurveySchedules" (
  _id VARCHAR(27) PRIMARY KEY,
  "surveyId" VARCHAR(27) NOT NULL,
  "name" TEXT NOT NULL,
  "impressionsLimit" DOUBLE PRECISION,
  "maxVisitorPercentage" DOUBLE PRECISION,
  "minKarma" DOUBLE PRECISION,
  "maxKarma" DOUBLE PRECISION,
  "target" TEXT NOT NULL DEFAULT 'allUsers',
  "startDate" TIMESTAMPTZ,
  "endDate" TIMESTAMPTZ,
  "deactivated" BOOL NOT NULL DEFAULT FALSE,
  "clientIds" VARCHAR(27) [] NOT NULL DEFAULT '{}',
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_SurveySchedules_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_SurveySchedules_schemaVersion" ON "SurveySchedules" USING btree ("schemaVersion");

-- Index "idx_SurveySchedules_surveyId"
CREATE INDEX IF NOT EXISTS "idx_SurveySchedules_surveyId" ON "SurveySchedules" USING btree ("surveyId");

-- Index "idx_SurveySchedules_clientIds"
CREATE INDEX IF NOT EXISTS "idx_SurveySchedules_clientIds" ON "SurveySchedules" USING gin ("clientIds");

-- Table "Surveys"
CREATE TABLE "Surveys" (
  _id VARCHAR(27) PRIMARY KEY,
  "name" TEXT NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Surveys_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Surveys_schemaVersion" ON "Surveys" USING btree ("schemaVersion");

-- Table "TagFlags"
CREATE TABLE "TagFlags" (
  _id VARCHAR(27) PRIMARY KEY,
  "name" TEXT NOT NULL,
  "deleted" BOOL NOT NULL DEFAULT FALSE,
  "slug" TEXT NOT NULL,
  "order" DOUBLE PRECISION,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB,
  "contents" JSONB,
  "contents_latest" TEXT
);

-- Index "idx_TagFlags_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_TagFlags_schemaVersion" ON "TagFlags" USING btree ("schemaVersion");

-- Index "idx_TagFlags_deleted_order_name"
CREATE INDEX IF NOT EXISTS "idx_TagFlags_deleted_order_name" ON "TagFlags" USING btree ("deleted", "order", "name");

-- Table "TagRels"
CREATE TABLE "TagRels" (
  _id VARCHAR(27) PRIMARY KEY,
  "tagId" VARCHAR(27) NOT NULL,
  "postId" VARCHAR(27) NOT NULL,
  "deleted" BOOL NOT NULL DEFAULT FALSE,
  "userId" VARCHAR(27),
  "backfilled" BOOL NOT NULL DEFAULT FALSE,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB,
  "voteCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "baseScore" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "extendedScore" JSONB,
  "score" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "inactive" BOOL NOT NULL DEFAULT FALSE,
  "afBaseScore" DOUBLE PRECISION,
  "afExtendedScore" JSONB,
  "afVoteCount" DOUBLE PRECISION
);

-- Index "idx_TagRels_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_TagRels_schemaVersion" ON "TagRels" USING btree ("schemaVersion");

-- Index "idx_TagRels_postId"
CREATE INDEX IF NOT EXISTS "idx_TagRels_postId" ON "TagRels" USING btree ("postId");

-- Index "idx_TagRels_tagId"
CREATE INDEX IF NOT EXISTS "idx_TagRels_tagId" ON "TagRels" USING btree ("tagId");

-- Table "Tags"
CREATE TABLE "Tags" (
  _id VARCHAR(27) PRIMARY KEY,
  "name" TEXT NOT NULL,
  "shortName" TEXT,
  "subtitle" TEXT,
  "slug" TEXT NOT NULL,
  "oldSlugs" TEXT[],
  "core" BOOL NOT NULL DEFAULT FALSE,
  "isPostType" BOOL NOT NULL DEFAULT FALSE,
  "suggestedAsFilter" BOOL NOT NULL DEFAULT FALSE,
  "defaultOrder" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "descriptionTruncationCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "postCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "userId" VARCHAR(27),
  "adminOnly" BOOL NOT NULL DEFAULT FALSE,
  "canEditUserIds" VARCHAR(27) [],
  "charsAdded" DOUBLE PRECISION,
  "charsRemoved" DOUBLE PRECISION,
  "deleted" BOOL NOT NULL DEFAULT FALSE,
  "lastCommentedAt" TIMESTAMPTZ,
  "lastSubforumCommentAt" TIMESTAMPTZ,
  "needsReview" BOOL NOT NULL DEFAULT TRUE,
  "reviewedByUserId" VARCHAR(27),
  "wikiGrade" INTEGER NOT NULL DEFAULT 2,
  "wikiOnly" BOOL NOT NULL DEFAULT FALSE,
  "bannerImageId" TEXT,
  "squareImageId" TEXT,
  "tagFlagsIds" VARCHAR(27) [] NOT NULL DEFAULT '{}',
  "lesswrongWikiImportRevision" TEXT,
  "lesswrongWikiImportSlug" TEXT,
  "lesswrongWikiImportCompleted" BOOL,
  "htmlWithContributorAnnotations" TEXT,
  "contributionStats" JSONB,
  "introSequenceId" VARCHAR(27),
  "postsDefaultSortOrder" TEXT,
  "canVoteOnRels" TEXT[],
  "isSubforum" BOOL NOT NULL DEFAULT FALSE,
  "subforumModeratorIds" VARCHAR(27) [] NOT NULL DEFAULT '{}',
  "subforumIntroPostId" VARCHAR(27),
  "parentTagId" VARCHAR(27),
  "subTagIds" VARCHAR(27) [] NOT NULL DEFAULT '{}',
  "autoTagModel" TEXT,
  "autoTagPrompt" TEXT,
  "noindex" BOOL NOT NULL DEFAULT FALSE,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB,
  "description" JSONB,
  "description_latest" TEXT,
  "pingbacks" JSONB,
  "subforumWelcomeText" JSONB,
  "subforumWelcomeText_latest" TEXT,
  "moderationGuidelines" JSONB,
  "moderationGuidelines_latest" TEXT
);

-- Index "idx_Tags_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Tags_schemaVersion" ON "Tags" USING btree ("schemaVersion");

-- Index "idx_Tags_deleted_adminOnly"
CREATE INDEX IF NOT EXISTS "idx_Tags_deleted_adminOnly" ON "Tags" USING btree ("deleted", "adminOnly");

-- Index "idx_Tags_deleted_adminOnly_name"
CREATE INDEX IF NOT EXISTS "idx_Tags_deleted_adminOnly_name" ON "Tags" USING btree ("deleted", "adminOnly", "name");

-- Index "idx_Tags_deleted_userId_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Tags_deleted_userId_createdAt" ON "Tags" USING btree ("deleted", "userId", "createdAt");

-- Index "idx_Tags_deleted_adminOnly_wikiOnly_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Tags_deleted_adminOnly_wikiOnly_createdAt" ON "Tags" USING btree ("deleted", "adminOnly", "wikiOnly", "createdAt");

-- Index "idx_Tags_deleted_adminOnly_wikiGrade_defaultOrder_postCount_name"
CREATE INDEX IF NOT EXISTS "idx_Tags_deleted_adminOnly_wikiGrade_defaultOrder_postCount_name" ON "Tags" USING btree (
  "deleted",
  "adminOnly",
  "wikiGrade",
  "defaultOrder",
  "postCount",
  "name"
);

-- Index "idx_Tags_deleted_slug_oldSlugs"
CREATE INDEX IF NOT EXISTS "idx_Tags_deleted_slug_oldSlugs" ON "Tags" USING gin ("deleted", "slug", "oldSlugs");

-- Index "idx_Tags_deleted_core_name"
CREATE INDEX IF NOT EXISTS "idx_Tags_deleted_core_name" ON "Tags" USING btree ("deleted", "core", "name");

-- Index "idx_Tags_deleted_isPostType_name"
CREATE INDEX IF NOT EXISTS "idx_Tags_deleted_isPostType_name" ON "Tags" USING btree ("deleted", "isPostType", "name");

-- Index "idx_Tags_deleted_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Tags_deleted_createdAt" ON "Tags" USING btree ("deleted", "createdAt");

-- Index "idx_Tags_deleted_needsReview_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Tags_deleted_needsReview_createdAt" ON "Tags" USING btree ("deleted", "needsReview", "createdAt");

-- Index "idx_Tags_deleted_adminOnly_suggestedAsFilter_defaultOrder_name"
CREATE INDEX IF NOT EXISTS "idx_Tags_deleted_adminOnly_suggestedAsFilter_defaultOrder_name" ON "Tags" USING btree (
  "deleted",
  "adminOnly",
  "suggestedAsFilter",
  "defaultOrder",
  "name"
);

-- Index "idx_Tags_deleted_adminOnly_lesswrongWikiImportSlug"
CREATE INDEX IF NOT EXISTS "idx_Tags_deleted_adminOnly_lesswrongWikiImportSlug" ON "Tags" USING btree ("deleted", "adminOnly", "lesswrongWikiImportSlug");

-- Index "idx_Tags_deleted_adminOnly_tagFlagsIds"
CREATE INDEX IF NOT EXISTS "idx_Tags_deleted_adminOnly_tagFlagsIds" ON "Tags" USING gin ("deleted", "adminOnly", "tagFlagsIds");

-- Index "idx_Tags_name"
CREATE INDEX IF NOT EXISTS "idx_Tags_name" ON "Tags" USING btree ("name");

-- Index "idx_Tags_parentTagId"
CREATE INDEX IF NOT EXISTS "idx_Tags_parentTagId" ON "Tags" USING btree ("parentTagId");

-- Table "Tweets"
CREATE TABLE "Tweets" (
  _id VARCHAR(27) PRIMARY KEY,
  "postId" TEXT NOT NULL,
  "tweetId" TEXT NOT NULL,
  "content" TEXT NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Tweets_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Tweets_schemaVersion" ON "Tweets" USING btree ("schemaVersion");

-- Index "idx_Tweets_postId"
CREATE INDEX IF NOT EXISTS "idx_Tweets_postId" ON "Tweets" USING btree ("postId");

-- Index "idx_Tweets_tweetId"
CREATE INDEX IF NOT EXISTS "idx_Tweets_tweetId" ON "Tweets" USING btree ("tweetId");

-- Table "TypingIndicators"
CREATE TABLE "TypingIndicators" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" TEXT NOT NULL,
  "documentId" TEXT NOT NULL,
  "lastUpdated" TIMESTAMPTZ NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_TypingIndicators_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_TypingIndicators_schemaVersion" ON "TypingIndicators" USING btree ("schemaVersion");

-- Index "idx_TypingIndicators_documentId_userId"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_TypingIndicators_documentId_userId" ON "TypingIndicators" USING btree ("documentId", "userId");

-- Table "UserActivities"
CREATE TABLE "UserActivities" (
  _id VARCHAR(27) PRIMARY KEY,
  "visitorId" TEXT NOT NULL,
  "type" TEXT NOT NULL,
  "startDate" TIMESTAMPTZ NOT NULL,
  "endDate" TIMESTAMPTZ NOT NULL,
  "activityArray" DOUBLE PRECISION[] NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_UserActivities_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_UserActivities_schemaVersion" ON "UserActivities" USING btree ("schemaVersion");

-- Index "idx_UserActivities_visitorId_type"
CREATE INDEX IF NOT EXISTS "idx_UserActivities_visitorId_type" ON "UserActivities" USING btree ("visitorId", "type");

-- Table "UserEAGDetails"
CREATE TABLE "UserEAGDetails" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27) NOT NULL,
  "careerStage" TEXT[],
  "countryOrRegion" TEXT,
  "nearestCity" TEXT,
  "willingnessToRelocate" JSONB,
  "experiencedIn" TEXT[],
  "interestedIn" TEXT[],
  "lastUpdated" TIMESTAMPTZ NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_UserEAGDetails_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_UserEAGDetails_schemaVersion" ON "UserEAGDetails" USING btree ("schemaVersion");

-- Index "idx_UserEAGDetails_userId"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_UserEAGDetails_userId" ON "UserEAGDetails" USING btree ("userId");

-- Table "UserJobAds"
CREATE TABLE "UserJobAds" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27) NOT NULL,
  "jobName" TEXT NOT NULL,
  "adState" TEXT NOT NULL,
  "reminderSetAt" TIMESTAMPTZ,
  "lastUpdated" TIMESTAMPTZ NOT NULL,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_UserJobAds_userId_jobName"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_UserJobAds_userId_jobName" ON "UserJobAds" USING btree ("userId", "jobName");

-- Index "idx_UserJobAds_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_UserJobAds_schemaVersion" ON "UserJobAds" USING btree ("schemaVersion");

-- Index "idx_UserJobAds_userId"
CREATE INDEX IF NOT EXISTS "idx_UserJobAds_userId" ON "UserJobAds" USING btree ("userId");

-- Index "idx_UserJobAds_jobName_adState"
CREATE INDEX IF NOT EXISTS "idx_UserJobAds_jobName_adState" ON "UserJobAds" USING btree ("jobName", "adState");

-- Table "UserMostValuablePosts"
CREATE TABLE "UserMostValuablePosts" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27) NOT NULL,
  "postId" VARCHAR(27) NOT NULL,
  "deleted" BOOL NOT NULL DEFAULT FALSE,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_UserMostValuablePosts_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_UserMostValuablePosts_schemaVersion" ON "UserMostValuablePosts" USING btree ("schemaVersion");

-- Index "idx_UserMostValuablePosts_userId"
CREATE INDEX IF NOT EXISTS "idx_UserMostValuablePosts_userId" ON "UserMostValuablePosts" USING btree ("userId");

-- Index "idx_UserMostValuablePosts_userId_postId"
CREATE INDEX IF NOT EXISTS "idx_UserMostValuablePosts_userId_postId" ON "UserMostValuablePosts" USING btree ("userId", "postId");

-- Table "UserRateLimits"
CREATE TABLE "UserRateLimits" (
  _id VARCHAR(27) PRIMARY KEY,
  "userId" VARCHAR(27) NOT NULL,
  "type" TEXT NOT NULL,
  "intervalUnit" TEXT NOT NULL,
  "intervalLength" DOUBLE PRECISION NOT NULL,
  "actionsPerInterval" DOUBLE PRECISION NOT NULL,
  "endedAt" TIMESTAMPTZ,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_UserRateLimits_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_UserRateLimits_schemaVersion" ON "UserRateLimits" USING btree ("schemaVersion");

-- Index "idx_UserRateLimits_userId_createdAt_endedAt"
CREATE INDEX IF NOT EXISTS "idx_UserRateLimits_userId_createdAt_endedAt" ON "UserRateLimits" USING btree ("userId", "createdAt", "endedAt");

-- Table "UserTagRels"
CREATE TABLE "UserTagRels" (
  _id VARCHAR(27) PRIMARY KEY,
  "tagId" VARCHAR(27),
  "userId" VARCHAR(27) NOT NULL,
  "subforumLastVisitedAt" TIMESTAMPTZ,
  "subforumShowUnreadInSidebar" BOOL NOT NULL DEFAULT TRUE,
  "subforumEmailNotifications" BOOL NOT NULL DEFAULT FALSE,
  "subforumHideIntroPost" BOOL NOT NULL DEFAULT FALSE,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_UserTagRels_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_UserTagRels_schemaVersion" ON "UserTagRels" USING btree ("schemaVersion");

-- Index "idx_UserTagRels_tagId_userId"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_UserTagRels_tagId_userId" ON "UserTagRels" USING btree (COALESCE("tagId", ''), "userId");

-- Table "Users"
CREATE TABLE "Users" (
  _id VARCHAR(27) PRIMARY KEY,
  "username" TEXT,
  "emails" JSONB[],
  "isAdmin" BOOL NOT NULL DEFAULT FALSE,
  "profile" JSONB,
  "services" JSONB,
  "displayName" TEXT,
  "previousDisplayName" TEXT,
  "email" TEXT,
  "slug" TEXT,
  "noindex" BOOL NOT NULL DEFAULT FALSE,
  "groups" TEXT[],
  "lwWikiImport" BOOL,
  "theme" JSONB NOT NULL DEFAULT '{"name":"default"}'::JSONB,
  "lastUsedTimezone" TEXT,
  "whenConfirmationEmailSent" TIMESTAMPTZ,
  "legacy" BOOL NOT NULL DEFAULT FALSE,
  "commentSorting" TEXT,
  "sortDraftsBy" TEXT,
  "reactPaletteStyle" TEXT NOT NULL DEFAULT 'listView',
  "noKibitz" BOOL,
  "showHideKarmaOption" BOOL,
  "showPostAuthorCard" BOOL,
  "hideIntercom" BOOL NOT NULL DEFAULT FALSE,
  "markDownPostEditor" BOOL NOT NULL DEFAULT FALSE,
  "hideElicitPredictions" BOOL NOT NULL DEFAULT FALSE,
  "hideAFNonMemberInitialWarning" BOOL NOT NULL DEFAULT FALSE,
  "noSingleLineComments" BOOL NOT NULL DEFAULT FALSE,
  "noCollapseCommentsPosts" BOOL NOT NULL DEFAULT FALSE,
  "noCollapseCommentsFrontpage" BOOL NOT NULL DEFAULT FALSE,
  "hideCommunitySection" BOOL NOT NULL DEFAULT FALSE,
  "expandedFrontpageSections" JSONB,
  "showCommunityInRecentDiscussion" BOOL NOT NULL DEFAULT FALSE,
  "hidePostsRecommendations" BOOL NOT NULL DEFAULT FALSE,
  "petrovOptOut" BOOL NOT NULL DEFAULT FALSE,
  "optedOutOfSurveys" BOOL,
  "postGlossariesPinned" BOOL NOT NULL DEFAULT FALSE,
  "acceptedTos" BOOL NOT NULL DEFAULT FALSE,
  "hideNavigationSidebar" BOOL,
  "currentFrontpageFilter" TEXT,
  "frontpageSelectedTab" TEXT,
  "frontpageFilterSettings" JSONB,
  "hideFrontpageFilterSettingsDesktop" BOOL,
  "allPostsTimeframe" TEXT,
  "allPostsFilter" TEXT,
  "allPostsSorting" TEXT,
  "allPostsShowLowKarma" BOOL,
  "allPostsIncludeEvents" BOOL,
  "allPostsHideCommunity" BOOL,
  "allPostsOpenSettings" BOOL,
  "draftsListSorting" TEXT,
  "draftsListShowArchived" BOOL,
  "draftsListShowShared" BOOL,
  "lastNotificationsCheck" TIMESTAMPTZ,
  "karma" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "goodHeartTokens" DOUBLE PRECISION,
  "moderationStyle" TEXT,
  "moderatorAssistance" BOOL,
  "collapseModerationGuidelines" BOOL,
  "bannedUserIds" VARCHAR(27) [],
  "bannedPersonalUserIds" VARCHAR(27) [],
  "bookmarkedPostsMetadata" JSONB[] NOT NULL DEFAULT '{}',
  "hiddenPostsMetadata" JSONB[] NOT NULL DEFAULT '{}',
  "legacyId" TEXT,
  "deleted" BOOL NOT NULL DEFAULT FALSE,
  "permanentDeletionRequestedAt" TIMESTAMPTZ,
  "voteBanned" BOOL,
  "nullifyVotes" BOOL,
  "deleteContent" BOOL,
  "banned" TIMESTAMPTZ,
  "auto_subscribe_to_my_posts" BOOL NOT NULL DEFAULT TRUE,
  "auto_subscribe_to_my_comments" BOOL NOT NULL DEFAULT TRUE,
  "autoSubscribeAsOrganizer" BOOL NOT NULL DEFAULT TRUE,
  "notificationCommentsOnSubscribedPost" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationShortformContent" JSONB NOT NULL DEFAULT '{"channel":"onsite","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationRepliesToMyComments" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationRepliesToSubscribedComments" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationSubscribedUserPost" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationSubscribedUserComment" JSONB NOT NULL DEFAULT '{"channel":"onsite","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationPostsInGroups" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationSubscribedTagPost" JSONB NOT NULL DEFAULT '{"channel":"onsite","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationSubscribedSequencePost" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationPrivateMessage" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationSharedWithMe" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationAlignmentSubmissionApproved" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationEventInRadius" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationKarmaPowersGained" JSONB NOT NULL DEFAULT '{"channel":"onsite","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationRSVPs" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationGroupAdministration" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationCommentsOnDraft" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationPostsNominatedReview" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationSubforumUnread" JSONB NOT NULL DEFAULT '{"channel":"onsite","batchingFrequency":"daily","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationNewMention" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationDialogueMessages" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationPublishedDialogueMessages" JSONB NOT NULL DEFAULT '{"channel":"onsite","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationAddedAsCoauthor" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationDebateCommentsOnSubscribedPost" JSONB NOT NULL DEFAULT '{"channel":"onsite","batchingFrequency":"daily","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationDebateReplies" JSONB NOT NULL DEFAULT '{"channel":"onsite","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationDialogueMatch" JSONB NOT NULL DEFAULT '{"channel":"both","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationNewDialogueChecks" JSONB NOT NULL DEFAULT '{"channel":"none","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "notificationYourTurnMatchForm" JSONB NOT NULL DEFAULT '{"channel":"onsite","batchingFrequency":"realtime","timeOfDayGMT":12,"dayOfWeekGMT":"Monday"}'::JSONB,
  "hideDialogueFacilitation" BOOL NOT NULL DEFAULT FALSE,
  "revealChecksToAdmins" BOOL NOT NULL DEFAULT FALSE,
  "optedInToDialogueFacilitation" BOOL NOT NULL DEFAULT FALSE,
  "showDialoguesList" BOOL NOT NULL DEFAULT TRUE,
  "showMyDialogues" BOOL NOT NULL DEFAULT TRUE,
  "showMatches" BOOL NOT NULL DEFAULT TRUE,
  "showRecommendedPartners" BOOL NOT NULL DEFAULT TRUE,
  "hideActiveDialogueUsers" BOOL NOT NULL DEFAULT FALSE,
  "karmaChangeNotifierSettings" JSONB NOT NULL DEFAULT '{"updateFrequency":"daily","timeOfDayGMT":11,"dayOfWeekGMT":"Saturday","showNegativeKarma":false}'::JSONB,
  "karmaChangeLastOpened" TIMESTAMPTZ,
  "karmaChangeBatchStart" TIMESTAMPTZ,
  "emailSubscribedToCurated" BOOL,
  "subscribedToDigest" BOOL NOT NULL DEFAULT FALSE,
  "unsubscribeFromAll" BOOL,
  "hideSubscribePoke" BOOL NOT NULL DEFAULT FALSE,
  "hideMeetupsPoke" BOOL NOT NULL DEFAULT FALSE,
  "hideHomeRHS" BOOL NOT NULL DEFAULT FALSE,
  "frontpagePostCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "sequenceCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "sequenceDraftCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "mongoLocation" JSONB,
  "googleLocation" JSONB,
  "location" TEXT,
  "mapLocation" JSONB,
  "mapLocationSet" BOOL,
  "mapMarkerText" TEXT,
  "htmlMapMarkerText" TEXT,
  "nearbyEventsNotifications" BOOL NOT NULL DEFAULT FALSE,
  "nearbyEventsNotificationsLocation" JSONB,
  "nearbyEventsNotificationsMongoLocation" JSONB,
  "nearbyEventsNotificationsRadius" DOUBLE PRECISION,
  "nearbyPeopleNotificationThreshold" DOUBLE PRECISION,
  "hideFrontpageMap" BOOL,
  "hideTaggingProgressBar" BOOL,
  "hideFrontpageBookAd" BOOL,
  "hideFrontpageBook2019Ad" BOOL,
  "hideFrontpageBook2020Ad" BOOL,
  "sunshineNotes" TEXT NOT NULL DEFAULT '',
  "sunshineFlagged" BOOL NOT NULL DEFAULT FALSE,
  "needsReview" BOOL NOT NULL DEFAULT FALSE,
  "sunshineSnoozed" BOOL NOT NULL DEFAULT FALSE,
  "snoozedUntilContentCount" DOUBLE PRECISION,
  "reviewedByUserId" VARCHAR(27),
  "reviewedAt" TIMESTAMPTZ,
  "afKarma" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "voteCount" DOUBLE PRECISION,
  "smallUpvoteCount" DOUBLE PRECISION,
  "smallDownvoteCount" DOUBLE PRECISION,
  "bigUpvoteCount" DOUBLE PRECISION,
  "bigDownvoteCount" DOUBLE PRECISION,
  "voteReceivedCount" DOUBLE PRECISION,
  "smallUpvoteReceivedCount" DOUBLE PRECISION,
  "smallDownvoteReceivedCount" DOUBLE PRECISION,
  "bigUpvoteReceivedCount" DOUBLE PRECISION,
  "bigDownvoteReceivedCount" DOUBLE PRECISION,
  "usersContactedBeforeReview" TEXT[],
  "fullName" TEXT,
  "shortformFeedId" VARCHAR(27),
  "viewUnreviewedComments" BOOL,
  "partiallyReadSequences" JSONB[],
  "beta" BOOL,
  "reviewVotesQuadratic" BOOL,
  "reviewVotesQuadratic2019" BOOL,
  "reviewVotesQuadratic2020" BOOL,
  "petrovPressedButtonDate" TIMESTAMPTZ,
  "petrovLaunchCodeDate" TIMESTAMPTZ,
  "defaultToCKEditor" BOOL,
  "signUpReCaptchaRating" DOUBLE PRECISION,
  "oldSlugs" TEXT[],
  "noExpandUnreadCommentsReview" BOOL NOT NULL DEFAULT FALSE,
  "postCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "maxPostCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "commentCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "maxCommentCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "tagRevisionCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "abTestKey" TEXT NOT NULL,
  "abTestOverrides" JSONB,
  "reenableDraftJs" BOOL,
  "walledGardenInvite" BOOL,
  "hideWalledGardenUI" BOOL,
  "walledGardenPortalOnboarded" BOOL,
  "taggingDashboardCollapsed" BOOL,
  "usernameUnset" BOOL NOT NULL DEFAULT FALSE,
  "paymentEmail" TEXT,
  "paymentInfo" TEXT,
  "profileUpdatedAt" TIMESTAMPTZ NOT NULL DEFAULT '1970-01-01T00:00:00.000Z',
  "profileImageId" TEXT,
  "jobTitle" TEXT,
  "organization" TEXT,
  "careerStage" TEXT[],
  "website" TEXT,
  "fmCrosspostUserId" TEXT,
  "linkedinProfileURL" TEXT,
  "facebookProfileURL" TEXT,
  "twitterProfileURL" TEXT,
  "githubProfileURL" TEXT,
  "profileTagIds" VARCHAR(27) [] NOT NULL DEFAULT '{}',
  "organizerOfGroupIds" VARCHAR(27) [] NOT NULL DEFAULT '{}',
  "programParticipation" TEXT[],
  "postingDisabled" BOOL,
  "allCommentingDisabled" BOOL,
  "commentingOnOtherUsersDisabled" BOOL,
  "conversationsDisabled" BOOL,
  "acknowledgedNewUserGuidelines" BOOL,
  "subforumPreferredLayout" TEXT,
  "hideJobAdUntil" TIMESTAMPTZ,
  "criticismTipsDismissed" BOOL NOT NULL DEFAULT FALSE,
  "hideFromPeopleDirectory" BOOL NOT NULL DEFAULT FALSE,
  "allowDatadogSessionReplay" BOOL NOT NULL DEFAULT FALSE,
  "afPostCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "afCommentCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "afSequenceCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "afSequenceDraftCount" DOUBLE PRECISION NOT NULL DEFAULT 0,
  "reviewForAlignmentForumUserId" TEXT,
  "afApplicationText" TEXT,
  "afSubmittedApplication" BOOL,
  "hideSunshineSidebar" BOOL NOT NULL DEFAULT FALSE,
  "inactiveSurveyEmailSentAt" TIMESTAMPTZ,
  "userSurveyEmailSentAt" TIMESTAMPTZ,
  "wsdcNumber" DOUBLE PRECISION,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB,
  "moderationGuidelines" JSONB,
  "moderationGuidelines_latest" TEXT,
  "howOthersCanHelpMe" JSONB,
  "howOthersCanHelpMe_latest" TEXT,
  "howICanHelpOthers" JSONB,
  "howICanHelpOthers_latest" TEXT,
  "biography" JSONB,
  "biography_latest" TEXT,
  "recommendationSettings" JSONB
);

-- Index "idx_Users_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Users_schemaVersion" ON "Users" USING btree ("schemaVersion");

-- Index "idx_Users_username"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_Users_username" ON "Users" USING btree (COALESCE("username", ''));

-- Index "idx_Users_email"
CREATE INDEX IF NOT EXISTS "idx_Users_email" ON "Users" USING btree ("email");

-- Index "idx_Users_emails__address"
CREATE INDEX IF NOT EXISTS "idx_Users_emails__address" ON "Users" USING gin ("emails");

-- Index "idx_Users_services__resume__loginTokens__hashedToken"
CREATE INDEX IF NOT EXISTS "idx_Users_services__resume__loginTokens__hashedToken" ON "Users" USING gin (
  (
    "services" -> 'resume' -> 'loginTokens' -> 'hashedToken'
  )
);

-- Index "idx_Users_services__resume__loginTokens__token"
CREATE INDEX IF NOT EXISTS "idx_Users_services__resume__loginTokens__token" ON "Users" USING gin (
  (
    "services" -> 'resume' -> 'loginTokens' -> 'token'
  )
);

-- Index "idx_Users_services__resume__haveLoginTokensToDelete"
CREATE INDEX IF NOT EXISTS "idx_Users_services__resume__haveLoginTokensToDelete" ON "Users" USING gin (
  (
    "services" -> 'resume' -> 'haveLoginTokensToDelete'
  )
);

-- Index "idx_Users_services__resume__loginTokens__when"
CREATE INDEX IF NOT EXISTS "idx_Users_services__resume__loginTokens__when" ON "Users" USING gin (
  ("services" -> 'resume' -> 'loginTokens' -> 'when')
);

-- Index "idx_Users_services__email__verificationTokens__token"
CREATE INDEX IF NOT EXISTS "idx_Users_services__email__verificationTokens__token" ON "Users" USING gin (
  (
    "services" -> 'email' -> 'verificationTokens' -> 'token'
  )
);

-- Index "idx_Users_services__password__reset__token"
CREATE INDEX IF NOT EXISTS "idx_Users_services__password__reset__token" ON "Users" USING gin (("services" -> 'password' -> 'reset' -> 'token'));

-- Index "idx_Users_services__password__reset__when"
CREATE INDEX IF NOT EXISTS "idx_Users_services__password__reset__when" ON "Users" USING gin (("services" -> 'password' -> 'reset' -> 'when'));

-- Index "idx_Users_services__twitter__id"
CREATE INDEX IF NOT EXISTS "idx_Users_services__twitter__id" ON "Users" USING gin (("services" -> 'twitter' -> 'id'));

-- Index "idx_Users_services__facebook__id"
CREATE INDEX IF NOT EXISTS "idx_Users_services__facebook__id" ON "Users" USING gin (("services" -> 'facebook' -> 'id'));

-- Index "idx_Users_services__google__id"
CREATE INDEX IF NOT EXISTS "idx_Users_services__google__id" ON "Users" USING gin (("services" -> 'google' -> 'id'));

-- Index "idx_Users_karma__id"
CREATE INDEX IF NOT EXISTS "idx_Users_karma__id" ON "Users" USING btree ("karma", "_id");

-- Index "idx_Users_slug"
CREATE INDEX IF NOT EXISTS "idx_Users_slug" ON "Users" USING btree ("slug");

-- Index "idx_Users_isAdmin"
CREATE INDEX IF NOT EXISTS "idx_Users_isAdmin" ON "Users" USING btree ("isAdmin");

-- Index "idx_Users_services__github__id"
CREATE INDEX IF NOT EXISTS "idx_Users_services__github__id" ON "Users" USING gin (("services" -> 'github' -> 'id'));

-- Index "idx_Users_createdAt__id"
CREATE INDEX IF NOT EXISTS "idx_Users_createdAt__id" ON "Users" USING btree ("createdAt", "_id");

-- Index "idx_Users_services__resume__loginTokens"
CREATE INDEX IF NOT EXISTS "idx_Users_services__resume__loginTokens" ON "Users" USING gin (("services" -> 'resume' -> 'loginTokens'));

-- Index "idx_Users_email_ci"
CREATE INDEX IF NOT EXISTS "idx_Users_email_ci" ON "Users" USING btree (LOWER("email"));

-- Index "idx_Users_emails__address_ci"
CREATE INDEX IF NOT EXISTS "idx_Users_emails__address_ci" ON "Users" USING gin ("emails");

-- Index "idx_Users_oldSlugs"
CREATE INDEX IF NOT EXISTS "idx_Users_oldSlugs" ON "Users" USING gin ("oldSlugs");

-- Index "idx_Users_bannedPersonalUserIds_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Users_bannedPersonalUserIds_createdAt" ON "Users" USING gin ("bannedPersonalUserIds", "createdAt");

-- Index "idx_Users_bannedUserIds_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Users_bannedUserIds_createdAt" ON "Users" USING gin ("bannedUserIds", "createdAt");

-- Index "idx_Users_needsReview_signUpReCaptchaRating_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Users_needsReview_signUpReCaptchaRating_createdAt" ON "Users" USING btree (
  "needsReview",
  "signUpReCaptchaRating",
  "createdAt"
);

-- Index "idx_Users_banned_postCount_commentCount_lastNotificationsCheck"
CREATE INDEX IF NOT EXISTS "idx_Users_banned_postCount_commentCount_lastNotificationsCheck" ON "Users" USING btree (
  "banned",
  "postCount",
  "commentCount",
  "lastNotificationsCheck"
);

-- Index "idx_Users_reviewedAt_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Users_reviewedAt_createdAt" ON "Users" USING btree ("reviewedAt", "createdAt");

-- Index "idx_Users_mapLocationSet"
CREATE INDEX IF NOT EXISTS "idx_Users_mapLocationSet" ON "Users" USING btree ("mapLocationSet");

-- Index "idx_Users_profileTagIds_deleted_deleteContent_karma"
CREATE INDEX IF NOT EXISTS "idx_Users_profileTagIds_deleted_deleteContent_karma" ON "Users" USING gin (
  "profileTagIds",
  "deleted",
  "deleteContent",
  "karma"
);

-- Index "idx_Users_walledGardenInvite"
CREATE INDEX IF NOT EXISTS "idx_Users_walledGardenInvite" ON "Users" USING btree ("walledGardenInvite");

-- Index "idx_Users_optedInToDialogueFacilitation_karma"
CREATE INDEX IF NOT EXISTS "idx_Users_optedInToDialogueFacilitation_karma" ON "Users" USING btree ("optedInToDialogueFacilitation", "karma");

-- Index "idx_Users_afKarma_reviewForAlignmentForumUserId_groups_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Users_afKarma_reviewForAlignmentForumUserId_groups_createdAt" ON "Users" USING gin (
  "afKarma",
  "reviewForAlignmentForumUserId",
  "groups",
  "createdAt"
);

-- Index "idx_Users_afSubmittedApplication_reviewForAlignmentForumUserId_groups_createdAt"
CREATE INDEX IF NOT EXISTS "idx_Users_afSubmittedApplication_reviewForAlignmentForumUserId_groups_createdAt" ON "Users" USING gin (
  "afSubmittedApplication",
  "reviewForAlignmentForumUserId",
  "groups",
  "createdAt"
);

-- Index "idx_users_nearbyEventsNotifications"
CREATE INDEX IF NOT EXISTS "idx_users_nearbyEventsNotifications" ON "Users" USING btree ("nearbyEventsNotificationsMongoLocation");

-- Table "Votes"
CREATE TABLE "Votes" (
  _id VARCHAR(27) PRIMARY KEY,
  "documentId" TEXT NOT NULL,
  "collectionName" TEXT NOT NULL,
  "userId" VARCHAR(27) NOT NULL,
  "authorIds" VARCHAR(27) [],
  "voteType" TEXT NOT NULL,
  "extendedVoteType" JSONB,
  "power" DOUBLE PRECISION NOT NULL,
  "afPower" DOUBLE PRECISION,
  "cancelled" BOOL NOT NULL DEFAULT FALSE,
  "isUnvote" BOOL NOT NULL DEFAULT FALSE,
  "votedAt" TIMESTAMPTZ NOT NULL,
  "documentIsAf" BOOL NOT NULL DEFAULT FALSE,
  "silenceNotification" BOOL NOT NULL DEFAULT FALSE,
  "schemaVersion" DOUBLE PRECISION NOT NULL DEFAULT 1,
  "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
  "legacyData" JSONB
);

-- Index "idx_Votes_schemaVersion"
CREATE INDEX IF NOT EXISTS "idx_Votes_schemaVersion" ON "Votes" USING btree ("schemaVersion");

-- Index "idx_Votes_cancelled_userId_documentId"
CREATE INDEX IF NOT EXISTS "idx_Votes_cancelled_userId_documentId" ON "Votes" USING btree ("cancelled", "userId", "documentId");

-- Index "idx_Votes_cancelled_documentId"
CREATE INDEX IF NOT EXISTS "idx_Votes_cancelled_documentId" ON "Votes" USING btree ("cancelled", "documentId");

-- Index "idx_Votes_cancelled_userId_votedAt"
CREATE INDEX IF NOT EXISTS "idx_Votes_cancelled_userId_votedAt" ON "Votes" USING btree ("cancelled", "userId", "votedAt");

-- Index "idx_Votes_authorIds"
CREATE INDEX IF NOT EXISTS "idx_Votes_authorIds" ON "Votes" USING gin ("authorIds");

-- Index "idx_Votes_userId_cancelled_votedAt"
CREATE INDEX IF NOT EXISTS "idx_Votes_userId_cancelled_votedAt" ON "Votes" USING btree ("userId", "cancelled", "votedAt");

-- Index "idx_Votes_collectionName_votedAt"
CREATE INDEX IF NOT EXISTS "idx_Votes_collectionName_votedAt" ON "Votes" USING btree ("collectionName", "votedAt");

-- Index "idx_Votes_collectionName_userId_voteType_cancelled_isUnvote_votedAt"
CREATE INDEX IF NOT EXISTS "idx_Votes_collectionName_userId_voteType_cancelled_isUnvote_votedAt" ON "Votes" USING btree (
  "collectionName",
  "userId",
  "voteType",
  "cancelled",
  "isUnvote",
  "votedAt"
);

-- Index "idx_Votes_documentId"
CREATE INDEX IF NOT EXISTS "idx_Votes_documentId" ON "Votes" USING btree ("documentId");

-- CustomIndex "idx_DatabaseMetadata_name"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_DatabaseMetadata_name" ON public."DatabaseMetadata" USING btree (name);

-- CustomIndex "idx_DebouncerEvents_dispatched_af_key_name_filtered"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_DebouncerEvents_dispatched_af_key_name_filtered" ON public."DebouncerEvents" USING btree (dispatched, af, key, name)
WHERE
  (dispatched IS FALSE);

-- CustomIndex "idx_PageCache_path_abTestGroups_bundleHash"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_PageCache_path_abTestGroups_bundleHash" ON public."PageCache" USING btree (PATH, "abTestGroups", "bundleHash");

-- CustomIndex "idx_ReadStatuses_userId_postId_tagId"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_ReadStatuses_userId_postId_tagId" ON public."ReadStatuses" USING btree (
  COALESCE("userId", ''::CHARACTER VARYING),
  COALESCE("postId", ''::CHARACTER VARYING),
  COALESCE("tagId", ''::CHARACTER VARYING)
);

-- CustomIndex "idx_Users_tsvector_jobTitle"
CREATE INDEX IF NOT EXISTS "idx_Users_tsvector_jobTitle" ON "Users" (TO_TSVECTOR('english', "jobTitle"))
WHERE
  "jobTitle" IS NOT NULL AND
  "noindex" IS NOT TRUE AND
  "hideFromPeopleDirectory" IS NOT TRUE AND
  "deleted" IS NOT TRUE AND
  "voteBanned" IS NOT TRUE AND
  "deleteContent" IS NOT TRUE AND
  "nullifyVotes" IS NOT TRUE AND
  "banned" IS NULL;

-- CustomIndex "idx_Users_tsvector_organization"
CREATE INDEX IF NOT EXISTS "idx_Users_tsvector_organization" ON "Users" (TO_TSVECTOR('english', "organization"))
WHERE
  "organization" IS NOT NULL AND
  "noindex" IS NOT TRUE AND
  "hideFromPeopleDirectory" IS NOT TRUE AND
  "deleted" IS NOT TRUE AND
  "voteBanned" IS NOT TRUE AND
  "deleteContent" IS NOT TRUE AND
  "nullifyVotes" IS NOT TRUE AND
  "banned" IS NULL;

-- CustomIndex "idx_Users_tsvector_mapLocationAddress"
CREATE INDEX IF NOT EXISTS "idx_Users_tsvector_mapLocationAddress" ON "Users" (
  TO_TSVECTOR('english', "mapLocation" ->> 'formatted_address')
)
WHERE
  "mapLocation" ->> 'formatted_address' IS NOT NULL AND
  "noindex" IS NOT TRUE AND
  "hideFromPeopleDirectory" IS NOT TRUE AND
  "deleted" IS NOT TRUE AND
  "voteBanned" IS NOT TRUE AND
  "deleteContent" IS NOT TRUE AND
  "nullifyVotes" IS NOT TRUE AND
  "banned" IS NULL;

-- CustomIndex "idx_Comments_postId_promotedAt"
CREATE INDEX IF NOT EXISTS "idx_Comments_postId_promotedAt" ON "Comments" ("postId", "promotedAt")
WHERE
  "promotedAt" IS NOT NULL;

-- CustomIndex "idx_Comments_userId_postId_postedAt"
CREATE INDEX IF NOT EXISTS "idx_Comments_userId_postId_postedAt" ON "Comments" ("userId", "postId", "postedAt");

-- CustomIndex "idx_comments_popular_comments"
CREATE INDEX IF NOT EXISTS idx_comments_popular_comments ON "Comments" ("postId", "baseScore" DESC, "postedAt" DESC)
WHERE
  ("baseScore" >= 15);

-- CustomIndex "idx_posts_pingbacks"
CREATE INDEX IF NOT EXISTS idx_posts_pingbacks ON "Posts" USING gin (pingbacks);

-- CustomIndex "idx_Posts_max_postedAt_mostRecentPublishedDialogueResponseDate"
CREATE INDEX IF NOT EXISTS "idx_Posts_max_postedAt_mostRecentPublishedDialogueResponseDate" ON "Posts" (
  GREATEST(
    "postedAt",
    "mostRecentPublishedDialogueResponseDate"
  ) DESC
)
WHERE
  "collabEditorDialogue" IS TRUE;

-- CustomIndex "manual_idx__LWEvents_properties_ip"
CREATE INDEX IF NOT EXISTS "manual_idx__LWEvents_properties_ip" ON public."LWEvents" USING gin ((("properties" ->> 'ip')::TEXT))
WITH
  (fastupdate = TRUE)
WHERE
  name = 'login';

-- Function "fm_has_verified_email"
CREATE OR
REPLACE FUNCTION fm_has_verified_email (emails jsonb[]) RETURNS BOOLEAN LANGUAGE plpgsql IMMUTABLE AS $$
        DECLARE
          item jsonb;
        BEGIN
          FOR item IN SELECT unnest(emails)
          LOOP
            IF (item->>'verified')::boolean THEN
              RETURN true;
            END IF;
          END LOOP;
          RETURN false;
        END;
      $$;

-- CustomIndex "idx_Users_subscribed_to_curated_verified"
CREATE INDEX IF NOT EXISTS "idx_Users_subscribed_to_curated_verified" ON "Users" USING btree (
  "emailSubscribedToCurated",
  "unsubscribeFromAll",
  "deleted",
  "email",
  fm_has_verified_email (emails),
  "_id"
)
WHERE
  "emailSubscribedToCurated" IS TRUE AND
  "unsubscribeFromAll" IS NOT TRUE AND
  "deleted" IS NOT TRUE AND
  "email" IS NOT NULL AND
  fm_has_verified_email (emails);

-- CustomIndex "idx_Users_subscribed_to_curated"
CREATE INDEX IF NOT EXISTS "idx_Users_subscribed_to_curated" ON "Users" USING btree (
  "emailSubscribedToCurated",
  "unsubscribeFromAll",
  "deleted",
  "email",
  "_id"
)
WHERE
  "emailSubscribedToCurated" IS TRUE AND
  "unsubscribeFromAll" IS NOT TRUE AND
  "deleted" IS NOT TRUE AND
  "email" IS NOT NULL;

-- Function "fm_build_nested_jsonb"
CREATE OR
REPLACE FUNCTION fm_build_nested_jsonb (target_path TEXT[], terminal_element JSONB) RETURNS JSONB LANGUAGE sql IMMUTABLE AS 'SELECT JSONB_BUILD_OBJECT(
        target_path[1],
        CASE
          WHEN CARDINALITY(target_path) = 1 THEN terminal_element
          ELSE fm_build_nested_jsonb(
            target_path[2:CARDINALITY(target_path)],
            terminal_element
          )
        END
      );';

-- Function "fm_add_to_set_native"
CREATE OR
REPLACE FUNCTION fm_add_to_set (ANYARRAY, ANYELEMENT) RETURNS ANYARRAY LANGUAGE sql IMMUTABLE AS 'SELECT CASE WHEN ARRAY_POSITION($1, $2) IS NULL THEN $1 || $2 ELSE $1 END;';

-- Function "fm_add_to_set_json"
CREATE OR
REPLACE FUNCTION fm_add_to_set (
  base_field JSONB,
  target_path TEXT[],
  value_to_add ANYELEMENT
) RETURNS JSONB LANGUAGE sql IMMUTABLE AS 'SELECT CASE
      WHEN base_field #> target_path IS NULL
        THEN COALESCE(base_field, ''{}''::JSONB) || fm_build_nested_jsonb(
          target_path,
          JSONB_BUILD_ARRAY(value_to_add)
        )
      WHEN EXISTS (
        SELECT *
        FROM JSONB_ARRAY_ELEMENTS(base_field #> target_path) AS elem
        WHERE elem = TO_JSONB(value_to_add)
      )
        THEN base_field
      ELSE JSONB_INSERT(
        base_field,
        (SUBSTRING(target_path::TEXT FROM ''(.*)}.*$'') || '', -1}'')::TEXT[],
        TO_JSONB(value_to_add),
        TRUE
      )
      END;';

-- Function "fm_post_tag_similarity"
CREATE OR
REPLACE FUNCTION fm_post_tag_similarity (post_id_a TEXT, post_id_b TEXT) RETURNS FLOAT LANGUAGE sql IMMUTABLE AS 'SELECT
          COALESCE(SUM(LEAST(a, b))::FLOAT / SUM(GREATEST(a, b))::FLOAT, 0)
            AS similarity
        FROM (
          SELECT
            GREATEST((a."tagRelevance"->"tagId")::INTEGER, 0) AS a,
            GREATEST((b."tagRelevance"->"tagId")::INTEGER, 0) AS b
          FROM (
            SELECT JSONB_OBJECT_KEYS("tagRelevance") AS "tagId"
            FROM "Posts"
            WHERE "_id" IN (post_id_a, post_id_b)
          ) "allTags"
          JOIN "Posts" a ON a."_id" = post_id_a
          JOIN "Posts" b ON b."_id" = post_id_b
        ) "tagRelevance";';

-- Function "fm_jsonb_subset"
CREATE OR
REPLACE FUNCTION fm_jsonb_subset (target jsonb, candidate jsonb) RETURNS BOOLEAN AS $$
      DECLARE
        key text;
      BEGIN
        FOR key IN SELECT jsonb_object_keys(candidate)
        LOOP
          IF NOT (target ? key AND target->>key = candidate->>key) THEN
            RETURN FALSE;
          END IF;
        END LOOP;

        RETURN TRUE;
      END;
      $$ LANGUAGE plpgsql;

-- Function "fm_post_tag_ids"
CREATE OR
REPLACE FUNCTION fm_post_tag_ids (post_id TEXT) RETURNS TEXT[] LANGUAGE sql IMMUTABLE AS 'SELECT ARRAY_AGG(tags."tagId")
      FROM "Posts" p
      JOIN (
        SELECT JSONB_OBJECT_KEYS("tagRelevance") AS "tagId"
        FROM "Posts"
        WHERE "_id" = post_id
      ) tags ON p."_id" = post_id
      WHERE (p."tagRelevance"->tags."tagId")::INTEGER >= 1;';

-- Function "fm_confidence_sort"
CREATE OR
REPLACE FUNCTION fm_confidence_sort (
  ups INTEGER,
  downs INTEGER,
  downvote_multiplier FLOAT DEFAULT 1
) RETURNS FLOAT LANGUAGE PLPGSQL IMMUTABLE AS $$
      DECLARE
        n INTEGER;
        z FLOAT;
        p FLOAT;
        l FLOAT;
        r float;
        u FLOAT;
      BEGIN
        n := ups + (downs * downvote_multiplier);
        IF n = 0 THEN
          RETURN n;
        END IF;
        z := 1.281551565545;
        p := ups::FLOAT / n::FLOAT;
        l := p + 1 / (2 * n) * z * z;
        r := z * SQRT(p * (1 - p) / n + z * z / (4 * n * n));
        u := 1 + 1 / n * z * z;
        RETURN (l - r) / u;
      END $$;

-- Function "fm_comment_confidence"
CREATE OR
REPLACE FUNCTION fm_comment_confidence (
  comment_id TEXT,
  downvote_multiplier FLOAT DEFAULT 1
) RETURNS FLOAT LANGUAGE sql AS $$
        SELECT
          fm_confidence_sort(
            COALESCE(
              SUM(v."power") FILTER
                (WHERE v."voteType" IN ('bigUpvote', 'smallUpvote')),
              0
            )::INTEGER,
            COALESCE(
              -SUM(v."power") FILTER
                (WHERE v."voteType" IN ('bigDownvote', 'smallDownvote')),
              0
            )::INTEGER,
            downvote_multiplier
          )
        FROM "Comments" c
        JOIN "Votes" v ON
          v."documentId" = c."_id" AND
          v."collectionName" = 'Comments' AND
          v."isUnvote" IS NOT TRUE AND
          v."cancelled" IS NOT TRUE AND
          v."extendedVoteType" IS NULL
        WHERE c."_id" = comment_id;
      $$;

-- Function "fm_vote_added_emoji"
CREATE OR
REPLACE FUNCTION fm_vote_added_emoji (vote_id TEXT, emoji_name TEXT) RETURNS BOOLEAN LANGUAGE sql AS $$
        SELECT
          COALESCE(target."extendedVoteType"->emoji_name = TO_JSONB(TRUE), FALSE) AND
          COALESCE(v."extendedVoteType"->emoji_name <> TO_JSONB(TRUE), TRUE)
        FROM "Votes" target
        LEFT JOIN "Votes" v ON
          v."votedAt" < target."votedAt" AND
          v."userId" = target."userId" AND
          v."documentId" = target."documentId" AND
          v."collectionName" = target."collectionName"
        WHERE
          target."_id" = vote_id
        ORDER BY v."votedAt" DESC
        LIMIT 1
      $$;

-- View "UserLoginTokens"
CREATE MATERIALIZED VIEW IF NOT EXISTS "UserLoginTokens" AS
SELECT
  JSONB_ARRAY_ELEMENTS("services" -> 'resume' -> 'loginTokens') ->> 'hashedToken' "hashedToken",
  "_id" "userId"
FROM
  "Users"
WHERE
  JSONB_TYPEOF("services" -> 'resume' -> 'loginTokens') = 'array';

-- Function "fm_get_user_by_login_token"
CREATE OR
REPLACE FUNCTION fm_get_user_by_login_token (hashed_token TEXT) RETURNS SETOF "Users" LANGUAGE plpgsql AS $$
        DECLARE
        BEGIN
          RETURN QUERY
            SELECT u.*
            FROM "Users" u
            JOIN "UserLoginTokens" lt ON lt."userId" = u."_id"
            WHERE lt."hashedToken" = hashed_token;
          IF (FOUND = FALSE) THEN
            RETURN QUERY
              SELECT *
              FROM "Users"
              WHERE "services"->'resume'->'loginTokens' @>
                ('[{"hashedToken": "' || hashed_token || '"}]')::JSONB;
          END IF;
        END
      $$;

-- Function "fm_get_user_profile_updated_at"
CREATE OR
REPLACE FUNCTION fm_get_user_profile_updated_at (userid TEXT) RETURNS TIMESTAMPTZ LANGUAGE sql AS $$
          SELECT COALESCE(
            (SELECT "createdAt"
            FROM (
              SELECT JSONB_OBJECT_KEYS("properties"->'after') AS "key", "createdAt"
              FROM "LWEvents"
              WHERE "documentId" = userid AND "name" = 'fieldChanges'
            ) q
            WHERE "key" IN ('username', 'displayName', 'organizerOfGroupIds', 'programParticipation', 'googleLocation', 'location', 'mapLocation', 'profileImageId', 'jobTitle', 'organization', 'careerStage', 'website', 'linkedinProfileURL', 'facebookProfileURL', 'twitterProfileURL', 'githubProfileURL', 'profileTagIds', 'biography', 'howOthersCanHelpMe', 'howICanHelpOthers')
            ORDER BY "createdAt" DESC
            LIMIT 1),
            (SELECT "createdAt" FROM "Users" WHERE "_id" = userid),
            TO_TIMESTAMP(0)
          )
      $$;

-- View "UniquePostUpvoters"
CREATE MATERIALIZED VIEW IF NOT EXISTS "UniquePostUpvoters" AS
SELECT
  p."_id" AS "postId",
  ARRAY_AGG(
    DISTINCT ('x' || SUBSTR(MD5(v."userId"), 1, 8))::BIT(32)::INTEGER
  ) AS "voters"
FROM
  "Posts" p
  INNER JOIN "Votes" v ON p."_id" = v."documentId" AND
  v."collectionName" = 'Posts' AND
  v."cancelled" IS NOT TRUE AND
  v."isUnvote" IS NOT TRUE AND
  v."voteType" IN ('smallUpvote', 'bigUpvote')
GROUP BY
  p."_id";

-- CustomIndex "idx_UniquePostUpvoters_postId"
CREATE UNIQUE INDEX IF NOT EXISTS "idx_UniquePostUpvoters_postId" ON "UniquePostUpvoters" ("postId");

-- View "ConversationUnreadMessages"
CREATE OR REPLACE VIEW "ConversationUnreadMessages" AS
SELECT
  q."conversationId",
  q."userId",
  EXISTS (
    SELECT
      *
    FROM
      "Notifications" n
      INNER JOIN "Messages" m ON n."userId" = q."userId" AND
      n."documentId" = m."_id" AND
      n."documentType" = 'message' AND
      n."emailed" IS NOT TRUE AND
      n."waitingForBatch" IS NOT TRUE AND
      n."deleted" IS NOT TRUE AND
      n."viewed" IS NOT TRUE AND
      m."conversationId" = q."conversationId"
  ) "hasUnreadMessages"
FROM
  (
    SELECT
      "_id" "conversationId",
      UNNEST("participantIds") "userId"
    FROM
      "Conversations"
  ) q;

-- CustomIndex "idx_user_login_tokens_hashed_token"
CREATE UNIQUE INDEX IF NOT EXISTS idx_user_login_tokens_hashed_token ON "UserLoginTokens" USING BTREE ("hashedToken");
