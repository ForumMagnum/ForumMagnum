import { isNotRandomId, randomId } from '../lib/random';

describe('isNotRandomId', () => {
  it('returns false for valid random IDs generated by randomId', () => {
    const id = randomId();
    expect(isNotRandomId(id)).toBe(false);
  });

  it('returns true for strings that are not valid random IDs', () => {
    const invalidId = 'invalid-id';
    expect(isNotRandomId(invalidId)).toBe(true);
  });

  it('returns true for strings of incorrect length', () => {
    const tooShortId = 'short';
    const tooLongId = 'thisiswaytoolongtobeavalidrandomid';
    expect(isNotRandomId(tooShortId)).toBe(true);
    expect(isNotRandomId(tooLongId)).toBe(true);
  });

  it('returns true for strings with invalid characters', () => {
    const invalidCharsId = 'ABCDEFG1l0O'; // Contains 'l', '0', and 'O' which are not in the unmistakableChars set
    expect(isNotRandomId(invalidCharsId, invalidCharsId.length)).toBe(true);
  });
});
