import { Components, registerComponent } from '../../../lib/vulcan-lib';
import React, { SetStateAction } from 'react';
import classNames from 'classnames';
import Tabs from '@material-ui/core/Tabs';
import Tab from '@material-ui/core/Tab';
import { commentExcerptFromHTML } from '../../../lib/editor/ellipsize'
import { useCurrentUser } from '../../common/withUser'
import { nofollowKarmaThreshold } from '../../../lib/publicSettings';
import type { ContentStyleType } from '../../common/ContentStyles';
import { VotingProps } from '../../votes/votingProps';
import type { ContentItemBody, ContentReplacedSubstringComponentInfo } from '../../common/ContentItemBody';
import { getVotingSystemByName } from '../../../lib/voting/votingSystems';

const styles = (theme: ThemeType): JssStyles => ({
  commentStyling: {
    maxWidth: "100%",
    overflowX: "hidden",
    overflowY: "hidden",
  },
  answerStyling: {
    maxWidth: "100%",
    overflowX: "hidden",
    overflowY: "hidden",
    '& .read-more-button a, & .read-more-button a:hover': {
      textShadow:"none",
      backgroundImage: "none"
    },
    marginBottom: ".5em"
  },
  doppelQuizIntro: {
    backgroundColor: theme.palette.greyAlpha(0.1),
    borderRadius: theme.borderRadius.small,
    padding: theme.spacing.unit,
  },
  doppelQuizHeader: {
    padding: 2*theme.spacing.unit,
    marginBottom: -theme.spacing.unit,
  },
  doppelQuizTabs: {
  },
  doppelQuizTab: {
    flexGrow: 1,
  },
  root: {
    position: "relative",
    '& .read-more-button': {
      fontSize: ".85em",
      color: theme.palette.grey[600]
    }
  },
  retracted: {
    textDecoration: "line-through",
  },
})

const CommentBody = ({
  comment,
  commentBodyRef,
  collapsed,
  truncated,
  postPage,
  voteProps,
  className,
  classes,
  potentialCommentsData,
}: {
  comment: CommentsList,
  commentBodyRef?: React.RefObject<ContentItemBody>|null,
  collapsed?: boolean,
  truncated?: boolean,
  postPage?: boolean,
  voteProps?: VotingProps<VoteableTypeClient>
  className?: string,
  classes: ClassesType,
  potentialCommentsData?: {
    potentialComments: {content: string, doppelId: string|null}[],
    activePotentialComment: number,
    setActivePotentialComment: React.Dispatch<SetStateAction<number>>,
    doppelCommentVote: React.ReactNode,
  },
}) => {
  const currentUser = useCurrentUser();
  const { ContentItemBody, CommentDeletedMetadata, ContentStyles, InlineReactSelectionWrapper } = Components
  const { html = "" } = comment.contents || {}

  const bodyClasses = classNames(
    className,
    !comment.answer && classes.commentStyling,
    comment.answer && classes.answerStyling,
    comment.retracted && classes.retracted,
  );

  if (comment.deleted) { return <CommentDeletedMetadata documentId={comment._id}/> }
  if (collapsed) { return null }

  const innerHtml = truncated ? commentExcerptFromHTML(comment, currentUser, postPage) : html

  let contentType: ContentStyleType;
  if (comment.answer) {
    contentType = 'answer';
  } else if (comment.debateResponse) {
    contentType = 'debateResponse';
  } else {
    contentType = 'comment';
  }
  
  const votingSystem = getVotingSystemByName(comment.votingSystem);
  let highlights: Record<string,ContentReplacedSubstringComponentInfo>|undefined = undefined;
  if (voteProps && votingSystem.getCommentHighlights) {
    highlights = votingSystem.getCommentHighlights({comment, voteProps});
  }

  const renderContent = (content: string) => (
    <ContentStyles contentType={contentType} className={classes.root}>
      <ContentItemBody
        ref={commentBodyRef ?? undefined}
        className={bodyClasses}
        dangerouslySetInnerHTML={{__html: content}}
        description={`comment ${comment._id}`}
        nofollow={(comment.user?.karma || 0) < nofollowKarmaThreshold.get()}
        replacedSubstrings={highlights}
      />
    </ContentStyles>
  );

  const tabContent = ({activePotentialComment, potentialComments, setActivePotentialComment, doppelCommentVote}:
    { activePotentialComment: number,
      potentialComments: {content: string}[],
      setActivePotentialComment: React.Dispatch<SetStateAction<number>>,
      doppelCommentVote: React.ReactNode
    }) => (
    <>
      <div className={classes.doppelQuizIntro}>
        <h3 className={classes.doppelQuizHeader}>Which of these 'comments' is the real one, and which generated by LM?</h3>
        {doppelCommentVote}
      </div>
      <Tabs
        value={activePotentialComment}
        onChange={(_event, newValue) => setActivePotentialComment(newValue)}
        className={classes.tabs}
      >
        {([0,1,2]).map((tabIndex) => (
          <Tab key={tabIndex} value={tabIndex} label={`Comment Candidate ${tabIndex + 1}`} className={classes.doppelQuizTab} />
        ))}
      </Tabs>
      {renderContent(potentialComments[activePotentialComment].content ?? innerHtml)}
    </>
  )

  if (votingSystem.name === "namesAttachedReactions" && voteProps) {
    return <InlineReactSelectionWrapper commentBodyRef={commentBodyRef} voteProps={voteProps} styling="comment" >
      {potentialCommentsData ? tabContent(potentialCommentsData) : renderContent(innerHtml)}
    </InlineReactSelectionWrapper>
  } else {
    return <>{potentialCommentsData ? tabContent(potentialCommentsData) : renderContent(innerHtml)}</>
  }
}

const CommentBodyComponent = registerComponent('CommentBody', CommentBody, {styles});

declare global {
  interface ComponentTypes {
    CommentBody: typeof CommentBodyComponent,
  }
}

