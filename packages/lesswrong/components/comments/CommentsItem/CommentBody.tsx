import { Components, registerComponent, useStyles } from '../../../lib/vulcan-lib';
import React, { SetStateAction } from 'react';
import classNames from 'classnames';
import Tabs from '@material-ui/core/Tabs';
import Tab from '@material-ui/core/Tab';
import { commentExcerptFromHTML } from '../../../lib/editor/ellipsize'
import { useCurrentUser } from '../../common/withUser'
import { nofollowKarmaThreshold } from '../../../lib/publicSettings';
import type { ContentStyleType } from '../../common/ContentStyles';
import { VotingProps } from '../../votes/votingProps';
import type { ContentItemBody, ContentReplacedSubstringComponentInfo } from '../../common/ContentItemBody';
import { getVotingSystemByName } from '../../../lib/voting/votingSystems';

const styles = (theme: ThemeType): JssStyles => ({
  commentStyling: {
    maxWidth: "100%",
    overflowX: "hidden",
    overflowY: "hidden",
  },
  answerStyling: {
    maxWidth: "100%",
    overflowX: "hidden",
    overflowY: "hidden",
    '& .read-more-button a, & .read-more-button a:hover': {
      textShadow:"none",
      backgroundImage: "none"
    },
    marginBottom: ".5em"
  },
  doppelQuizIntro: {
    backgroundColor: theme.palette.greyAlpha(0.1),
    borderRadius: theme.borderRadius.small,
    padding: theme.spacing.unit,
  },
  doppelQuizHeader: {
    padding: theme.spacing.unit,
    paddingLeft: theme.spacing.unit * 2,
    margin: 0,
  },
  doppelQuizTab: {
    flexGrow: 1,
    textTransform: "small-caps",
  },
  root: {
    position: "relative",
    '& .read-more-button': {
      fontSize: ".85em",
      color: theme.palette.grey[600]
    }
  },
  retracted: {
    textDecoration: "line-through",
  },
})

export type PotentialCommentsData = {
  potentialComments: {content: string|null, doppelId: string|null}[],
  activePotentialComment: number,
  setActivePotentialComment: React.Dispatch<SetStateAction<number>>,
  doppelCommentVote: React.ReactNode,
}


const Content = ({content, contentType, commentBodyRef, bodyClasses, comment, highlights}:
  { content: string,
    contentType: ContentStyleType,
    commentBodyRef?: React.RefObject<ContentItemBody>|null,
    bodyClasses: string,
    comment: CommentsList,
    highlights?: Record<string,ContentReplacedSubstringComponentInfo>,
  }) => {
    const { ContentStyles, ContentItemBody } = Components;
    const classes = useStyles(styles, "CommentBody");
    return <ContentStyles contentType={contentType} className={classes.root}>
      <ContentItemBody
        ref={commentBodyRef ?? undefined}
        className={bodyClasses}
        dangerouslySetInnerHTML={{__html: content}}
        description={`comment ${comment._id}`}
        nofollow={(comment.user?.karma || 0) < nofollowKarmaThreshold.get()}
        replacedSubstrings={highlights}
      />
    </ContentStyles>
};

const TabContent = ({doppelCommentVote, potentialComments, commentBodyRef, comment, bodyClasses, innerHtml, contentType, highlights}: PotentialCommentsData & {
  comment: CommentsList,
  contentType: ContentStyleType,
  bodyClasses: string,
  commentBodyRef?: React.RefObject<ContentItemBody>|null,
  innerHtml: string,
  highlights?: Record<string,ContentReplacedSubstringComponentInfo>,
}) => {
  const [activePotentialComment, setActivePotentialComment] = React.useState(0);
  const maxPotentialCommentLength = Math.max(...potentialComments.map(p => p.content?.length ?? 0));
  const classes = useStyles(styles, "CommentBody");
  return <>
    <div className={classes.doppelQuizIntro}>
      <h3 className={classes.doppelQuizHeader}>Which of these 'comments' is the real one, and which generated by LM?</h3>
      {maxPotentialCommentLength > 3_000 ? doppelCommentVote : null}
    </div>
    <Tabs
      value={activePotentialComment}
      onChange={(_event, newValue) => setActivePotentialComment(newValue)}
      className={classes.tabs}
    >
      {([0,1,2]).map((tabIndex) => (
        <Tab key={tabIndex} value={tabIndex} label={`Comment Candidate ${tabIndex + 1}`} className={classes.doppelQuizTab} />
      ))}
    </Tabs>
    <Content
      content={potentialComments[activePotentialComment].content ?? innerHtml}
      contentType={contentType}
      commentBodyRef={commentBodyRef}
      bodyClasses={bodyClasses}
      comment={comment}
      highlights={highlights}
    />
  </>
}

const CommentMainBody = ({potentialCommentsData, comment, contentType, bodyClasses, innerHtml, commentBodyRef, highlights}: {
  potentialCommentsData?: PotentialCommentsData,
  comment: CommentsList,
  contentType: ContentStyleType,
  bodyClasses: string,
  innerHtml: string,
  commentBodyRef?: React.RefObject<ContentItemBody>|null,
  highlights?: Record<string,ContentReplacedSubstringComponentInfo>,
}) =>
  potentialCommentsData
    ? <TabContent
        {...potentialCommentsData}
        comment={comment}
        contentType={contentType}
        bodyClasses={bodyClasses}
        innerHtml={innerHtml}
        highlights={highlights}
      />
    : <Content
        content={innerHtml}
        contentType={contentType}
        comment={comment}
        bodyClasses={bodyClasses}
        commentBodyRef={commentBodyRef}
        highlights={highlights}
      />

const CommentBody = ({
  comment,
  commentBodyRef,
  collapsed,
  truncated,
  postPage,
  voteProps,
  className,
  classes,
  potentialCommentsData,
}: {
  comment: CommentsList,
  commentBodyRef?: React.RefObject<ContentItemBody>|null,
  collapsed?: boolean,
  truncated?: boolean,
  postPage?: boolean,
  voteProps?: VotingProps<VoteableTypeClient>
  className?: string,
  classes: ClassesType,
  potentialCommentsData?: PotentialCommentsData,
}) => {
  const currentUser = useCurrentUser();
  const { ContentItemBody, CommentDeletedMetadata, ContentStyles, InlineReactSelectionWrapper } = Components
  const { html = "" } = comment.contents || {}

  const bodyClasses = classNames(
    className,
    !comment.answer && classes.commentStyling,
    comment.answer && classes.answerStyling,
    comment.retracted && classes.retracted,
  );

  if (comment.deleted) { return <CommentDeletedMetadata documentId={comment._id}/> }
  if (collapsed) { return null }

  const innerHtml = truncated ? commentExcerptFromHTML(comment, currentUser, postPage) : html

  let contentType: ContentStyleType;
  if (comment.answer) {
    contentType = 'answer';
  } else if (comment.debateResponse) {
    contentType = 'debateResponse';
  } else {
    contentType = 'comment';
  }
  
  const votingSystem = getVotingSystemByName(comment.votingSystem);
  let highlights: Record<string,ContentReplacedSubstringComponentInfo>|undefined = undefined;
  if (voteProps && votingSystem.getCommentHighlights) {
    highlights = votingSystem.getCommentHighlights({comment, voteProps});
  }

  if (votingSystem.name === "namesAttachedReactions" && voteProps) {
    return <InlineReactSelectionWrapper commentBodyRef={commentBodyRef} voteProps={voteProps} styling="comment" >
      <CommentMainBody
        potentialCommentsData={potentialCommentsData}
        comment={comment}
        contentType={contentType}
        bodyClasses={bodyClasses}
        innerHtml={innerHtml}
        commentBodyRef={commentBodyRef}
        highlights={highlights}
      />
    </InlineReactSelectionWrapper>
  } else {
    return <CommentMainBody
      potentialCommentsData={potentialCommentsData}
      comment={comment}
      contentType={contentType}
      bodyClasses={bodyClasses}
      innerHtml={innerHtml}
      commentBodyRef={commentBodyRef}
      highlights={highlights}
    />
  }
}

const CommentBodyComponent = registerComponent('CommentBody', CommentBody, {styles});

declare global {
  interface ComponentTypes {
    CommentBody: typeof CommentBodyComponent,
  }
}

