//
// GENERATED FILE
// Do not edit this file directly. Instead, start a server and run "npm run generate",
// which will cause this file to be regenerated. This file should nevertheless be
// checked in to version control.
//
// Contains Typescript signatures for database objects, generated by
// server/codegen/generateDbTypes.ts.
//
type AdvisorRequestsCollection = CollectionBase<"AdvisorRequests">;

interface DbAdvisorRequest extends DbObject {
  __collectionName?: "AdvisorRequests"
  userId: string
  interestedInMetaculus: boolean
  jobAds: any /*{"definitions":[{"blackbox":true}]}*/
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type BansCollection = CollectionBase<"Bans">;

interface DbBan extends DbObject {
  __collectionName?: "Bans"
  expirationDate: Date | null
  userId: string
  ip: string | null
  reason: string | null
  comment: string
  properties: any /*{"definitions":[{"blackbox":true}]}*/
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type BooksCollection = CollectionBase<"Books">;

interface DbBook extends DbObject {
  __collectionName?: "Books"
  postedAt: Date | null
  title: string | null
  subtitle: string | null
  tocTitle: string | null
  collectionId: string | null
  number: number | null
  postIds: Array<string>
  sequenceIds: Array<string>
  displaySequencesAsGrid: boolean | null
  hideProgressBar: boolean | null
  showChapters: boolean | null
  contents: EditableFieldContents
  contents_latest: string | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type ChaptersCollection = CollectionBase<"Chapters">;

interface DbChapter extends DbObject {
  __collectionName?: "Chapters"
  title: string | null
  subtitle: string | null
  number: number | null
  sequenceId: string | null
  postIds: Array<string>
  contents: EditableFieldContents
  contents_latest: string | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type CkEditorUserSessionsCollection = CollectionBase<"CkEditorUserSessions">;

interface DbCkEditorUserSession extends DbObject {
  __collectionName?: "CkEditorUserSessions"
  documentId: string
  userId: string
  endedAt: Date | null
  endedBy: string | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type ClientIdsCollection = CollectionBase<"ClientIds">;

interface DbClientId extends DbObject {
  __collectionName?: "ClientIds"
  clientId: string | null
  firstSeenReferrer: string | null
  firstSeenLandingPage: string | null
  userIds: Array<string> | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type CollectionsCollection = CollectionBase<"Collections">;

interface DbCollection extends DbObject {
  __collectionName?: "Collections"
  userId: string
  title: string | null
  slug: string | null
  gridImageId: string | null
  firstPageLink: string
  hideStartReadingButton: boolean | null
  noindex: boolean
  contents: EditableFieldContents
  contents_latest: string | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type CommentModeratorActionsCollection = CollectionBase<"CommentModeratorActions">;

interface DbCommentModeratorAction extends DbObject {
  __collectionName?: "CommentModeratorActions"
  commentId: string
  type: "downvotedCommentAlert"
  endedAt: Date | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type CommentsCollection = CollectionBase<"Comments">;

interface DbComment extends DbObject {
  __collectionName?: "Comments"
  parentCommentId: string | null
  topLevelCommentId: string | null
  postedAt: Date
  author: string | null
  postId: string | null
  tagId: string | null
  tagCommentType: "SUBFORUM" | "DISCUSSION"
  subforumStickyPriority: number | null
  userId: string
  userIP: string | null
  userAgent: string | null
  referrer: string | null
  authorIsUnreviewed: boolean
  answer: boolean
  parentAnswerId: string | null
  directChildrenCount: number
  descendentCount: number
  shortform: boolean | null
  shortformFrontpage: boolean
  nominatedForReview: string | null
  reviewingForReview: string | null
  lastSubthreadActivity: Date | null
  postVersion: string | null
  promoted: boolean | null
  promotedByUserId: string | null
  promotedAt: Date | null
  hideKarma: boolean | null
  legacy: boolean
  legacyId: string | null
  legacyPoll: boolean
  legacyParentId: string | null
  retracted: boolean
  deleted: boolean
  deletedPublic: boolean
  deletedReason: string | null
  deletedDate: Date | null
  deletedByUserId: string | null
  spam: boolean
  repliesBlockedUntil: Date | null
  needsReview: boolean | null
  reviewedByUserId: string | null
  hideAuthor: boolean
  moderatorHat: boolean
  hideModeratorHat: boolean | null
  isPinnedOnProfile: boolean
  title: string | null
  relevantTagIds: Array<string>
  debateResponse: boolean | null
  rejected: boolean
  modGPTAnalysis: string | null
  modGPTRecommendation: string | null
  rejectedReason: string | null
  rejectedByUserId: string | null
  af: boolean
  suggestForAlignmentUserIds: Array<string>
  reviewForAlignmentUserId: string | null
  afDate: Date | null
  moveToAlignmentUserId: string | null
  agentFoundationsId: string | null
  originalDialogueId: string | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
  contents: EditableFieldContents
  contents_latest: string | null
  pingbacks: any /*{"definitions":[{}]}*/
  voteCount: number
  baseScore: number
  extendedScore: any /*{"definitions":[{"type":"JSON"}]}*/
  score: number
  inactive: boolean
  afBaseScore: number | null
  afExtendedScore: any /*{"definitions":[{"type":"JSON"}]}*/
  afVoteCount: number | null
}

type ConversationsCollection = CollectionBase<"Conversations">;

interface DbConversation extends DbObject {
  __collectionName?: "Conversations"
  title: string | null
  participantIds: Array<string>
  latestActivity: Date | null
  af: boolean | null
  messageCount: number
  moderator: boolean | null
  archivedByIds: Array<string>
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type CronHistoriesCollection = CollectionBase<"CronHistories">;

interface DbCronHistory extends DbObject {
  __collectionName?: "CronHistories"
  intendedAt: Date
  name: string
  startedAt: Date
  finishedAt: Date | null
  result: any /*{"definitions":[{"blackbox":true}]}*/
}

type DatabaseMetadataCollection = CollectionBase<"DatabaseMetadata">;

interface DbDatabaseMetadata extends DbObject {
  __collectionName?: "DatabaseMetadata"
  name: string
  value: any /*{"definitions":[{"blackbox":true}]}*/
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type DebouncerEventsCollection = CollectionBase<"DebouncerEvents">;

interface DbDebouncerEvents extends DbObject {
  __collectionName?: "DebouncerEvents"
  name: string
  af: boolean | null
  dispatched: boolean
  failed: boolean | null
  delayTime: Date
  upperBoundTime: Date
  key: string
  pendingEvents: Array<string> | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type DialogueChecksCollection = CollectionBase<"DialogueChecks">;

interface DbDialogueCheck extends DbObject {
  __collectionName?: "DialogueChecks"
  userId: string
  targetUserId: string
  checked: boolean
  checkedAt: Date
  hideInRecommendations: boolean
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type DialogueMatchPreferencesCollection = CollectionBase<"DialogueMatchPreferences">;

interface DbDialogueMatchPreference extends DbObject {
  __collectionName?: "DialogueMatchPreferences"
  dialogueCheckId: string
  topicPreferences: Array<{
    text: string,
    preference: "Yes" | "No",
    commentSourceId: string | null,
  }>
  topicNotes: string
  syncPreference: "Yes" | "Meh" | "No"
  asyncPreference: "Yes" | "Meh" | "No"
  formatNotes: string
  calendlyLink: string | null
  generatedDialogueId: string | null
  deleted: boolean
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type DigestPostsCollection = CollectionBase<"DigestPosts">;

interface DbDigestPost extends DbObject {
  __collectionName?: "DigestPosts"
  digestId: string
  postId: string
  emailDigestStatus: string | null
  onsiteDigestStatus: string | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type DigestsCollection = CollectionBase<"Digests">;

interface DbDigest extends DbObject {
  __collectionName?: "Digests"
  num: number | null
  startDate: Date | null
  endDate: Date | null
  publishedDate: Date | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type ElectionCandidatesCollection = CollectionBase<"ElectionCandidates">;

interface DbElectionCandidate extends DbObject {
  __collectionName?: "ElectionCandidates"
  electionName: string
  name: string
  logoSrc: string
  href: string
  fundraiserLink: string | null
  gwwcLink: string | null
  gwwcId: string | null
  description: string
  userId: string
  postCount: number
  tagId: string | null
  isElectionFundraiser: boolean
  amountRaised: number | null
  targetAmount: number | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
  voteCount: number
  baseScore: number
  extendedScore: any /*{"definitions":[{"type":"JSON"}]}*/
  score: number
  inactive: boolean
  afBaseScore: number | null
  afExtendedScore: any /*{"definitions":[{"type":"JSON"}]}*/
  afVoteCount: number | null
}

type ElectionVotesCollection = CollectionBase<"ElectionVotes">;

interface DbElectionVote extends DbObject {
  __collectionName?: "ElectionVotes"
  electionName: string
  userId: string | null
  compareState: any /*{"definitions":[{"blackbox":true}]}*/
  vote: any /*{"definitions":[{"blackbox":true}]}*/
  submittedAt: Date | null
  submissionComments: any /*{"definitions":[{"blackbox":true}]}*/
  userExplanation: string | null
  userOtherComments: string | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type ElicitQuestionPredictionsCollection = CollectionBase<"ElicitQuestionPredictions">;

interface DbElicitQuestionPrediction extends DbObject {
  __collectionName?: "ElicitQuestionPredictions"
  prediction: number
  createdAt: Date
  notes: string | null
  creator: {
    _id: string,
    displayName: string,
    isQuestionCreator: boolean,
    sourceUserId: string | null,
  }
  userId: string | null
  sourceUrl: string | null
  sourceId: string | null
  binaryQuestionId: string
}

type ElicitQuestionsCollection = CollectionBase<"ElicitQuestions">;

interface DbElicitQuestion extends DbObject {
  __collectionName?: "ElicitQuestions"
  title: string
  notes: string | null
  resolution: string | null
  resolvesBy: Date
  createdAt: Date
}

type EmailTokensCollection = CollectionBase<"EmailTokens">;

interface DbEmailTokens extends DbObject {
  __collectionName?: "EmailTokens"
  token: string
  tokenType: string
  userId: string
  usedAt: Date | null
  params: any /*{"definitions":[{"blackbox":true}]}*/
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type FeaturedResourcesCollection = CollectionBase<"FeaturedResources">;

interface DbFeaturedResource extends DbObject {
  __collectionName?: "FeaturedResources"
  title: string
  body: string | null
  ctaText: string
  ctaUrl: string
  expiresAt: Date | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type GardenCodesCollection = CollectionBase<"GardenCodes">;

interface DbGardenCode extends DbObject {
  __collectionName?: "GardenCodes"
  code: string
  title: string
  userId: string
  slug: string
  startTime: Date | null
  endTime: Date
  fbLink: string | null
  type: string
  hidden: boolean
  deleted: boolean
  afOnly: boolean
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
  contents: EditableFieldContents
  contents_latest: string | null
  pingbacks: any /*{"definitions":[{}]}*/
}

type ImagesCollection = CollectionBase<"Images">;

interface DbImages extends DbObject {
  __collectionName?: "Images"
  originalUrl: string
  cdnHostedUrl: string
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type LWEventsCollection = CollectionBase<"LWEvents">;

interface DbLWEvent extends DbObject {
  __collectionName?: "LWEvents"
  userId: string | null
  name: string | null
  documentId: string | null
  important: boolean | null
  properties: any /*{"definitions":[{"blackbox":true}]}*/
  intercom: boolean | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type LegacyDataCollection = CollectionBase<"LegacyData">;

interface DbLegacyData extends DbObject {
  __collectionName?: "LegacyData"
  objectId: string
  collectionName: string
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type LocalgroupsCollection = CollectionBase<"Localgroups">;

interface DbLocalgroup extends DbObject {
  __collectionName?: "Localgroups"
  name: string | null
  nameInAnotherLanguage: string | null
  organizerIds: Array<string>
  lastActivity: Date | null
  types: Array<string>
  categories: Array<string> | null
  isOnline: boolean
  mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/
  googleLocation: any /*{"definitions":[{"blackbox":true}]}*/
  location: string | null
  contactInfo: string | null
  facebookLink: string | null
  facebookPageLink: string | null
  meetupLink: string | null
  slackLink: string | null
  website: string | null
  bannerImageId: string | null
  inactive: boolean
  deleted: boolean
  salesforceId: string | null
  contents: EditableFieldContents
  contents_latest: string | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type MessagesCollection = CollectionBase<"Messages">;

interface DbMessage extends DbObject {
  __collectionName?: "Messages"
  userId: string
  conversationId: string
  noEmail: boolean
  contents: EditableFieldContents
  contents_latest: string | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type MigrationsCollection = CollectionBase<"Migrations">;

interface DbMigration extends DbObject {
  __collectionName?: "Migrations"
  name: string
  started: Date
  finished: boolean
  succeeded: boolean
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type ModerationTemplatesCollection = CollectionBase<"ModerationTemplates">;

interface DbModerationTemplate extends DbObject {
  __collectionName?: "ModerationTemplates"
  name: string
  collectionName: "Messages" | "Comments" | "Rejections"
  order: number
  deleted: boolean
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
  contents: EditableFieldContents
  contents_latest: string | null
}

type ModeratorActionsCollection = CollectionBase<"ModeratorActions">;

interface DbModeratorAction extends DbObject {
  __collectionName?: "ModeratorActions"
  userId: string
  type: "rateLimitOnePerDay" | "rateLimitOnePerThreeDays" | "rateLimitOnePerWeek" | "rateLimitOnePerFortnight" | "rateLimitOnePerMonth" | "rateLimitThreeCommentsPerPost" | "recentlyDownvotedContentAlert" | "lowAverageKarmaCommentAlert" | "lowAverageKarmaPostAlert" | "negativeUserKarmaAlert" | "movedPostToDraft" | "sentModeratorMessage" | "manualFlag" | "votingPatternWarningDelivered" | "flaggedForNDMs" | "autoBlockedFromSendingDMs" | "rejectedPost" | "rejectedComment" | "potentialTargetedDownvoting"
  endedAt: Date | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type NotificationsCollection = CollectionBase<"Notifications">;

interface DbNotification extends DbObject {
  __collectionName?: "Notifications"
  userId: string
  documentId: string | null
  documentType: string | null
  extraData: any /*{"definitions":[{"blackbox":true}]}*/
  link: string | null
  title: string | null
  message: string
  type: string
  deleted: boolean
  viewed: boolean
  emailed: boolean
  waitingForBatch: boolean
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type PageCacheCollection = CollectionBase<"PageCache">;

interface DbPageCacheEntry extends DbObject {
  __collectionName?: "PageCache"
  path: string
  abTestGroups: any /*{"definitions":[{"blackbox":true}]}*/
  bundleHash: string
  renderedAt: Date
  expiresAt: Date
  ttlMs: number
  renderResult: {
    ssrBody: string,
    headers: Array<string>,
    serializedApolloState: string,
    serializedForeignApolloState: string,
    jssSheets: string,
    status: number,
    redirectUrl: string,
    relevantAbTestGroups: any /*{"definitions":[{"blackbox":true}]}*/,
    allAbTestGroups: any /*{"definitions":[{"blackbox":true}]}*/,
    themeOptions: any /*{"definitions":[{"blackbox":true}]}*/,
    renderedAt: Date,
    timings: any /*{"definitions":[{"blackbox":true}]}*/,
  }
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type PetrovDayLaunchsCollection = CollectionBase<"PetrovDayLaunchs">;

interface DbPetrovDayLaunch extends DbObject {
  __collectionName?: "PetrovDayLaunchs"
  launchCode: string
  hashedLaunchCode: string | null
  userId: string | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type PodcastEpisodesCollection = CollectionBase<"PodcastEpisodes">;

interface DbPodcastEpisode extends DbObject {
  __collectionName?: "PodcastEpisodes"
  podcastId: string
  title: string | null
  episodeLink: string | null
  externalEpisodeId: string | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type PodcastsCollection = CollectionBase<"Podcasts">;

interface DbPodcast extends DbObject {
  __collectionName?: "Podcasts"
  title: string | null
  applePodcastLink: string | null
  spotifyPodcastLink: string | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type PostEmbeddingsCollection = CollectionBase<"PostEmbeddings">;

interface DbPostEmbedding extends DbObject {
  __collectionName?: "PostEmbeddings"
  postId: string
  postHash: string
  lastGeneratedAt: Date
  model: string
  embeddings: Array<number>
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type PostRecommendationsCollection = CollectionBase<"PostRecommendations">;

interface DbPostRecommendation extends DbObject {
  __collectionName?: "PostRecommendations"
  userId: string | null
  clientId: string | null
  postId: string
  strategyName: string
  strategySettings: any /*{"definitions":[{"blackbox":true}]}*/
  recommendationCount: number
  lastRecommendedAt: Date
  clickedAt: Date | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type PostRelationsCollection = CollectionBase<"PostRelations">;

interface DbPostRelation extends DbObject {
  __collectionName?: "PostRelations"
  type: string
  sourcePostId: string
  targetPostId: string
  order: number | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type PostsCollection = CollectionBase<"Posts">;

interface DbPost extends DbObject {
  __collectionName?: "Posts"
  postedAt: Date
  modifiedAt: Date | null
  url: string | null
  postCategory: "post" | "linkpost" | "question"
  title: string
  slug: string
  viewCount: number
  lastCommentedAt: Date | null
  clickCount: number
  deletedDraft: boolean
  status: number
  isFuture: boolean
  sticky: boolean
  stickyPriority: number
  userIP: string | null
  userAgent: string | null
  referrer: string | null
  author: string | null
  userId: string
  question: boolean
  authorIsUnreviewed: boolean
  readTimeMinutesOverride: number | null
  submitToFrontpage: boolean
  hiddenRelatedQuestion: boolean
  originalPostRelationSourceId: string | null
  shortform: boolean
  canonicalSource: string | null
  nominationCount2018: number
  nominationCount2019: number
  reviewCount2018: number
  reviewCount2019: number
  reviewCount: number
  reviewVoteCount: number
  positiveReviewVoteCount: number
  reviewVoteScoreAF: number
  reviewVotesAF: Array<number>
  reviewVoteScoreHighKarma: number
  reviewVotesHighKarma: Array<number>
  reviewVoteScoreAllKarma: number
  reviewVotesAllKarma: Array<number>
  finalReviewVoteScoreHighKarma: number
  finalReviewVotesHighKarma: Array<number>
  finalReviewVoteScoreAllKarma: number
  finalReviewVotesAllKarma: Array<number>
  finalReviewVoteScoreAF: number
  finalReviewVotesAF: Array<number>
  lastCommentPromotedAt: Date | null
  tagRelevance: any /*{"definitions":[{"blackbox":true}]}*/
  noIndex: boolean
  rsvps: Array<{
    name: string,
    email: string,
    nonPublic: boolean,
    response: "yes" | "maybe" | "no",
    userId: string | null,
    createdAt: Date,
  }> | null
  activateRSVPs: boolean | null
  nextDayReminderSent: boolean
  onlyVisibleToLoggedIn: boolean
  onlyVisibleToEstablishedAccounts: boolean
  hideFromRecentDiscussions: boolean
  votingSystem: string | null
  podcastEpisodeId: string | null
  forceAllowType3Audio: boolean
  legacy: boolean
  legacyId: string | null
  legacySpam: boolean
  feedId: string | null
  feedLink: string | null
  curatedDate: Date | null
  metaDate: Date | null
  suggestForCuratedUserIds: Array<string> | null
  frontpageDate: Date | null
  collectionTitle: string | null
  coauthorStatuses: Array<{
    userId: string,
    confirmed: boolean,
    requested: boolean,
  }> | null
  hasCoauthorPermission: boolean
  socialPreviewImageId: string | null
  socialPreviewImageAutoUrl: string | null
  socialPreview: {
    imageId: string | null,
    text: string | null,
  } | null
  fmCrosspost: {
    isCrosspost: boolean,
    hostedHere: boolean | null,
    foreignPostId: string | null,
  }
  canonicalSequenceId: string | null
  canonicalCollectionSlug: string | null
  canonicalBookId: string | null
  canonicalNextPostSlug: string | null
  canonicalPrevPostSlug: string | null
  unlisted: boolean
  disableRecommendation: boolean
  defaultRecommendation: boolean
  hideFromPopularComments: boolean
  draft: boolean
  wasEverUndrafted: boolean
  meta: boolean
  hideFrontpageComments: boolean
  maxBaseScore: number
  scoreExceeded2Date: Date | null
  scoreExceeded30Date: Date | null
  scoreExceeded45Date: Date | null
  scoreExceeded75Date: Date | null
  scoreExceeded125Date: Date | null
  scoreExceeded200Date: Date | null
  bannedUserIds: Array<string> | null
  commentsLocked: boolean | null
  commentsLockedToAccountsCreatedAfter: Date | null
  organizerIds: Array<string>
  groupId: string | null
  eventType: string | null
  isEvent: boolean
  reviewedByUserId: string | null
  reviewForCuratedUserId: string | null
  startTime: Date | null
  localStartTime: Date | null
  endTime: Date | null
  localEndTime: Date | null
  eventRegistrationLink: string | null
  joinEventLink: string | null
  onlineEvent: boolean
  globalEvent: boolean
  mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/
  googleLocation: any /*{"definitions":[{"blackbox":true}]}*/
  location: string | null
  contactInfo: string | null
  facebookLink: string | null
  meetupLink: string | null
  website: string | null
  eventImageId: string | null
  types: Array<string> | null
  metaSticky: boolean
  sharingSettings: any /*{"definitions":[{"blackbox":true}]}*/
  shareWithUsers: Array<string>
  linkSharingKey: string | null
  linkSharingKeyUsedBy: Array<string> | null
  commentSortOrder: string | null
  hideAuthor: boolean
  sideCommentsCache: any /*{"definitions":[{}]}*/
  sideCommentVisibility: string | null
  moderationStyle: string | null
  ignoreRateLimits: boolean | null
  hideCommentKarma: boolean
  commentCount: number
  topLevelCommentCount: number
  criticismTipsDismissed: boolean | null
  debate: boolean
  collabEditorDialogue: boolean
  mostRecentPublishedDialogueResponseDate: Date | null
  rejected: boolean
  rejectedReason: string | null
  rejectedByUserId: string | null
  subforumTagId: string | null
  af: boolean
  afDate: Date | null
  afCommentCount: number
  afLastCommentedAt: Date | null
  afSticky: boolean
  suggestForAlignmentUserIds: Array<string>
  reviewForAlignmentUserId: string | null
  agentFoundationsId: string | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
  contents: EditableFieldContents
  contents_latest: string | null
  pingbacks: any /*{"definitions":[{}]}*/
  moderationGuidelines: EditableFieldContents
  moderationGuidelines_latest: string | null
  customHighlight: EditableFieldContents
  customHighlight_latest: string | null
  voteCount: number
  baseScore: number
  extendedScore: any /*{"definitions":[{"type":"JSON"}]}*/
  score: number
  inactive: boolean
  afBaseScore: number | null
  afExtendedScore: any /*{"definitions":[{"type":"JSON"}]}*/
  afVoteCount: number | null
}

type RSSFeedsCollection = CollectionBase<"RSSFeeds">;

interface DbRSSFeed extends DbObject {
  __collectionName?: "RSSFeeds"
  userId: string
  ownedByUser: boolean
  displayFullContent: boolean
  nickname: string
  url: string
  status: string | null
  rawFeed: any /*{"definitions":[{}]}*/
  setCanonicalUrl: boolean
  importAsDraft: boolean
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type ReadStatusesCollection = CollectionBase<"ReadStatuses">;

interface DbReadStatus extends DbObject {
  __collectionName?: "ReadStatuses"
  postId: string | null
  tagId: string | null
  userId: string
  isRead: boolean
  lastUpdated: Date
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type ReportsCollection = CollectionBase<"Reports">;

interface DbReport extends DbObject {
  __collectionName?: "Reports"
  userId: string
  reportedUserId: string | null
  commentId: string | null
  postId: string | null
  link: string | null
  claimedUserId: string | null
  description: string | null
  closedAt: Date | null
  markedAsSpam: boolean | null
  reportedAsSpam: boolean | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type ReviewVotesCollection = CollectionBase<"ReviewVotes">;

interface DbReviewVote extends DbObject {
  __collectionName?: "ReviewVotes"
  userId: string
  postId: string
  qualitativeScore: number
  quadraticScore: number
  comment: string | null
  year: string
  dummy: boolean
  reactions: Array<string> | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type RevisionsCollection = CollectionBase<"Revisions">;

interface DbRevision extends DbObject {
  __collectionName?: "Revisions"
  documentId: string | null
  collectionName: CollectionNameString
  fieldName: string | null
  editedAt: Date | null
  autosaveTimeoutStart: Date | null
  updateType: "initial" | "patch" | "minor" | "major" | null
  version: string
  commitMessage: string | null
  userId: string | null
  draft: boolean | null
  originalContents: {
    type: string,
    data: string,
  } | null
  html: string | null
  wordCount: number | null
  changeMetrics: any /*{"definitions":[{"blackbox":true}]}*/
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
  voteCount: number
  baseScore: number
  extendedScore: any /*{"definitions":[{"type":"JSON"}]}*/
  score: number
  inactive: boolean
  afBaseScore: number | null
  afExtendedScore: any /*{"definitions":[{"type":"JSON"}]}*/
  afVoteCount: number | null
}

type SequencesCollection = CollectionBase<"Sequences">;

interface DbSequence extends DbObject {
  __collectionName?: "Sequences"
  userId: string
  title: string | null
  gridImageId: string | null
  bannerImageId: string | null
  curatedOrder: number | null
  userProfileOrder: number | null
  draft: boolean
  isDeleted: boolean
  canonicalCollectionSlug: string | null
  hidden: boolean
  hideFromAuthorPage: boolean
  noindex: boolean
  af: boolean
  contents: EditableFieldContents
  contents_latest: string | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type SessionsCollection = CollectionBase<"Sessions">;

interface DbSession extends DbObject {
  __collectionName?: "Sessions"
  session: any /*{"definitions":[{"blackbox":true}]}*/
  expires: Date | null
  lastModified: Date | null
}

type SpotlightsCollection = CollectionBase<"Spotlights">;

interface DbSpotlight extends DbObject {
  __collectionName?: "Spotlights"
  documentId: string
  documentType: SpotlightDocumentType
  position: number
  duration: number
  customTitle: string | null
  customSubtitle: string | null
  headerTitle: string | null
  headerTitleLeftColor: string | null
  headerTitleRightColor: string | null
  lastPromotedAt: Date
  draft: boolean
  showAuthor: boolean
  imageFade: boolean
  spotlightImageId: string | null
  spotlightDarkImageId: string | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
  description: EditableFieldContents
  description_latest: string | null
}

type SubscriptionsCollection = CollectionBase<"Subscriptions">;

interface DbSubscription extends DbObject {
  __collectionName?: "Subscriptions"
  userId: string
  state: "subscribed" | "suppressed"
  documentId: string | null
  collectionName: CollectionNameString
  deleted: boolean
  type: "newComments" | "newShortform" | "newPosts" | "newRelatedQuestions" | "newEvents" | "newReplies" | "newTagPosts" | "newDebateComments" | "newDialogueMessages" | "newPublishedDialogueMessages"
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type TagFlagsCollection = CollectionBase<"TagFlags">;

interface DbTagFlag extends DbObject {
  __collectionName?: "TagFlags"
  name: string
  deleted: boolean
  slug: string
  order: number | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
  contents: EditableFieldContents
  contents_latest: string | null
}

type TagRelsCollection = CollectionBase<"TagRels">;

interface DbTagRel extends DbObject {
  __collectionName?: "TagRels"
  tagId: string
  postId: string
  deleted: boolean
  userId: string | null
  backfilled: boolean
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
  voteCount: number
  baseScore: number
  extendedScore: any /*{"definitions":[{"type":"JSON"}]}*/
  score: number
  inactive: boolean
  afBaseScore: number | null
  afExtendedScore: any /*{"definitions":[{"type":"JSON"}]}*/
  afVoteCount: number | null
}

type TagsCollection = CollectionBase<"Tags">;

interface DbTag extends DbObject {
  __collectionName?: "Tags"
  name: string
  shortName: string | null
  subtitle: string | null
  slug: string
  oldSlugs: Array<string> | null
  core: boolean
  isPostType: boolean
  suggestedAsFilter: boolean
  defaultOrder: number
  descriptionTruncationCount: number
  postCount: number
  userId: string | null
  adminOnly: boolean
  canEditUserIds: Array<string> | null
  charsAdded: number | null
  charsRemoved: number | null
  deleted: boolean
  lastCommentedAt: Date | null
  lastSubforumCommentAt: Date | null
  needsReview: boolean
  reviewedByUserId: string | null
  wikiGrade: number
  wikiOnly: boolean
  bannerImageId: string | null
  squareImageId: string | null
  tagFlagsIds: Array<string>
  lesswrongWikiImportRevision: string | null
  lesswrongWikiImportSlug: string | null
  lesswrongWikiImportCompleted: boolean | null
  htmlWithContributorAnnotations: string | null
  contributionStats: any /*{"definitions":[{"blackbox":true}]}*/
  introSequenceId: string | null
  postsDefaultSortOrder: string | null
  canVoteOnRels: Array<"userOwns" | "userOwnsOnlyUpvote" | "guests" | "members" | "admins" | "sunshineRegiment" | "alignmentForumAdmins" | "alignmentForum" | "alignmentVoters" | "podcasters" | "canBypassPostRateLimit" | "trustLevel1" | "canModeratePersonal" | "canSuggestCuration" | "debaters" | "realAdmins"> | null
  isSubforum: boolean
  subforumModeratorIds: Array<string>
  subforumIntroPostId: string | null
  parentTagId: string | null
  subTagIds: Array<string>
  autoTagModel: string | null
  autoTagPrompt: string | null
  noindex: boolean
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
  description: EditableFieldContents
  description_latest: string | null
  subforumWelcomeText: EditableFieldContents
  subforumWelcomeText_latest: string | null
  moderationGuidelines: EditableFieldContents
  moderationGuidelines_latest: string | null
}

type TypingIndicatorsCollection = CollectionBase<"TypingIndicators">;

interface DbTypingIndicator extends DbObject {
  __collectionName?: "TypingIndicators"
  userId: string
  documentId: string
  lastUpdated: Date
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type UserActivitiesCollection = CollectionBase<"UserActivities">;

interface DbUserActivity extends DbObject {
  __collectionName?: "UserActivities"
  visitorId: string
  type: "userId" | "clientId"
  startDate: Date
  endDate: Date
  activityArray: Array<number>
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type UserMostValuablePostsCollection = CollectionBase<"UserMostValuablePosts">;

interface DbUserMostValuablePost extends DbObject {
  __collectionName?: "UserMostValuablePosts"
  userId: string
  postId: string
  deleted: boolean
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type UserRateLimitsCollection = CollectionBase<"UserRateLimits">;

interface DbUserRateLimit extends DbObject {
  __collectionName?: "UserRateLimits"
  userId: string
  type: "allComments" | "allPosts"
  intervalUnit: "minutes" | "hours" | "days" | "weeks"
  intervalLength: number
  actionsPerInterval: number
  endedAt: Date | null
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type UserTagRelsCollection = CollectionBase<"UserTagRels">;

interface DbUserTagRel extends DbObject {
  __collectionName?: "UserTagRels"
  tagId: string | null
  userId: string
  subforumLastVisitedAt: Date | null
  subforumShowUnreadInSidebar: boolean
  subforumEmailNotifications: boolean
  subforumHideIntroPost: boolean
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

type UsersCollection = CollectionBase<"Users">;

interface DbUser extends DbObject {
  __collectionName?: "Users"
  username: string | null
  emails: Array<any /*{"definitions":[{}]}*/> | null
  isAdmin: boolean
  profile: any /*{"definitions":[{"blackbox":true}]}*/
  services: any /*{"definitions":[{"blackbox":true}]}*/
  displayName: string | null
  previousDisplayName: string | null
  email: string | null
  slug: string | null
  noindex: boolean
  groups: Array<string> | null
  lwWikiImport: boolean | null
  theme: {
    name: "default" | "dark" | "auto" | null,
    siteThemeOverride: any /*{"definitions":[{"blackbox":true}]}*/,
  }
  lastUsedTimezone: string | null
  whenConfirmationEmailSent: Date | null
  legacy: boolean
  commentSorting: string | null
  sortDraftsBy: string | null
  reactPaletteStyle: "listView" | "gridView"
  noKibitz: boolean | null
  showHideKarmaOption: boolean | null
  showPostAuthorCard: boolean | null
  hideIntercom: boolean
  markDownPostEditor: boolean
  hideElicitPredictions: boolean
  hideAFNonMemberInitialWarning: boolean
  noSingleLineComments: boolean
  noCollapseCommentsPosts: boolean
  noCollapseCommentsFrontpage: boolean
  hideCommunitySection: boolean
  expandedFrontpageSections: {
    community: boolean | null,
    recommendations: boolean | null,
    quickTakes: boolean | null,
    quickTakesCommunity: boolean | null,
    popularComments: boolean | null,
  } | null
  showCommunityInRecentDiscussion: boolean
  hidePostsRecommendations: boolean
  petrovOptOut: boolean
  acceptedTos: boolean
  hideNavigationSidebar: boolean | null
  currentFrontpageFilter: string | null
  frontpageFilterSettings: any /*{"definitions":[{"blackbox":true}]}*/
  hideFrontpageFilterSettingsDesktop: boolean | null
  allPostsTimeframe: string | null
  allPostsFilter: string | null
  allPostsSorting: string | null
  allPostsShowLowKarma: boolean | null
  allPostsIncludeEvents: boolean | null
  allPostsHideCommunity: boolean | null
  allPostsOpenSettings: boolean | null
  draftsListSorting: string | null
  draftsListShowArchived: boolean | null
  draftsListShowShared: boolean | null
  lastNotificationsCheck: Date | null
  karma: number
  goodHeartTokens: number | null
  moderationStyle: string | null
  moderatorAssistance: boolean | null
  collapseModerationGuidelines: boolean | null
  bannedUserIds: Array<string> | null
  bannedPersonalUserIds: Array<string> | null
  bookmarkedPostsMetadata: Array<any /*{"definitions":[{}]}*/>
  hiddenPostsMetadata: Array<any /*{"definitions":[{}]}*/>
  legacyId: string | null
  deleted: boolean
  voteBanned: boolean | null
  nullifyVotes: boolean | null
  deleteContent: boolean | null
  banned: Date | null
  auto_subscribe_to_my_posts: boolean
  auto_subscribe_to_my_comments: boolean
  autoSubscribeAsOrganizer: boolean
  notificationCommentsOnSubscribedPost: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationShortformContent: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationRepliesToMyComments: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationRepliesToSubscribedComments: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationSubscribedUserPost: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationPostsInGroups: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationSubscribedTagPost: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationPrivateMessage: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationSharedWithMe: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationAlignmentSubmissionApproved: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationEventInRadius: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationKarmaPowersGained: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationRSVPs: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationGroupAdministration: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationCommentsOnDraft: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationPostsNominatedReview: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationSubforumUnread: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationNewMention: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationDialogueMessages: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationPublishedDialogueMessages: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationAddedAsCoauthor: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationDebateCommentsOnSubscribedPost: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationDebateReplies: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationDialogueMatch: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  notificationNewDialogueChecks: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  hideDialogueFacilitation: boolean
  notificationAutoArchiveDialogue: {
    channel: "none" | "onsite" | "email" | "both",
    batchingFrequency: "realtime" | "daily" | "weekly",
    timeOfDayGMT: number,
    dayOfWeekGMT: string,
  }
  revealChecksToAdmins: boolean
  optedInToDialogueFacilitation: boolean
  showDialoguesList: boolean
  showMyDialogues: boolean
  showMatches: boolean
  showRecommendedPartners: boolean
  hideActiveDialogueUsers: boolean
  karmaChangeNotifierSettings: {
    updateFrequency: "disabled" | "daily" | "weekly" | "realtime",
    timeOfDayGMT: number,
    dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    showNegativeKarma: boolean,
  }
  karmaChangeLastOpened: Date | null
  karmaChangeBatchStart: Date | null
  givingSeasonNotifyForVoting: boolean
  emailSubscribedToCurated: boolean | null
  subscribedToDigest: boolean
  unsubscribeFromAll: boolean | null
  hideSubscribePoke: boolean
  hideMeetupsPoke: boolean
  hideHomeRHS: boolean
  frontpagePostCount: number
  sequenceCount: number
  sequenceDraftCount: number
  mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/
  googleLocation: any /*{"definitions":[{"blackbox":true}]}*/
  location: string | null
  mapLocation: any /*{"definitions":[{"blackbox":true}]}*/
  mapLocationSet: boolean | null
  mapMarkerText: string | null
  htmlMapMarkerText: string | null
  nearbyEventsNotifications: boolean
  nearbyEventsNotificationsLocation: any /*{"definitions":[{"blackbox":true}]}*/
  nearbyEventsNotificationsMongoLocation: any /*{"definitions":[{"blackbox":true}]}*/
  nearbyEventsNotificationsRadius: number | null
  nearbyPeopleNotificationThreshold: number | null
  hideFrontpageMap: boolean | null
  hideTaggingProgressBar: boolean | null
  hideFrontpageBookAd: boolean | null
  hideFrontpageBook2019Ad: boolean | null
  hideFrontpageBook2020Ad: boolean | null
  sunshineNotes: string
  sunshineFlagged: boolean
  needsReview: boolean
  sunshineSnoozed: boolean
  snoozedUntilContentCount: number | null
  reviewedByUserId: string | null
  reviewedAt: Date | null
  afKarma: number
  voteCount: number | null
  smallUpvoteCount: number | null
  smallDownvoteCount: number | null
  bigUpvoteCount: number | null
  bigDownvoteCount: number | null
  voteReceivedCount: number | null
  smallUpvoteReceivedCount: number | null
  smallDownvoteReceivedCount: number | null
  bigUpvoteReceivedCount: number | null
  bigDownvoteReceivedCount: number | null
  usersContactedBeforeReview: Array<string> | null
  fullName: string | null
  shortformFeedId: string | null
  viewUnreviewedComments: boolean | null
  partiallyReadSequences: Array<{
    sequenceId: string,
    collectionId: string,
    lastReadPostId: string,
    nextPostId: string,
    numRead: number,
    numTotal: number,
    lastReadTime: Date,
  }> | null
  beta: boolean | null
  reviewVotesQuadratic: boolean | null
  reviewVotesQuadratic2019: boolean | null
  reviewVotesQuadratic2020: boolean | null
  petrovPressedButtonDate: Date | null
  petrovLaunchCodeDate: Date | null
  defaultToCKEditor: boolean | null
  signUpReCaptchaRating: number | null
  oldSlugs: Array<string> | null
  noExpandUnreadCommentsReview: boolean
  postCount: number
  maxPostCount: number
  commentCount: number
  maxCommentCount: number
  tagRevisionCount: number
  abTestKey: string
  abTestOverrides: any /*{"definitions":[{"type":"JSON","blackbox":true}]}*/
  reenableDraftJs: boolean | null
  walledGardenInvite: boolean | null
  hideWalledGardenUI: boolean | null
  walledGardenPortalOnboarded: boolean | null
  taggingDashboardCollapsed: boolean | null
  usernameUnset: boolean
  paymentEmail: string | null
  paymentInfo: string | null
  profileImageId: string | null
  jobTitle: string | null
  organization: string | null
  careerStage: Array<string> | null
  website: string | null
  fmCrosspostUserId: string | null
  linkedinProfileURL: string | null
  facebookProfileURL: string | null
  twitterProfileURL: string | null
  githubProfileURL: string | null
  profileTagIds: Array<string>
  organizerOfGroupIds: Array<string>
  programParticipation: Array<string> | null
  postingDisabled: boolean | null
  allCommentingDisabled: boolean | null
  commentingOnOtherUsersDisabled: boolean | null
  conversationsDisabled: boolean | null
  acknowledgedNewUserGuidelines: boolean | null
  subforumPreferredLayout: "card" | "list" | null
  experiencedIn: Array<string> | null
  interestedIn: Array<string> | null
  allowDatadogSessionReplay: boolean
  afPostCount: number
  afCommentCount: number
  afSequenceCount: number
  afSequenceDraftCount: number
  reviewForAlignmentForumUserId: string | null
  afApplicationText: string | null
  afSubmittedApplication: boolean | null
  givingSeason2023DonatedFlair: boolean
  givingSeason2023VotedFlair: boolean
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
  moderationGuidelines: EditableFieldContents
  moderationGuidelines_latest: string | null
  howOthersCanHelpMe: EditableFieldContents
  howOthersCanHelpMe_latest: string | null
  howICanHelpOthers: EditableFieldContents
  howICanHelpOthers_latest: string | null
  biography: EditableFieldContents
  biography_latest: string | null
  recommendationSettings: {
    frontpage: {
      method: string,
      count: number,
      scoreOffset: number,
      scoreExponent: number,
      personalBlogpostModifier: number,
      frontpageModifier: number,
      curatedModifier: number,
      onlyUnread: boolean,
    },
    frontpageEA: {
      method: string,
      count: number,
      scoreOffset: number,
      scoreExponent: number,
      personalBlogpostModifier: number,
      frontpageModifier: number,
      curatedModifier: number,
      onlyUnread: boolean,
    },
    recommendationspage: {
      method: string,
      count: number,
      scoreOffset: number,
      scoreExponent: number,
      personalBlogpostModifier: number,
      frontpageModifier: number,
      curatedModifier: number,
      onlyUnread: boolean,
    },
  } | null
}

type VotesCollection = CollectionBase<"Votes">;

interface DbVote extends DbObject {
  __collectionName?: "Votes"
  documentId: string
  collectionName: CollectionNameString
  userId: string
  authorIds: Array<string> | null
  voteType: string
  extendedVoteType: any /*{"definitions":[{"type":"JSON"}]}*/
  power: number
  afPower: number | null
  cancelled: boolean
  isUnvote: boolean
  votedAt: Date
  documentIsAf: boolean
  silenceNotification: boolean
  createdAt: Date
  legacyData: any /*{"definitions":[{"blackbox":true}]}*/
}

interface CollectionsByName {
  AdvisorRequests: AdvisorRequestsCollection
  Bans: BansCollection
  Books: BooksCollection
  Chapters: ChaptersCollection
  CkEditorUserSessions: CkEditorUserSessionsCollection
  ClientIds: ClientIdsCollection
  Collections: CollectionsCollection
  CommentModeratorActions: CommentModeratorActionsCollection
  Comments: CommentsCollection
  Conversations: ConversationsCollection
  CronHistories: CronHistoriesCollection
  DatabaseMetadata: DatabaseMetadataCollection
  DebouncerEvents: DebouncerEventsCollection
  DialogueChecks: DialogueChecksCollection
  DialogueMatchPreferences: DialogueMatchPreferencesCollection
  DigestPosts: DigestPostsCollection
  Digests: DigestsCollection
  ElectionCandidates: ElectionCandidatesCollection
  ElectionVotes: ElectionVotesCollection
  ElicitQuestionPredictions: ElicitQuestionPredictionsCollection
  ElicitQuestions: ElicitQuestionsCollection
  EmailTokens: EmailTokensCollection
  FeaturedResources: FeaturedResourcesCollection
  GardenCodes: GardenCodesCollection
  Images: ImagesCollection
  LWEvents: LWEventsCollection
  LegacyData: LegacyDataCollection
  Localgroups: LocalgroupsCollection
  Messages: MessagesCollection
  Migrations: MigrationsCollection
  ModerationTemplates: ModerationTemplatesCollection
  ModeratorActions: ModeratorActionsCollection
  Notifications: NotificationsCollection
  PageCache: PageCacheCollection
  PetrovDayLaunchs: PetrovDayLaunchsCollection
  PodcastEpisodes: PodcastEpisodesCollection
  Podcasts: PodcastsCollection
  PostEmbeddings: PostEmbeddingsCollection
  PostRecommendations: PostRecommendationsCollection
  PostRelations: PostRelationsCollection
  Posts: PostsCollection
  RSSFeeds: RSSFeedsCollection
  ReadStatuses: ReadStatusesCollection
  Reports: ReportsCollection
  ReviewVotes: ReviewVotesCollection
  Revisions: RevisionsCollection
  Sequences: SequencesCollection
  Sessions: SessionsCollection
  Spotlights: SpotlightsCollection
  Subscriptions: SubscriptionsCollection
  TagFlags: TagFlagsCollection
  TagRels: TagRelsCollection
  Tags: TagsCollection
  TypingIndicators: TypingIndicatorsCollection
  UserActivities: UserActivitiesCollection
  UserMostValuablePosts: UserMostValuablePostsCollection
  UserRateLimits: UserRateLimitsCollection
  UserTagRels: UserTagRelsCollection
  Users: UsersCollection
  Votes: VotesCollection
}

interface ObjectsByCollectionName {
  AdvisorRequests: DbAdvisorRequest
  Bans: DbBan
  Books: DbBook
  Chapters: DbChapter
  CkEditorUserSessions: DbCkEditorUserSession
  ClientIds: DbClientId
  Collections: DbCollection
  CommentModeratorActions: DbCommentModeratorAction
  Comments: DbComment
  Conversations: DbConversation
  CronHistories: DbCronHistory
  DatabaseMetadata: DbDatabaseMetadata
  DebouncerEvents: DbDebouncerEvents
  DialogueChecks: DbDialogueCheck
  DialogueMatchPreferences: DbDialogueMatchPreference
  DigestPosts: DbDigestPost
  Digests: DbDigest
  ElectionCandidates: DbElectionCandidate
  ElectionVotes: DbElectionVote
  ElicitQuestionPredictions: DbElicitQuestionPrediction
  ElicitQuestions: DbElicitQuestion
  EmailTokens: DbEmailTokens
  FeaturedResources: DbFeaturedResource
  GardenCodes: DbGardenCode
  Images: DbImages
  LWEvents: DbLWEvent
  LegacyData: DbLegacyData
  Localgroups: DbLocalgroup
  Messages: DbMessage
  Migrations: DbMigration
  ModerationTemplates: DbModerationTemplate
  ModeratorActions: DbModeratorAction
  Notifications: DbNotification
  PageCache: DbPageCacheEntry
  PetrovDayLaunchs: DbPetrovDayLaunch
  PodcastEpisodes: DbPodcastEpisode
  Podcasts: DbPodcast
  PostEmbeddings: DbPostEmbedding
  PostRecommendations: DbPostRecommendation
  PostRelations: DbPostRelation
  Posts: DbPost
  RSSFeeds: DbRSSFeed
  ReadStatuses: DbReadStatus
  Reports: DbReport
  ReviewVotes: DbReviewVote
  Revisions: DbRevision
  Sequences: DbSequence
  Sessions: DbSession
  Spotlights: DbSpotlight
  Subscriptions: DbSubscription
  TagFlags: DbTagFlag
  TagRels: DbTagRel
  Tags: DbTag
  TypingIndicators: DbTypingIndicator
  UserActivities: DbUserActivity
  UserMostValuablePosts: DbUserMostValuablePost
  UserRateLimits: DbUserRateLimit
  UserTagRels: DbUserTagRel
  Users: DbUser
  Votes: DbVote
}

interface ObjectsByTypeName {
  AdvisorRequest: DbAdvisorRequest
  Ban: DbBan
  Book: DbBook
  Chapter: DbChapter
  CkEditorUserSession: DbCkEditorUserSession
  ClientId: DbClientId
  Collection: DbCollection
  CommentModeratorAction: DbCommentModeratorAction
  Comment: DbComment
  Conversation: DbConversation
  CronHistory: DbCronHistory
  DatabaseMetadata: DbDatabaseMetadata
  DebouncerEvents: DbDebouncerEvents
  DialogueCheck: DbDialogueCheck
  DialogueMatchPreference: DbDialogueMatchPreference
  DigestPost: DbDigestPost
  Digest: DbDigest
  ElectionCandidate: DbElectionCandidate
  ElectionVote: DbElectionVote
  ElicitQuestionPrediction: DbElicitQuestionPrediction
  ElicitQuestion: DbElicitQuestion
  EmailTokens: DbEmailTokens
  FeaturedResource: DbFeaturedResource
  GardenCode: DbGardenCode
  Images: DbImages
  LWEvent: DbLWEvent
  LegacyData: DbLegacyData
  Localgroup: DbLocalgroup
  Message: DbMessage
  Migration: DbMigration
  ModerationTemplate: DbModerationTemplate
  ModeratorAction: DbModeratorAction
  Notification: DbNotification
  PageCacheEntry: DbPageCacheEntry
  PetrovDayLaunch: DbPetrovDayLaunch
  PodcastEpisode: DbPodcastEpisode
  Podcast: DbPodcast
  PostEmbedding: DbPostEmbedding
  PostRecommendation: DbPostRecommendation
  PostRelation: DbPostRelation
  Post: DbPost
  RSSFeed: DbRSSFeed
  ReadStatus: DbReadStatus
  Report: DbReport
  ReviewVote: DbReviewVote
  Revision: DbRevision
  Sequence: DbSequence
  Session: DbSession
  Spotlight: DbSpotlight
  Subscription: DbSubscription
  TagFlag: DbTagFlag
  TagRel: DbTagRel
  Tag: DbTag
  TypingIndicator: DbTypingIndicator
  UserActivity: DbUserActivity
  UserMostValuablePost: DbUserMostValuablePost
  UserRateLimit: DbUserRateLimit
  UserTagRel: DbUserTagRel
  User: DbUser
  Vote: DbVote
}

