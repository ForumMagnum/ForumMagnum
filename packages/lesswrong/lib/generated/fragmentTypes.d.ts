//
// GENERATED FILE
// Do not edit this file directly. Instead, start a server and run "npm run generate",
// which will cause this file to be regenerated. This file should nevertheless be
// checked in to version control.
//
// Contains Typescript signatures for fragments, generated by
// server/codegen/generateFragmentTypes.ts.
//
interface UsersDefaultFragment { // fragment on Users
  readonly username: string,
  readonly emails: Array<any /*{"definitions":[{}]}*/>,
  readonly createdAt: Date,
  readonly isAdmin: boolean,
  readonly services: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly displayName: string,
  readonly email: string,
  readonly slug: string,
  readonly groups: Array<string>,
  readonly lwWikiImport: boolean,
}

interface LWEventsDefaultFragment { // fragment on LWEvents
  readonly createdAt: Date,
  readonly userId: string,
  readonly name: string,
  readonly documentId: string,
  readonly important: boolean,
  readonly properties: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly intercom: boolean,
}

interface newEventFragment { // fragment on LWEvents
  readonly _id: string,
  readonly createdAt: Date,
  readonly userId: string,
  readonly name: string,
  readonly important: boolean,
  readonly properties: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly intercom: boolean,
}

interface lastEventFragment { // fragment on LWEvents
  readonly _id: string,
  readonly createdAt: Date,
  readonly documentId: string,
  readonly userId: string,
  readonly name: string,
  readonly important: boolean,
  readonly properties: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly intercom: boolean,
}

interface lwEventsAdminPageFragment { // fragment on LWEvents
  readonly _id: string,
  readonly createdAt: Date,
  readonly userId: string,
  readonly user: UsersMinimumInfo|null,
  readonly name: string,
  readonly documentId: string,
  readonly important: boolean,
  readonly properties: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly intercom: boolean,
}

interface emailHistoryFragment { // fragment on LWEvents
  readonly _id: string,
  readonly userId: string,
  readonly name: string,
  readonly properties: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface PostRelationsDefaultFragment { // fragment on PostRelations
  readonly createdAt: Date,
  readonly type: string,
  readonly sourcePostId: string,
  readonly targetPostId: string,
  readonly order: number,
}

interface TagRelsDefaultFragment { // fragment on TagRels
  readonly createdAt: Date,
  readonly tagId: string,
  readonly postId: string,
  readonly deleted: boolean,
  readonly userId: string,
  readonly afBaseScore: number,
}

interface PostsDefaultFragment { // fragment on Posts
  readonly createdAt: Date,
  readonly postedAt: Date,
  readonly modifiedAt: Date,
  readonly url: string,
  readonly title: string,
  readonly slug: string,
  readonly viewCount: number,
  readonly lastCommentedAt: Date,
  readonly clickCount: number,
  readonly deletedDraft: boolean,
  readonly status: number,
  readonly isFuture: boolean,
  readonly sticky: boolean,
  readonly stickyPriority: number,
  readonly userIP: string,
  readonly userAgent: string,
  readonly referrer: string,
  readonly author: string,
  readonly userId: string,
  readonly question: boolean,
  readonly authorIsUnreviewed: boolean,
  readonly submitToFrontpage: boolean,
  readonly hiddenRelatedQuestion: boolean,
  readonly originalPostRelationSourceId: string,
  readonly shortform: boolean,
  readonly canonicalSource: string,
  readonly nominationCount2018: number,
  readonly nominationCount2019: number,
  readonly reviewCount2018: number,
  readonly reviewCount2019: number,
  readonly lastCommentPromotedAt: Date,
  readonly tagRelevance: any /*{"definitions":[{}]}*/,
  readonly noIndex: boolean,
  readonly rsvps: Array<any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"name":{"type":{"definitions":[{}]},"optional":false,"label":"Name"},"email":{"optional":true,"type":{"definitions":[{}]},"label":"Email"},"nonPublic":{"optional":true,"type":{"definitions":[{}]},"label":"Non public"},"response":{"type":{"definitions":[{"allowedValues":["yes","maybe","no"]}]},"optional":false,"label":"Response"},"userId":{"optional":true,"type":{"definitions":[{}]},"label":"User ID"},"createdAt":{"optional":true,"type":{"definitions":[{}]},"label":"Created at"}},"_depsLabels":{},"_schemaKeys":["name","email","nonPublic","response","userId","createdAt"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["name","email","nonPublic","response","userId","createdAt"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/>,
  readonly activateRSVPs: boolean,
  readonly nextDayReminderSent: boolean,
}

interface VotesDefaultFragment { // fragment on Votes
  readonly documentId: string,
  readonly collectionName: string,
  readonly userId: string,
  readonly authorId: string,
  readonly voteType: string,
  readonly power: number,
  readonly afPower: number,
  readonly cancelled: boolean,
  readonly isUnvote: boolean,
  readonly votedAt: Date,
  readonly documentIsAf: boolean,
}

interface CommentsDefaultFragment { // fragment on Comments
  readonly parentCommentId: string,
  readonly topLevelCommentId: string,
  readonly createdAt: Date,
  readonly postedAt: Date,
  readonly author: string,
  readonly postId: string,
  readonly tagId: string,
  readonly userId: string,
  readonly userIP: string,
  readonly userAgent: string,
  readonly referrer: string,
  readonly authorIsUnreviewed: boolean,
  readonly answer: boolean,
  readonly parentAnswerId: string,
  readonly directChildrenCount: number,
  readonly descendentCount: number,
  readonly shortform: boolean,
  readonly nominatedForReview: string,
  readonly reviewingForReview: string,
  readonly lastSubthreadActivity: Date,
  readonly postVersion: string,
  readonly promoted: boolean,
  readonly promotedByUserId: string,
  readonly promotedAt: Date,
  readonly hideKarma: boolean,
}

interface RSSFeedsDefaultFragment { // fragment on RSSFeeds
  readonly userId: string,
  readonly createdAt: Date,
  readonly ownedByUser: boolean,
  readonly displayFullContent: boolean,
  readonly nickname: string,
  readonly url: string,
  readonly status: string,
  readonly rawFeed: any /*{"definitions":[{}]}*/,
  readonly setCanonicalUrl: boolean,
}

interface SequencesDefaultFragment { // fragment on Sequences
  readonly createdAt: Date,
  readonly userId: string,
  readonly title: string,
  readonly gridImageId: string,
  readonly bannerImageId: string,
  readonly curatedOrder: number,
  readonly userProfileOrder: number,
  readonly draft: boolean,
  readonly isDeleted: boolean,
  readonly canonicalCollectionSlug: string,
  readonly hidden: boolean,
}

interface TagsDefaultFragment { // fragment on Tags
  readonly createdAt: Date,
  readonly name: string,
  readonly slug: string,
  readonly oldSlugs: Array<string>,
  readonly core: boolean,
  readonly suggestedAsFilter: boolean,
  readonly defaultOrder: number,
  readonly descriptionTruncationCount: number,
  readonly postCount: number,
  readonly userId: string,
  readonly adminOnly: boolean,
  readonly charsAdded: number,
  readonly charsRemoved: number,
  readonly deleted: boolean,
  readonly lastCommentedAt: Date,
  readonly needsReview: boolean,
  readonly reviewedByUserId: string,
  readonly wikiGrade: number,
  readonly wikiOnly: boolean,
  readonly tagFlagsIds: Array<string>,
  readonly lesswrongWikiImportRevision: string,
  readonly lesswrongWikiImportSlug: string,
  readonly lesswrongWikiImportCompleted: boolean,
  readonly htmlWithContributorAnnotations: string,
  readonly contributors: any /*TagContributorsList*/,
  readonly contributionStats: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface RevisionsDefaultFragment { // fragment on Revisions
  readonly documentId: string,
  readonly collectionName: string,
  readonly fieldName: string,
  readonly editedAt: Date,
  readonly updateType: string,
  readonly version: string,
  readonly commitMessage: string,
  readonly userId: string,
  readonly draft: boolean,
  readonly originalContents: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"type":{"type":{"definitions":[{}]},"optional":false,"label":"Type"},"data":{"type":{"definitions":[{},{"blackbox":true}]},"optional":false,"label":"Data"}},"_depsLabels":{},"_schemaKeys":["type","data"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["type","data"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly html: string,
  readonly markdown: string,
  readonly draftJS: any,
  readonly ckEditorMarkup: string,
  readonly wordCount: number,
  readonly htmlHighlight: string,
  readonly htmlHighlightStartingAtHash: string,
  readonly plaintextDescription: string,
  readonly plaintextMainText: string,
  readonly changeMetrics: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface PostsMinimumInfo { // fragment on Posts
  readonly _id: string,
  readonly slug: string,
  readonly title: string,
  readonly draft: boolean,
  readonly hideCommentKarma: boolean,
  readonly af: boolean,
}

interface PostsBase extends PostsMinimumInfo { // fragment on Posts
  readonly url: string,
  readonly postedAt: Date,
  readonly createdAt: Date,
  readonly sticky: boolean,
  readonly metaSticky: boolean,
  readonly stickyPriority: number,
  readonly status: number,
  readonly frontpageDate: Date,
  readonly meta: boolean,
  readonly shareWithUsers: Array<string>,
  readonly commentCount: number,
  readonly voteCount: number,
  readonly baseScore: number,
  readonly unlisted: boolean,
  readonly score: number,
  readonly lastVisitedAt: Date,
  readonly isFuture: boolean,
  readonly isRead: boolean,
  readonly lastCommentedAt: Date,
  readonly lastCommentPromotedAt: Date,
  readonly canonicalCollectionSlug: string,
  readonly curatedDate: Date,
  readonly commentsLocked: boolean,
  readonly question: boolean,
  readonly hiddenRelatedQuestion: boolean,
  readonly originalPostRelationSourceId: string,
  readonly userId: string,
  readonly location: string,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly onlineEvent: boolean,
  readonly startTime: Date,
  readonly endTime: Date,
  readonly localStartTime: Date,
  readonly localEndTime: Date,
  readonly facebookLink: string,
  readonly website: string,
  readonly contactInfo: string,
  readonly isEvent: boolean,
  readonly types: Array<string>,
  readonly reviewedByUserId: string,
  readonly suggestForCuratedUserIds: Array<string>,
  readonly suggestForCuratedUsernames: string,
  readonly reviewForCuratedUserId: string,
  readonly authorIsUnreviewed: boolean,
  readonly afDate: Date,
  readonly suggestForAlignmentUserIds: Array<string>,
  readonly reviewForAlignmentUserId: string,
  readonly afBaseScore: number,
  readonly afCommentCount: number,
  readonly afLastCommentedAt: Date,
  readonly afSticky: boolean,
  readonly hideAuthor: boolean,
  readonly moderationStyle: string,
  readonly submitToFrontpage: boolean,
  readonly shortform: boolean,
  readonly nominationCount2018: number,
  readonly reviewCount2018: number,
  readonly nominationCount2019: number,
  readonly reviewCount2019: number,
  readonly group: PostsBase_group|null,
}

interface PostsBase_group { // fragment on Localgroups
  readonly _id: string,
  readonly name: string,
}

interface PostsWithVotes extends PostsBase { // fragment on Posts
  readonly currentUserVote: string,
}

interface PostsListWithVotes extends PostsList { // fragment on Posts
  readonly currentUserVote: string,
}

interface PostsAuthors { // fragment on Posts
  readonly user: PostsAuthors_user|null,
  readonly coauthors: Array<UsersMinimumInfo>,
}

interface PostsAuthors_user extends UsersMinimumInfo { // fragment on Users
  readonly moderationStyle: string,
  readonly bannedUserIds: Array<string>,
  readonly moderatorAssistance: boolean,
}

interface PostsListBase extends PostsBase, PostsAuthors { // fragment on Posts
  readonly moderationGuidelines: PostsListBase_moderationGuidelines|null,
  readonly customHighlight: PostsListBase_customHighlight|null,
  readonly lastPromotedComment: PostsListBase_lastPromotedComment|null,
  readonly bestAnswer: CommentsList|null,
  readonly tags: Array<TagPreviewFragment>,
}

interface PostsListBase_moderationGuidelines { // fragment on Revisions
  readonly _id: string,
  readonly html: string,
}

interface PostsListBase_customHighlight { // fragment on Revisions
  readonly _id: string,
  readonly html: string,
}

interface PostsListBase_lastPromotedComment { // fragment on Comments
  readonly user: UsersMinimumInfo|null,
}

interface PostsList extends PostsListBase { // fragment on Posts
  readonly contents: PostsList_contents|null,
}

interface PostsList_contents { // fragment on Revisions
  readonly _id: string,
  readonly htmlHighlight: string,
  readonly wordCount: number,
  readonly version: string,
}

interface PostsListTag extends PostsList { // fragment on Posts
  readonly tagRelevance: any /*{"definitions":[{}]}*/,
  readonly tagRel: WithVoteTagRel|null,
}

interface PostsDetails extends PostsListBase { // fragment on Posts
  readonly canonicalSource: string,
  readonly noIndex: boolean,
  readonly viewCount: number,
  readonly socialPreviewImageUrl: string,
  readonly commentSortOrder: string,
  readonly collectionTitle: string,
  readonly canonicalPrevPostSlug: string,
  readonly canonicalNextPostSlug: string,
  readonly canonicalSequenceId: string,
  readonly canonicalBookId: string,
  readonly canonicalSequence: PostsDetails_canonicalSequence|null,
  readonly canonicalBook: PostsDetails_canonicalBook|null,
  readonly canonicalCollection: PostsDetails_canonicalCollection|null,
  readonly showModerationGuidelines: boolean,
  readonly bannedUserIds: Array<string>,
  readonly moderationStyle: string,
  readonly currentUserVote: string,
  readonly feedLink: string,
  readonly feed: RSSFeedMinimumInfo|null,
  readonly sourcePostRelations: Array<PostsDetails_sourcePostRelations>,
  readonly targetPostRelations: Array<PostsDetails_targetPostRelations>,
  readonly rsvps: Array<any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"name":{"type":{"definitions":[{}]},"optional":false,"label":"Name"},"email":{"optional":true,"type":{"definitions":[{}]},"label":"Email"},"nonPublic":{"optional":true,"type":{"definitions":[{}]},"label":"Non public"},"response":{"type":{"definitions":[{"allowedValues":["yes","maybe","no"]}]},"optional":false,"label":"Response"},"userId":{"optional":true,"type":{"definitions":[{}]},"label":"User ID"},"createdAt":{"optional":true,"type":{"definitions":[{}]},"label":"Created at"}},"_depsLabels":{},"_schemaKeys":["name","email","nonPublic","response","userId","createdAt"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["name","email","nonPublic","response","userId","createdAt"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/>,
  readonly activateRSVPs: boolean,
}

interface PostsDetails_canonicalSequence { // fragment on Sequences
  readonly _id: string,
  readonly title: string,
}

interface PostsDetails_canonicalBook { // fragment on Books
  readonly _id: string,
  readonly title: string,
}

interface PostsDetails_canonicalCollection { // fragment on Collections
  readonly _id: string,
  readonly title: string,
}

interface PostsDetails_sourcePostRelations { // fragment on PostRelations
  readonly _id: string,
  readonly sourcePostId: string,
  readonly sourcePost: PostsList|null,
  readonly order: number,
}

interface PostsDetails_targetPostRelations { // fragment on PostRelations
  readonly _id: string,
  readonly sourcePostId: string,
  readonly targetPostId: string,
  readonly targetPost: PostsList|null,
  readonly order: number,
}

interface PostsExpandedHighlight { // fragment on Posts
  readonly _id: string,
  readonly contents: PostsExpandedHighlight_contents|null,
}

interface PostsExpandedHighlight_contents { // fragment on Revisions
  readonly _id: string,
  readonly html: string,
}

interface PostsRevision extends PostsDetails { // fragment on Posts
  readonly version: string,
  readonly contents: RevisionDisplay|null,
  readonly revisions: Array<RevisionMetadata>,
}

interface PostsRevisionEdit extends PostsDetails { // fragment on Posts
  readonly version: string,
  readonly contents: RevisionEdit|null,
  readonly revisions: Array<RevisionMetadata>,
}

interface PostsWithNavigationAndRevision extends PostsRevision, PostSequenceNavigation { // fragment on Posts
  readonly tableOfContentsRevision: any,
}

interface PostsWithNavigation extends PostsPage, PostSequenceNavigation { // fragment on Posts
  readonly tableOfContents: any,
}

interface PostSequenceNavigation { // fragment on Posts
  readonly sequence: PostSequenceNavigation_sequence|null,
  readonly prevPost: PostSequenceNavigation_prevPost|null,
  readonly nextPost: PostSequenceNavigation_nextPost|null,
}

interface PostSequenceNavigation_sequence { // fragment on Sequences
  readonly _id: string,
  readonly title: string,
  readonly draft: boolean,
  readonly userId: string,
}

interface PostSequenceNavigation_prevPost { // fragment on Posts
  readonly _id: string,
  readonly title: string,
  readonly slug: string,
  readonly commentCount: number,
  readonly baseScore: number,
  readonly sequence: PostSequenceNavigation_prevPost_sequence|null,
}

interface PostSequenceNavigation_prevPost_sequence { // fragment on Sequences
  readonly _id: string,
}

interface PostSequenceNavigation_nextPost { // fragment on Posts
  readonly _id: string,
  readonly title: string,
  readonly slug: string,
  readonly commentCount: number,
  readonly baseScore: number,
  readonly sequence: PostSequenceNavigation_nextPost_sequence|null,
}

interface PostSequenceNavigation_nextPost_sequence { // fragment on Sequences
  readonly _id: string,
}

interface PostsPage extends PostsDetails { // fragment on Posts
  readonly version: string,
  readonly contents: RevisionDisplay|null,
}

interface PostsEdit extends PostsPage { // fragment on Posts
  readonly coauthorUserIds: Array<string>,
  readonly moderationGuidelines: RevisionEdit|null,
  readonly contents: RevisionEdit|null,
  readonly customHighlight: RevisionEdit|null,
  readonly tableOfContents: any,
}

interface PostsRevisionsList { // fragment on Posts
  readonly _id: string,
  readonly revisions: Array<RevisionMetadata>,
}

interface PostsRecentDiscussion extends PostsList { // fragment on Posts
  readonly recentComments: Array<CommentsList>,
}

interface UsersBannedFromPostsModerationLog { // fragment on Posts
  readonly user: UsersMinimumInfo|null,
  readonly title: string,
  readonly slug: string,
  readonly _id: string,
  readonly bannedUserIds: Array<string>,
}

interface SunshinePostsList extends PostsListBase { // fragment on Posts
  readonly currentUserVote: string,
  readonly contents: SunshinePostsList_contents|null,
  readonly user: SunshinePostsList_user|null,
}

interface SunshinePostsList_contents { // fragment on Revisions
  readonly _id: string,
  readonly html: string,
  readonly htmlHighlight: string,
  readonly wordCount: number,
  readonly version: string,
}

interface SunshinePostsList_user extends UsersMinimumInfo { // fragment on Users
  readonly moderationStyle: string,
  readonly bannedUserIds: Array<string>,
  readonly moderatorAssistance: boolean,
  readonly moderationGuidelines: SunshinePostsList_user_moderationGuidelines|null,
}

interface SunshinePostsList_user_moderationGuidelines { // fragment on Revisions
  readonly _id: string,
  readonly html: string,
}

interface WithVotePost { // fragment on Posts
  readonly __typename: string,
  readonly _id: string,
  readonly currentUserVote: string,
  readonly baseScore: number,
  readonly score: number,
  readonly afBaseScore: number,
  readonly voteCount: number,
}

interface HighlightWithHash { // fragment on Posts
  readonly _id: string,
  readonly contents: HighlightWithHash_contents|null,
}

interface HighlightWithHash_contents { // fragment on Revisions
  readonly htmlHighlightStartingAtHash: string,
}

interface CommentsList { // fragment on Comments
  readonly _id: string,
  readonly postId: string,
  readonly tagId: string,
  readonly parentCommentId: string,
  readonly topLevelCommentId: string,
  readonly descendentCount: number,
  readonly contents: CommentsList_contents|null,
  readonly postedAt: Date,
  readonly repliesBlockedUntil: Date,
  readonly userId: string,
  readonly deleted: boolean,
  readonly deletedPublic: boolean,
  readonly deletedReason: string,
  readonly hideAuthor: boolean,
  readonly user: UsersMinimumInfo|null,
  readonly currentUserVote: string,
  readonly baseScore: number,
  readonly score: number,
  readonly voteCount: number,
  readonly af: boolean,
  readonly afDate: Date,
  readonly moveToAlignmentUserId: string,
  readonly afBaseScore: number,
  readonly suggestForAlignmentUserIds: Array<string>,
  readonly reviewForAlignmentUserId: string,
  readonly needsReview: boolean,
  readonly answer: boolean,
  readonly parentAnswerId: string,
  readonly retracted: boolean,
  readonly postVersion: string,
  readonly reviewedByUserId: string,
  readonly shortform: boolean,
  readonly lastSubthreadActivity: Date,
  readonly moderatorHat: boolean,
  readonly nominatedForReview: string,
  readonly reviewingForReview: string,
  readonly promoted: boolean,
  readonly promotedByUser: UsersMinimumInfo|null,
  readonly directChildrenCount: number,
}

interface CommentsList_contents { // fragment on Revisions
  readonly html: string,
  readonly plaintextMainText: string,
}

interface ShortformComments extends CommentsList { // fragment on Comments
  readonly post: PostsMinimumInfo|null,
}

interface CommentWithRepliesFragment extends CommentsList { // fragment on Comments
  readonly lastSubthreadActivity: Date,
  readonly latestChildren: Array<CommentsList>,
  readonly post: PostsBase|null,
}

interface CommentEdit extends CommentsList { // fragment on Comments
  readonly contents: RevisionEdit|null,
}

interface DeletedCommentsMetaData { // fragment on Comments
  readonly _id: string,
  readonly deleted: boolean,
  readonly deletedDate: Date,
  readonly deletedByUser: DeletedCommentsMetaData_deletedByUser|null,
  readonly deletedReason: string,
  readonly deletedPublic: boolean,
}

interface DeletedCommentsMetaData_deletedByUser { // fragment on Users
  readonly _id: string,
  readonly displayName: string,
}

interface DeletedCommentsModerationLog extends DeletedCommentsMetaData { // fragment on Comments
  readonly user: UsersMinimumInfo|null,
  readonly post: DeletedCommentsModerationLog_post|null,
}

interface DeletedCommentsModerationLog_post { // fragment on Posts
  readonly title: string,
  readonly slug: string,
  readonly _id: string,
}

interface CommentsListWithParentMetadata extends CommentsList { // fragment on Comments
  readonly post: PostsMinimumInfo|null,
  readonly tag: TagBasicInfo|null,
}

interface WithVoteComment { // fragment on Comments
  readonly __typename: string,
  readonly _id: string,
  readonly currentUserVote: string,
  readonly baseScore: number,
  readonly score: number,
  readonly afBaseScore: number,
  readonly voteCount: number,
}

interface RevisionDisplay { // fragment on Revisions
  readonly _id: string,
  readonly version: string,
  readonly updateType: string,
  readonly editedAt: Date,
  readonly userId: string,
  readonly html: string,
  readonly wordCount: number,
  readonly htmlHighlight: string,
  readonly plaintextDescription: string,
}

interface RevisionEdit { // fragment on Revisions
  readonly _id: string,
  readonly version: string,
  readonly updateType: string,
  readonly editedAt: Date,
  readonly userId: string,
  readonly originalContents: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"type":{"type":{"definitions":[{}]},"optional":false,"label":"Type"},"data":{"type":{"definitions":[{},{"blackbox":true}]},"optional":false,"label":"Data"}},"_depsLabels":{},"_schemaKeys":["type","data"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["type","data"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly html: string,
  readonly markdown: string,
  readonly draftJS: any,
  readonly ckEditorMarkup: string,
  readonly wordCount: number,
  readonly htmlHighlight: string,
  readonly plaintextDescription: string,
}

interface RevisionMetadata { // fragment on Revisions
  readonly _id: string,
  readonly version: string,
  readonly editedAt: Date,
  readonly commitMessage: string,
  readonly userId: string,
  readonly score: number,
  readonly baseScore: number,
  readonly voteCount: number,
  readonly currentUserVote: string,
}

interface RevisionMetadataWithChangeMetrics extends RevisionMetadata { // fragment on Revisions
  readonly changeMetrics: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly user: UsersMinimumInfo|null,
}

interface RevisionHistoryEntry extends RevisionMetadata { // fragment on Revisions
  readonly documentId: string,
  readonly changeMetrics: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly user: UsersMinimumInfo|null,
}

interface RevisionTagFragment extends RevisionHistoryEntry { // fragment on Revisions
  readonly tag: TagBasicInfo|null,
}

interface WithVoteRevision { // fragment on Revisions
  readonly __typename: string,
  readonly _id: string,
  readonly currentUserVote: string,
  readonly baseScore: number,
  readonly score: number,
  readonly voteCount: number,
}

interface NotificationsDefaultFragment { // fragment on Notifications
  readonly userId: string,
  readonly createdAt: Date,
  readonly documentId: string,
  readonly documentType: string,
  readonly link: string,
  readonly title: string,
  readonly message: string,
  readonly type: string,
  readonly deleted: boolean,
  readonly viewed: boolean,
  readonly emailed: boolean,
  readonly waitingForBatch: boolean,
}

interface NotificationsList { // fragment on Notifications
  readonly _id: string,
  readonly documentId: string,
  readonly documentType: string,
  readonly deleted: boolean,
  readonly userId: string,
  readonly createdAt: Date,
  readonly link: string,
  readonly message: string,
  readonly type: string,
  readonly viewed: boolean,
}

interface ConversationsDefaultFragment { // fragment on Conversations
  readonly createdAt: Date,
  readonly title: string,
  readonly participantIds: Array<string>,
  readonly latestActivity: Date,
  readonly af: boolean,
  readonly messageCount: number,
  readonly archivedByIds: Array<string>,
}

interface MessagesDefaultFragment { // fragment on Messages
  readonly userId: string,
  readonly createdAt: Date,
  readonly conversationId: string,
  readonly noEmail: boolean,
}

interface messageListFragment { // fragment on Messages
  readonly _id: string,
  readonly user: UsersMinimumInfo|null,
  readonly contents: messageListFragment_contents|null,
  readonly createdAt: Date,
  readonly conversationId: string,
}

interface messageListFragment_contents { // fragment on Revisions
  readonly html: string,
}

interface conversationsListFragment { // fragment on Conversations
  readonly _id: string,
  readonly title: string,
  readonly createdAt: Date,
  readonly latestActivity: Date,
  readonly participantIds: Array<string>,
  readonly participants: Array<UsersMinimumInfo>,
  readonly archivedByIds: Array<string>,
  readonly messageCount: number,
}

interface newConversationFragment { // fragment on Conversations
  readonly _id: string,
  readonly title: string,
  readonly participantIds: Array<string>,
}

interface RSSFeedMinimumInfo { // fragment on RSSFeeds
  readonly _id: string,
  readonly userId: string,
  readonly user: UsersMinimumInfo|null,
  readonly createdAt: Date,
  readonly ownedByUser: boolean,
  readonly displayFullContent: boolean,
  readonly nickname: string,
  readonly url: string,
}

interface newRSSFeedFragment { // fragment on RSSFeeds
  readonly _id: string,
  readonly userId: string,
  readonly createdAt: Date,
  readonly ownedByUser: boolean,
  readonly displayFullContent: boolean,
  readonly nickname: string,
  readonly url: string,
  readonly status: string,
}

interface RSSFeedMutationFragment { // fragment on RSSFeeds
  readonly _id: string,
  readonly userId: string,
  readonly ownedByUser: boolean,
  readonly displayFullContent: boolean,
  readonly nickname: string,
  readonly url: string,
}

interface ReportsDefaultFragment { // fragment on Reports
  readonly userId: string,
  readonly commentId: string,
  readonly postId: string,
  readonly link: string,
  readonly claimedUserId: string,
  readonly description: string,
  readonly createdAt: Date,
  readonly closedAt: Date,
  readonly markedAsSpam: boolean,
  readonly reportedAsSpam: boolean,
}

interface unclaimedReportsList { // fragment on Reports
  readonly _id: string,
  readonly userId: string,
  readonly user: unclaimedReportsList_user,
  readonly commentId: string,
  readonly comment: unclaimedReportsList_comment|null,
  readonly postId: string,
  readonly post: unclaimedReportsList_post|null,
  readonly closedAt: Date,
  readonly createdAt: Date,
  readonly claimedUserId: string,
  readonly claimedUser: unclaimedReportsList_claimedUser|null,
  readonly link: string,
  readonly description: string,
  readonly reportedAsSpam: boolean,
  readonly markedAsSpam: boolean,
}

interface unclaimedReportsList_user { // fragment on Users
  readonly _id: string,
  readonly displayName: string,
  readonly username: string,
  readonly slug: string,
}

interface unclaimedReportsList_comment { // fragment on Comments
  readonly _id: string,
  readonly userId: string,
  readonly user: UsersMinimumInfo|null,
  readonly baseScore: number,
  readonly contents: RevisionDisplay|null,
  readonly postedAt: Date,
  readonly deleted: boolean,
  readonly postId: string,
  readonly post: unclaimedReportsList_comment_post|null,
}

interface unclaimedReportsList_comment_post { // fragment on Posts
  readonly _id: string,
  readonly slug: string,
  readonly title: string,
  readonly isEvent: boolean,
}

interface unclaimedReportsList_post { // fragment on Posts
  readonly _id: string,
  readonly slug: string,
  readonly title: string,
  readonly isEvent: boolean,
  readonly contents: RevisionDisplay|null,
}

interface unclaimedReportsList_claimedUser { // fragment on Users
  readonly _id: string,
  readonly displayName: string,
  readonly username: string,
  readonly slug: string,
}

interface TagFlagFragment { // fragment on TagFlags
  readonly _id: string,
  readonly createdAt: Date,
  readonly name: string,
  readonly slug: string,
  readonly order: number,
  readonly deleted: boolean,
  readonly contents: TagFlagFragment_contents|null,
}

interface TagFlagFragment_contents { // fragment on Revisions
  readonly html: string,
  readonly htmlHighlight: string,
  readonly plaintextDescription: string,
}

interface TagFlagEditFragment extends TagFlagFragment { // fragment on TagFlags
  readonly contents: RevisionEdit|null,
}

interface TagFlagsDefaultFragment { // fragment on TagFlags
  readonly createdAt: Date,
  readonly name: string,
  readonly deleted: boolean,
  readonly slug: string,
  readonly order: number,
}

interface GardenCodeFragment { // fragment on GardenCodes
  readonly _id: string,
  readonly code: string,
  readonly title: string,
  readonly userId: string,
  readonly deleted: boolean,
  readonly slug: string,
  readonly startTime: Date,
  readonly endTime: Date,
  readonly fbLink: string,
  readonly type: string,
  readonly afOnly: boolean,
  readonly contents: RevisionDisplay|null,
}

interface GardenCodeFragmentEdit { // fragment on GardenCodes
  readonly _id: string,
  readonly code: string,
  readonly title: string,
  readonly userId: string,
  readonly deleted: boolean,
  readonly slug: string,
  readonly startTime: Date,
  readonly endTime: Date,
  readonly fbLink: string,
  readonly type: string,
  readonly afOnly: boolean,
  readonly contents: RevisionEdit|null,
}

interface GardenCodesDefaultFragment { // fragment on GardenCodes
  readonly createdAt: Date,
  readonly code: string,
  readonly title: string,
  readonly userId: string,
  readonly slug: string,
  readonly startTime: Date,
  readonly endTime: Date,
  readonly fbLink: string,
  readonly type: string,
  readonly hidden: boolean,
  readonly deleted: boolean,
  readonly afOnly: boolean,
}

interface BansDefaultFragment { // fragment on Bans
  readonly createdAt: Date,
  readonly expirationDate: Date,
  readonly userId: string,
  readonly ip: string,
  readonly reason: string,
  readonly comment: string,
  readonly properties: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface BansAdminPageFragment { // fragment on Bans
  readonly _id: string,
  readonly createdAt: Date,
  readonly expirationDate: Date,
  readonly userId: string,
  readonly user: UsersMinimumInfo|null,
  readonly reason: string,
  readonly comment: string,
  readonly ip: string,
  readonly properties: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface ChaptersDefaultFragment { // fragment on Chapters
  readonly createdAt: Date,
  readonly title: string,
  readonly subtitle: string,
  readonly number: number,
  readonly sequenceId: string,
  readonly postIds: Array<string>,
}

interface BooksDefaultFragment { // fragment on Books
  readonly createdAt: Date,
  readonly postedAt: Date,
  readonly title: string,
  readonly subtitle: string,
  readonly collectionId: string,
  readonly number: number,
  readonly postIds: Array<string>,
  readonly sequenceIds: Array<string>,
}

interface CollectionsDefaultFragment { // fragment on Collections
  readonly createdAt: Date,
  readonly userId: string,
  readonly title: string,
  readonly slug: string,
  readonly gridImageId: string,
  readonly firstPageLink: string,
}

interface ReviewVotesDefaultFragment { // fragment on ReviewVotes
  readonly createdAt: Date,
  readonly userId: string,
  readonly postId: string,
  readonly qualitativeScore: number,
  readonly quadraticScore: number,
  readonly comment: string,
  readonly year: string,
  readonly dummy: boolean,
  readonly reactions: Array<string>,
}

interface reviewVoteFragment { // fragment on ReviewVotes
  readonly _id: string,
  readonly createdAt: Date,
  readonly userId: string,
  readonly postId: string,
  readonly qualitativeScore: number,
  readonly quadraticScore: number,
  readonly comment: string,
  readonly year: string,
  readonly dummy: boolean,
  readonly reactions: Array<string>,
}

interface LocalgroupsDefaultFragment { // fragment on Localgroups
  readonly createdAt: Date,
  readonly name: string,
  readonly organizerIds: Array<string>,
  readonly lastActivity: Date,
  readonly types: Array<string>,
  readonly mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly location: string,
  readonly contactInfo: string,
  readonly facebookLink: string,
  readonly website: string,
  readonly inactive: boolean,
}

interface localGroupsBase { // fragment on Localgroups
  readonly _id: string,
  readonly createdAt: Date,
  readonly organizerIds: Array<string>,
  readonly organizers: Array<UsersMinimumInfo>,
  readonly lastActivity: Date,
  readonly name: string,
  readonly location: string,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly types: Array<string>,
  readonly contactInfo: string,
  readonly facebookLink: string,
  readonly website: string,
  readonly inactive: boolean,
}

interface localGroupsHomeFragment extends localGroupsBase { // fragment on Localgroups
  readonly contents: RevisionDisplay|null,
}

interface localGroupsEdit extends localGroupsBase { // fragment on Localgroups
  readonly contents: RevisionEdit|null,
}

interface ChaptersFragment { // fragment on Chapters
  readonly _id: string,
  readonly createdAt: Date,
  readonly title: string,
  readonly subtitle: string,
  readonly contents: RevisionDisplay|null,
  readonly number: number,
  readonly sequenceId: string,
  readonly postIds: Array<string>,
  readonly posts: Array<PostsList>,
}

interface ChaptersEdit extends ChaptersFragment { // fragment on Chapters
  readonly contents: RevisionEdit|null,
}

interface SequencesPageTitleFragment { // fragment on Sequences
  readonly _id: string,
  readonly title: string,
}

interface SequencesPageFragment extends SequencesPageTitleFragment { // fragment on Sequences
  readonly createdAt: Date,
  readonly userId: string,
  readonly user: UsersMinimumInfo|null,
  readonly contents: RevisionDisplay|null,
  readonly gridImageId: string,
  readonly bannerImageId: string,
  readonly canonicalCollectionSlug: string,
  readonly draft: boolean,
  readonly isDeleted: boolean,
  readonly hidden: boolean,
  readonly curatedOrder: number,
  readonly userProfileOrder: number,
  readonly af: boolean,
}

interface SequencesEdit extends SequencesPageFragment { // fragment on Sequences
  readonly contents: RevisionEdit|null,
}

interface BookPageFragment { // fragment on Books
  readonly _id: string,
  readonly createdAt: Date,
  readonly title: string,
  readonly number: number,
  readonly subtitle: string,
  readonly contents: RevisionDisplay|null,
  readonly sequenceIds: Array<string>,
  readonly sequences: Array<SequencesPageFragment>,
  readonly postIds: Array<string>,
  readonly posts: Array<PostsList>,
  readonly collectionId: string,
}

interface BookEdit extends BookPageFragment { // fragment on Books
  readonly contents: RevisionEdit|null,
}

interface CollectionsPageFragment { // fragment on Collections
  readonly _id: string,
  readonly createdAt: Date,
  readonly slug: string,
  readonly userId: string,
  readonly user: UsersMinimumInfo|null,
  readonly title: string,
  readonly contents: RevisionDisplay|null,
  readonly firstPageLink: string,
  readonly gridImageId: string,
  readonly books: Array<BookPageFragment>,
}

interface CollectionsEditFragment extends CollectionsPageFragment { // fragment on Collections
  readonly contents: RevisionEdit|null,
}

interface SuggestAlignmentPost extends PostsList { // fragment on Posts
  readonly suggestForAlignmentUsers: Array<SuggestAlignmentPost_suggestForAlignmentUsers>,
}

interface SuggestAlignmentPost_suggestForAlignmentUsers { // fragment on Users
  readonly _id: string,
  readonly displayName: string,
}

interface SuggestAlignmentUser extends UsersMinimumInfo { // fragment on Users
  readonly afKarma: number,
  readonly afPostCount: number,
  readonly afCommentCount: number,
  readonly reviewForAlignmentForumUserId: string,
  readonly groups: Array<string>,
  readonly afApplicationText: string,
  readonly afSubmittedApplication: boolean,
}

interface TagRelBasicInfo { // fragment on TagRels
  readonly _id: string,
  readonly score: number,
  readonly baseScore: number,
  readonly afBaseScore: number,
  readonly voteCount: number,
  readonly userId: string,
  readonly tagId: string,
  readonly postId: string,
}

interface TagRelFragment extends TagRelBasicInfo { // fragment on TagRels
  readonly tag: TagPreviewFragment|null,
  readonly post: PostsList|null,
  readonly currentUserVote: string,
}

interface TagRelHistoryFragment extends TagRelBasicInfo { // fragment on TagRels
  readonly createdAt: Date,
  readonly user: UsersMinimumInfo|null,
  readonly post: PostsList|null,
}

interface TagRelCreationFragment extends TagRelBasicInfo { // fragment on TagRels
  readonly tag: TagPreviewFragment|null,
  readonly post: TagRelCreationFragment_post|null,
  readonly currentUserVote: string,
}

interface TagRelCreationFragment_post extends PostsList { // fragment on Posts
  readonly tagRelevance: any /*{"definitions":[{}]}*/,
  readonly tagRel: WithVoteTagRel|null,
}

interface TagRelMinimumFragment extends TagRelBasicInfo { // fragment on TagRels
  readonly tag: TagPreviewFragment|null,
  readonly currentUserVote: string,
}

interface WithVoteTagRel { // fragment on TagRels
  readonly __typename: string,
  readonly _id: string,
  readonly userId: string,
  readonly score: number,
  readonly baseScore: number,
  readonly afBaseScore: number,
  readonly voteCount: number,
  readonly currentUserVote: string,
}

interface TagBasicInfo { // fragment on Tags
  readonly _id: string,
  readonly name: string,
  readonly slug: string,
  readonly core: boolean,
  readonly postCount: number,
  readonly adminOnly: boolean,
  readonly suggestedAsFilter: boolean,
  readonly needsReview: boolean,
  readonly descriptionTruncationCount: number,
  readonly createdAt: Date,
  readonly wikiOnly: boolean,
}

interface TagDetailsFragment extends TagBasicInfo { // fragment on Tags
  readonly deleted: boolean,
  readonly oldSlugs: Array<string>,
  readonly isRead: boolean,
  readonly defaultOrder: number,
  readonly reviewedByUserId: string,
  readonly wikiGrade: number,
  readonly lesswrongWikiImportSlug: string,
  readonly lesswrongWikiImportRevision: string,
}

interface TagFragment extends TagDetailsFragment { // fragment on Tags
  readonly description: TagFragment_description|null,
}

interface TagFragment_description { // fragment on Revisions
  readonly _id: string,
  readonly html: string,
  readonly htmlHighlight: string,
  readonly plaintextDescription: string,
  readonly version: string,
}

interface TagHistoryFragment extends TagBasicInfo { // fragment on Tags
  readonly user: UsersMinimumInfo|null,
}

interface TagCreationHistoryFragment extends TagFragment { // fragment on Tags
  readonly user: UsersMinimumInfo|null,
  readonly description: TagCreationHistoryFragment_description|null,
}

interface TagCreationHistoryFragment_description { // fragment on Revisions
  readonly html: string,
}

interface TagRevisionFragment extends TagDetailsFragment { // fragment on Tags
  readonly isRead: boolean,
  readonly description: TagRevisionFragment_description|null,
}

interface TagRevisionFragment_description { // fragment on Revisions
  readonly _id: string,
  readonly version: string,
  readonly html: string,
  readonly htmlHighlight: string,
  readonly plaintextDescription: string,
  readonly user: UsersMinimumInfo|null,
}

interface TagPreviewFragment extends TagBasicInfo { // fragment on Tags
  readonly description: TagPreviewFragment_description|null,
}

interface TagPreviewFragment_description { // fragment on Revisions
  readonly _id: string,
  readonly htmlHighlight: string,
}

interface TagDetailedPreviewFragment extends TagDetailsFragment { // fragment on Tags
  readonly description: TagDetailedPreviewFragment_description|null,
}

interface TagDetailedPreviewFragment_description { // fragment on Revisions
  readonly _id: string,
  readonly htmlHighlight: string,
}

interface TagWithFlagsFragment extends TagFragment { // fragment on Tags
  readonly tagFlagsIds: Array<string>,
  readonly tagFlags: Array<TagFlagFragment>,
}

interface TagWithFlagsAndRevisionFragment extends TagRevisionFragment { // fragment on Tags
  readonly tagFlagsIds: Array<string>,
  readonly tagFlags: Array<TagFlagFragment>,
}

interface TagPageFragment extends TagWithFlagsFragment { // fragment on Tags
  readonly tableOfContents: any,
  readonly contributors: any,
}

interface TagPageWithRevisionFragment extends TagWithFlagsAndRevisionFragment { // fragment on Tags
  readonly tableOfContents: any,
  readonly contributors: any,
}

interface TagFullContributorsList { // fragment on Tags
  readonly contributors: any,
}

interface TagEditFragment extends TagBasicInfo { // fragment on Tags
  readonly tagFlagsIds: Array<string>,
  readonly description: RevisionEdit|null,
}

interface TagRecentDiscussion extends TagFragment { // fragment on Tags
  readonly lastVisitedAt: Date,
  readonly recentComments: Array<CommentsList>,
}

interface SunshineTagFragment extends TagFragment { // fragment on Tags
  readonly user: UsersMinimumInfo|null,
}

interface SubscriptionsDefaultFragment { // fragment on Subscriptions
  readonly createdAt: Date,
  readonly userId: string,
  readonly state: string,
  readonly documentId: string,
  readonly collectionName: string,
  readonly deleted: boolean,
  readonly type: string,
}

interface SubscriptionState { // fragment on Subscriptions
  readonly _id: string,
  readonly userId: string,
  readonly createdAt: Date,
  readonly state: string,
  readonly documentId: string,
  readonly collectionName: string,
  readonly deleted: boolean,
  readonly type: string,
}

interface UsersMinimumInfo { // fragment on Users
  readonly _id: string,
  readonly slug: string,
  readonly createdAt: Date,
  readonly username: string,
  readonly displayName: string,
  readonly fullName: string,
  readonly karma: number,
  readonly afKarma: number,
  readonly deleted: boolean,
  readonly isAdmin: boolean,
  readonly htmlBio: string,
  readonly postCount: number,
  readonly commentCount: number,
  readonly sequenceCount: number,
  readonly afPostCount: number,
  readonly afCommentCount: number,
  readonly spamRiskScore: number,
  readonly tagRevisionCount: number,
}

interface UsersProfile extends UsersMinimumInfo, SunshineUsersList, SharedUserBooleans { // fragment on Users
  readonly oldSlugs: Array<string>,
  readonly groups: Array<string>,
  readonly bio: string,
  readonly website: string,
  readonly frontpagePostCount: number,
  readonly afSequenceCount: number,
  readonly afSequenceDraftCount: number,
  readonly sequenceDraftCount: number,
  readonly moderationStyle: string,
  readonly moderationGuidelines: RevisionDisplay|null,
  readonly bannedUserIds: Array<string>,
  readonly location: string,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly mapLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly mapLocationSet: boolean,
  readonly mapMarkerText: string,
  readonly htmlMapMarkerText: string,
  readonly mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly shortformFeedId: string,
  readonly viewUnreviewedComments: boolean,
  readonly auto_subscribe_to_my_posts: boolean,
  readonly auto_subscribe_to_my_comments: boolean,
  readonly autoSubscribeAsOrganizer: boolean,
  readonly petrovPressedButtonDate: Date,
  readonly sortDrafts: string,
  readonly reenableDraftJs: boolean,
}

interface UsersCurrent extends UsersProfile, SharedUserBooleans { // fragment on Users
  readonly beta: boolean,
  readonly email: string,
  readonly services: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly pageUrl: string,
  readonly voteBanned: boolean,
  readonly banned: Date,
  readonly isReviewed: boolean,
  readonly nullifyVotes: boolean,
  readonly hideIntercom: boolean,
  readonly hideNavigationSidebar: boolean,
  readonly currentFrontpageFilter: string,
  readonly frontpageFilterSettings: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly allPostsTimeframe: string,
  readonly allPostsSorting: string,
  readonly allPostsFilter: string,
  readonly allPostsShowLowKarma: boolean,
  readonly allPostsOpenSettings: boolean,
  readonly lastNotificationsCheck: Date,
  readonly bannedUserIds: Array<string>,
  readonly bannedPersonalUserIds: Array<string>,
  readonly bio: string,
  readonly moderationStyle: string,
  readonly moderationGuidelines: RevisionEdit|null,
  readonly showHideKarmaOption: boolean,
  readonly markDownPostEditor: boolean,
  readonly hideElicitPredictions: boolean,
  readonly hideAFNonMemberInitialWarning: boolean,
  readonly commentSorting: string,
  readonly location: string,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly mapLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly mapLocationSet: boolean,
  readonly mapMarkerText: string,
  readonly htmlMapMarkerText: string,
  readonly nearbyEventsNotifications: boolean,
  readonly nearbyEventsNotificationsLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly nearbyEventsNotificationsRadius: number,
  readonly nearbyPeopleNotificationThreshold: number,
  readonly hideFrontpageMap: boolean,
  readonly emailSubscribedToCurated: boolean,
  readonly subscribedToDigest: boolean,
  readonly unsubscribeFromAll: boolean,
  readonly emails: Array<any /*{"definitions":[{}]}*/>,
  readonly whenConfirmationEmailSent: Date,
  readonly hideSubscribePoke: boolean,
  readonly hideMeetupsPoke: boolean,
  readonly noCollapseCommentsFrontpage: boolean,
  readonly noCollapseCommentsPosts: boolean,
  readonly noSingleLineComments: boolean,
  readonly karmaChangeNotifierSettings: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"updateFrequency":{"optional":true,"type":{"definitions":[{"allowedValues":["disabled","daily","weekly","realtime"]}]},"label":"Update frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{"type":"SimpleSchema.Integer","min":0,"max":23}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{"allowedValues":["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"]}]},"label":"Day of week gmt"},"showNegativeKarma":{"optional":true,"type":{"definitions":[{}]},"label":"Show negative karma"}},"_depsLabels":{},"_schemaKeys":["updateFrequency","timeOfDayGMT","dayOfWeekGMT","showNegativeKarma"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["updateFrequency","timeOfDayGMT","dayOfWeekGMT","showNegativeKarma"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly karmaChangeLastOpened: Date,
  readonly shortformFeedId: string,
  readonly viewUnreviewedComments: boolean,
  readonly recommendationSettings: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"frontpage":{"type":{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"method":{"type":{"definitions":[{}]},"optional":false,"label":"Method"},"count":{"type":{"definitions":[{"type":"SimpleSchema.Integer"}]},"optional":false,"label":"Count"},"scoreOffset":{"type":{"definitions":[{}]},"optional":false,"label":"Score offset"},"scoreExponent":{"type":{"definitions":[{}]},"optional":false,"label":"Score exponent"},"personalBlogpostModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Personal blogpost modifier"},"frontpageModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Frontpage modifier"},"curatedModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Curated modifier"},"onlyUnread":{"type":{"definitions":[{}]},"optional":false,"label":"Only unread"}},"_depsLabels":{},"_schemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]},"optional":false,"label":"Frontpage"},"frontpageEA":{"type":{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"method":{"type":{"definitions":[{}]},"optional":false,"label":"Method"},"count":{"type":{"definitions":[{"type":"SimpleSchema.Integer"}]},"optional":false,"label":"Count"},"scoreOffset":{"type":{"definitions":[{}]},"optional":false,"label":"Score offset"},"scoreExponent":{"type":{"definitions":[{}]},"optional":false,"label":"Score exponent"},"personalBlogpostModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Personal blogpost modifier"},"frontpageModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Frontpage modifier"},"curatedModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Curated modifier"},"onlyUnread":{"type":{"definitions":[{}]},"optional":false,"label":"Only unread"}},"_depsLabels":{},"_schemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]},"optional":false,"label":"Frontpage ea"},"recommendationspage":{"type":{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"method":{"type":{"definitions":[{}]},"optional":false,"label":"Method"},"count":{"type":{"definitions":[{"type":"SimpleSchema.Integer"}]},"optional":false,"label":"Count"},"scoreOffset":{"type":{"definitions":[{}]},"optional":false,"label":"Score offset"},"scoreExponent":{"type":{"definitions":[{}]},"optional":false,"label":"Score exponent"},"personalBlogpostModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Personal blogpost modifier"},"frontpageModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Frontpage modifier"},"curatedModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Curated modifier"},"onlyUnread":{"type":{"definitions":[{}]},"optional":false,"label":"Only unread"}},"_depsLabels":{},"_schemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]},"optional":false,"label":"Recommendationspage"}},"_depsLabels":{},"_schemaKeys":["frontpage","frontpageEA","recommendationspage"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["frontpage","frontpageEA","recommendationspage"],"_objectKeys":{"frontpage.":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"frontpageEA.":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"recommendationspage.":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"]},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2},"blackbox":true}]}*/,
  readonly bookmarkedPostsMetadata: Array<any /*{"definitions":[{}]}*/>,
  readonly bookmarkedPosts: Array<PostsList>,
  readonly auto_subscribe_to_my_posts: boolean,
  readonly auto_subscribe_to_my_comments: boolean,
  readonly autoSubscribeAsOrganizer: boolean,
  readonly noExpandUnreadCommentsReview: boolean,
  readonly reviewVotesQuadratic: boolean,
  readonly reviewVotesQuadratic2019: boolean,
  readonly hideTaggingProgressBar: boolean,
  readonly hideFrontpageBookAd: boolean,
  readonly abTestKey: string,
  readonly abTestOverrides: any /*{"definitions":[{"type":"JSON","blackbox":true}]}*/,
  readonly sortDrafts: string,
  readonly reenableDraftJs: boolean,
  readonly petrovPressedButtonDate: Date,
  readonly petrovLaunchCodeDate: Date,
}

interface UserKarmaChanges { // fragment on Users
  readonly _id: string,
  readonly karmaChanges: any,
}

interface UsersBannedFromUsersModerationLog { // fragment on Users
  readonly _id: string,
  readonly slug: string,
  readonly displayName: string,
  readonly bannedUserIds: Array<string>,
}

interface SunshineUsersList extends UsersMinimumInfo { // fragment on Users
  readonly karma: number,
  readonly bio: string,
  readonly htmlBio: string,
  readonly createdAt: Date,
  readonly email: string,
  readonly commentCount: number,
  readonly maxCommentCount: number,
  readonly postCount: number,
  readonly maxPostCount: number,
  readonly voteCount: number,
  readonly smallUpvoteCount: number,
  readonly bigUpvoteCount: number,
  readonly smallDownvoteCount: number,
  readonly bigDownvoteCount: number,
  readonly banned: Date,
  readonly reviewedByUserId: string,
  readonly reviewedAt: Date,
  readonly signUpReCaptchaRating: number,
  readonly needsReview: boolean,
  readonly sunshineSnoozed: boolean,
  readonly sunshineNotes: string,
  readonly sunshineFlagged: boolean,
}

interface SharedUserBooleans { // fragment on Users
  readonly walledGardenInvite: boolean,
  readonly hideWalledGardenUI: boolean,
  readonly walledGardenPortalOnboarded: boolean,
  readonly taggingDashboardCollapsed: boolean,
  readonly usernameUnset: boolean,
}

interface UsersMapEntry extends UsersMinimumInfo { // fragment on Users
  readonly createdAt: Date,
  readonly isAdmin: boolean,
  readonly groups: Array<string>,
  readonly location: string,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly mapLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly mapLocationSet: boolean,
  readonly mapMarkerText: string,
  readonly htmlMapMarkerText: string,
  readonly mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface UsersEdit extends UsersProfile { // fragment on Users
  readonly moderationGuidelines: RevisionEdit|null,
  readonly markDownPostEditor: boolean,
  readonly hideElicitPredictions: boolean,
  readonly hideAFNonMemberInitialWarning: boolean,
  readonly hideIntercom: boolean,
  readonly commentSorting: string,
  readonly currentFrontpageFilter: string,
  readonly noCollapseCommentsPosts: boolean,
  readonly noCollapseCommentsFrontpage: boolean,
  readonly noSingleLineComments: boolean,
  readonly email: string,
  readonly whenConfirmationEmailSent: Date,
  readonly emailSubscribedToCurated: boolean,
  readonly subscribedToDigest: boolean,
  readonly unsubscribeFromAll: boolean,
  readonly moderatorAssistance: boolean,
  readonly collapseModerationGuidelines: boolean,
  readonly bannedUserIds: Array<string>,
  readonly bannedPersonalUserIds: Array<string>,
  readonly showHideKarmaOption: boolean,
  readonly voteBanned: boolean,
  readonly nullifyVotes: boolean,
  readonly deleteContent: boolean,
  readonly banned: Date,
  readonly username: string,
  readonly displayName: string,
  readonly fullName: string,
  readonly mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly location: string,
  readonly reviewedByUserId: string,
  readonly reviewForAlignmentForumUserId: string,
  readonly groups: Array<string>,
  readonly afApplicationText: string,
  readonly afSubmittedApplication: boolean,
  readonly karmaChangeLastOpened: Date,
  readonly karmaChangeNotifierSettings: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"updateFrequency":{"optional":true,"type":{"definitions":[{"allowedValues":["disabled","daily","weekly","realtime"]}]},"label":"Update frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{"type":"SimpleSchema.Integer","min":0,"max":23}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{"allowedValues":["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"]}]},"label":"Day of week gmt"},"showNegativeKarma":{"optional":true,"type":{"definitions":[{}]},"label":"Show negative karma"}},"_depsLabels":{},"_schemaKeys":["updateFrequency","timeOfDayGMT","dayOfWeekGMT","showNegativeKarma"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["updateFrequency","timeOfDayGMT","dayOfWeekGMT","showNegativeKarma"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly notificationShortformContent: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly notificationCommentsOnSubscribedPost: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly notificationRepliesToMyComments: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly notificationRepliesToSubscribedComments: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly notificationSubscribedUserPost: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly notificationSubscribedTagPost: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly notificationPostsInGroups: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly notificationPrivateMessage: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly notificationSharedWithMe: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly notificationAlignmentSubmissionApproved: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly notificationEventInRadius: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly notificationRSVPs: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_cleanOptions":{"autoConvert":true,"extendAutoValueContext":{},"filter":true,"getAutoValues":true,"removeEmptyStrings":true,"removeNullsFromArrays":false,"trimStrings":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":{},"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly hideFrontpageMap: boolean,
  readonly hideTaggingProgressBar: boolean,
  readonly hideFrontpageBookAd: boolean,
  readonly deleted: boolean,
}

interface UsersAdmin { // fragment on Users
  readonly _id: string,
  readonly username: string,
  readonly createdAt: Date,
  readonly isAdmin: boolean,
  readonly displayName: string,
  readonly email: string,
  readonly slug: string,
  readonly groups: Array<string>,
  readonly services: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly karma: number,
}

interface PetrovDayLaunchsDefaultFragment { // fragment on PetrovDayLaunchs
  readonly createdAt: Date,
  readonly launchCode: string,
  readonly hashedLaunchCode: string,
  readonly userId: string,
}

interface PetrovDayLaunch { // fragment on PetrovDayLaunchs
  readonly _id: string,
  readonly createdAt: Date,
  readonly launchCode: string,
  readonly userId: string,
}

interface TagRelVotes { // fragment on Votes
  readonly _id: string,
  readonly userId: string,
  readonly voteType: string,
  readonly power: number,
  readonly documentId: string,
  readonly votedAt: Date,
  readonly isUnvote: boolean,
  readonly tagRel: WithVoteTagRel|null,
}

interface TagVotingActivity extends TagRelVotes { // fragment on Votes
  readonly tagRel: TagRelFragment|null,
}

interface SuggestAlignmentComment extends CommentsList { // fragment on Comments
  readonly post: PostsMinimumInfo|null,
  readonly suggestForAlignmentUserIds: Array<string>,
  readonly suggestForAlignmentUsers: Array<SuggestAlignmentComment_suggestForAlignmentUsers>,
}

interface SuggestAlignmentComment_suggestForAlignmentUsers { // fragment on Users
  readonly _id: string,
  readonly displayName: string,
}

interface FragmentTypes {
  UsersDefaultFragment: UsersDefaultFragment
  LWEventsDefaultFragment: LWEventsDefaultFragment
  newEventFragment: newEventFragment
  lastEventFragment: lastEventFragment
  lwEventsAdminPageFragment: lwEventsAdminPageFragment
  emailHistoryFragment: emailHistoryFragment
  PostRelationsDefaultFragment: PostRelationsDefaultFragment
  TagRelsDefaultFragment: TagRelsDefaultFragment
  PostsDefaultFragment: PostsDefaultFragment
  VotesDefaultFragment: VotesDefaultFragment
  CommentsDefaultFragment: CommentsDefaultFragment
  RSSFeedsDefaultFragment: RSSFeedsDefaultFragment
  SequencesDefaultFragment: SequencesDefaultFragment
  TagsDefaultFragment: TagsDefaultFragment
  RevisionsDefaultFragment: RevisionsDefaultFragment
  PostsMinimumInfo: PostsMinimumInfo
  PostsBase: PostsBase
  PostsWithVotes: PostsWithVotes
  PostsListWithVotes: PostsListWithVotes
  PostsAuthors: PostsAuthors
  PostsListBase: PostsListBase
  PostsList: PostsList
  PostsListTag: PostsListTag
  PostsDetails: PostsDetails
  PostsExpandedHighlight: PostsExpandedHighlight
  PostsRevision: PostsRevision
  PostsRevisionEdit: PostsRevisionEdit
  PostsWithNavigationAndRevision: PostsWithNavigationAndRevision
  PostsWithNavigation: PostsWithNavigation
  PostSequenceNavigation: PostSequenceNavigation
  PostsPage: PostsPage
  PostsEdit: PostsEdit
  PostsRevisionsList: PostsRevisionsList
  PostsRecentDiscussion: PostsRecentDiscussion
  UsersBannedFromPostsModerationLog: UsersBannedFromPostsModerationLog
  SunshinePostsList: SunshinePostsList
  WithVotePost: WithVotePost
  HighlightWithHash: HighlightWithHash
  CommentsList: CommentsList
  ShortformComments: ShortformComments
  CommentWithRepliesFragment: CommentWithRepliesFragment
  CommentEdit: CommentEdit
  DeletedCommentsMetaData: DeletedCommentsMetaData
  DeletedCommentsModerationLog: DeletedCommentsModerationLog
  CommentsListWithParentMetadata: CommentsListWithParentMetadata
  WithVoteComment: WithVoteComment
  RevisionDisplay: RevisionDisplay
  RevisionEdit: RevisionEdit
  RevisionMetadata: RevisionMetadata
  RevisionMetadataWithChangeMetrics: RevisionMetadataWithChangeMetrics
  RevisionHistoryEntry: RevisionHistoryEntry
  RevisionTagFragment: RevisionTagFragment
  WithVoteRevision: WithVoteRevision
  NotificationsDefaultFragment: NotificationsDefaultFragment
  NotificationsList: NotificationsList
  ConversationsDefaultFragment: ConversationsDefaultFragment
  MessagesDefaultFragment: MessagesDefaultFragment
  messageListFragment: messageListFragment
  conversationsListFragment: conversationsListFragment
  newConversationFragment: newConversationFragment
  RSSFeedMinimumInfo: RSSFeedMinimumInfo
  newRSSFeedFragment: newRSSFeedFragment
  RSSFeedMutationFragment: RSSFeedMutationFragment
  ReportsDefaultFragment: ReportsDefaultFragment
  unclaimedReportsList: unclaimedReportsList
  TagFlagFragment: TagFlagFragment
  TagFlagEditFragment: TagFlagEditFragment
  TagFlagsDefaultFragment: TagFlagsDefaultFragment
  GardenCodeFragment: GardenCodeFragment
  GardenCodeFragmentEdit: GardenCodeFragmentEdit
  GardenCodesDefaultFragment: GardenCodesDefaultFragment
  BansDefaultFragment: BansDefaultFragment
  BansAdminPageFragment: BansAdminPageFragment
  ChaptersDefaultFragment: ChaptersDefaultFragment
  BooksDefaultFragment: BooksDefaultFragment
  CollectionsDefaultFragment: CollectionsDefaultFragment
  ReviewVotesDefaultFragment: ReviewVotesDefaultFragment
  reviewVoteFragment: reviewVoteFragment
  LocalgroupsDefaultFragment: LocalgroupsDefaultFragment
  localGroupsBase: localGroupsBase
  localGroupsHomeFragment: localGroupsHomeFragment
  localGroupsEdit: localGroupsEdit
  ChaptersFragment: ChaptersFragment
  ChaptersEdit: ChaptersEdit
  SequencesPageTitleFragment: SequencesPageTitleFragment
  SequencesPageFragment: SequencesPageFragment
  SequencesEdit: SequencesEdit
  BookPageFragment: BookPageFragment
  BookEdit: BookEdit
  CollectionsPageFragment: CollectionsPageFragment
  CollectionsEditFragment: CollectionsEditFragment
  SuggestAlignmentPost: SuggestAlignmentPost
  SuggestAlignmentUser: SuggestAlignmentUser
  TagRelBasicInfo: TagRelBasicInfo
  TagRelFragment: TagRelFragment
  TagRelHistoryFragment: TagRelHistoryFragment
  TagRelCreationFragment: TagRelCreationFragment
  TagRelMinimumFragment: TagRelMinimumFragment
  WithVoteTagRel: WithVoteTagRel
  TagBasicInfo: TagBasicInfo
  TagDetailsFragment: TagDetailsFragment
  TagFragment: TagFragment
  TagHistoryFragment: TagHistoryFragment
  TagCreationHistoryFragment: TagCreationHistoryFragment
  TagRevisionFragment: TagRevisionFragment
  TagPreviewFragment: TagPreviewFragment
  TagDetailedPreviewFragment: TagDetailedPreviewFragment
  TagWithFlagsFragment: TagWithFlagsFragment
  TagWithFlagsAndRevisionFragment: TagWithFlagsAndRevisionFragment
  TagPageFragment: TagPageFragment
  TagPageWithRevisionFragment: TagPageWithRevisionFragment
  TagFullContributorsList: TagFullContributorsList
  TagEditFragment: TagEditFragment
  TagRecentDiscussion: TagRecentDiscussion
  SunshineTagFragment: SunshineTagFragment
  SubscriptionsDefaultFragment: SubscriptionsDefaultFragment
  SubscriptionState: SubscriptionState
  UsersMinimumInfo: UsersMinimumInfo
  UsersProfile: UsersProfile
  UsersCurrent: UsersCurrent
  UserKarmaChanges: UserKarmaChanges
  UsersBannedFromUsersModerationLog: UsersBannedFromUsersModerationLog
  SunshineUsersList: SunshineUsersList
  SharedUserBooleans: SharedUserBooleans
  UsersMapEntry: UsersMapEntry
  UsersEdit: UsersEdit
  UsersAdmin: UsersAdmin
  PetrovDayLaunchsDefaultFragment: PetrovDayLaunchsDefaultFragment
  PetrovDayLaunch: PetrovDayLaunch
  TagRelVotes: TagRelVotes
  TagVotingActivity: TagVotingActivity
  SuggestAlignmentComment: SuggestAlignmentComment
}

interface CollectionNamesByFragmentName {
  UsersDefaultFragment: "Users"
  LWEventsDefaultFragment: "LWEvents"
  newEventFragment: "LWEvents"
  lastEventFragment: "LWEvents"
  lwEventsAdminPageFragment: "LWEvents"
  emailHistoryFragment: "LWEvents"
  PostRelationsDefaultFragment: "PostRelations"
  TagRelsDefaultFragment: "TagRels"
  PostsDefaultFragment: "Posts"
  VotesDefaultFragment: "Votes"
  CommentsDefaultFragment: "Comments"
  RSSFeedsDefaultFragment: "RSSFeeds"
  SequencesDefaultFragment: "Sequences"
  TagsDefaultFragment: "Tags"
  RevisionsDefaultFragment: "Revisions"
  PostsMinimumInfo: "Posts"
  PostsBase: "Posts"
  PostsWithVotes: "Posts"
  PostsListWithVotes: "Posts"
  PostsAuthors: "Posts"
  PostsListBase: "Posts"
  PostsList: "Posts"
  PostsListTag: "Posts"
  PostsDetails: "Posts"
  PostsExpandedHighlight: "Posts"
  PostsRevision: "Posts"
  PostsRevisionEdit: "Posts"
  PostsWithNavigationAndRevision: "Posts"
  PostsWithNavigation: "Posts"
  PostSequenceNavigation: "Posts"
  PostsPage: "Posts"
  PostsEdit: "Posts"
  PostsRevisionsList: "Posts"
  PostsRecentDiscussion: "Posts"
  UsersBannedFromPostsModerationLog: "Posts"
  SunshinePostsList: "Posts"
  WithVotePost: "Posts"
  HighlightWithHash: "Posts"
  CommentsList: "Comments"
  ShortformComments: "Comments"
  CommentWithRepliesFragment: "Comments"
  CommentEdit: "Comments"
  DeletedCommentsMetaData: "Comments"
  DeletedCommentsModerationLog: "Comments"
  CommentsListWithParentMetadata: "Comments"
  WithVoteComment: "Comments"
  RevisionDisplay: "Revisions"
  RevisionEdit: "Revisions"
  RevisionMetadata: "Revisions"
  RevisionMetadataWithChangeMetrics: "Revisions"
  RevisionHistoryEntry: "Revisions"
  RevisionTagFragment: "Revisions"
  WithVoteRevision: "Revisions"
  NotificationsDefaultFragment: "Notifications"
  NotificationsList: "Notifications"
  ConversationsDefaultFragment: "Conversations"
  MessagesDefaultFragment: "Messages"
  messageListFragment: "Messages"
  conversationsListFragment: "Conversations"
  newConversationFragment: "Conversations"
  RSSFeedMinimumInfo: "RSSFeeds"
  newRSSFeedFragment: "RSSFeeds"
  RSSFeedMutationFragment: "RSSFeeds"
  ReportsDefaultFragment: "Reports"
  unclaimedReportsList: "Reports"
  TagFlagFragment: "TagFlags"
  TagFlagEditFragment: "TagFlags"
  TagFlagsDefaultFragment: "TagFlags"
  GardenCodeFragment: "GardenCodes"
  GardenCodeFragmentEdit: "GardenCodes"
  GardenCodesDefaultFragment: "GardenCodes"
  BansDefaultFragment: "Bans"
  BansAdminPageFragment: "Bans"
  ChaptersDefaultFragment: "Chapters"
  BooksDefaultFragment: "Books"
  CollectionsDefaultFragment: "Collections"
  ReviewVotesDefaultFragment: "ReviewVotes"
  reviewVoteFragment: "ReviewVotes"
  LocalgroupsDefaultFragment: "Localgroups"
  localGroupsBase: "Localgroups"
  localGroupsHomeFragment: "Localgroups"
  localGroupsEdit: "Localgroups"
  ChaptersFragment: "Chapters"
  ChaptersEdit: "Chapters"
  SequencesPageTitleFragment: "Sequences"
  SequencesPageFragment: "Sequences"
  SequencesEdit: "Sequences"
  BookPageFragment: "Books"
  BookEdit: "Books"
  CollectionsPageFragment: "Collections"
  CollectionsEditFragment: "Collections"
  SuggestAlignmentPost: "Posts"
  SuggestAlignmentUser: "Users"
  TagRelBasicInfo: "TagRels"
  TagRelFragment: "TagRels"
  TagRelHistoryFragment: "TagRels"
  TagRelCreationFragment: "TagRels"
  TagRelMinimumFragment: "TagRels"
  WithVoteTagRel: "TagRels"
  TagBasicInfo: "Tags"
  TagDetailsFragment: "Tags"
  TagFragment: "Tags"
  TagHistoryFragment: "Tags"
  TagCreationHistoryFragment: "Tags"
  TagRevisionFragment: "Tags"
  TagPreviewFragment: "Tags"
  TagDetailedPreviewFragment: "Tags"
  TagWithFlagsFragment: "Tags"
  TagWithFlagsAndRevisionFragment: "Tags"
  TagPageFragment: "Tags"
  TagPageWithRevisionFragment: "Tags"
  TagFullContributorsList: "Tags"
  TagEditFragment: "Tags"
  TagRecentDiscussion: "Tags"
  SunshineTagFragment: "Tags"
  SubscriptionsDefaultFragment: "Subscriptions"
  SubscriptionState: "Subscriptions"
  UsersMinimumInfo: "Users"
  UsersProfile: "Users"
  UsersCurrent: "Users"
  UserKarmaChanges: "Users"
  UsersBannedFromUsersModerationLog: "Users"
  SunshineUsersList: "Users"
  SharedUserBooleans: "Users"
  UsersMapEntry: "Users"
  UsersEdit: "Users"
  UsersAdmin: "Users"
  PetrovDayLaunchsDefaultFragment: "PetrovDayLaunchs"
  PetrovDayLaunch: "PetrovDayLaunchs"
  TagRelVotes: "Votes"
  TagVotingActivity: "Votes"
  SuggestAlignmentComment: "Comments"
}

type CollectionNameString = "Bans"|"Books"|"Chapters"|"Collections"|"Comments"|"Conversations"|"DatabaseMetadata"|"DebouncerEvents"|"EmailTokens"|"GardenCodes"|"LWEvents"|"LegacyData"|"Localgroups"|"Messages"|"Migrations"|"Notifications"|"PetrovDayLaunchs"|"PostRelations"|"Posts"|"RSSFeeds"|"ReadStatuses"|"Reports"|"ReviewVotes"|"Revisions"|"Sequences"|"Subscriptions"|"TagFlags"|"TagRels"|"Tags"|"Users"|"Votes"

