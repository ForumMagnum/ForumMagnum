//
// GENERATED FILE
// Do not edit this file directly. Instead, start a server and run "npm run generate",
// which will cause this file to be regenerated. This file should nevertheless be
// checked in to version control.
//
// Contains Typescript signatures for fragments, generated by
// server/codegen/generateFragmentTypes.ts.
//
interface AdvisorRequestsDefaultFragment { // fragment on AdvisorRequests
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly interestedInMetaculus: boolean,
  readonly jobAds: Array<{
    state: "seen" | "expanded" | "interested" | "uninterested",
    uninterestedReason: string | null,
    lastUpdated: Date,
  }> | null,
}

interface ArbitalCachesDefaultFragment { // fragment on ArbitalCaches
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface ArbitalTagContentRelsDefaultFragment { // fragment on ArbitalTagContentRels
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly parentDocumentId: string,
  readonly childDocumentId: string,
  readonly parentCollectionName: "Tags" | "MultiDocuments",
  readonly childCollectionName: "Tags" | "MultiDocuments",
  readonly type: "parent-taught-by-child" | "parent-is-requirement-of-child" | "parent-is-tag-of-child" | "parent-is-parent-of-child",
  readonly level: number,
  readonly isStrong: boolean,
}

interface BansDefaultFragment { // fragment on Bans
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly expirationDate: Date | null,
  readonly userId: string,
  readonly ip: string,
  readonly reason: string,
  readonly comment: string,
  readonly properties: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface BooksDefaultFragment { // fragment on Books
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly contents_latest: string | null,
  readonly postedAt: Date,
  readonly title: string,
  readonly subtitle: string,
  readonly tocTitle: string | null,
  readonly collectionId: string,
  readonly number: number,
  readonly postIds: Array<string>,
  readonly sequenceIds: Array<string>,
  readonly displaySequencesAsGrid: boolean,
  readonly hideProgressBar: boolean,
  readonly showChapters: boolean,
}

interface ChaptersDefaultFragment { // fragment on Chapters
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly contents_latest: string | null,
  readonly title: string,
  readonly subtitle: string,
  readonly number: number,
  readonly sequenceId: string,
  readonly postIds: Array<string>,
}

interface CkEditorUserSessionsDefaultFragment { // fragment on CkEditorUserSessions
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly documentId: string,
  readonly userId: string,
  readonly endedAt: Date,
  readonly endedBy: string,
}

interface ClientIdsDefaultFragment { // fragment on ClientIds
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly clientId: string,
  readonly firstSeenReferrer: string | null,
  readonly firstSeenLandingPage: string,
  readonly userIds: Array<string> | null,
  readonly invalidated: boolean,
  readonly lastSeenAt: Date | null,
  readonly timesSeen: number,
}

interface CollectionsDefaultFragment { // fragment on Collections
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly contents_latest: string | null,
  readonly userId: string,
  readonly title: string,
  readonly slug: string,
  readonly gridImageId: string,
  readonly firstPageLink: string,
  readonly hideStartReadingButton: boolean,
  readonly noindex: boolean,
}

interface CommentModeratorActionsDefaultFragment { // fragment on CommentModeratorActions
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly commentId: string,
  readonly type: "downvotedCommentAlert",
  readonly endedAt: Date | null,
}

interface CommentsDefaultFragment { // fragment on Comments
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly contents_latest: string | null,
  readonly pingbacks: any /*{"definitions":[{}]}*/,
  readonly parentCommentId: string,
  readonly topLevelCommentId: string,
  readonly postedAt: Date,
  readonly lastEditedAt: Date | null,
  readonly author: string,
  readonly postId: string,
  readonly tagId: string,
  readonly forumEventId: string,
  readonly forumEventMetadata: {
    eventFormat: "BASIC" | "POLL" | "STICKERS",
    sticker: {
      _id: string,
      x: number,
      y: number,
      theta: number,
      emoji: string,
    } | null,
    poll: {
      voteWhenPublished: number,
      latestVote: number | null,
    } | null,
  },
  readonly tagCommentType: "SUBFORUM" | "DISCUSSION",
  readonly subforumStickyPriority: number | null,
  readonly userId: string,
  readonly userIP: string,
  readonly userAgent: string,
  readonly referrer: string,
  readonly authorIsUnreviewed: boolean,
  readonly answer: boolean,
  readonly parentAnswerId: string,
  readonly directChildrenCount: number,
  readonly descendentCount: number,
  readonly shortform: boolean,
  readonly shortformFrontpage: boolean,
  readonly nominatedForReview: string,
  readonly reviewingForReview: string,
  readonly lastSubthreadActivity: Date,
  readonly postVersion: string,
  readonly promoted: boolean,
  readonly promotedByUserId: string,
  readonly promotedAt: Date,
  readonly hideKarma: boolean,
  readonly legacy: boolean,
  readonly legacyId: string,
  readonly legacyPoll: boolean,
  readonly legacyParentId: string,
  readonly retracted: boolean,
  readonly deleted: boolean,
  readonly deletedPublic: boolean,
  readonly deletedReason: string,
  readonly deletedDate: Date,
  readonly deletedByUserId: string,
  readonly spam: boolean,
  readonly repliesBlockedUntil: Date,
  readonly needsReview: boolean,
  readonly reviewedByUserId: string,
  readonly hideAuthor: boolean,
  readonly moderatorHat: boolean,
  readonly hideModeratorHat: boolean | null,
  readonly isPinnedOnProfile: boolean,
  readonly title: string,
  readonly relevantTagIds: Array<string>,
  readonly debateResponse: boolean | null,
  readonly rejected: boolean,
  readonly modGPTAnalysis: string | null,
  readonly modGPTRecommendation: string | null,
  readonly rejectedReason: string | null,
  readonly rejectedByUserId: string,
  readonly af: boolean,
  readonly suggestForAlignmentUserIds: Array<string>,
  readonly reviewForAlignmentUserId: string,
  readonly afDate: Date,
  readonly moveToAlignmentUserId: string,
  readonly agentFoundationsId: string,
  readonly originalDialogueId: string | null,
  readonly voteCount: number,
  readonly baseScore: number,
  readonly extendedScore: any /*{"definitions":[{"type":"JSON"}]}*/,
  readonly score: number,
  readonly afBaseScore: number | null,
  readonly afExtendedScore: any /*{"definitions":[{"type":"JSON"}]}*/,
  readonly afVoteCount: number | null,
}

interface ConversationsDefaultFragment { // fragment on Conversations
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly title: string,
  readonly participantIds: Array<string>,
  readonly latestActivity: Date,
  readonly af: boolean,
  readonly messageCount: number,
  readonly moderator: boolean | null,
  readonly archivedByIds: Array<string>,
}

interface CronHistoriesDefaultFragment { // fragment on CronHistories
  readonly _id: string,
  readonly intendedAt: Date,
  readonly name: string,
  readonly startedAt: Date,
  readonly finishedAt: Date | null,
  readonly result: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface CurationEmailsDefaultFragment { // fragment on CurationEmails
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly postId: string,
}

interface CurationNoticesDefaultFragment { // fragment on CurationNotices
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly contents_latest: string | null,
  readonly userId: string,
  readonly commentId: string | null,
  readonly postId: string,
  readonly deleted: boolean,
}

interface DatabaseMetadataDefaultFragment { // fragment on DatabaseMetadata
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface DebouncerEventsDefaultFragment { // fragment on DebouncerEvents
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface DialogueChecksDefaultFragment { // fragment on DialogueChecks
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly targetUserId: string,
  readonly checked: boolean,
  readonly checkedAt: Date,
  readonly hideInRecommendations: boolean,
}

interface DialogueMatchPreferencesDefaultFragment { // fragment on DialogueMatchPreferences
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly dialogueCheckId: string,
  readonly topicPreferences: Array<{
    text: string,
    preference: "Yes" | "No",
    commentSourceId: string | null,
  }>,
  readonly topicNotes: string,
  readonly syncPreference: "Yes" | "Meh" | "No",
  readonly asyncPreference: "Yes" | "Meh" | "No",
  readonly formatNotes: string,
  readonly calendlyLink: string | null,
  readonly generatedDialogueId: string | null,
  readonly deleted: boolean,
}

interface DigestPostsDefaultFragment { // fragment on DigestPosts
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly digestId: string,
  readonly postId: string,
  readonly emailDigestStatus: string | null,
  readonly onsiteDigestStatus: string | null,
}

interface DigestsDefaultFragment { // fragment on Digests
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly num: number,
  readonly startDate: Date,
  readonly endDate: Date | null,
  readonly publishedDate: Date | null,
  readonly onsiteImageId: string | null,
  readonly onsitePrimaryColor: string | null,
}

interface ElectionCandidatesDefaultFragment { // fragment on ElectionCandidates
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly electionName: string,
  readonly name: string,
  readonly logoSrc: string,
  readonly href: string,
  readonly fundraiserLink: string | null,
  readonly gwwcLink: string | null,
  readonly gwwcId: string | null,
  readonly description: string,
  readonly userId: string,
  readonly postCount: number,
  readonly tagId: string,
  readonly isElectionFundraiser: boolean,
  readonly amountRaised: number | null,
  readonly targetAmount: number | null,
  readonly voteCount: number,
  readonly baseScore: number,
  readonly extendedScore: any /*{"definitions":[{"type":"JSON"}]}*/,
  readonly score: number,
  readonly afBaseScore: number | null,
  readonly afExtendedScore: any /*{"definitions":[{"type":"JSON"}]}*/,
  readonly afVoteCount: number | null,
}

interface ElectionVotesDefaultFragment { // fragment on ElectionVotes
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly electionName: string,
  readonly userId: string,
  readonly compareState: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly vote: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly submittedAt: Date | null,
  readonly submissionComments: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userExplanation: string | null,
  readonly userOtherComments: string | null,
}

interface ElicitQuestionPredictionsDefaultFragment { // fragment on ElicitQuestionPredictions
  readonly _id: string,
  readonly prediction: number | null,
  readonly createdAt: Date,
  readonly notes: string | null,
  readonly creator: {
    _id: string,
    displayName: string,
    isQuestionCreator: boolean,
    sourceUserId: string | null,
  },
  readonly userId: string | null,
  readonly sourceUrl: string | null,
  readonly sourceId: string | null,
  readonly binaryQuestionId: string,
  readonly isDeleted: boolean,
}

interface ElicitQuestionsDefaultFragment { // fragment on ElicitQuestions
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly title: string,
  readonly notes: string | null,
  readonly resolution: string | null,
  readonly resolvesBy: Date | null,
}

interface EmailTokensDefaultFragment { // fragment on EmailTokens
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface FeaturedResourcesDefaultFragment { // fragment on FeaturedResources
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly title: string,
  readonly body: string | null,
  readonly ctaText: string,
  readonly ctaUrl: string,
  readonly expiresAt: Date | null,
}

interface FieldChangesDefaultFragment { // fragment on FieldChanges
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly changeGroup: string,
  readonly documentId: string,
  readonly fieldName: string,
  readonly oldValue: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly newValue: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface ForumEventsDefaultFragment { // fragment on ForumEvents
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly frontpageDescription_latest: string | null,
  readonly frontpageDescriptionMobile_latest: string | null,
  readonly postPageDescription_latest: string | null,
  readonly title: string,
  readonly startDate: Date,
  readonly endDate: Date,
  readonly darkColor: string,
  readonly lightColor: string,
  readonly bannerTextColor: string,
  readonly contrastColor: string | null,
  readonly tagId: string | null,
  readonly postId: string | null,
  readonly bannerImageId: string | null,
  readonly includesPoll: boolean,
  readonly eventFormat: "BASIC" | "POLL" | "STICKERS",
  readonly pollQuestion_latest: string | null,
  readonly pollAgreeWording: string | null,
  readonly pollDisagreeWording: string | null,
  readonly maxStickersPerUser: number,
  readonly customComponent: string | null,
  readonly commentPrompt: string | null,
  readonly publicData: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface GardenCodesDefaultFragment { // fragment on GardenCodes
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly contents_latest: string | null,
  readonly pingbacks: any /*{"definitions":[{}]}*/,
  readonly slug: string,
  readonly code: string,
  readonly title: string,
  readonly userId: string,
  readonly startTime: Date,
  readonly endTime: Date,
  readonly fbLink: string,
  readonly type: string,
  readonly hidden: boolean,
  readonly deleted: boolean,
  readonly afOnly: boolean,
}

interface GoogleServiceAccountSessionsDefaultFragment { // fragment on GoogleServiceAccountSessions
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly email: string,
  readonly estimatedExpiry: Date,
  readonly active: boolean,
  readonly revoked: boolean,
}

interface ImagesDefaultFragment { // fragment on Images
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface JargonTermsDefaultFragment { // fragment on JargonTerms
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly contents_latest: string | null,
  readonly postId: string,
  readonly term: string,
  readonly approved: boolean,
  readonly deleted: boolean,
  readonly altTerms: Array<string>,
}

interface LWEventsDefaultFragment { // fragment on LWEvents
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly name: string,
  readonly documentId: string,
  readonly important: boolean,
  readonly properties: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly intercom: boolean,
}

interface LegacyDataDefaultFragment { // fragment on LegacyData
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface LlmConversationsDefaultFragment { // fragment on LlmConversations
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly title: string,
  readonly model: string,
  readonly systemPrompt: string | null,
  readonly deleted: boolean,
}

interface LlmMessagesDefaultFragment { // fragment on LlmMessages
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly conversationId: string,
  readonly role: "user" | "assistant" | "user-context" | "assistant-context" | "lw-assistant",
  readonly content: string,
}

interface LocalgroupsDefaultFragment { // fragment on Localgroups
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly contents_latest: string | null,
  readonly name: string,
  readonly nameInAnotherLanguage: string,
  readonly organizerIds: Array<string>,
  readonly lastActivity: Date,
  readonly types: Array<string>,
  readonly categories: Array<string>,
  readonly isOnline: boolean,
  readonly mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly location: string,
  readonly contactInfo: string,
  readonly facebookLink: string,
  readonly facebookPageLink: string,
  readonly meetupLink: string,
  readonly slackLink: string,
  readonly website: string,
  readonly bannerImageId: string,
  readonly inactive: boolean,
  readonly deleted: boolean,
}

interface ManifoldProbabilitiesCachesDefaultFragment { // fragment on ManifoldProbabilitiesCaches
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly marketId: string,
  readonly probability: number,
  readonly isResolved: boolean,
  readonly year: number,
  readonly lastUpdated: Date,
  readonly url: string | null,
}

interface MessagesDefaultFragment { // fragment on Messages
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly contents_latest: string | null,
  readonly userId: string,
  readonly conversationId: string,
  readonly noEmail: boolean,
}

interface MigrationsDefaultFragment { // fragment on Migrations
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface ModerationTemplatesDefaultFragment { // fragment on ModerationTemplates
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly contents_latest: string | null,
  readonly name: string,
  readonly collectionName: "Messages" | "Comments" | "Rejections",
  readonly order: number,
  readonly deleted: boolean,
}

interface ModeratorActionsDefaultFragment { // fragment on ModeratorActions
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly type: "rateLimitOnePerDay" | "rateLimitOnePerThreeDays" | "rateLimitOnePerWeek" | "rateLimitOnePerFortnight" | "rateLimitOnePerMonth" | "rateLimitThreeCommentsPerPost" | "recentlyDownvotedContentAlert" | "lowAverageKarmaCommentAlert" | "lowAverageKarmaPostAlert" | "negativeUserKarmaAlert" | "movedPostToDraft" | "sentModeratorMessage" | "manualFlag" | "votingPatternWarningDelivered" | "flaggedForNDMs" | "autoBlockedFromSendingDMs" | "rejectedPost" | "rejectedComment" | "potentialTargetedDownvoting" | "exemptFromRateLimits" | "receivedSeniorDownvotesAlert",
  readonly endedAt: Date | null,
}

interface MultiDocumentsDefaultFragment { // fragment on MultiDocuments
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly contents_latest: string | null,
  readonly pingbacks: any /*{"definitions":[{}]}*/,
  readonly slug: string,
  readonly oldSlugs: Array<string>,
  readonly title: string | null,
  readonly preview: string | null,
  readonly tabTitle: string,
  readonly tabSubtitle: string | null,
  readonly userId: string,
  readonly parentDocumentId: string,
  readonly collectionName: "Tags" | "MultiDocuments",
  readonly fieldName: "description" | "summary",
  readonly index: number,
  readonly contributionStats: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly htmlWithContributorAnnotations: string,
  readonly deleted: boolean,
  readonly voteCount: number,
  readonly baseScore: number,
  readonly extendedScore: any /*{"definitions":[{"type":"JSON"}]}*/,
  readonly score: number,
  readonly afBaseScore: number | null,
  readonly afExtendedScore: any /*{"definitions":[{"type":"JSON"}]}*/,
  readonly afVoteCount: number | null,
}

interface NotificationsDefaultFragment { // fragment on Notifications
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly documentId: string,
  readonly documentType: string,
  readonly extraData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly link: string,
  readonly title: string,
  readonly message: string,
  readonly type: string,
  readonly deleted: boolean,
  readonly viewed: boolean,
  readonly emailed: boolean,
  readonly waitingForBatch: boolean,
}

interface PageCacheDefaultFragment { // fragment on PageCache
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface PetrovDayActionsDefaultFragment { // fragment on PetrovDayActions
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly actionType: "optIn" | "hasRole" | "hasSide" | "nukeTheWest" | "nukeTheEast" | "eastPetrovAllClear" | "eastPetrovNukesIncoming" | "westPetrovAllClear" | "westPetrovNukesIncoming",
  readonly data: any /*{"definitions":[{}]}*/,
  readonly userId: string,
}

interface PetrovDayLaunchsDefaultFragment { // fragment on PetrovDayLaunchs
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly launchCode: string,
  readonly hashedLaunchCode: string,
  readonly userId: string,
}

interface PodcastEpisodesDefaultFragment { // fragment on PodcastEpisodes
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly podcastId: string,
  readonly title: string,
  readonly episodeLink: string,
  readonly externalEpisodeId: string,
}

interface PodcastsDefaultFragment { // fragment on Podcasts
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly title: string,
  readonly applePodcastLink: string | null,
  readonly spotifyPodcastLink: string | null,
}

interface PostEmbeddingsDefaultFragment { // fragment on PostEmbeddings
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly postId: string,
  readonly postHash: string,
  readonly lastGeneratedAt: Date,
  readonly model: string,
  readonly embeddings: Array<number>,
}

interface PostRecommendationsDefaultFragment { // fragment on PostRecommendations
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string | null,
  readonly clientId: string | null,
  readonly postId: string,
  readonly strategyName: string,
  readonly strategySettings: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly recommendationCount: number,
  readonly lastRecommendedAt: Date,
  readonly clickedAt: Date | null,
}

interface PostRelationsDefaultFragment { // fragment on PostRelations
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly type: string,
  readonly sourcePostId: string,
  readonly targetPostId: string,
  readonly order: number,
}

interface PostViewTimesDefaultFragment { // fragment on PostViewTimes
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface PostViewsDefaultFragment { // fragment on PostViews
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface PostsDefaultFragment { // fragment on Posts
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly contents_latest: string | null,
  readonly pingbacks: any /*{"definitions":[{}]}*/,
  readonly moderationGuidelines_latest: string | null,
  readonly customHighlight_latest: string | null,
  readonly slug: string,
  readonly postedAt: Date,
  readonly modifiedAt: Date,
  readonly url: string,
  readonly postCategory: "post" | "linkpost" | "question",
  readonly title: string,
  readonly viewCount: number,
  readonly lastCommentedAt: Date,
  readonly clickCount: number,
  readonly deletedDraft: boolean,
  readonly status: number,
  readonly isFuture: boolean,
  readonly sticky: boolean,
  readonly stickyPriority: number,
  readonly userIP: string,
  readonly userAgent: string,
  readonly referrer: string,
  readonly author: string,
  readonly userId: string,
  readonly question: boolean,
  readonly authorIsUnreviewed: boolean,
  readonly readTimeMinutesOverride: number,
  readonly submitToFrontpage: boolean,
  readonly hiddenRelatedQuestion: boolean,
  readonly originalPostRelationSourceId: string,
  readonly shortform: boolean,
  readonly canonicalSource: string,
  readonly nominationCount2018: number,
  readonly nominationCount2019: number,
  readonly reviewCount2018: number,
  readonly reviewCount2019: number,
  readonly reviewCount: number,
  readonly reviewVoteCount: number,
  readonly positiveReviewVoteCount: number,
  readonly manifoldReviewMarketId: string | null,
  readonly reviewVoteScoreAF: number,
  readonly reviewVotesAF: Array<number>,
  readonly reviewVoteScoreHighKarma: number,
  readonly reviewVotesHighKarma: Array<number>,
  readonly reviewVoteScoreAllKarma: number,
  readonly reviewVotesAllKarma: Array<number>,
  readonly finalReviewVoteScoreHighKarma: number,
  readonly finalReviewVotesHighKarma: Array<number>,
  readonly finalReviewVoteScoreAllKarma: number,
  readonly finalReviewVotesAllKarma: Array<number>,
  readonly finalReviewVoteScoreAF: number,
  readonly finalReviewVotesAF: Array<number>,
  readonly lastCommentPromotedAt: Date,
  readonly tagRelevance: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly noIndex: boolean,
  readonly rsvps: Array<{
    name: string,
    email: string,
    nonPublic: boolean,
    response: "yes" | "maybe" | "no",
    userId: string | null,
    createdAt: Date,
  }>,
  readonly activateRSVPs: boolean,
  readonly nextDayReminderSent: boolean,
  readonly onlyVisibleToLoggedIn: boolean,
  readonly onlyVisibleToEstablishedAccounts: boolean,
  readonly hideFromRecentDiscussions: boolean,
  readonly votingSystem: string,
  readonly podcastEpisodeId: string | null,
  readonly forceAllowType3Audio: boolean,
  readonly legacy: boolean,
  readonly legacyId: string,
  readonly legacySpam: boolean,
  readonly feedId: string,
  readonly feedLink: string,
  readonly curatedDate: Date,
  readonly metaDate: Date,
  readonly suggestForCuratedUserIds: Array<string>,
  readonly frontpageDate: Date,
  readonly autoFrontpage: "show" | "hide" | null,
  readonly collectionTitle: string,
  readonly coauthorStatuses: Array<{
    userId: string,
    confirmed: boolean,
    requested: boolean,
  }> | null,
  readonly hasCoauthorPermission: boolean,
  readonly socialPreviewImageId: string,
  readonly socialPreviewImageAutoUrl: string,
  readonly socialPreview: {
    imageId: string | null,
    text: string | null,
  },
  readonly fmCrosspost: {
    isCrosspost: boolean,
    hostedHere: boolean | null,
    foreignPostId: string | null,
  },
  readonly canonicalSequenceId: string,
  readonly canonicalCollectionSlug: string,
  readonly canonicalBookId: string,
  readonly canonicalNextPostSlug: string,
  readonly canonicalPrevPostSlug: string,
  readonly unlisted: boolean,
  readonly disableRecommendation: boolean,
  readonly defaultRecommendation: boolean,
  readonly hideFromPopularComments: boolean,
  readonly draft: boolean,
  readonly wasEverUndrafted: boolean,
  readonly meta: boolean,
  readonly hideFrontpageComments: boolean,
  readonly maxBaseScore: number,
  readonly scoreExceeded2Date: Date | null,
  readonly scoreExceeded30Date: Date | null,
  readonly scoreExceeded45Date: Date | null,
  readonly scoreExceeded75Date: Date | null,
  readonly scoreExceeded125Date: Date | null,
  readonly scoreExceeded200Date: Date | null,
  readonly bannedUserIds: Array<string>,
  readonly commentsLocked: boolean,
  readonly commentsLockedToAccountsCreatedAfter: Date,
  readonly organizerIds: Array<string>,
  readonly groupId: string,
  readonly eventType: string,
  readonly isEvent: boolean,
  readonly reviewedByUserId: string,
  readonly reviewForCuratedUserId: string,
  readonly startTime: Date | null,
  readonly localStartTime: Date,
  readonly endTime: Date | null,
  readonly localEndTime: Date,
  readonly eventRegistrationLink: string,
  readonly joinEventLink: string,
  readonly onlineEvent: boolean,
  readonly globalEvent: boolean,
  readonly mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly location: string,
  readonly contactInfo: string,
  readonly facebookLink: string,
  readonly meetupLink: string,
  readonly website: string,
  readonly eventImageId: string,
  readonly types: Array<string>,
  readonly metaSticky: boolean,
  readonly sharingSettings: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly shareWithUsers: Array<string>,
  readonly linkSharingKey: string | null,
  readonly linkSharingKeyUsedBy: Array<string>,
  readonly commentSortOrder: string,
  readonly hideAuthor: boolean,
  readonly sideCommentVisibility: string,
  readonly disableSidenotes: boolean,
  readonly moderationStyle: string,
  readonly ignoreRateLimits: boolean | null,
  readonly hideCommentKarma: boolean,
  readonly commentCount: number,
  readonly topLevelCommentCount: number,
  readonly debate: boolean,
  readonly collabEditorDialogue: boolean,
  readonly mostRecentPublishedDialogueResponseDate: Date | null,
  readonly rejected: boolean,
  readonly rejectedReason: string | null,
  readonly rejectedByUserId: string,
  readonly subforumTagId: string,
  readonly af: boolean,
  readonly afDate: Date,
  readonly afCommentCount: number,
  readonly afLastCommentedAt: Date,
  readonly afSticky: boolean,
  readonly suggestForAlignmentUserIds: Array<string>,
  readonly reviewForAlignmentUserId: string,
  readonly agentFoundationsId: string,
  readonly swrCachingEnabled: boolean,
  readonly generateDraftJargon: boolean,
  readonly voteCount: number,
  readonly baseScore: number,
  readonly extendedScore: any /*{"definitions":[{"type":"JSON"}]}*/,
  readonly score: number,
  readonly afBaseScore: number | null,
  readonly afExtendedScore: any /*{"definitions":[{"type":"JSON"}]}*/,
  readonly afVoteCount: number | null,
}

interface RSSFeedsDefaultFragment { // fragment on RSSFeeds
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly ownedByUser: boolean,
  readonly displayFullContent: boolean,
  readonly nickname: string,
  readonly url: string,
  readonly status: string,
  readonly rawFeed: any /*{"definitions":[{}]}*/,
  readonly setCanonicalUrl: boolean,
  readonly importAsDraft: boolean,
}

interface ReadStatusesDefaultFragment { // fragment on ReadStatuses
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface RecommendationsCachesDefaultFragment { // fragment on RecommendationsCaches
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly postId: string,
  readonly source: "recombee" | "vertex",
  readonly scenario: string,
  readonly attributionId: string,
  readonly ttlMs: number,
}

interface ReportsDefaultFragment { // fragment on Reports
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly reportedUserId: string,
  readonly commentId: string,
  readonly postId: string,
  readonly link: string,
  readonly claimedUserId: string,
  readonly description: string,
  readonly closedAt: Date | null,
  readonly markedAsSpam: boolean,
  readonly reportedAsSpam: boolean,
}

interface ReviewVotesDefaultFragment { // fragment on ReviewVotes
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly postId: string,
  readonly qualitativeScore: number,
  readonly quadraticScore: number,
  readonly comment: string,
  readonly year: string,
  readonly dummy: boolean,
  readonly reactions: Array<string>,
}

interface ReviewWinnerArtsDefaultFragment { // fragment on ReviewWinnerArts
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly postId: string,
  readonly splashArtImagePrompt: string,
  readonly splashArtImageUrl: string,
}

interface ReviewWinnersDefaultFragment { // fragment on ReviewWinners
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly postId: string,
  readonly reviewYear: number,
  readonly category: "rationality" | "modeling" | "optimization" | "ai strategy" | "ai safety" | "practical",
  readonly curatedOrder: number | null,
  readonly reviewRanking: number,
  readonly isAI: boolean | null,
}

interface RevisionsDefaultFragment { // fragment on Revisions
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly documentId: string,
  readonly collectionName: string,
  readonly fieldName: string,
  readonly editedAt: Date,
  readonly updateType: "initial" | "patch" | "minor" | "major" | null,
  readonly version: string,
  readonly commitMessage: string,
  readonly userId: string,
  readonly draft: boolean,
  readonly originalContents: any /*ContentType*/,
  readonly html: string,
  readonly wordCount: number,
  readonly changeMetrics: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly googleDocMetadata: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly skipAttributions: boolean,
  readonly voteCount: number,
  readonly baseScore: number,
  readonly extendedScore: any /*{"definitions":[{"type":"JSON"}]}*/,
  readonly score: number,
  readonly afBaseScore: number | null,
  readonly afExtendedScore: any /*{"definitions":[{"type":"JSON"}]}*/,
  readonly afVoteCount: number | null,
}

interface SequencesDefaultFragment { // fragment on Sequences
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly contents_latest: string | null,
  readonly lastUpdated: Date,
  readonly userId: string,
  readonly title: string,
  readonly bannerImageId: string,
  readonly gridImageId: string,
  readonly hideFromAuthorPage: boolean,
  readonly draft: boolean,
  readonly isDeleted: boolean,
  readonly curatedOrder: number,
  readonly userProfileOrder: number,
  readonly canonicalCollectionSlug: string,
  readonly hidden: boolean,
  readonly noindex: boolean,
  readonly af: boolean,
}

interface SessionsDefaultFragment { // fragment on Sessions
  readonly _id: string,
  readonly session: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly expires: Date | null,
  readonly lastModified: Date | null,
}

interface SideCommentCachesDefaultFragment { // fragment on SideCommentCaches
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface SplashArtCoordinatesDefaultFragment { // fragment on SplashArtCoordinates
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly reviewWinnerArtId: string,
  readonly leftXPct: number,
  readonly leftYPct: number,
  readonly leftHeightPct: number,
  readonly leftWidthPct: number,
  readonly leftFlipped: boolean,
  readonly middleXPct: number,
  readonly middleYPct: number,
  readonly middleHeightPct: number,
  readonly middleWidthPct: number,
  readonly middleFlipped: boolean,
  readonly rightXPct: number,
  readonly rightYPct: number,
  readonly rightHeightPct: number,
  readonly rightWidthPct: number,
  readonly rightFlipped: boolean,
}

interface SpotlightsDefaultFragment { // fragment on Spotlights
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly description_latest: string | null,
  readonly documentId: string,
  readonly documentType: "Sequence" | "Post" | "Tag",
  readonly position: number,
  readonly duration: number,
  readonly customTitle: string | null,
  readonly customSubtitle: string | null,
  readonly subtitleUrl: string | null,
  readonly headerTitle: string | null,
  readonly headerTitleLeftColor: string | null,
  readonly headerTitleRightColor: string | null,
  readonly lastPromotedAt: Date,
  readonly spotlightSplashImageUrl: string | null,
  readonly draft: boolean,
  readonly deletedDraft: boolean,
  readonly showAuthor: boolean,
  readonly imageFade: boolean,
  readonly imageFadeColor: string | null,
  readonly spotlightImageId: string | null,
  readonly spotlightDarkImageId: string | null,
}

interface SubscriptionsDefaultFragment { // fragment on Subscriptions
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly state: "subscribed" | "suppressed",
  readonly documentId: string,
  readonly collectionName: string,
  readonly deleted: boolean,
  readonly type: "newComments" | "newUserComments" | "newShortform" | "newPosts" | "newRelatedQuestions" | "newEvents" | "newReplies" | "newTagPosts" | "newSequencePosts" | "newDebateComments" | "newDialogueMessages" | "newPublishedDialogueMessages" | "newActivityForFeed",
}

interface SurveyQuestionsDefaultFragment { // fragment on SurveyQuestions
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly surveyId: string,
  readonly question: string,
  readonly format: "rank0To10" | "text" | "multilineText",
  readonly order: number,
}

interface SurveyResponsesDefaultFragment { // fragment on SurveyResponses
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly surveyId: string,
  readonly surveyScheduleId: string,
  readonly userId: string,
  readonly clientId: string,
  readonly response: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface SurveySchedulesDefaultFragment { // fragment on SurveySchedules
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly surveyId: string,
  readonly name: string,
  readonly impressionsLimit: number | null,
  readonly maxVisitorPercentage: number | null,
  readonly minKarma: number | null,
  readonly maxKarma: number | null,
  readonly target: "allUsers" | "loggedInOnly" | "loggedOutOnly",
  readonly startDate: Date | null,
  readonly endDate: Date | null,
  readonly deactivated: boolean,
  readonly clientIds: Array<string>,
}

interface SurveysDefaultFragment { // fragment on Surveys
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly name: string,
}

interface TagFlagsDefaultFragment { // fragment on TagFlags
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly contents_latest: string | null,
  readonly slug: string,
  readonly name: string,
  readonly deleted: boolean,
  readonly order: number | null,
}

interface TagRelsDefaultFragment { // fragment on TagRels
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly tagId: string,
  readonly postId: string,
  readonly deleted: boolean,
  readonly userId: string | null,
  readonly backfilled: boolean,
  readonly voteCount: number,
  readonly baseScore: number,
  readonly extendedScore: any /*{"definitions":[{"type":"JSON"}]}*/,
  readonly score: number,
  readonly afBaseScore: number | null,
  readonly afExtendedScore: any /*{"definitions":[{"type":"JSON"}]}*/,
  readonly afVoteCount: number | null,
}

interface TagsDefaultFragment { // fragment on Tags
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly description_latest: string | null,
  readonly pingbacks: any /*{"definitions":[{}]}*/,
  readonly subforumWelcomeText_latest: string | null,
  readonly moderationGuidelines_latest: string | null,
  readonly slug: string,
  readonly oldSlugs: Array<string>,
  readonly name: string,
  readonly shortName: string | null,
  readonly subtitle: string | null,
  readonly core: boolean,
  readonly isPostType: boolean,
  readonly suggestedAsFilter: boolean,
  readonly defaultOrder: number,
  readonly descriptionTruncationCount: number,
  readonly postCount: number,
  readonly userId: string,
  readonly adminOnly: boolean,
  readonly canEditUserIds: Array<string>,
  readonly charsAdded: number,
  readonly charsRemoved: number,
  readonly deleted: boolean,
  readonly lastCommentedAt: Date,
  readonly lastSubforumCommentAt: Date,
  readonly needsReview: boolean,
  readonly reviewedByUserId: string,
  readonly wikiGrade: number,
  readonly wikiOnly: boolean,
  readonly bannerImageId: string,
  readonly squareImageId: string,
  readonly tagFlagsIds: Array<string>,
  readonly lesswrongWikiImportRevision: string,
  readonly lesswrongWikiImportSlug: string,
  readonly lesswrongWikiImportCompleted: boolean,
  readonly htmlWithContributorAnnotations: string,
  readonly contributionStats: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly introSequenceId: string,
  readonly postsDefaultSortOrder: string,
  readonly canVoteOnRels: Array<"userOwns" | "userOwnsOnlyUpvote" | "guests" | "members" | "admins" | "sunshineRegiment" | "alignmentForumAdmins" | "alignmentForum" | "alignmentVoters" | "podcasters" | "canBypassPostRateLimit" | "trustLevel1" | "canModeratePersonal" | "canSuggestCuration" | "debaters" | "realAdmins"> | null,
  readonly isSubforum: boolean,
  readonly subforumModeratorIds: Array<string>,
  readonly subforumIntroPostId: string,
  readonly parentTagId: string,
  readonly subTagIds: Array<string>,
  readonly autoTagModel: string | null,
  readonly autoTagPrompt: string | null,
  readonly noindex: boolean,
  readonly isPlaceholderPage: boolean,
  readonly coreTagId: string | null,
  readonly forceAllowType3Audio: boolean,
  readonly voteCount: number,
  readonly baseScore: number,
  readonly extendedScore: any /*{"definitions":[{"type":"JSON"}]}*/,
  readonly score: number,
  readonly afBaseScore: number | null,
  readonly afExtendedScore: any /*{"definitions":[{"type":"JSON"}]}*/,
  readonly afVoteCount: number | null,
}

interface TestCollection2DefaultFragment { // fragment on non-collection type
  readonly _id: any,
  readonly data: any,
  readonly schemaVersion: any,
}

interface TestCollection3DefaultFragment { // fragment on non-collection type
  readonly _id: any,
  readonly notNullData: any,
}

interface TestCollection4DefaultFragment { // fragment on non-collection type
  readonly _id: any,
  readonly testCollection3Id: any,
  readonly schemaVersion: any,
}

interface TestCollection5DefaultFragment { // fragment on non-collection type
  readonly _id: any,
  readonly jsonField: any,
  readonly schemaVersion: any,
}

interface TestCollectionDefaultFragment { // fragment on non-collection type
  readonly _id: any,
  readonly a: any,
  readonly b: any,
  readonly c: any,
  readonly d: any,
  readonly schemaVersion: any,
}

interface TweetsDefaultFragment { // fragment on Tweets
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface TypingIndicatorsDefaultFragment { // fragment on TypingIndicators
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly documentId: string,
  readonly lastUpdated: Date,
}

interface UltraFeedEventsDefaultFragment { // fragment on UltraFeedEvents
  readonly _id: string,
  readonly createdAt: Date,
  readonly documentId: string,
  readonly collectionName: "Posts" | "Comments" | "Spotlights",
  readonly eventType: "served" | "viewed" | "expanded",
  readonly userId: string,
  readonly event: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly feedItemId: string | null,
}

interface UserActivitiesDefaultFragment { // fragment on UserActivities
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface UserEAGDetailsDefaultFragment { // fragment on UserEAGDetails
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly careerStage: Array<string> | null,
  readonly countryOrRegion: string | null,
  readonly nearestCity: string | null,
  readonly willingnessToRelocate: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly experiencedIn: Array<string> | null,
  readonly interestedIn: Array<string> | null,
  readonly lastUpdated: Date,
}

interface UserJobAdsDefaultFragment { // fragment on UserJobAds
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly jobName: string,
  readonly adState: "seen" | "expanded" | "applied" | "reminderSet",
  readonly reminderSetAt: Date | null,
  readonly lastUpdated: Date,
}

interface UserMostValuablePostsDefaultFragment { // fragment on UserMostValuablePosts
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly postId: string,
  readonly deleted: boolean,
}

interface UserRateLimitsDefaultFragment { // fragment on UserRateLimits
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly userId: string,
  readonly type: "allComments" | "allPosts",
  readonly intervalUnit: "minutes" | "hours" | "days" | "weeks",
  readonly intervalLength: number,
  readonly actionsPerInterval: number,
  readonly endedAt: Date | null,
}

interface UserTagRelsDefaultFragment { // fragment on UserTagRels
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly tagId: string,
  readonly userId: string,
  readonly subforumShowUnreadInSidebar: boolean,
  readonly subforumEmailNotifications: boolean,
  readonly subforumHideIntroPost: boolean,
}

interface UsersDefaultFragment { // fragment on Users
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly moderationGuidelines_latest: string | null,
  readonly howOthersCanHelpMe_latest: string | null,
  readonly howICanHelpOthers_latest: string | null,
  readonly slug: string,
  readonly oldSlugs: Array<string>,
  readonly biography_latest: string | null,
  readonly username: string,
  readonly emails: Array<{
    address: string,
    verified: boolean,
  }>,
  readonly isAdmin: boolean,
  readonly services: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly displayName: string,
  readonly previousDisplayName: string,
  readonly email: string,
  readonly noindex: boolean,
  readonly groups: Array<string>,
  readonly lwWikiImport: boolean,
  readonly theme: {
    name: "default" | "dark" | "auto" | null,
    siteThemeOverride: any /*{"definitions":[{"blackbox":true}]}*/,
  },
  readonly lastUsedTimezone: string,
  readonly whenConfirmationEmailSent: Date,
  readonly legacy: boolean,
  readonly commentSorting: string,
  readonly sortDraftsBy: string,
  readonly reactPaletteStyle: "listView" | "gridView",
  readonly noKibitz: boolean,
  readonly showHideKarmaOption: boolean,
  readonly showPostAuthorCard: boolean,
  readonly hideIntercom: boolean,
  readonly markDownPostEditor: boolean,
  readonly hideElicitPredictions: boolean,
  readonly hideAFNonMemberInitialWarning: boolean,
  readonly noSingleLineComments: boolean,
  readonly noCollapseCommentsPosts: boolean,
  readonly noCollapseCommentsFrontpage: boolean,
  readonly hideCommunitySection: boolean,
  readonly expandedFrontpageSections: {
    community: boolean | null,
    recommendations: boolean | null,
    quickTakes: boolean | null,
    quickTakesCommunity: boolean | null,
    popularComments: boolean | null,
  } | null,
  readonly showCommunityInRecentDiscussion: boolean,
  readonly hidePostsRecommendations: boolean,
  readonly petrovOptOut: boolean,
  readonly optedOutOfSurveys: boolean | null,
  readonly postGlossariesPinned: boolean,
  readonly generateJargonForDrafts: boolean,
  readonly generateJargonForPublishedPosts: boolean,
  readonly acceptedTos: boolean,
  readonly hideNavigationSidebar: boolean,
  readonly currentFrontpageFilter: string,
  readonly frontpageSelectedTab: string | null,
  readonly frontpageFilterSettings: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly hideFrontpageFilterSettingsDesktop: boolean | null,
  readonly allPostsTimeframe: string,
  readonly allPostsFilter: string,
  readonly allPostsSorting: string,
  readonly allPostsShowLowKarma: boolean,
  readonly allPostsIncludeEvents: boolean,
  readonly allPostsHideCommunity: boolean,
  readonly allPostsOpenSettings: boolean,
  readonly draftsListSorting: string,
  readonly draftsListShowArchived: boolean,
  readonly draftsListShowShared: boolean,
  readonly lastNotificationsCheck: Date,
  readonly karma: number,
  readonly goodHeartTokens: number,
  readonly moderationStyle: string,
  readonly moderatorAssistance: boolean,
  readonly collapseModerationGuidelines: boolean,
  readonly bannedUserIds: Array<string>,
  readonly bannedPersonalUserIds: Array<string>,
  readonly bookmarkedPostsMetadata: Array<{
    postId: string,
  }>,
  readonly hiddenPostsMetadata: Array<{
    postId: string,
  }>,
  readonly legacyId: string,
  readonly deleted: boolean,
  readonly permanentDeletionRequestedAt: Date | null,
  readonly voteBanned: boolean,
  readonly nullifyVotes: boolean,
  readonly deleteContent: boolean,
  readonly banned: Date,
  readonly auto_subscribe_to_my_posts: boolean,
  readonly auto_subscribe_to_my_comments: boolean,
  readonly autoSubscribeAsOrganizer: boolean,
  readonly notificationCommentsOnSubscribedPost: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationShortformContent: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationRepliesToMyComments: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationRepliesToSubscribedComments: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationSubscribedUserPost: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationSubscribedUserComment: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationPostsInGroups: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationSubscribedTagPost: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationSubscribedSequencePost: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationPrivateMessage: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationSharedWithMe: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationAlignmentSubmissionApproved: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationEventInRadius: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationKarmaPowersGained: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationRSVPs: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationGroupAdministration: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationCommentsOnDraft: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationPostsNominatedReview: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationSubforumUnread: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationNewMention: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationDialogueMessages: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationPublishedDialogueMessages: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationAddedAsCoauthor: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationDebateCommentsOnSubscribedPost: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationDebateReplies: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationDialogueMatch: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationNewDialogueChecks: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly notificationYourTurnMatchForm: {
    onsite: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
    email: {
      enabled: boolean,
      batchingFrequency: "realtime" | "daily" | "weekly",
      timeOfDayGMT: number,
      dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    },
  },
  readonly hideDialogueFacilitation: boolean,
  readonly revealChecksToAdmins: boolean,
  readonly optedInToDialogueFacilitation: boolean,
  readonly showDialoguesList: boolean,
  readonly showMyDialogues: boolean,
  readonly showMatches: boolean,
  readonly showRecommendedPartners: boolean,
  readonly hideActiveDialogueUsers: boolean,
  readonly karmaChangeNotifierSettings: {
    updateFrequency: "disabled" | "daily" | "weekly" | "realtime",
    timeOfDayGMT: number,
    dayOfWeekGMT: "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday",
    showNegativeKarma: boolean,
  },
  readonly karmaChangeLastOpened: Date,
  readonly karmaChangeBatchStart: Date,
  readonly emailSubscribedToCurated: boolean,
  readonly subscribedToDigest: boolean,
  readonly unsubscribeFromAll: boolean,
  readonly hideSubscribePoke: boolean,
  readonly hideMeetupsPoke: boolean,
  readonly hideHomeRHS: boolean,
  readonly frontpagePostCount: number,
  readonly sequenceCount: number,
  readonly sequenceDraftCount: number,
  readonly mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly location: string,
  readonly mapLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly mapLocationSet: boolean,
  readonly mapMarkerText: string,
  readonly htmlMapMarkerText: string,
  readonly nearbyEventsNotifications: boolean,
  readonly nearbyEventsNotificationsLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly nearbyEventsNotificationsMongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly nearbyEventsNotificationsRadius: number,
  readonly nearbyPeopleNotificationThreshold: number,
  readonly hideFrontpageMap: boolean,
  readonly hideTaggingProgressBar: boolean,
  readonly hideFrontpageBookAd: boolean,
  readonly hideFrontpageBook2019Ad: boolean,
  readonly hideFrontpageBook2020Ad: boolean,
  readonly sunshineNotes: string,
  readonly sunshineFlagged: boolean,
  readonly needsReview: boolean,
  readonly sunshineSnoozed: boolean,
  readonly snoozedUntilContentCount: number,
  readonly reviewedByUserId: string,
  readonly reviewedAt: Date,
  readonly afKarma: number,
  readonly voteCount: number,
  readonly smallUpvoteCount: number,
  readonly smallDownvoteCount: number,
  readonly bigUpvoteCount: number,
  readonly bigDownvoteCount: number,
  readonly voteReceivedCount: number,
  readonly smallUpvoteReceivedCount: number,
  readonly smallDownvoteReceivedCount: number,
  readonly bigUpvoteReceivedCount: number,
  readonly bigDownvoteReceivedCount: number,
  readonly usersContactedBeforeReview: Array<string>,
  readonly fullName: string,
  readonly shortformFeedId: string,
  readonly viewUnreviewedComments: boolean,
  readonly partiallyReadSequences: Array<{
    sequenceId: string,
    collectionId: string,
    lastReadPostId: string,
    nextPostId: string,
    numRead: number,
    numTotal: number,
    lastReadTime: Date,
  }>,
  readonly beta: boolean,
  readonly reviewVotesQuadratic: boolean,
  readonly reviewVotesQuadratic2019: boolean,
  readonly reviewVotesQuadratic2020: boolean,
  readonly petrovPressedButtonDate: Date,
  readonly petrovLaunchCodeDate: Date,
  readonly defaultToCKEditor: boolean,
  readonly signUpReCaptchaRating: number,
  readonly noExpandUnreadCommentsReview: boolean,
  readonly postCount: number,
  readonly maxPostCount: number,
  readonly commentCount: number,
  readonly maxCommentCount: number,
  readonly tagRevisionCount: number,
  readonly abTestKey: string,
  readonly abTestOverrides: any /*{"definitions":[{"type":"JSON","blackbox":true}]}*/,
  readonly reenableDraftJs: boolean,
  readonly walledGardenInvite: boolean,
  readonly hideWalledGardenUI: boolean,
  readonly walledGardenPortalOnboarded: boolean,
  readonly taggingDashboardCollapsed: boolean,
  readonly usernameUnset: boolean,
  readonly paymentEmail: string,
  readonly paymentInfo: string,
  readonly profileUpdatedAt: Date,
  readonly profileImageId: string,
  readonly jobTitle: string,
  readonly organization: string,
  readonly careerStage: Array<string>,
  readonly website: string,
  readonly fmCrosspostUserId: string,
  readonly linkedinProfileURL: string,
  readonly facebookProfileURL: string,
  readonly blueskyProfileURL: string,
  readonly twitterProfileURL: string,
  readonly twitterProfileURLAdmin: string | null,
  readonly githubProfileURL: string,
  readonly profileTagIds: Array<string>,
  readonly organizerOfGroupIds: Array<string>,
  readonly programParticipation: Array<string>,
  readonly postingDisabled: boolean,
  readonly allCommentingDisabled: boolean,
  readonly commentingOnOtherUsersDisabled: boolean,
  readonly conversationsDisabled: boolean,
  readonly acknowledgedNewUserGuidelines: boolean | null,
  readonly subforumPreferredLayout: "card" | "list" | null,
  readonly hideJobAdUntil: Date | null,
  readonly criticismTipsDismissed: boolean,
  readonly hideFromPeopleDirectory: boolean,
  readonly allowDatadogSessionReplay: boolean,
  readonly afPostCount: number,
  readonly afCommentCount: number,
  readonly afSequenceCount: number,
  readonly afSequenceDraftCount: number,
  readonly reviewForAlignmentForumUserId: string,
  readonly afApplicationText: string,
  readonly afSubmittedApplication: boolean,
  readonly hideSunshineSidebar: boolean,
  readonly inactiveSurveyEmailSentAt: Date | null,
  readonly userSurveyEmailSentAt: Date | null,
  readonly recommendationSettings: {
    frontpage: {
      method: string,
      count: number,
      scoreOffset: number,
      scoreExponent: number,
      personalBlogpostModifier: number,
      frontpageModifier: number,
      curatedModifier: number,
      onlyUnread: boolean,
    },
    frontpageEA: {
      method: string,
      count: number,
      scoreOffset: number,
      scoreExponent: number,
      personalBlogpostModifier: number,
      frontpageModifier: number,
      curatedModifier: number,
      onlyUnread: boolean,
    },
    recommendationspage: {
      method: string,
      count: number,
      scoreOffset: number,
      scoreExponent: number,
      personalBlogpostModifier: number,
      frontpageModifier: number,
      curatedModifier: number,
      onlyUnread: boolean,
    },
  },
}

interface VotesDefaultFragment { // fragment on Votes
  readonly _id: string,
  readonly schemaVersion: number,
  readonly createdAt: Date,
  readonly legacyData: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly documentId: string,
  readonly collectionName: string,
  readonly userId: string,
  readonly authorIds: Array<string>,
  readonly voteType: "bigDownvote" | "bigUpvote" | "neutral" | "smallDownvote" | "smallUpvote",
  readonly extendedVoteType: any /*{"definitions":[{}]}*/,
  readonly power: number,
  readonly afPower: number,
  readonly cancelled: boolean,
  readonly isUnvote: boolean,
  readonly votedAt: Date,
  readonly documentIsAf: boolean,
  readonly silenceNotification: boolean,
}

interface FragmentTypes {
  AdvisorRequestsDefaultFragment: AdvisorRequestsDefaultFragment
  ArbitalCachesDefaultFragment: ArbitalCachesDefaultFragment
  ArbitalTagContentRelsDefaultFragment: ArbitalTagContentRelsDefaultFragment
  BansDefaultFragment: BansDefaultFragment
  BooksDefaultFragment: BooksDefaultFragment
  ChaptersDefaultFragment: ChaptersDefaultFragment
  CkEditorUserSessionsDefaultFragment: CkEditorUserSessionsDefaultFragment
  ClientIdsDefaultFragment: ClientIdsDefaultFragment
  CollectionsDefaultFragment: CollectionsDefaultFragment
  CommentModeratorActionsDefaultFragment: CommentModeratorActionsDefaultFragment
  CommentsDefaultFragment: CommentsDefaultFragment
  ConversationsDefaultFragment: ConversationsDefaultFragment
  CronHistoriesDefaultFragment: CronHistoriesDefaultFragment
  CurationEmailsDefaultFragment: CurationEmailsDefaultFragment
  CurationNoticesDefaultFragment: CurationNoticesDefaultFragment
  DatabaseMetadataDefaultFragment: DatabaseMetadataDefaultFragment
  DebouncerEventsDefaultFragment: DebouncerEventsDefaultFragment
  DialogueChecksDefaultFragment: DialogueChecksDefaultFragment
  DialogueMatchPreferencesDefaultFragment: DialogueMatchPreferencesDefaultFragment
  DigestPostsDefaultFragment: DigestPostsDefaultFragment
  DigestsDefaultFragment: DigestsDefaultFragment
  ElectionCandidatesDefaultFragment: ElectionCandidatesDefaultFragment
  ElectionVotesDefaultFragment: ElectionVotesDefaultFragment
  ElicitQuestionPredictionsDefaultFragment: ElicitQuestionPredictionsDefaultFragment
  ElicitQuestionsDefaultFragment: ElicitQuestionsDefaultFragment
  EmailTokensDefaultFragment: EmailTokensDefaultFragment
  FeaturedResourcesDefaultFragment: FeaturedResourcesDefaultFragment
  FieldChangesDefaultFragment: FieldChangesDefaultFragment
  ForumEventsDefaultFragment: ForumEventsDefaultFragment
  GardenCodesDefaultFragment: GardenCodesDefaultFragment
  GoogleServiceAccountSessionsDefaultFragment: GoogleServiceAccountSessionsDefaultFragment
  ImagesDefaultFragment: ImagesDefaultFragment
  JargonTermsDefaultFragment: JargonTermsDefaultFragment
  LWEventsDefaultFragment: LWEventsDefaultFragment
  LegacyDataDefaultFragment: LegacyDataDefaultFragment
  LlmConversationsDefaultFragment: LlmConversationsDefaultFragment
  LlmMessagesDefaultFragment: LlmMessagesDefaultFragment
  LocalgroupsDefaultFragment: LocalgroupsDefaultFragment
  ManifoldProbabilitiesCachesDefaultFragment: ManifoldProbabilitiesCachesDefaultFragment
  MessagesDefaultFragment: MessagesDefaultFragment
  MigrationsDefaultFragment: MigrationsDefaultFragment
  ModerationTemplatesDefaultFragment: ModerationTemplatesDefaultFragment
  ModeratorActionsDefaultFragment: ModeratorActionsDefaultFragment
  MultiDocumentsDefaultFragment: MultiDocumentsDefaultFragment
  NotificationsDefaultFragment: NotificationsDefaultFragment
  PageCacheDefaultFragment: PageCacheDefaultFragment
  PetrovDayActionsDefaultFragment: PetrovDayActionsDefaultFragment
  PetrovDayLaunchsDefaultFragment: PetrovDayLaunchsDefaultFragment
  PodcastEpisodesDefaultFragment: PodcastEpisodesDefaultFragment
  PodcastsDefaultFragment: PodcastsDefaultFragment
  PostEmbeddingsDefaultFragment: PostEmbeddingsDefaultFragment
  PostRecommendationsDefaultFragment: PostRecommendationsDefaultFragment
  PostRelationsDefaultFragment: PostRelationsDefaultFragment
  PostViewTimesDefaultFragment: PostViewTimesDefaultFragment
  PostViewsDefaultFragment: PostViewsDefaultFragment
  PostsDefaultFragment: PostsDefaultFragment
  RSSFeedsDefaultFragment: RSSFeedsDefaultFragment
  ReadStatusesDefaultFragment: ReadStatusesDefaultFragment
  RecommendationsCachesDefaultFragment: RecommendationsCachesDefaultFragment
  ReportsDefaultFragment: ReportsDefaultFragment
  ReviewVotesDefaultFragment: ReviewVotesDefaultFragment
  ReviewWinnerArtsDefaultFragment: ReviewWinnerArtsDefaultFragment
  ReviewWinnersDefaultFragment: ReviewWinnersDefaultFragment
  RevisionsDefaultFragment: RevisionsDefaultFragment
  SequencesDefaultFragment: SequencesDefaultFragment
  SessionsDefaultFragment: SessionsDefaultFragment
  SideCommentCachesDefaultFragment: SideCommentCachesDefaultFragment
  SplashArtCoordinatesDefaultFragment: SplashArtCoordinatesDefaultFragment
  SpotlightsDefaultFragment: SpotlightsDefaultFragment
  SubscriptionsDefaultFragment: SubscriptionsDefaultFragment
  SurveyQuestionsDefaultFragment: SurveyQuestionsDefaultFragment
  SurveyResponsesDefaultFragment: SurveyResponsesDefaultFragment
  SurveySchedulesDefaultFragment: SurveySchedulesDefaultFragment
  SurveysDefaultFragment: SurveysDefaultFragment
  TagFlagsDefaultFragment: TagFlagsDefaultFragment
  TagRelsDefaultFragment: TagRelsDefaultFragment
  TagsDefaultFragment: TagsDefaultFragment
  TestCollection2DefaultFragment: TestCollection2DefaultFragment
  TestCollection3DefaultFragment: TestCollection3DefaultFragment
  TestCollection4DefaultFragment: TestCollection4DefaultFragment
  TestCollection5DefaultFragment: TestCollection5DefaultFragment
  TestCollectionDefaultFragment: TestCollectionDefaultFragment
  TweetsDefaultFragment: TweetsDefaultFragment
  TypingIndicatorsDefaultFragment: TypingIndicatorsDefaultFragment
  UltraFeedEventsDefaultFragment: UltraFeedEventsDefaultFragment
  UserActivitiesDefaultFragment: UserActivitiesDefaultFragment
  UserEAGDetailsDefaultFragment: UserEAGDetailsDefaultFragment
  UserJobAdsDefaultFragment: UserJobAdsDefaultFragment
  UserMostValuablePostsDefaultFragment: UserMostValuablePostsDefaultFragment
  UserRateLimitsDefaultFragment: UserRateLimitsDefaultFragment
  UserTagRelsDefaultFragment: UserTagRelsDefaultFragment
  UsersDefaultFragment: UsersDefaultFragment
  VotesDefaultFragment: VotesDefaultFragment
}

interface FragmentTypesByCollection {
  AdvisorRequests: "AdvisorRequestsDefaultFragment"
  ArbitalCacheses: "ArbitalCachesDefaultFragment"
  ArbitalTagContentRels: "ArbitalTagContentRelsDefaultFragment"
  Bans: "BansDefaultFragment"
  Books: "BooksDefaultFragment"
  Chapters: "ChaptersDefaultFragment"
  CkEditorUserSessions: "CkEditorUserSessionsDefaultFragment"
  ClientIds: "ClientIdsDefaultFragment"
  Collections: "CollectionsDefaultFragment"
  CommentModeratorActions: "CommentModeratorActionsDefaultFragment"
  Comments: "CommentsDefaultFragment"
  Conversations: "ConversationsDefaultFragment"
  CronHistories: "CronHistoriesDefaultFragment"
  CurationEmails: "CurationEmailsDefaultFragment"
  CurationNotices: "CurationNoticesDefaultFragment"
  DatabaseMetadatas: "DatabaseMetadataDefaultFragment"
  DebouncerEventses: "DebouncerEventsDefaultFragment"
  DialogueChecks: "DialogueChecksDefaultFragment"
  DialogueMatchPreferences: "DialogueMatchPreferencesDefaultFragment"
  DigestPosts: "DigestPostsDefaultFragment"
  Digests: "DigestsDefaultFragment"
  ElectionCandidates: "ElectionCandidatesDefaultFragment"
  ElectionVotes: "ElectionVotesDefaultFragment"
  ElicitQuestionPredictions: "ElicitQuestionPredictionsDefaultFragment"
  ElicitQuestions: "ElicitQuestionsDefaultFragment"
  EmailTokenses: "EmailTokensDefaultFragment"
  FeaturedResources: "FeaturedResourcesDefaultFragment"
  FieldChanges: "FieldChangesDefaultFragment"
  ForumEvents: "ForumEventsDefaultFragment"
  GardenCodes: "GardenCodesDefaultFragment"
  GoogleServiceAccountSessions: "GoogleServiceAccountSessionsDefaultFragment"
  Imageses: "ImagesDefaultFragment"
  JargonTerms: "JargonTermsDefaultFragment"
  LWEvents: "LWEventsDefaultFragment"
  LegacyDatas: "LegacyDataDefaultFragment"
  LlmConversations: "LlmConversationsDefaultFragment"
  LlmMessages: "LlmMessagesDefaultFragment"
  Localgroups: "LocalgroupsDefaultFragment"
  ManifoldProbabilitiesCaches: "ManifoldProbabilitiesCachesDefaultFragment"
  Messages: "MessagesDefaultFragment"
  Migrations: "MigrationsDefaultFragment"
  ModerationTemplates: "ModerationTemplatesDefaultFragment"
  ModeratorActions: "ModeratorActionsDefaultFragment"
  MultiDocuments: "MultiDocumentsDefaultFragment"
  Notifications: "NotificationsDefaultFragment"
  PageCacheEntries: "PageCacheDefaultFragment"
  PetrovDayActions: "PetrovDayActionsDefaultFragment"
  PetrovDayLaunchs: "PetrovDayLaunchsDefaultFragment"
  PodcastEpisodes: "PodcastEpisodesDefaultFragment"
  Podcasts: "PodcastsDefaultFragment"
  PostEmbeddings: "PostEmbeddingsDefaultFragment"
  PostRecommendations: "PostRecommendationsDefaultFragment"
  PostRelations: "PostRelationsDefaultFragment"
  PostViewTimes: "PostViewTimesDefaultFragment"
  PostViewses: "PostViewsDefaultFragment"
  Posts: "PostsDefaultFragment"
  RSSFeeds: "RSSFeedsDefaultFragment"
  ReadStatuses: "ReadStatusesDefaultFragment"
  RecommendationsCaches: "RecommendationsCachesDefaultFragment"
  Reports: "ReportsDefaultFragment"
  ReviewVotes: "ReviewVotesDefaultFragment"
  ReviewWinnerArts: "ReviewWinnerArtsDefaultFragment"
  ReviewWinners: "ReviewWinnersDefaultFragment"
  Revisions: "RevisionsDefaultFragment"
  Sequences: "SequencesDefaultFragment"
  Sessions: "SessionsDefaultFragment"
  SideCommentCaches: "SideCommentCachesDefaultFragment"
  SplashArtCoordinates: "SplashArtCoordinatesDefaultFragment"
  Spotlights: "SpotlightsDefaultFragment"
  Subscriptions: "SubscriptionsDefaultFragment"
  SurveyQuestions: "SurveyQuestionsDefaultFragment"
  SurveyResponses: "SurveyResponsesDefaultFragment"
  SurveySchedules: "SurveySchedulesDefaultFragment"
  Surveys: "SurveysDefaultFragment"
  TagFlags: "TagFlagsDefaultFragment"
  TagRels: "TagRelsDefaultFragment"
  Tags: "TagsDefaultFragment"
  Tweets: "TweetsDefaultFragment"
  TypingIndicators: "TypingIndicatorsDefaultFragment"
  UltraFeedEvents: "UltraFeedEventsDefaultFragment"
  UserActivities: "UserActivitiesDefaultFragment"
  UserEAGDetails: "UserEAGDetailsDefaultFragment"
  UserJobAds: "UserJobAdsDefaultFragment"
  UserMostValuablePosts: "UserMostValuablePostsDefaultFragment"
  UserRateLimits: "UserRateLimitsDefaultFragment"
  UserTagRels: "UserTagRelsDefaultFragment"
  Users: "UsersDefaultFragment"
  Votes: "VotesDefaultFragment"
  undefineds: "TestCollection2DefaultFragment"|"TestCollection3DefaultFragment"|"TestCollection4DefaultFragment"|"TestCollection5DefaultFragment"|"TestCollectionDefaultFragment"
}

interface CollectionNamesByFragmentName {
  AdvisorRequestsDefaultFragment: "AdvisorRequests"
  ArbitalCachesDefaultFragment: "ArbitalCaches"
  ArbitalTagContentRelsDefaultFragment: "ArbitalTagContentRels"
  BansDefaultFragment: "Bans"
  BooksDefaultFragment: "Books"
  ChaptersDefaultFragment: "Chapters"
  CkEditorUserSessionsDefaultFragment: "CkEditorUserSessions"
  ClientIdsDefaultFragment: "ClientIds"
  CollectionsDefaultFragment: "Collections"
  CommentModeratorActionsDefaultFragment: "CommentModeratorActions"
  CommentsDefaultFragment: "Comments"
  ConversationsDefaultFragment: "Conversations"
  CronHistoriesDefaultFragment: "CronHistories"
  CurationEmailsDefaultFragment: "CurationEmails"
  CurationNoticesDefaultFragment: "CurationNotices"
  DatabaseMetadataDefaultFragment: "DatabaseMetadata"
  DebouncerEventsDefaultFragment: "DebouncerEvents"
  DialogueChecksDefaultFragment: "DialogueChecks"
  DialogueMatchPreferencesDefaultFragment: "DialogueMatchPreferences"
  DigestPostsDefaultFragment: "DigestPosts"
  DigestsDefaultFragment: "Digests"
  ElectionCandidatesDefaultFragment: "ElectionCandidates"
  ElectionVotesDefaultFragment: "ElectionVotes"
  ElicitQuestionPredictionsDefaultFragment: "ElicitQuestionPredictions"
  ElicitQuestionsDefaultFragment: "ElicitQuestions"
  EmailTokensDefaultFragment: "EmailTokens"
  FeaturedResourcesDefaultFragment: "FeaturedResources"
  FieldChangesDefaultFragment: "FieldChanges"
  ForumEventsDefaultFragment: "ForumEvents"
  GardenCodesDefaultFragment: "GardenCodes"
  GoogleServiceAccountSessionsDefaultFragment: "GoogleServiceAccountSessions"
  ImagesDefaultFragment: "Images"
  JargonTermsDefaultFragment: "JargonTerms"
  LWEventsDefaultFragment: "LWEvents"
  LegacyDataDefaultFragment: "LegacyData"
  LlmConversationsDefaultFragment: "LlmConversations"
  LlmMessagesDefaultFragment: "LlmMessages"
  LocalgroupsDefaultFragment: "Localgroups"
  ManifoldProbabilitiesCachesDefaultFragment: "ManifoldProbabilitiesCaches"
  MessagesDefaultFragment: "Messages"
  MigrationsDefaultFragment: "Migrations"
  ModerationTemplatesDefaultFragment: "ModerationTemplates"
  ModeratorActionsDefaultFragment: "ModeratorActions"
  MultiDocumentsDefaultFragment: "MultiDocuments"
  NotificationsDefaultFragment: "Notifications"
  PageCacheDefaultFragment: "PageCache"
  PetrovDayActionsDefaultFragment: "PetrovDayActions"
  PetrovDayLaunchsDefaultFragment: "PetrovDayLaunchs"
  PodcastEpisodesDefaultFragment: "PodcastEpisodes"
  PodcastsDefaultFragment: "Podcasts"
  PostEmbeddingsDefaultFragment: "PostEmbeddings"
  PostRecommendationsDefaultFragment: "PostRecommendations"
  PostRelationsDefaultFragment: "PostRelations"
  PostViewTimesDefaultFragment: "PostViewTimes"
  PostViewsDefaultFragment: "PostViews"
  PostsDefaultFragment: "Posts"
  RSSFeedsDefaultFragment: "RSSFeeds"
  ReadStatusesDefaultFragment: "ReadStatuses"
  RecommendationsCachesDefaultFragment: "RecommendationsCaches"
  ReportsDefaultFragment: "Reports"
  ReviewVotesDefaultFragment: "ReviewVotes"
  ReviewWinnerArtsDefaultFragment: "ReviewWinnerArts"
  ReviewWinnersDefaultFragment: "ReviewWinners"
  RevisionsDefaultFragment: "Revisions"
  SequencesDefaultFragment: "Sequences"
  SessionsDefaultFragment: "Sessions"
  SideCommentCachesDefaultFragment: "SideCommentCaches"
  SplashArtCoordinatesDefaultFragment: "SplashArtCoordinates"
  SpotlightsDefaultFragment: "Spotlights"
  SubscriptionsDefaultFragment: "Subscriptions"
  SurveyQuestionsDefaultFragment: "SurveyQuestions"
  SurveyResponsesDefaultFragment: "SurveyResponses"
  SurveySchedulesDefaultFragment: "SurveySchedules"
  SurveysDefaultFragment: "Surveys"
  TagFlagsDefaultFragment: "TagFlags"
  TagRelsDefaultFragment: "TagRels"
  TagsDefaultFragment: "Tags"
  TestCollection2DefaultFragment: never
  TestCollection3DefaultFragment: never
  TestCollection4DefaultFragment: never
  TestCollection5DefaultFragment: never
  TestCollectionDefaultFragment: never
  TweetsDefaultFragment: "Tweets"
  TypingIndicatorsDefaultFragment: "TypingIndicators"
  UltraFeedEventsDefaultFragment: "UltraFeedEvents"
  UserActivitiesDefaultFragment: "UserActivities"
  UserEAGDetailsDefaultFragment: "UserEAGDetails"
  UserJobAdsDefaultFragment: "UserJobAds"
  UserMostValuablePostsDefaultFragment: "UserMostValuablePosts"
  UserRateLimitsDefaultFragment: "UserRateLimits"
  UserTagRelsDefaultFragment: "UserTagRels"
  UsersDefaultFragment: "Users"
  VotesDefaultFragment: "Votes"
}

type CollectionNameString = "AdvisorRequests"|"ArbitalCaches"|"ArbitalTagContentRels"|"Bans"|"Books"|"Chapters"|"CkEditorUserSessions"|"ClientIds"|"Collections"|"CommentModeratorActions"|"Comments"|"Conversations"|"CronHistories"|"CurationEmails"|"CurationNotices"|"DatabaseMetadata"|"DebouncerEvents"|"DialogueChecks"|"DialogueMatchPreferences"|"DigestPosts"|"Digests"|"ElectionCandidates"|"ElectionVotes"|"ElicitQuestionPredictions"|"ElicitQuestions"|"EmailTokens"|"FeaturedResources"|"FieldChanges"|"ForumEvents"|"GardenCodes"|"GoogleServiceAccountSessions"|"Images"|"JargonTerms"|"LWEvents"|"LegacyData"|"LlmConversations"|"LlmMessages"|"Localgroups"|"ManifoldProbabilitiesCaches"|"Messages"|"Migrations"|"ModerationTemplates"|"ModeratorActions"|"MultiDocuments"|"Notifications"|"PageCache"|"PetrovDayActions"|"PetrovDayLaunchs"|"PodcastEpisodes"|"Podcasts"|"PostEmbeddings"|"PostRecommendations"|"PostRelations"|"PostViewTimes"|"PostViews"|"Posts"|"RSSFeeds"|"ReadStatuses"|"RecommendationsCaches"|"Reports"|"ReviewVotes"|"ReviewWinnerArts"|"ReviewWinners"|"Revisions"|"Sequences"|"Sessions"|"SideCommentCaches"|"SplashArtCoordinates"|"Spotlights"|"Subscriptions"|"SurveyQuestions"|"SurveyResponses"|"SurveySchedules"|"Surveys"|"TagFlags"|"TagRels"|"Tags"|"Tweets"|"TypingIndicators"|"UltraFeedEvents"|"UserActivities"|"UserEAGDetails"|"UserJobAds"|"UserMostValuablePosts"|"UserRateLimits"|"UserTagRels"|"Users"|"Votes"

type CollectionNameWithCreatedAt = "AdvisorRequests"|"ArbitalCaches"|"ArbitalTagContentRels"|"Bans"|"Books"|"Chapters"|"CkEditorUserSessions"|"ClientIds"|"Collections"|"CommentModeratorActions"|"Comments"|"Conversations"|"CurationEmails"|"CurationNotices"|"DatabaseMetadata"|"DebouncerEvents"|"DialogueChecks"|"DialogueMatchPreferences"|"DigestPosts"|"Digests"|"ElectionCandidates"|"ElectionVotes"|"ElicitQuestionPredictions"|"ElicitQuestions"|"EmailTokens"|"FeaturedResources"|"FieldChanges"|"ForumEvents"|"GardenCodes"|"GoogleServiceAccountSessions"|"Images"|"JargonTerms"|"LWEvents"|"LegacyData"|"LlmConversations"|"LlmMessages"|"Localgroups"|"ManifoldProbabilitiesCaches"|"Messages"|"Migrations"|"ModerationTemplates"|"ModeratorActions"|"MultiDocuments"|"Notifications"|"PageCache"|"PetrovDayActions"|"PetrovDayLaunchs"|"PodcastEpisodes"|"Podcasts"|"PostEmbeddings"|"PostRecommendations"|"PostRelations"|"PostViewTimes"|"PostViews"|"Posts"|"RSSFeeds"|"ReadStatuses"|"RecommendationsCaches"|"Reports"|"ReviewVotes"|"ReviewWinnerArts"|"ReviewWinners"|"Revisions"|"Sequences"|"SideCommentCaches"|"SplashArtCoordinates"|"Spotlights"|"Subscriptions"|"SurveyQuestions"|"SurveyResponses"|"SurveySchedules"|"Surveys"|"TagFlags"|"TagRels"|"Tags"|"Tweets"|"TypingIndicators"|"UltraFeedEvents"|"UserActivities"|"UserEAGDetails"|"UserJobAds"|"UserMostValuablePosts"|"UserRateLimits"|"UserTagRels"|"Users"|"Votes"

type CollectionNameWithSlug = "Collections"|"GardenCodes"|"MultiDocuments"|"Posts"|"TagFlags"|"Tags"|"Users"

