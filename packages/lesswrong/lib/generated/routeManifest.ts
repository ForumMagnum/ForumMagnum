// AUTO-GENERATED BY generateRouteManifest.ts â€” DO NOT EDIT
// This file is safe to import in edge runtime (no Node APIs).

export type RouteNode = {
  staticChildren?: Record<string, RouteNode>
  dynamicChild?: { paramName: string; child: RouteNode } | null
  catchAll?: { paramName: string; child: RouteNode } | null
  optionalCatchAll?: { paramName: string; child: RouteNode } | null
  hasPage?: boolean
  hasRoute?: boolean
  lowerCase?: Record<string, string>
}

export const routeTrie = {
  "staticChildren": {
    "abTestGroups": {
      "hasPage": true
    },
    "about": {
      "hasPage": true
    },
    "account": {
      "hasPage": true
    },
    "admin": {
      "staticChildren": {
        "curation": {
          "hasPage": true
        },
        "debugHeaders": {
          "hasRoute": true
        },
        "googleServiceAccount": {
          "hasPage": true
        },
        "llmConversations": {
          "hasPage": true
        },
        "migrations": {
          "hasPage": true
        },
        "moderation": {
          "hasPage": true
        },
        "moderationTemplates": {
          "hasPage": true
        },
        "modgpt": {
          "hasPage": true
        },
        "onboarding": {
          "hasPage": true
        },
        "random-user": {
          "hasPage": true
        },
        "recentlyActiveUsers": {
          "hasPage": true
        },
        "synonyms": {
          "hasPage": true
        },
        "tagMerge": {
          "hasPage": true
        }
      },
      "lowerCase": {
        "curation": "curation",
        "debugheaders": "debugHeaders",
        "googleserviceaccount": "googleServiceAccount",
        "llmconversations": "llmConversations",
        "migrations": "migrations",
        "moderation": "moderation",
        "moderationtemplates": "moderationTemplates",
        "modgpt": "modgpt",
        "onboarding": "onboarding",
        "random-user": "random-user",
        "recentlyactiveusers": "recentlyActiveUsers",
        "synonyms": "synonyms",
        "tagmerge": "tagMerge"
      },
      "hasPage": true
    },
    "allComments": {
      "hasPage": true
    },
    "allCommentsWithReacts": {
      "hasPage": true
    },
    "allPosts": {
      "hasPage": true
    },
    "allgroups": {
      "hasPage": true
    },
    "analyticsEvent": {
      "hasRoute": true
    },
    "api": {
      "staticChildren": {
        "autocomplete": {
          "hasRoute": true
        },
        "autocomplete405b": {
          "hasRoute": true
        },
        "cron": {
          "staticChildren": {
            "every-five-minutes": {
              "hasRoute": true
            },
            "every-hour": {
              "hasRoute": true
            },
            "every-midnight": {
              "hasRoute": true
            },
            "every-minute": {
              "hasRoute": true
            },
            "every-ten-minutes": {
              "hasRoute": true
            },
            "run-twitter-bot": {
              "hasRoute": true
            },
            "update-analytics-collections": {
              "hasRoute": true
            },
            "update-promoted-spotlight-item": {
              "hasRoute": true
            },
            "update-user-activities": {
              "hasRoute": true
            }
          },
          "lowerCase": {
            "every-five-minutes": "every-five-minutes",
            "every-hour": "every-hour",
            "every-midnight": "every-midnight",
            "every-minute": "every-minute",
            "every-ten-minutes": "every-ten-minutes",
            "run-twitter-bot": "run-twitter-bot",
            "update-analytics-collections": "update-analytics-collections",
            "update-promoted-spotlight-item": "update-promoted-spotlight-item",
            "update-user-activities": "update-user-activities"
          }
        },
        "dropAndCreatePg": {
          "hasRoute": true
        },
        "health": {
          "hasRoute": true
        },
        "notificationCount": {
          "hasRoute": true
        },
        "notificationEvents": {
          "hasRoute": true
        },
        "quit": {
          "hasRoute": true
        },
        "registerClientId": {
          "hasRoute": true
        },
        "search": {
          "staticChildren": {
            "userFacets": {
              "hasRoute": true
            }
          },
          "lowerCase": {
            "userfacets": "userFacets"
          },
          "hasRoute": true
        },
        "sendLlmChat": {
          "hasRoute": true
        },
        "v2": {
          "staticChildren": {
            "crosspost": {
              "staticChildren": {
                "connectCrossposter": {
                  "hasRoute": true
                },
                "createCrosspost": {
                  "hasRoute": true
                },
                "crosspostDetails": {
                  "hasRoute": true
                },
                "crossposterDetails": {
                  "hasRoute": true
                },
                "generateToken": {
                  "hasRoute": true
                },
                "unlinkCrossposter": {
                  "hasRoute": true
                },
                "updateCrosspost": {
                  "hasRoute": true
                }
              },
              "lowerCase": {
                "connectcrossposter": "connectCrossposter",
                "createcrosspost": "createCrosspost",
                "crosspostdetails": "crosspostDetails",
                "crossposterdetails": "crossposterDetails",
                "generatetoken": "generateToken",
                "unlinkcrossposter": "unlinkCrossposter",
                "updatecrosspost": "updateCrosspost"
              }
            }
          },
          "lowerCase": {
            "crosspost": "crosspost"
          }
        }
      },
      "lowerCase": {
        "autocomplete": "autocomplete",
        "autocomplete405b": "autocomplete405b",
        "cron": "cron",
        "dropandcreatepg": "dropAndCreatePg",
        "health": "health",
        "notificationcount": "notificationCount",
        "notificationevents": "notificationEvents",
        "quit": "quit",
        "registerclientid": "registerClientId",
        "search": "search",
        "sendllmchat": "sendLlmChat",
        "v2": "v2"
      }
    },
    "arbital": {
      "hasPage": true
    },
    "auth": {
      "staticChildren": {
        "github": {
          "staticChildren": {
            "callback": {
              "hasRoute": true
            }
          },
          "lowerCase": {
            "callback": "callback"
          },
          "hasRoute": true
        },
        "google": {
          "staticChildren": {
            "callback": {
              "hasRoute": true
            }
          },
          "lowerCase": {
            "callback": "callback"
          },
          "hasRoute": true
        },
        "linkgdrive": {
          "hasRoute": true
        }
      },
      "lowerCase": {
        "github": "github",
        "google": "google",
        "linkgdrive": "linkgdrive"
      }
    },
    "autocompleteSettings": {
      "hasPage": true
    },
    "banNotice": {
      "hasPage": true
    },
    "bestoflesswrong": {
      "dynamicChild": {
        "paramName": "year",
        "child": {
          "dynamicChild": {
            "paramName": "topic",
            "child": {
              "hasPage": true
            }
          }
        }
      },
      "hasPage": true
    },
    "bestoflesswrongadmin": {
      "dynamicChild": {
        "paramName": "year",
        "child": {
          "hasPage": true
        }
      },
      "hasPage": true
    },
    "bookmarks": {
      "hasPage": true
    },
    "books": {
      "staticChildren": {
        "2018": {
          "hasPage": true
        },
        "2019": {
          "hasPage": true
        }
      },
      "lowerCase": {
        "2018": "2018",
        "2019": "2019"
      },
      "hasPage": true
    },
    "ckeditor-token": {
      "hasRoute": true
    },
    "ckeditor-webhook": {
      "hasRoute": true
    },
    "codex": {
      "dynamicChild": {
        "paramName": "slug",
        "child": {
          "hasPage": true
        }
      },
      "hasPage": true
    },
    "collaborateOnPost": {
      "hasPage": true
    },
    "collections": {
      "dynamicChild": {
        "paramName": "_id",
        "child": {
          "hasPage": true
        }
      }
    },
    "community": {
      "hasPage": true
    },
    "compare": {
      "staticChildren": {
        "post": {
          "dynamicChild": {
            "paramName": "_id",
            "child": {
              "dynamicChild": {
                "paramName": "slug",
                "child": {
                  "hasPage": true
                }
              }
            }
          }
        },
        "w": {
          "dynamicChild": {
            "paramName": "slug",
            "child": {
              "hasPage": true
            }
          }
        }
      },
      "lowerCase": {
        "post": "post",
        "w": "w"
      }
    },
    "concepts": {
      "staticChildren": {
        "all": {
          "hasPage": true
        }
      },
      "lowerCase": {
        "all": "all"
      },
      "hasPage": true
    },
    "contact": {
      "hasPage": true
    },
    "crosspostLogin": {
      "hasPage": true
    },
    "curated": {
      "hasPage": true
    },
    "debug": {
      "staticChildren": {
        "emailHistory": {
          "hasPage": true
        },
        "notificationEmailPreview": {
          "hasPage": true
        }
      },
      "lowerCase": {
        "emailhistory": "emailHistory",
        "notificationemailpreview": "notificationEmailPreview"
      }
    },
    "dialogues": {
      "hasPage": true
    },
    "donate": {
      "hasPage": true
    },
    "drafts": {
      "hasPage": true
    },
    "editPost": {
      "hasPage": true
    },
    "editor": {
      "hasPage": true
    },
    "emailToken": {
      "dynamicChild": {
        "paramName": "token",
        "child": {
          "hasPage": true
        }
      }
    },
    "events": {
      "dynamicChild": {
        "paramName": "_id",
        "child": {
          "dynamicChild": {
            "paramName": "slug",
            "child": {
              "hasPage": true
            }
          },
          "hasPage": true
        }
      }
    },
    "faq": {
      "hasPage": true
    },
    "favicon.ico": {
      "hasRoute": true
    },
    "feed": {
      "hasPage": true
    },
    "feed.xml": {
      "hasRoute": true
    },
    "g": {
      "dynamicChild": {
        "paramName": "groupId",
        "child": {
          "staticChildren": {
            "p": {
              "dynamicChild": {
                "paramName": "_id",
                "child": {
                  "hasPage": true
                }
              }
            }
          },
          "lowerCase": {
            "p": "p"
          }
        }
      }
    },
    "glossaryEditor": {
      "hasPage": true
    },
    "google_oauth2callback": {
      "hasRoute": true
    },
    "graphiql": {
      "hasRoute": true
    },
    "graphql": {
      "hasRoute": true
    },
    "groups": {
      "dynamicChild": {
        "paramName": "groupId",
        "child": {
          "hasPage": true
        }
      }
    },
    "groups-map": {
      "hasPage": true
    },
    "highlights": {
      "dynamicChild": {
        "paramName": "slug",
        "child": {
          "hasPage": true
        }
      },
      "hasPage": true
    },
    "hpmor": {
      "dynamicChild": {
        "paramName": "slug",
        "child": {
          "hasPage": true
        }
      },
      "hasPage": true
    },
    "inbox": {
      "dynamicChild": {
        "paramName": "_id",
        "child": {
          "hasPage": true
        }
      },
      "hasPage": true
    },
    "item": {
      "hasRoute": true
    },
    "leaderboard": {
      "hasPage": true
    },
    "leastwrong": {
      "hasPage": true
    },
    "library": {
      "hasPage": true
    },
    "login": {
      "hasPage": true
    },
    "logout": {
      "hasRoute": true
    },
    "lw": {
      "dynamicChild": {
        "paramName": "id",
        "child": {
          "dynamicChild": {
            "paramName": "slug",
            "child": {
              "dynamicChild": {
                "paramName": "commentId",
                "child": {
                  "staticChildren": {
                    ".rss": {
                      "hasRoute": true
                    }
                  },
                  "lowerCase": {
                    ".rss": ".rss"
                  },
                  "hasRoute": true
                }
              },
              "hasRoute": true
            }
          },
          "hasRoute": true
        }
      }
    },
    "manageSubscriptions": {
      "hasPage": true
    },
    "meetups": {
      "hasPage": true
    },
    "message": {
      "dynamicChild": {
        "paramName": "slug",
        "child": {
          "hasPage": true
        }
      }
    },
    "meta": {
      "hasPage": true
    },
    "moderation": {
      "staticChildren": {
        "altAccounts": {
          "hasPage": true
        }
      },
      "lowerCase": {
        "altaccounts": "altAccounts"
      },
      "hasPage": true
    },
    "moderatorComments": {
      "hasPage": true
    },
    "moderatorInbox": {
      "hasPage": true
    },
    "newLongformReview": {
      "hasPage": true
    },
    "newPost": {
      "hasPage": true
    },
    "nominatePosts": {
      "dynamicChild": {
        "paramName": "year",
        "child": {
          "hasPage": true
        }
      },
      "hasPage": true
    },
    "nominations": {
      "staticChildren": {
        "2018": {
          "hasPage": true
        },
        "2019": {
          "hasPage": true
        }
      },
      "lowerCase": {
        "2018": "2018",
        "2019": "2019"
      },
      "hasPage": true
    },
    "nominations2018": {
      "hasPage": true
    },
    "nominations2019": {
      "hasPage": true
    },
    "out": {
      "hasRoute": true
    },
    "pastEvents": {
      "hasPage": true
    },
    "payments": {
      "staticChildren": {
        "account": {
          "hasPage": true
        },
        "admin": {
          "hasPage": true
        }
      },
      "lowerCase": {
        "account": "account",
        "admin": "admin"
      },
      "hasPage": true
    },
    "petrovDayPoll": {
      "hasPage": true
    },
    "petroyDayPoll": {
      "hasPage": true
    },
    "postAnalytics": {
      "hasPage": true
    },
    "posts": {
      "staticChildren": {
        "slug": {
          "dynamicChild": {
            "paramName": "slug",
            "child": {
              "hasPage": true
            }
          },
          "hasPage": true
        }
      },
      "lowerCase": {
        "slug": "slug"
      },
      "dynamicChild": {
        "paramName": "_id",
        "child": {
          "dynamicChild": {
            "paramName": "slug",
            "child": {
              "staticChildren": {
                "comment": {
                  "dynamicChild": {
                    "paramName": "commentId",
                    "child": {
                      "hasPage": true
                    }
                  },
                  "hasPage": true
                }
              },
              "lowerCase": {
                "comment": "comment"
              },
              "hasPage": true
            }
          },
          "hasPage": true
        }
      }
    },
    "postsWithApprovedJargon": {
      "hasPage": true
    },
    "questions": {
      "hasPage": true
    },
    "quickReview": {
      "dynamicChild": {
        "paramName": "year",
        "child": {
          "hasPage": true
        }
      },
      "hasPage": true
    },
    "quicktakes": {
      "hasPage": true
    },
    "rationality": {
      "dynamicChild": {
        "paramName": "slug",
        "child": {
          "hasPage": true
        }
      },
      "hasPage": true
    },
    "recommendations": {
      "hasPage": true
    },
    "resendVerificationEmail": {
      "hasPage": true
    },
    "resetPassword": {
      "dynamicChild": {
        "paramName": "token",
        "child": {
          "hasPage": true
        }
      }
    },
    "reviewAdmin": {
      "dynamicChild": {
        "paramName": "year",
        "child": {
          "hasPage": true
        }
      },
      "hasPage": true
    },
    "reviewQuickPage": {
      "hasPage": true
    },
    "reviewVoting": {
      "dynamicChild": {
        "paramName": "year",
        "child": {
          "hasPage": true
        }
      },
      "hasPage": true
    },
    "reviews": {
      "dynamicChild": {
        "paramName": "year",
        "child": {
          "hasPage": true
        }
      },
      "hasPage": true
    },
    "reviews2018": {
      "hasPage": true
    },
    "reviews2019": {
      "hasPage": true
    },
    "revisions": {
      "staticChildren": {
        "post": {
          "dynamicChild": {
            "paramName": "_id",
            "child": {
              "dynamicChild": {
                "paramName": "slug",
                "child": {
                  "hasPage": true
                }
              }
            }
          }
        },
        "w": {
          "dynamicChild": {
            "paramName": "slug",
            "child": {
              "hasPage": true
            }
          }
        }
      },
      "lowerCase": {
        "post": "post",
        "w": "w"
      }
    },
    "robots.txt": {
      "hasRoute": true
    },
    "s": {
      "dynamicChild": {
        "paramName": "_id",
        "child": {
          "staticChildren": {
            "p": {
              "dynamicChild": {
                "paramName": "postId",
                "child": {
                  "hasPage": true
                }
              }
            }
          },
          "lowerCase": {
            "p": "p"
          },
          "hasPage": true
        }
      }
    },
    "search": {
      "hasPage": true
    },
    "sequences": {
      "dynamicChild": {
        "paramName": "_id",
        "child": {
          "hasPage": true
        }
      },
      "hasPage": true
    },
    "sequencesNew": {
      "hasPage": true
    },
    "shortform": {
      "hasPage": true
    },
    "spotlights": {
      "hasPage": true
    },
    "tag": {
      "staticChildren": {
        "create": {
          "hasPage": true
        }
      },
      "lowerCase": {
        "create": "create"
      }
    },
    "tagActivity": {
      "hasPage": true
    },
    "tagFeed": {
      "hasPage": true
    },
    "tagVoting": {
      "hasPage": true
    },
    "tags": {
      "staticChildren": {
        "all": {
          "hasPage": true
        },
        "dashboard": {
          "hasPage": true
        },
        "random": {
          "hasPage": true
        }
      },
      "lowerCase": {
        "all": "all",
        "dashboard": "dashboard",
        "random": "random"
      },
      "hasPage": true
    },
    "topics": {
      "staticChildren": {
        "all": {
          "hasPage": true
        }
      },
      "lowerCase": {
        "all": "all"
      },
      "hasPage": true
    },
    "u": {
      "dynamicChild": {
        "paramName": "slug",
        "child": {
          "hasPage": true
        }
      }
    },
    "upcomingEvents": {
      "hasPage": true
    },
    "user": {
      "dynamicChild": {
        "paramName": "slug",
        "child": {
          "catchAll": {
            "paramName": "params",
            "child": {
              "hasRoute": true
            }
          },
          "hasPage": true
        }
      }
    },
    "users": {
      "dynamicChild": {
        "paramName": "slug",
        "child": {
          "staticChildren": {
            "edit": {
              "hasPage": true
            },
            "replies": {
              "hasPage": true
            }
          },
          "lowerCase": {
            "edit": "edit",
            "replies": "replies"
          },
          "hasPage": true
        }
      }
    },
    "w": {
      "staticChildren": {
        "create": {
          "hasPage": true
        },
        "dashboard": {
          "hasPage": true
        },
        "random": {
          "hasPage": true
        }
      },
      "lowerCase": {
        "create": "create",
        "dashboard": "dashboard",
        "random": "random"
      },
      "dynamicChild": {
        "paramName": "slug",
        "child": {
          "staticChildren": {
            "discussion": {
              "hasPage": true
            },
            "edit": {
              "hasPage": true
            },
            "history": {
              "hasPage": true
            }
          },
          "lowerCase": {
            "discussion": "discussion",
            "edit": "edit",
            "history": "history"
          },
          "hasPage": true
        }
      }
    },
    "wActivity": {
      "hasPage": true
    },
    "wFeed": {
      "hasPage": true
    },
    "wiki": {
      "hasPage": true
    },
    "wikitags": {
      "staticChildren": {
        "all": {
          "hasPage": true
        }
      },
      "lowerCase": {
        "all": "all"
      },
      "hasPage": true
    }
  },
  "lowerCase": {
    "abtestgroups": "abTestGroups",
    "about": "about",
    "account": "account",
    "admin": "admin",
    "allcomments": "allComments",
    "allcommentswithreacts": "allCommentsWithReacts",
    "allposts": "allPosts",
    "allgroups": "allgroups",
    "analyticsevent": "analyticsEvent",
    "api": "api",
    "arbital": "arbital",
    "auth": "auth",
    "autocompletesettings": "autocompleteSettings",
    "bannotice": "banNotice",
    "bestoflesswrong": "bestoflesswrong",
    "bestoflesswrongadmin": "bestoflesswrongadmin",
    "bookmarks": "bookmarks",
    "books": "books",
    "ckeditor-token": "ckeditor-token",
    "ckeditor-webhook": "ckeditor-webhook",
    "codex": "codex",
    "collaborateonpost": "collaborateOnPost",
    "collections": "collections",
    "community": "community",
    "compare": "compare",
    "concepts": "concepts",
    "contact": "contact",
    "crosspostlogin": "crosspostLogin",
    "curated": "curated",
    "debug": "debug",
    "dialogues": "dialogues",
    "donate": "donate",
    "drafts": "drafts",
    "editpost": "editPost",
    "editor": "editor",
    "emailtoken": "emailToken",
    "events": "events",
    "faq": "faq",
    "favicon.ico": "favicon.ico",
    "feed": "feed",
    "feed.xml": "feed.xml",
    "g": "g",
    "glossaryeditor": "glossaryEditor",
    "google_oauth2callback": "google_oauth2callback",
    "graphiql": "graphiql",
    "graphql": "graphql",
    "groups": "groups",
    "groups-map": "groups-map",
    "highlights": "highlights",
    "hpmor": "hpmor",
    "inbox": "inbox",
    "item": "item",
    "leaderboard": "leaderboard",
    "leastwrong": "leastwrong",
    "library": "library",
    "login": "login",
    "logout": "logout",
    "lw": "lw",
    "managesubscriptions": "manageSubscriptions",
    "meetups": "meetups",
    "message": "message",
    "meta": "meta",
    "moderation": "moderation",
    "moderatorcomments": "moderatorComments",
    "moderatorinbox": "moderatorInbox",
    "newlongformreview": "newLongformReview",
    "newpost": "newPost",
    "nominateposts": "nominatePosts",
    "nominations": "nominations",
    "nominations2018": "nominations2018",
    "nominations2019": "nominations2019",
    "out": "out",
    "pastevents": "pastEvents",
    "payments": "payments",
    "petrovdaypoll": "petrovDayPoll",
    "petroydaypoll": "petroyDayPoll",
    "postanalytics": "postAnalytics",
    "posts": "posts",
    "postswithapprovedjargon": "postsWithApprovedJargon",
    "questions": "questions",
    "quickreview": "quickReview",
    "quicktakes": "quicktakes",
    "rationality": "rationality",
    "recommendations": "recommendations",
    "resendverificationemail": "resendVerificationEmail",
    "resetpassword": "resetPassword",
    "reviewadmin": "reviewAdmin",
    "reviewquickpage": "reviewQuickPage",
    "reviewvoting": "reviewVoting",
    "reviews": "reviews",
    "reviews2018": "reviews2018",
    "reviews2019": "reviews2019",
    "revisions": "revisions",
    "robots.txt": "robots.txt",
    "s": "s",
    "search": "search",
    "sequences": "sequences",
    "sequencesnew": "sequencesNew",
    "shortform": "shortform",
    "spotlights": "spotlights",
    "tag": "tag",
    "tagactivity": "tagActivity",
    "tagfeed": "tagFeed",
    "tagvoting": "tagVoting",
    "tags": "tags",
    "topics": "topics",
    "u": "u",
    "upcomingevents": "upcomingEvents",
    "user": "user",
    "users": "users",
    "w": "w",
    "wactivity": "wActivity",
    "wfeed": "wFeed",
    "wiki": "wiki",
    "wikitags": "wikitags"
  },
  "hasPage": true
} satisfies RouteNode;

export function canonicalizePath(pathname: string): string | null {
  // Normalize
  const qIndex = pathname.indexOf('?')
  const hIndex = pathname.indexOf('#')
  const cut = (v: number, acc: number) => (v === -1 ? acc : Math.min(v, acc))
  const end = cut(hIndex, cut(qIndex, pathname.length))
  const raw = pathname.slice(0, end)
  const segments = raw.split('/').filter(Boolean)

  let node: RouteNode | undefined = routeTrie
  const canonical: string[] = []

  function acceptLeaf(n: RouteNode | undefined): boolean {
    if (!n) return false
    return !!(n.hasPage || n.hasRoute)
  }

  for (let i = 0; i < segments.length; i++) {
    const seg = segments[i]
    if (!node) return null

    // Prefer static match (case-insensitive)
    if (node.lowerCase && node.staticChildren) {
      const canon: string = node.lowerCase[seg.toLowerCase()]
      if (canon && node.staticChildren[canon]) {
        canonical.push(canon)
        node = node.staticChildren[canon]
        continue
      }
    }

    // Dynamic
    if (node.dynamicChild) {
      canonical.push(seg)
      node = node.dynamicChild.child
      continue
    }

    // Catch-all
    if (node.catchAll) {
      for (let j = i; j < segments.length; j++) canonical.push(segments[j])
      node = node.catchAll.child
      // Entire remainder consumed
      i = segments.length
      break
    }

    // Optional catch-all
    if (node.optionalCatchAll) {
      for (let j = i; j < segments.length; j++) canonical.push(segments[j])
      node = node.optionalCatchAll.child
      i = segments.length
      break
    }

    return null
  }

  // If we ended before consuming all segments due to catch-all, fine. Otherwise ensure leaf exists
  if (!segments.length) {
    return acceptLeaf(node) ? '/' : null
  }

  return acceptLeaf(node) ? '/' + canonical.join('/') : null
}
