/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation updateUserLayout($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": typeof types.updateUserLayoutDocument,
    "\n  query multiGoogleServiceAccountSessionAdminGoogleServiceAccountQuery($selector: GoogleServiceAccountSessionSelector, $limit: Int, $enableTotal: Boolean) {\n    googleServiceAccountSessions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...GoogleServiceAccountSessionAdminInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiGoogleServiceAccountSessionAdminGoogleServiceAccountQueryDocument,
    "\n    mutation revokeGoogleServiceAccountTokens {\n      revokeGoogleServiceAccountTokens\n    }\n  ": typeof types.revokeGoogleServiceAccountTokensDocument,
    "\n    query AdminMetadataQuery {\n      AdminMetadata\n    }\n  ": typeof types.AdminMetadataQueryDocument,
    "\n    query SearchSynonyms {\n      SearchSynonyms\n    }\n  ": typeof types.SearchSynonymsDocument,
    "mutation UpdateSearchSynonyms($synonyms: [String!]!) {\n      UpdateSearchSynonyms(synonyms: $synonyms)\n    }": typeof types.UpdateSearchSynonymsDocument,
    "\n  mutation updateCurationNoticeCurationNoticesForm($selector: SelectorInput!, $data: UpdateCurationNoticeDataInput!) {\n    updateCurationNotice(selector: $selector, data: $data) {\n      data {\n        ...CurationNoticesFragment\n      }\n    }\n  }\n": typeof types.updateCurationNoticeCurationNoticesFormDocument,
    "\n  mutation createCurationNoticeCurationNoticesForm($data: CreateCurationNoticeDataInput!) {\n    createCurationNotice(data: $data) {\n      data {\n        ...CurationNoticesFragment\n      }\n    }\n  }\n": typeof types.createCurationNoticeCurationNoticesFormDocument,
    "\n  mutation updatePostCurationNoticesItem1($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.updatePostCurationNoticesItem1Document,
    "\n  mutation updateCurationNoticeCurationNoticesItem($selector: SelectorInput!, $data: UpdateCurationNoticeDataInput!) {\n    updateCurationNotice(selector: $selector, data: $data) {\n      data {\n        ...CurationNoticesFragment\n      }\n    }\n  }\n": typeof types.updateCurationNoticeCurationNoticesItemDocument,
    "\n  mutation createCommentCurationNoticesItem($data: CreateCommentDataInput!) {\n    createComment(data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": typeof types.createCommentCurationNoticesItemDocument,
    "\n  query multiCurationNoticeCurationPageQuery($selector: CurationNoticeSelector, $limit: Int, $enableTotal: Boolean) {\n    curationNotices(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CurationNoticesFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCurationNoticeCurationPageQueryDocument,
    "\n    query randomUser($userIsAuthor: String!) {\n      GetRandomUser(userIsAuthor: $userIsAuthor) {\n        ...UsersMinimumInfo\n      }\n    }\n  ": typeof types.randomUserDocument,
    "\n    query CrossedKarmaThreshold($limit: Int!) {\n      CrossedKarmaThreshold(limit: $limit) {\n        results {\n          ...PostsTwitterAdmin\n        }\n      }\n    }\n  ": typeof types.CrossedKarmaThresholdDocument,
    "\n    query MigrationsDashboardQuery {\n      MigrationsDashboard {\n        migrations {\n          name\n          dateWritten\n          runs { name started finished succeeded }\n          lastRun\n        }\n      }\n    }\n  ": typeof types.MigrationsDashboardQueryDocument,
    "\n  query multiCommentAFUnreviewedCommentCountQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SuggestAlignmentComment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentAFUnreviewedCommentCountQueryDocument,
    "\n    mutation alignmentPost($postId: String, $af: Boolean) {\n      alignmentPost(postId: $postId, af: $af) {\n        ...PostsList\n      }\n    }\n  ": typeof types.alignmentPostDocument,
    "\n  query multiUserAuthorAnalyticsPageQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserAuthorAnalyticsPageQueryDocument,
    "\n  query PostsAnalyticsPage($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n": typeof types.PostsAnalyticsPageDocument,
    "\n  query multiBookmarkBookmarksFeedQuery($selector: BookmarkSelector, $limit: Int, $enableTotal: Boolean) {\n    bookmarks(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...BookmarksFeedItemFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiBookmarkBookmarksFeedQueryDocument,
    "\n  query multiBookmarkBookmarksListQuery($selector: BookmarkSelector, $limit: Int, $enableTotal: Boolean) {\n    bookmarks(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...BookmarksWithDocumentFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiBookmarkBookmarksListQueryDocument,
    "\n      query getReadHistory($limit: Int, $filter: PostReviewFilter, $sort: PostReviewSort) {\n        UserReadHistory(limit: $limit, filter: $filter, sort: $sort) {\n          posts {\n            ...PostsListWithVotes\n            lastVisitedAt\n          }\n        }\n      }\n    ": typeof types.getReadHistoryDocument,
    "\n  query multiVoteVoteHistoryTabQuery($selector: VoteSelector, $limit: Int, $enableTotal: Boolean) {\n    votes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserVotesWithDocument\n      }\n      totalCount\n    }\n  }\n": typeof types.multiVoteVoteHistoryTabQueryDocument,
    "\n  mutation updateUserBook2020FrontpageWidget($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": typeof types.updateUserBook2020FrontpageWidgetDocument,
    "\n  mutation updateUserBookFrontpageWidget($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": typeof types.updateUserBookFrontpageWidgetDocument,
    "\n  query CommentById($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n": typeof types.CommentByIdDocument,
    "\n  mutation updateCommentCommentForm($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": typeof types.updateCommentCommentFormDocument,
    "\n  mutation createCommentCommentForm($data: CreateCommentDataInput!) {\n    createComment(data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": typeof types.createCommentCommentFormDocument,
    "\n  query CommentPermalink($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentWithRepliesFragment\n      }\n    }\n  }\n": typeof types.CommentPermalinkDocument,
    "\n  query LinkedDraftCommentQuery($documentId: String!) {\n    comment(selector: { _id: $documentId }) {\n      result {\n        ...DraftComments\n      }\n    }\n  }\n": typeof types.LinkedDraftCommentQueryDocument,
    "\n  query DraftCommentsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DraftComments\n      }\n      totalCount\n    }\n  }\n": typeof types.DraftCommentsQueryDocument,
    "\n  query CommentEdit($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentEdit\n      }\n    }\n  }\n": typeof types.CommentEditDocument,
    "\n  query CommentDeletedMetadata($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...DeletedCommentsMetaData\n      }\n    }\n  }\n": typeof types.CommentDeletedMetadataDocument,
    "\n  query CommentPollVote($documentId: String) {\n    forumEvent(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ForumEventsDisplay\n      }\n    }\n  }\n": typeof types.CommentPollVoteDocument,
    "\n  query CommentsNewForm($documentId: String, $postId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersCurrentCommentRateLimit\n      }\n    }\n  }\n": typeof types.CommentsNewFormDocument,
    "\n    mutation upsertUserTypingIndicator($documentId: String!) {\n      upsertUserTypingIndicator(documentId: $documentId) {\n        ...TypingIndicatorInfo\n      }\n    }\n  ": typeof types.upsertUserTypingIndicatorDocument,
    "\n  query multiLWEventLastVisitListQuery($selector: LWEventSelector, $limit: Int, $enableTotal: Boolean) {\n    lWEvents(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...lastEventFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiLWEventLastVisitListQueryDocument,
    "\n  query PostsModerationGuidelines($documentId: String) {\n    PostsModerationGuidelines: post(selector: { documentId: $documentId }) {\n      result {\n        ...PostsModerationGuidelines\n      }\n      __typename\n    }\n  }\n": typeof types.PostsModerationGuidelinesDocument,
    "\n  query TagModerationGuidelines($documentId: String) {\n    TagModerationGuidelines: tag(selector: { documentId: $documentId }) {\n      result {\n        ...TagFragment\n      }\n      __typename\n    }\n  }\n": typeof types.TagModerationGuidelinesDocument,
    "\n  mutation updatePostModerationGuidelinesEditForm($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsPage\n      }\n    }\n  }\n": typeof types.updatePostModerationGuidelinesEditFormDocument,
    "\n  mutation updateTagModerationGuidelinesEditForm($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...TagWithFlagsFragment\n      }\n    }\n  }\n": typeof types.updateTagModerationGuidelinesEditFormDocument,
    "\n  query PostsEditQuery($documentId: String!, $version: String) {\n    post(selector:  { documentId: $documentId }) {\n      result {\n        ...PostsEditQueryFragment\n      }\n    }\n  }\n": typeof types.PostsEditQueryDocument,
    "\n  query TagEditQuery($documentId: String!) {\n    tag(selector: { documentId: $documentId }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n": typeof types.TagEditQueryDocument,
    "\n  query multiCommentModeratorCommentsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentModeratorCommentsQueryDocument,
    "\n  query NewUserGuidelinesDialog($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n": typeof types.NewUserGuidelinesDialogDocument,
    "\n  query ParentCommentSingle($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n": typeof types.ParentCommentSingleDocument,
    "\n    query PopularComments($limit: Int) {\n      PopularComments(limit: $limit) {\n        results {\n          ...CommentsListWithParentMetadata\n        }\n      }\n    }\n  ": typeof types.PopularCommentsDocument,
    "\n  query multiCommentRecentCommentsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentRecentCommentsQueryDocument,
    "\n  query SideCommentSingle($commentId: String!) {\n    comment(input: { selector: { _id: $commentId } }) {\n      result {\n        ...CommentWithRepliesFragment\n      }\n    }\n  }\n": typeof types.SideCommentSingleDocument,
    "\n  query multiCommentUserCommentsRepliesQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentUserCommentsRepliesQueryDocument,
    "\n  query multiUserUserCommentsRepliesQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserUserCommentsRepliesQueryDocument,
    "\n  query multiCommentuseCommentQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentuseCommentQueryDocument,
    "\n    mutation sendVertexMediaCompleteEventMutation($postId: String!, $attributionId: String) {\n      sendVertexMediaCompleteEvent(postId: $postId, attributionId: $attributionId)\n    }\n  ": typeof types.sendVertexMediaCompleteEventMutationDocument,
    "\n  query multiCommentCommentsListCondensedQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentCommentsListCondensedQueryDocument,
    "\n  query HeaderEventSubtitleSpotlightQuery {\n    currentSpotlight {\n      ...SpotlightHeaderEventSubtitle\n    }\n  }\n": typeof types.HeaderEventSubtitleSpotlightQueryDocument,
    "\n  query multiTagHomeTagBarQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagHomeTagBarQueryDocument,
    "\n    mutation sendVertexViewHomePageEventMutation {\n      sendVertexViewHomePageEvent\n    }\n  ": typeof types.sendVertexViewHomePageEventMutationDocument,
    "\n  query multiFeaturedResourceFeaturedResourceBannerQuery($selector: FeaturedResourceSelector, $limit: Int, $enableTotal: Boolean) {\n    featuredResources(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...FeaturedResourcesFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiFeaturedResourceFeaturedResourceBannerQueryDocument,
    "\n  query multiTagSubforumsListQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagSubforumSidebarFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagSubforumsListQueryDocument,
    "\n  query PostExcerpt($documentId: String, $hash: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...HighlightWithHash\n      }\n    }\n  }\n": typeof types.PostExcerptDocument,
    "\n  query AllTagsActivityFeed($limit: Int, $cutoff: Date, $offset: Int) {\n    AllTagsActivityFeed(limit: $limit, cutoff: $cutoff, offset: $offset) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagCreated {\n          ...TagCreationHistoryFragment\n        }\n        tagRevision {\n          ...RevisionTagFragment\n        }\n        tagDiscussionComment {\n          ...CommentsListWithParentMetadata\n        }\n      }\n    }\n  }\n": typeof types.AllTagsActivityFeedDocument,
    "\n  query TagHistoryFeed($limit: Int, $cutoff: Date, $offset: Int, $tagId: String!, $options: JSON) {\n    TagHistoryFeed(limit: $limit, cutoff: $cutoff, offset: $offset, tagId: $tagId, options: $options) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagCreated {\n          ...TagHistoryFragment\n        }\n        tagRevision {\n          ...RevisionHistoryEntry\n        }\n        lensRevision {\n          ...RevisionHistoryEntry\n        }\n        summaryRevision {\n          ...RevisionHistorySummaryEdit\n        }\n        tagApplied {\n          ...TagRelHistoryFragment\n        }\n        tagDiscussionComment {\n          ...CommentsList\n        }\n        wikiMetadataChanged {\n          ...FieldChangeFragment\n        }\n        lensOrSummaryMetadataChanged {\n          ...FieldChangeFragment\n        }\n      }\n    }\n  }\n": typeof types.TagHistoryFeedDocument,
    "\n  query RecentDiscussionFeed($limit: Int, $cutoff: Date, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int, $tagCommentsLimit: Int) {\n    RecentDiscussionFeed(limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        postCommented {\n          ...PostsRecentDiscussion\n        }\n        shortformCommented {\n          ...ShortformRecentDiscussion\n        }\n        tagDiscussed {\n          ...TagRecentDiscussion\n        }\n        tagRevised {\n          ...RecentDiscussionRevisionTagFragment\n        }\n      }\n    }\n  }\n": typeof types.RecentDiscussionFeedDocument,
    "\n  query SubscribedFeed($limit: Int, $cutoff: Date, $offset: Int, $af: Boolean) {\n    SubscribedFeed(limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        postCommented {\n          ...SubscribedPostAndCommentsFeed\n        }\n      }\n    }\n  }\n": typeof types.SubscribedFeedDocument,
    "\n  query SubforumMagicFeed($tagId: String!, $limit: Int, $cutoff: Float, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumMagicFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n": typeof types.SubforumMagicFeedDocument,
    "\n  query SubforumNewFeed($tagId: String!, $limit: Int, $cutoff: Date, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumNewFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n": typeof types.SubforumNewFeedDocument,
    "\n  query SubforumOldFeed($tagId: String!, $limit: Int, $cutoff: Date, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumOldFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n": typeof types.SubforumOldFeedDocument,
    "\n  query SubforumRecentCommentsFeed($tagId: String!, $limit: Int, $cutoff: Date, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumRecentCommentsFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n": typeof types.SubforumRecentCommentsFeedDocument,
    "\n  query SubforumTopFeed($tagId: String!, $limit: Int, $cutoff: Int, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumTopFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n": typeof types.SubforumTopFeedDocument,
    "\n  query UltraFeed($limit: Int, $cutoff: Date, $offset: Int, $sessionId: String, $settings: JSON) {\n    UltraFeed(limit: $limit, cutoff: $cutoff, offset: $offset, sessionId: $sessionId, settings: $settings) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        feedCommentThread {\n          ...FeedCommentThreadFragment\n        }\n        feedPost {\n          ...FeedPostFragment\n        }\n        feedSpotlight {\n          ...FeedSpotlightFragment\n        }\n        feedSubscriptionSuggestions {\n          ...FeedSubscriptionSuggestionsFragment\n        }\n      }\n    }\n  }\n": typeof types.UltraFeedDocument,
    "\n  mutation updateUserCommunity($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersProfile\n      }\n    }\n  }\n": typeof types.updateUserCommunityDocument,
    "\n  query multiLocalgroupLocalGroupsQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiLocalgroupLocalGroupsQueryDocument,
    "\n  query multiLocalgroupOnlineGroupsQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiLocalgroupOnlineGroupsQueryDocument,
    "\n  query ElicitBlockData($questionId: String) {\n    ElicitBlockData(questionId: $questionId) {\n      _id\n      title\n      notes\n      resolvesBy\n      resolution\n      predictions {\n        _id,\n        predictionId,\n        prediction,\n        createdAt,\n        notes,\n        sourceUrl,\n        sourceId,\n        binaryQuestionId\n        creator {\n          _id,\n          displayName,\n          sourceUserId\n          lwUser {\n            ...UsersMinimumInfo\n          }\n        }\n      }\n    }\n  }\n": typeof types.ElicitBlockDataDocument,
    "\n  mutation ElicitPrediction($questionId:String, $prediction: Int) {\n    MakeElicitPrediction(questionId:$questionId, prediction: $prediction) {\n      _id\n      title\n      notes\n      resolvesBy\n      resolution\n      predictions {\n        _id,\n        predictionId,\n        prediction,\n        createdAt,\n        notes,\n        sourceUrl,\n        sourceId,\n        binaryQuestionId\n        creator {\n          _id,\n          displayName,\n          sourceUserId\n          lwUser {\n            ...UsersMinimumInfo\n          }\n        }\n      }\n    }\n  }\n": typeof types.ElicitPredictionDocument,
    "\n    query RecentlyActiveDialogues($limit: Int) {\n      RecentlyActiveDialogues(limit: $limit) {\n        results {\n          ...PostsListWithVotes\n        }\n      }\n    }\n  ": typeof types.RecentlyActiveDialoguesDocument,
    "\n    query MyDialogues($limit: Int) {\n      MyDialogues(limit: $limit) {\n        results {\n          ...PostsListWithVotes\n        }\n      }\n    }\n  ": typeof types.MyDialoguesDocument,
    "\n  query DialoguesPage($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n": typeof types.DialoguesPageDocument,
    "\n  mutation updatePostBanUserFromPostDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsPage\n      }\n    }\n  }\n": typeof types.updatePostBanUserFromPostDropdownItemDocument,
    "\n  query CommentActions($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsDetails\n      }\n    }\n  }\n": typeof types.CommentActionsDocument,
    "\n    mutation lockThread($commentId: String!, $until: String) {\n      lockThread(commentId: $commentId, until: $until)\n    }\n  ": typeof types.lockThreadDocument,
    "\n    mutation unlockThread($commentId: String!) {\n      unlockThread(commentId: $commentId)\n    }\n  ": typeof types.unlockThreadDocument,
    "\n  mutation updateCommentMoveToAlignmentCommentDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": typeof types.updateCommentMoveToAlignmentCommentDropdownItemDocument,
    "\n  mutation updateCommentMoveToAnswersDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": typeof types.updateCommentMoveToAnswersDropdownItemDocument,
    "\n  mutation updateCommentPinToProfileDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": typeof types.updateCommentPinToProfileDropdownItemDocument,
    "\n  mutation updateCommentRetractCommentDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": typeof types.updateCommentRetractCommentDropdownItemDocument,
    "\n  mutation updateCommentShortformFrontpageDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": typeof types.updateCommentShortformFrontpageDropdownItemDocument,
    "\n  mutation updateCommentSuggestAlignmentCommentDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentComment\n      }\n    }\n  }\n": typeof types.updateCommentSuggestAlignmentCommentDropdownItemDocument,
    "\n  mutation updateCommentToggleIsModeratorCommentDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": typeof types.updateCommentToggleIsModeratorCommentDropdownItemDocument,
    "\n    mutation moderateComment($commentId: String, $deleted: Boolean, $deletedReason: String, $deletedPublic: Boolean) {\n      moderateComment(commentId: $commentId, deleted: $deleted, deletedReason: $deletedReason, deletedPublic: $deletedPublic) {\n        ...CommentsList\n      }\n    }\n  ": typeof types.moderateCommentDocument,
    "\n  mutation updateUserApproveNewUserDropdownItem($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": typeof types.updateUserApproveNewUserDropdownItemDocument,
    "\n  mutation updatePostDeleteDraftDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.updatePostDeleteDraftDropdownItemDocument,
    "\n  mutation updatePostExcludeFromRecommendationsDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.updatePostExcludeFromRecommendationsDropdownItemDocument,
    "\n    mutation markAsReadOrUnread($postId: String, $isRead: Boolean) {\n      markAsReadOrUnread(postId: $postId, isRead: $isRead)\n    }\n  ": typeof types.markAsReadOrUnreadDocument,
    "\n  mutation updatePostMoveToDraftDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.updatePostMoveToDraftDropdownItemDocument,
    "\n  mutation updatePostMoveToFrontpageDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.updatePostMoveToFrontpageDropdownItemDocument,
    "\n  mutation updatePostResyncRssDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsEdit\n      }\n    }\n  }\n": typeof types.updatePostResyncRssDropdownItemDocument,
    "\n    query getRssPostChanges($postId: String!) {\n      RssPostChanges(postId: $postId) {\n        isChanged\n        newHtml\n        htmlDiff\n      }\n    }\n  ": typeof types.getRssPostChangesDocument,
    "\n  mutation updateUserShortformDropdownItem($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": typeof types.updateUserShortformDropdownItemDocument,
    "\n  mutation updatePostSuggestAlignmentPostDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.updatePostSuggestAlignmentPostDropdownItemDocument,
    "\n  mutation updatePostSuggestCuratedDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.updatePostSuggestCuratedDropdownItemDocument,
    "\n    mutation setIsHidden($postId: String!, $isHidden: Boolean!) {\n      setIsHidden(postId: $postId, isHidden: $isHidden) {\n        ...UsersCurrent\n      }\n    }\n  ": typeof types.setIsHiddenDocument,
    "\n  query multiPostsListWithVotesQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostsListWithVotesQueryDocument,
    "\n  query multiCollectionEABestOfPageQuery($selector: CollectionSelector, $limit: Int, $enableTotal: Boolean) {\n    collections(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CollectionsBestOfFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCollectionEABestOfPageQueryDocument,
    "\n  query multiSequenceEABestOfPageQuery($selector: SequenceSelector, $limit: Int, $enableTotal: Boolean) {\n    sequences(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SequencesPageFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiSequenceEABestOfPageQueryDocument,
    "\n  query multiPostsBestOfListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsBestOfList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostsBestOfListQueryDocument,
    "\n  query multiDigestEADigestPageQuery($selector: DigestSelector, $limit: Int, $enableTotal: Boolean) {\n    digests(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DigestsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiDigestEADigestPageQueryDocument,
    "\n    query getDigestPosts($num: Int) {\n      DigestPosts(num: $num) {\n        ...PostsListWithVotes\n      }\n    }\n  ": typeof types.getDigestPostsDocument,
    "\n  query EAHomeHandbook($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesPageFragment\n      }\n    }\n  }\n": typeof types.EAHomeHandbookDocument,
    "\n  query multiPostEAHomeRightHandSideQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostEAHomeRightHandSideQueryDocument,
    "\n  query multiPostInstagramLandingPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostInstagramLandingPageQueryDocument,
    "\n  query multiChapterInstagramLandingPageQuery($selector: ChapterSelector, $limit: Int, $enableTotal: Boolean) {\n    chapters(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ChaptersFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiChapterInstagramLandingPageQueryDocument,
    "\n  query multiUserEAGDetailTargetedJobAdSectionQuery($selector: UserEAGDetailSelector, $limit: Int, $enableTotal: Boolean) {\n    userEAGDetails(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserEAGDetailsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserEAGDetailTargetedJobAdSectionQueryDocument,
    "\n  query multiUserJobAdTargetedJobAdSectionQuery($selector: UserJobAdSelector, $limit: Int, $enableTotal: Boolean) {\n    userJobAds(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserJobAdsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserJobAdTargetedJobAdSectionQueryDocument,
    "\n  mutation updateUserJobAdTargetedJobAdSection($selector: SelectorInput!, $data: UpdateUserJobAdDataInput!) {\n    updateUserJobAd(selector: $selector, data: $data) {\n      data {\n        ...UserJobAdsMinimumInfo\n      }\n    }\n  }\n": typeof types.updateUserJobAdTargetedJobAdSectionDocument,
    "\n  mutation createUserJobAdTargetedJobAdSection($data: CreateUserJobAdDataInput!) {\n    createUserJobAd(data: $data) {\n      data {\n        ...UserJobAdsMinimumInfo\n      }\n    }\n  }\n": typeof types.createUserJobAdTargetedJobAdSectionDocument,
    "\n      query getUserReadsPerCoreTag($userId: String!) {\n        UserReadsPerCoreTag(userId: $userId) {\n          tagId\n          userReadCount\n        }\n      }\n    ": typeof types.getUserReadsPerCoreTagDocument,
    "\n  mutation updateDigestConfirmPublishDialog($selector: SelectorInput!, $data: UpdateDigestDataInput!) {\n    updateDigest(selector: $selector, data: $data) {\n      data {\n        ...DigestsMinimumInfo\n      }\n    }\n  }\n": typeof types.updateDigestConfirmPublishDialogDocument,
    "\n  query multiDigestDigestsQuery($selector: DigestSelector, $limit: Int, $enableTotal: Boolean) {\n    digests(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DigestsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiDigestDigestsQueryDocument,
    "\n  query multiDigestEditDigestQuery($selector: DigestSelector, $limit: Int, $enableTotal: Boolean) {\n    digests(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DigestsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiDigestEditDigestQueryDocument,
    "\n  mutation updateDigestPostEditDigest($selector: SelectorInput!, $data: UpdateDigestPostDataInput!) {\n    updateDigestPost(selector: $selector, data: $data) {\n      data {\n        ...DigestPostsMinimumInfo\n      }\n    }\n  }\n": typeof types.updateDigestPostEditDigestDocument,
    "\n  mutation createDigestPostEditDigest($data: CreateDigestPostDataInput!) {\n    createDigestPost(data: $data) {\n      data {\n        ...DigestPostsMinimumInfo\n      }\n    }\n  }\n": typeof types.createDigestPostEditDigestDocument,
    "\n    query getDigestPlannerData($digestId: String, $startDate: Date, $endDate: Date) {\n      DigestPlannerData(digestId: $digestId, startDate: $startDate, endDate: $endDate) {\n        post {\n          ...PostsListWithVotes\n        }\n        digestPost {\n          _id\n          emailDigestStatus\n          onsiteDigestStatus\n        }\n        rating\n      }\n    }\n  ": typeof types.getDigestPlannerDataDocument,
    "\n  mutation updateDigestEditDigestActionButtons($selector: SelectorInput!, $data: UpdateDigestDataInput!) {\n    updateDigest(selector: $selector, data: $data) {\n      data {\n        ...DigestsMinimumInfo\n      }\n    }\n  }\n": typeof types.updateDigestEditDigestActionButtonsDocument,
    "\n  mutation updateDigestEditDigestHeader($selector: SelectorInput!, $data: UpdateDigestDataInput!) {\n    updateDigest(selector: $selector, data: $data) {\n      data {\n        ...DigestsMinimumInfo\n      }\n    }\n  }\n": typeof types.updateDigestEditDigestHeaderDocument,
    "\n    mutation NewUserCompleteProfile(\n      $username: String!,\n      $subscribeToDigest: Boolean!,\n      $email: String,\n      $acceptedTos: Boolean\n    ) {\n      NewUserCompleteProfile(\n        username: $username,\n        subscribeToDigest: $subscribeToDigest,\n        email: $email,\n        acceptedTos: $acceptedTos\n      ) {\n        username\n        slug\n        displayName\n      }\n    }\n  ": typeof types.NewUserCompleteProfileDocument,
    "\n    query isDisplayNameTaken($displayName: String!) {\n      IsDisplayNameTaken(displayName: $displayName)\n    }\n  ": typeof types.isDisplayNameTakenDocument,
    "\n  query multiUseruseSuggestedSubscriptionsQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserOnboardingAuthor\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUseruseSuggestedSubscriptionsQueryDocument,
    "\n  query multiTaguseSuggestedSubscriptionsQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserOnboardingTag\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTaguseSuggestedSubscriptionsQueryDocument,
    "\n  query EAGApplicationImportForm($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersEdit\n      }\n    }\n  }\n": typeof types.EAGApplicationImportFormDocument,
    "\n  query multiPosthooksQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPosthooksQueryDocument,
    "\n  query multiVotehooksQuery($selector: VoteSelector, $limit: Int, $enableTotal: Boolean) {\n    votes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserVotes\n      }\n      totalCount\n    }\n  }\n": typeof types.multiVotehooksQueryDocument,
    "\n    query getWrappedData($userId: String!, $year: Int!) {\n      UserWrappedDataByYear(userId: $userId, year: $year) {\n        engagementPercentile\n        postsReadCount\n        totalSeconds\n        daysVisited\n        mostReadTopics {\n          name\n          shortName\n          slug\n          count\n        }\n        relativeMostReadCoreTopics {\n          tagId\n          tagName\n          tagShortName\n          userReadCount\n          readLikelihoodRatio\n        }\n        mostReadAuthors {\n          _id\n          displayName\n          slug\n          profileImageId\n          count\n          engagementPercentile\n        }\n        topPosts {\n          _id\n          title\n          slug\n          baseScore\n        }\n        postCount\n        authorPercentile\n        topComment {\n          _id\n          postedAt\n          postId\n          postTitle\n          postSlug\n          baseScore\n          extendedScore\n          contents {\n            html\n          }\n        }\n        commentCount\n        commenterPercentile\n        topShortform {\n          _id\n          postedAt\n          postId\n          baseScore\n          extendedScore\n          contents {\n            html\n          }\n        }\n        shortformCount\n        shortformPercentile\n        karmaChange\n        combinedKarmaVals {\n          date\n          postKarma\n          commentKarma\n        }\n        mostReceivedReacts {\n          name\n          count\n        }\n        personality\n      }\n    }\n  ": typeof types.getWrappedDataDocument,
    "\n  query multiPostCKPostEditorQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostCKPostEditorQueryDocument,
    "\n    mutation sendNewDialogueMessageNotification($postId: String!, $dialogueHtml: String!) {\n      sendNewDialogueMessageNotification(postId: $postId, dialogueHtml: $dialogueHtml)\n    }\n  ": typeof types.sendNewDialogueMessageNotificationDocument,
    "\n  mutation updatePostEditTitle($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsMinimumInfo\n      }\n    }\n  }\n": typeof types.updatePostEditTitleDocument,
    "\n    query getPostIsCriticism($args: JSON) {\n      PostIsCriticism(args: $args)\n    }\n    ": typeof types.getPostIsCriticismDocument,
    "\n    mutation autosaveRevision($postId: String!, $contents: AutosaveContentType!) {\n      autosaveRevision(postId: $postId, contents: $contents) {\n        ...RevisionEdit\n      }\n    }\n  ": typeof types.autosaveRevisionDocument,
    "\n    query LinkSharingQuery($postId: String!, $linkSharingKey: String!) {\n      getLinkSharedPost(postId: $postId, linkSharingKey: $linkSharingKey) {\n        ...PostsEdit\n      }\n    }\n  ": typeof types.LinkSharingQueryDocument,
    "\n  query multiRevisionPostVersionHistoryQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionMetadataWithChangeMetrics\n      }\n      totalCount\n    }\n  }\n": typeof types.multiRevisionPostVersionHistoryQueryDocument,
    "\n  query PostVersionHistory($documentId: String) {\n    revision(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...RevisionDisplay\n        ...RevisionMetadata\n      }\n    }\n  }\n": typeof types.PostVersionHistoryDocument,
    "\n    mutation revertPostToRevision($postId: String!, $revisionId: String!) {\n      revertPostToRevision(postId: $postId, revisionId: $revisionId) {\n        ...PostsEdit\n      }\n    }\n  ": typeof types.revertPostToRevisionDocument,
    "\n  query PresenceList($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": typeof types.PresenceListDocument,
    "\n  query multiRevisionTagVersionHistoryQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionMetadataWithChangeMetrics\n      }\n      totalCount\n    }\n  }\n": typeof types.multiRevisionTagVersionHistoryQueryDocument,
    "\n  query TagVersionHistory($documentId: String) {\n    revision(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...RevisionDisplay\n      }\n    }\n  }\n": typeof types.TagVersionHistoryDocument,
    "\n    mutation revertToRevision($tagId: String!, $revertToRevisionId: String!, $contributorsLimit: Int) {\n      revertTagToRevision(tagId: $tagId, revertToRevisionId: $revertToRevisionId) {\n        ...TagPageFragment\n      }\n    }\n  ": typeof types.revertToRevisionDocument,
    "\n  mutation createElicitQuestionCreateClaimDialog($data: CreateElicitQuestionDataInput!) {\n    createElicitQuestion(data: $data) {\n      data {\n        ...ElicitQuestionFragment\n      }\n    }\n  }\n": typeof types.createElicitQuestionCreateClaimDialogDocument,
    "\n    query ConvertDocument($document: JSON, $targetFormat: String) {\n      convertDocument(document: $document, targetFormat: $targetFormat)\n    }\n  ": typeof types.ConvertDocumentDocument,
    "\n  query multiPostEventsHomeQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostEventsHomeQueryDocument,
    "\n  mutation updateUserEventsHome($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersProfile\n      }\n    }\n  }\n": typeof types.updateUserEventsHomeDocument,
    "\n  query FMCrosspostControl($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersCrosspostInfo\n      }\n    }\n  }\n": typeof types.FMCrosspostControlDocument,
    "\n    mutation unlinkCrossposter {\n      unlinkCrossposter\n    }\n  ": typeof types.unlinkCrossposterDocument,
    "\n  query multiTagFormComponentPostEditorTaggingQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagFormComponentPostEditorTaggingQueryDocument,
    "\n  query ImageUpload($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": typeof types.ImageUploadDocument,
    "\n  query multiPodcastEpisodePodcastEpisodeInputQuery($selector: PodcastEpisodeSelector, $limit: Int, $enableTotal: Boolean) {\n    podcastEpisodes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PodcastEpisodeFull\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPodcastEpisodePodcastEpisodeInputQueryDocument,
    "\n  query multiPodcastPodcastEpisodeInputQuery($selector: PodcastSelector, $limit: Int, $enableTotal: Boolean) {\n    podcasts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PodcastSelect\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPodcastPodcastEpisodeInputQueryDocument,
    "\n  mutation createPodcastEpisodePodcastEpisodeInput($data: CreatePodcastEpisodeDataInput!) {\n    createPodcastEpisode(data: $data) {\n      data {\n        ...PodcastEpisodesDefaultFragment\n      }\n    }\n  }\n": typeof types.createPodcastEpisodePodcastEpisodeInputDocument,
    "\n  query multiLocalgroupSelectLocalgroupQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsBase\n      }\n      totalCount\n    }\n  }\n": typeof types.multiLocalgroupSelectLocalgroupQueryDocument,
    "\n  query SequencesListEditorItem($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesPageFragment\n      }\n    }\n  }\n": typeof types.SequencesListEditorItemDocument,
    "\n  query SingleTagItem($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagBasicInfo\n      }\n    }\n  }\n": typeof types.SingleTagItemDocument,
    "\n  query SingleUsersItem($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersProfile\n      }\n    }\n  }\n": typeof types.SingleUsersItemDocument,
    "\n  query multiTagFlagTagFlagToggleListQuery($selector: TagFlagSelector, $limit: Int, $enableTotal: Boolean) {\n    tagFlags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFlagFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagFlagTagFlagToggleListQueryDocument,
    "\n  query TagSelect($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagBasicInfo\n      }\n    }\n  }\n": typeof types.TagSelectDocument,
    "\n  mutation updateForumEventForumEventForm($selector: SelectorInput!, $data: UpdateForumEventDataInput!) {\n    updateForumEvent(selector: $selector, data: $data) {\n      data {\n        ...ForumEventsEdit\n      }\n    }\n  }\n": typeof types.updateForumEventForumEventFormDocument,
    "\n  mutation createForumEventForumEventForm($data: CreateForumEventDataInput!) {\n    createForumEvent(data: $data) {\n      data {\n        ...ForumEventsEdit\n      }\n    }\n  }\n": typeof types.createForumEventForumEventFormDocument,
    "\n  query ForumEventForm($documentId: String) {\n    forumEvent(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ForumEventsEdit\n      }\n    }\n  }\n": typeof types.ForumEventFormDocument,
    "\n  query multiCommentForumEventPollQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentForumEventPollQueryDocument,
    "\n  query multiUserForumEventPollQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserForumEventPollQueryDocument,
    "\n  query ForumEventPoll($documentId: String) {\n    forumEvent(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ForumEventsDisplay\n      }\n    }\n  }\n": typeof types.ForumEventPollDocument,
    "\n    mutation AddForumEventVote($forumEventId: String!, $x: Float!, $delta: Float, $postIds: [String]) {\n      AddForumEventVote(forumEventId: $forumEventId, x: $x, delta: $delta, postIds: $postIds)\n    }\n  ": typeof types.AddForumEventVoteDocument,
    "\n    mutation RemoveForumEventVote($forumEventId: String!) {\n      RemoveForumEventVote(forumEventId: $forumEventId)\n    }\n  ": typeof types.RemoveForumEventVoteDocument,
    "\n  query ForumEventPostPageBanner($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsDetails\n      }\n    }\n  }\n": typeof types.ForumEventPostPageBannerDocument,
    "\n  query ForumEventPostPagePollSection2($documentId: String) {\n    forumEvent(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ForumEventsDisplay\n      }\n    }\n  }\n": typeof types.ForumEventPostPagePollSection2Document,
    "\n  query ForumEventPostPagePollSection($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsDetails\n      }\n    }\n  }\n": typeof types.ForumEventPostPagePollSectionDocument,
    "\n  query multiCommentForumEventStickersQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentForumEventStickersQueryDocument,
    "\n  query multiUserForumEventStickersQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserForumEventStickersQueryDocument,
    "\n    mutation RemoveForumEventSticker($forumEventId: String!, $stickerId: String!) {\n      RemoveForumEventSticker(forumEventId: $forumEventId, stickerId: $stickerId)\n    }\n  ": typeof types.RemoveForumEventStickerDocument,
    "\n  query multiForumEventForumEventsListQuery($selector: ForumEventSelector, $limit: Int, $enableTotal: Boolean) {\n    forumEvents(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ForumEventsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiForumEventForumEventsListQueryDocument,
    "\n    query MultiPostAnalyticsQuery($userId: String, $postIds: [String], $sortBy: String, $desc: Boolean, $limit: Int) {\n      MultiPostAnalytics(userId: $userId, postIds: $postIds, sortBy: $sortBy, desc: $desc, limit: $limit) {\n        posts {\n          _id\n          title\n          slug\n          postedAt\n          views\n          uniqueViews\n          reads\n          meanReadingTime\n          karma\n          comments\n        }\n        totalCount\n      }\n    }\n  ": typeof types.MultiPostAnalyticsQueryDocument,
    "\n    query AnalyticsSeriesQuery($userId: String, $postIds: [String], $startDate: Date, $endDate: Date) {\n      AnalyticsSeries(userId: $userId, postIds: $postIds, startDate: $startDate, endDate: $endDate) {\n        date\n        views\n        reads\n        karma\n        comments\n      }\n    }\n  ": typeof types.AnalyticsSeriesQueryDocument,
    "\n  query multiBookmarkuseBookmarkQuery($selector: BookmarkSelector, $limit: Int, $enableTotal: Boolean) {\n    bookmarks(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...BookmarksDefaultFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiBookmarkuseBookmarkQueryDocument,
    "\n    mutation ToggleBookmarkMutation($input: ToggleBookmarkInput!) {\n      toggleBookmark(input: $input) {\n        data {\n          ...BookmarksDefaultFragment\n        }\n      }\n    }\n  ": typeof types.ToggleBookmarkMutationDocument,
    "\n  query multiForumEventuseCurrentForumEventQuery($selector: ForumEventSelector, $limit: Int, $enableTotal: Boolean) {\n    forumEvents(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ForumEventsDisplay\n      }\n      totalCount\n    }\n  }\n": typeof types.multiForumEventuseCurrentForumEventQueryDocument,
    "\n    query CurrentFrontpageSurvey {\n      CurrentFrontpageSurvey {\n        ...SurveyScheduleMinimumInfo\n      }\n    }\n  ": typeof types.CurrentFrontpageSurveyDocument,
    "\n      mutation UserExpandFrontpageSection($section: String!, $expanded: Boolean!) {\n        UserExpandFrontpageSection(section: $section, expanded: $expanded)\n      }\n    ": typeof types.UserExpandFrontpageSectionDocument,
    "\n  query GetCrosspostQuery($args: JSON) {\n    getCrosspost(args: $args)\n  }\n": typeof types.GetCrosspostQueryDocument,
    "\n    mutation initiateConversation($participantIds: [String!]!, $af: Boolean, $moderator: Boolean) {\n      initiateConversation(participantIds: $participantIds, af: $af, moderator: $moderator) {\n        ...ConversationsMinimumInfo\n      }\n    }\n  ": typeof types.initiateConversationDocument,
    "\n      mutation markConversationRead($conversationId: String!) {\n        markConversationRead(conversationId: $conversationId)\n      }\n    ": typeof types.markConversationReadDocument,
    "\n  query multiSubscriptionuseNotifyMeQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SubscriptionState\n      }\n      totalCount\n    }\n  }\n": typeof types.multiSubscriptionuseNotifyMeQueryDocument,
    "\n  mutation createSubscriptionuseNotifyMe($data: CreateSubscriptionDataInput!) {\n    createSubscription(data: $data) {\n      data {\n        ...SubscriptionState\n      }\n    }\n  }\n": typeof types.createSubscriptionuseNotifyMeDocument,
    "\n    query PostAnalyticsQuery($postId: String!) {\n      PostAnalytics(postId: $postId) {\n        allViews\n        uniqueClientViews\n        uniqueClientViews10Sec\n        medianReadingTime\n        uniqueClientViews5Min\n        uniqueClientViewsSeries {\n          date\n          uniqueClientViews\n        }\n      }\n    }\n  ": typeof types.PostAnalyticsQueryDocument,
    "\n  query multiPostusePublishedPostsQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshinePostsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostusePublishedPostsQueryDocument,
    "\n  query RecentOpportunitiesQuery($selector: PostSelector, $limit: Int) {\n    posts(selector: $selector, limit: $limit) {\n      results {\n        ...PostsListWithVotes\n      }\n    }\n  }\n": typeof types.RecentOpportunitiesQueryDocument,
    "\n  query RecentOpportunitiesWithSequenceQuery($selector: PostSelector, $limit: Int) {\n    posts(selector: $selector, limit: $limit) {\n      results {\n        ...PostsListWithVotesAndSequence\n      }\n    }\n  }\n": typeof types.RecentOpportunitiesWithSequenceQueryDocument,
    "\n    mutation increasePostViewCountMutation($postId: String) {\n      increasePostViewCount(postId: $postId)\n    }\n  ": typeof types.increasePostViewCountMutationDocument,
    "\n    mutation sendVertexViewItemEventMutation($postId: String!, $attributionId: String) {\n      sendVertexViewItemEvent(postId: $postId, attributionId: $attributionId)\n    }\n  ": typeof types.sendVertexViewItemEventMutationDocument,
    "\n    mutation markPostCommentsRead($postId: String!) {\n      markPostCommentsRead(postId: $postId)\n    }\n  ": typeof types.markPostCommentsReadDocument,
    "\n    mutation RefreshDbSettings {\n      RefreshDbSettings\n    }\n  ": typeof types.RefreshDbSettingsDocument,
    "\n  mutation rejectPostMutation($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...SunshinePostsList\n      }\n    }\n  }\n": typeof types.rejectPostMutationDocument,
    "\n  mutation rejectCommentMutation($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n": typeof types.rejectCommentMutationDocument,
    "\n  query multiMultiDocumentuseTagOrLensQuery($selector: MultiDocumentSelector, $limit: Int, $enableTotal: Boolean) {\n    multiDocuments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...MultiDocumentParentDocument\n      }\n      totalCount\n    }\n  }\n": typeof types.multiMultiDocumentuseTagOrLensQueryDocument,
    "\n    query UnreadNotificationCountQuery {\n      unreadNotificationCounts {\n        unreadNotifications\n        unreadPrivateMessages\n        faviconBadgeNumber\n        checkedAt\n      }\n    }\n  ": typeof types.UnreadNotificationCountQueryDocument,
    "\n  mutation updateUseruseUpdateCurrentUser($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": typeof types.updateUseruseUpdateCurrentUserDocument,
    "\n  mutation updateUseruseUpdateGlossaryPinnedState($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": typeof types.updateUseruseUpdateGlossaryPinnedStateDocument,
    "\n  query multiJargonTermGlossaryEditFormQuery($selector: JargonTermSelector, $limit: Int, $enableTotal: Boolean) {\n    jargonTerms(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...JargonTerms\n      }\n      totalCount\n    }\n  }\n": typeof types.multiJargonTermGlossaryEditFormQueryDocument,
    "\n  mutation updateJargonTermGlossaryEditForm1($selector: SelectorInput!, $data: UpdateJargonTermDataInput!) {\n    updateJargonTerm(selector: $selector, data: $data) {\n      data {\n        ...JargonTerms\n      }\n    }\n  }\n": typeof types.updateJargonTermGlossaryEditForm1Document,
    "\n  mutation updatePostGlossaryEditForm($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsEdit\n      }\n    }\n  }\n": typeof types.updatePostGlossaryEditFormDocument,
    "\n    mutation getNewJargonTerms($postId: String!, $glossaryPrompt: String, $examplePost: String, $exampleTerm: String, $exampleAltTerm: String, $exampleDefinition: String) {\n      getNewJargonTerms(postId: $postId, glossaryPrompt: $glossaryPrompt, examplePost: $examplePost, exampleTerm: $exampleTerm, exampleAltTerm: $exampleAltTerm, exampleDefinition: $exampleDefinition) {\n        ...JargonTerms\n      }\n    }\n  ": typeof types.getNewJargonTermsDocument,
    "\n  query multiPostGlossaryEditorPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean, $version: String) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsEditQueryFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostGlossaryEditorPageQueryDocument,
    "\n  mutation updateJargonTermJargonEditorRow($selector: SelectorInput!, $data: UpdateJargonTermDataInput!) {\n    updateJargonTerm(selector: $selector, data: $data) {\n      data {\n        ...JargonTerms\n      }\n    }\n  }\n": typeof types.updateJargonTermJargonEditorRowDocument,
    "\n  mutation updateJargonTermJargonTermForm($selector: SelectorInput!, $data: UpdateJargonTermDataInput!) {\n    updateJargonTerm(selector: $selector, data: $data) {\n      data {\n        ...JargonTerms\n      }\n    }\n  }\n": typeof types.updateJargonTermJargonTermFormDocument,
    "\n  mutation createJargonTermJargonTermForm($data: CreateJargonTermDataInput!) {\n    createJargonTerm(data: $data) {\n      data {\n        ...JargonTerms\n      }\n    }\n  }\n": typeof types.createJargonTermJargonTermFormDocument,
    "\n    query getPostsWithApprovedJargon($limit: Int!) {\n      PostsWithApprovedJargon(limit: $limit) {\n        results {\n          post {\n            ...PostsListWithVotes\n          }\n          jargonTerms {\n            ...JargonTerms\n          }\n        }\n      }\n    }\n  ": typeof types.getPostsWithApprovedJargonDocument,
    "\n  query multiCommentAutocompleteModelSettingsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentAutocompleteModelSettingsQueryDocument,
    "\n  query multiPostAutocompleteModelSettingsQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostAutocompleteModelSettingsQueryDocument,
    "\n  query multiLlmConversationLlmChatWrapperQuery($selector: LlmConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    llmConversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...LlmConversationsFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiLlmConversationLlmChatWrapperQueryDocument,
    "\n  mutation updateLlmConversationLlmChatWrapper($selector: SelectorInput!, $data: UpdateLlmConversationDataInput!) {\n    updateLlmConversation(selector: $selector, data: $data) {\n      data {\n        ...LlmConversationsFragment\n      }\n    }\n  }\n": typeof types.updateLlmConversationLlmChatWrapperDocument,
    "\n  query LlmChatWrapper($documentId: String) {\n    llmConversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...LlmConversationsWithMessagesFragment\n      }\n    }\n  }\n": typeof types.LlmChatWrapperDocument,
    "\n  query multiLlmConversationLlmConversationsViewingPageQuery($selector: LlmConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    llmConversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...LlmConversationsViewingPageFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiLlmConversationLlmConversationsViewingPageQueryDocument,
    "\n  query LlmConversationsViewingPage($documentId: String) {\n    llmConversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...LlmConversationsWithMessagesFragment\n      }\n    }\n  }\n": typeof types.LlmConversationsViewingPageDocument,
    "\n  query PostSummaryDialog($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostWithGeneratedSummary\n      }\n    }\n  }\n": typeof types.PostSummaryDialogDocument,
    "\n  query PostLinkPreviewSequence($documentId: String, $allowNull: Boolean) {\n    sequence(input: { selector: { documentId: $documentId }, allowNull: $allowNull }) {\n      result {\n        ...SequencesPageFragment\n      }\n    }\n  }\n": typeof types.PostLinkPreviewSequenceDocument,
    "\n  query PostLinkPreviewComment($documentId: String, $allowNull: Boolean) {\n    comment(input: { selector: { documentId: $documentId }, allowNull: $allowNull }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n": typeof types.PostLinkPreviewCommentDocument,
    "\n  query PostLinkPreviewPost($documentId: String, $allowNull: Boolean) {\n    post(input: { selector: { documentId: $documentId }, allowNull: $allowNull }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.PostLinkPreviewPostDocument,
    "\n    query ArbitalPageRequest($arbitalSlug: String!) {\n      ArbitalPageData(pageAlias: $arbitalSlug) {\n        title\n        html\n      }\n    }\n  ": typeof types.ArbitalPageRequestDocument,
    "\n  mutation updateUserCommunityHome($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersProfile\n      }\n    }\n  }\n": typeof types.updateUserCommunityHomeDocument,
    "\n  query multiUserCommunityMapQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMapEntry\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserCommunityMapQueryDocument,
    "\n  query multiLocalgroupCommunityMapQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiLocalgroupCommunityMapQueryDocument,
    "\n  query multiPostCommunityMapQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostCommunityMapQueryDocument,
    "\n  mutation updateLocalgroupGroupFormDialog($selector: SelectorInput!, $data: UpdateLocalgroupDataInput!) {\n    updateLocalgroup(selector: $selector, data: $data) {\n      data {\n        ...localGroupsHomeFragment\n      }\n    }\n  }\n": typeof types.updateLocalgroupGroupFormDialogDocument,
    "\n  mutation createLocalgroupGroupFormDialog($data: CreateLocalgroupDataInput!) {\n    createLocalgroup(data: $data) {\n      data {\n        ...localGroupsHomeFragment\n      }\n    }\n  }\n": typeof types.createLocalgroupGroupFormDialogDocument,
    "\n  query GroupFormDialog($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsEdit\n      }\n    }\n  }\n": typeof types.GroupFormDialogDocument,
    "\n  query multiPostLocalGroupPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostLocalGroupPageQueryDocument,
    "\n  query LocalGroupPage($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsHomeFragment\n      }\n    }\n  }\n": typeof types.LocalGroupPageDocument,
    "\n  query multiSubscriptionLocalGroupSubscribersQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...MembersOfGroupFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiSubscriptionLocalGroupSubscribersQueryDocument,
    "\n  query multiLocalgroupLocalGroupsListQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiLocalgroupLocalGroupsListQueryDocument,
    "\n  query SetPersonalMapLocationDialog($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersEdit\n      }\n    }\n  }\n": typeof types.SetPersonalMapLocationDialogDocument,
    "\n  query multiPostTabNavigationEventsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostTabNavigationEventsListQueryDocument,
    "\n  query multiMessageConversationContentsQuery($selector: MessageSelector, $limit: Int, $enableTotal: Boolean) {\n    messages(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...messageListFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiMessageConversationContentsQueryDocument,
    "\n  mutation updateConversationInboxNavigation($selector: SelectorInput!, $data: UpdateConversationDataInput!) {\n    updateConversation(selector: $selector, data: $data) {\n      data {\n        ...ConversationsList\n      }\n    }\n  }\n": typeof types.updateConversationInboxNavigationDocument,
    "\n  query ConversationPage($documentId: String) {\n    conversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ConversationsList\n      }\n    }\n  }\n": typeof types.ConversationPageDocument,
    "\n  query multiMessageConversationPreviewQuery($selector: MessageSelector, $limit: Int, $enableTotal: Boolean) {\n    messages(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...messageListFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiMessageConversationPreviewQueryDocument,
    "\n  query ConversationPreview($documentId: String) {\n    conversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ConversationsList\n      }\n    }\n  }\n": typeof types.ConversationPreviewDocument,
    "\n  mutation updateConversationConversationTitleEditForm($selector: SelectorInput!, $data: UpdateConversationDataInput!) {\n    updateConversation(selector: $selector, data: $data) {\n      data {\n        ...ConversationsList\n      }\n    }\n  }\n": typeof types.updateConversationConversationTitleEditFormDocument,
    "\n  query multiConversationFriendlyInboxQuery($selector: ConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    conversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ConversationsListWithReadStatus\n      }\n      totalCount\n    }\n  }\n": typeof types.multiConversationFriendlyInboxQueryDocument,
    "\n  query FriendlyInbox($documentId: String) {\n    conversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ConversationsListWithReadStatus\n      }\n    }\n  }\n": typeof types.FriendlyInboxDocument,
    "\n  query multiConversationInboxNavigationQuery($selector: ConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    conversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ConversationsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiConversationInboxNavigationQueryDocument,
    "\n  query MessageUserGetUserBySlug($slug: String!) {\n    GetUserBySlug(slug: $slug) {\n      ...UsersMinimumInfo\n    }\n  }\n": typeof types.MessageUserGetUserBySlugDocument,
    "\n  mutation createMessageMessagesNewForm($data: CreateMessageDataInput!) {\n    createMessage(data: $data) {\n      data {\n        ...messageListFragment\n      }\n    }\n  }\n": typeof types.createMessageMessagesNewFormDocument,
    "\n  query MessagesNewForm($documentId: String) {\n    moderationTemplate(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ModerationTemplateFragment\n      }\n    }\n  }\n": typeof types.MessagesNewFormDocument,
    "\n  mutation updateModerationTemplateModerationTemplateForm($selector: SelectorInput!, $data: UpdateModerationTemplateDataInput!) {\n    updateModerationTemplate(selector: $selector, data: $data) {\n      data {\n        ...ModerationTemplateFragment\n      }\n    }\n  }\n": typeof types.updateModerationTemplateModerationTemplateFormDocument,
    "\n  mutation createModerationTemplateModerationTemplateForm($data: CreateModerationTemplateDataInput!) {\n    createModerationTemplate(data: $data) {\n      data {\n        ...ModerationTemplateFragment\n      }\n    }\n  }\n": typeof types.createModerationTemplateModerationTemplateFormDocument,
    "\n  query multiModerationTemplateModerationTemplatesPageQuery($selector: ModerationTemplateSelector, $limit: Int, $enableTotal: Boolean) {\n    moderationTemplates(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModerationTemplateFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiModerationTemplateModerationTemplatesPageQueryDocument,
    "\n  query CommentOnYourDraftNotificationHover($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsMinimumInfo\n      }\n    }\n  }\n": typeof types.CommentOnYourDraftNotificationHoverDocument,
    "\n      query EmailPreviewQuery($notificationIds: [String], $postId: String) {\n        EmailPreview(notificationIds: $notificationIds, postId: $postId) { to subject html text }\n      }\n  ": typeof types.EmailPreviewQueryDocument,
    "\n  query multiNotificationNotificationsListQuery($selector: NotificationSelector, $limit: Int, $enableTotal: Boolean) {\n    notifications(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...NotificationsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiNotificationNotificationsListQueryDocument,
    "\n  query NotificationsMenuButton($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UserKarmaChanges\n      }\n    }\n  }\n": typeof types.NotificationsMenuButtonDocument,
    "\n  query NotificationsPage($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UserKarmaChanges\n      }\n    }\n  }\n": typeof types.NotificationsPageDocument,
    "\n  query NotificationsPageItem($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n": typeof types.NotificationsPageItemDocument,
    "\n    query getNotificationDisplays($limit: Int, $type: String) {\n      NotificationDisplays(limit: $limit, type: $type) {\n        results\n      }\n    }\n  ": typeof types.getNotificationDisplaysDocument,
    "\n    mutation MarkAllNotificationsAsRead {\n      MarkAllNotificationsAsRead\n    }\n  ": typeof types.MarkAllNotificationsAsReadDocument,
    "\n  mutation updateNotificationNotificationsPopoverNotification($selector: SelectorInput!, $data: UpdateNotificationDataInput!) {\n    updateNotification(selector: $selector, data: $data) {\n      data {\n        ...NotificationsList\n      }\n    }\n  }\n": typeof types.updateNotificationNotificationsPopoverNotificationDocument,
    "\n  query TagRelNotificationItem($documentId: String) {\n    tagRel(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagRelFragment\n      }\n    }\n  }\n": typeof types.TagRelNotificationItemDocument,
    "\n  query multiUserAdminPaymentsPageQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserAdminPaymentsPageQueryDocument,
    "\n  mutation updateUserEditPaymentInfoPage($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n": typeof types.updateUserEditPaymentInfoPageDocument,
    "\n  query multiTagusePeopleDirectoryQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagName\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagusePeopleDirectoryQueryDocument,
    "\n    query ActiveTagCount {\n      ActiveTagCount\n    }\n  ": typeof types.ActiveTagCountDocument,
    "\n  query AddToCalendarButton($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsPlaintextDescription\n      }\n    }\n  }\n": typeof types.AddToCalendarButtonDocument,
    "\n  query multiPostCurrentOpenThreadPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostCurrentOpenThreadPageQueryDocument,
    "\n  query multiPostDraftsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostDraftsListQueryDocument,
    "\n  mutation updatePostDraftsList($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.updatePostDraftsListDocument,
    "\n  mutation updatePostExternalPostImporter($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.updatePostExternalPostImporterDocument,
    "\n  mutation createCommentExternalPostImporter($data: CreateCommentDataInput!) {\n    createComment(data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": typeof types.createCommentExternalPostImporterDocument,
    "\n    mutation importUrlAsDraftPost($url: String!) {\n      importUrlAsDraftPost(url: $url) {\n        alreadyExists\n        post {\n          _id\n          slug\n          title\n          content\n          url\n          postedAt\n          createdAt\n          modifiedAt\n          userId\n          draft\n          coauthorStatuses {\n            userId\n            confirmed\n            requested\n          }\n        }\n      }\n    }\n  ": typeof types.importUrlAsDraftPostDocument,
    "\n  query FeedPostsHighlight($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsExpandedHighlight\n      }\n    }\n  }\n": typeof types.FeedPostsHighlightDocument,
    "\n  query multiGoogleServiceAccountSessionGoogleDocImportButtonQuery($selector: GoogleServiceAccountSessionSelector, $limit: Int, $enableTotal: Boolean) {\n    googleServiceAccountSessions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...GoogleServiceAccountSessionInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiGoogleServiceAccountSessionGoogleDocImportButtonQueryDocument,
    "\n      query latestGoogleDocMetadata($postId: String!, $version: String) {\n        latestGoogleDocMetadata(postId: $postId, version: $version)\n      }\n    ": typeof types.latestGoogleDocMetadataDocument,
    "\n      query CanAccessGoogleDoc($fileUrl: String!) {\n        CanAccessGoogleDoc(fileUrl: $fileUrl)\n      }\n    ": typeof types.CanAccessGoogleDocDocument,
    "\n      mutation ImportGoogleDoc($fileUrl: String!, $postId: String) {\n        ImportGoogleDoc(fileUrl: $fileUrl, postId: $postId) {\n          ...PostsBase\n        }\n      }\n    ": typeof types.ImportGoogleDocDocument,
    "\n  query multiPostLWPostsByVoteQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostLWPostsByVoteQueryDocument,
    "\n  mutation createPostNewDialogueDialog($data: CreatePostDataInput!) {\n    createPost(data: $data) {\n      data {\n        ...PostsEdit\n      }\n    }\n  }\n": typeof types.createPostNewDialogueDialogDocument,
    "\n  query multiPostPingbacksListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostPingbacksListQueryDocument,
    "\n  mutation updatePostPostForm($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsEditMutationFragment\n      }\n    }\n  }\n": typeof types.updatePostPostFormDocument,
    "\n  mutation createPostPostForm($data: CreatePostDataInput!) {\n    createPost(data: $data) {\n      data {\n        ...PostsEditMutationFragment\n      }\n    }\n  }\n": typeof types.createPostPostFormDocument,
    "\n  query multiUserMostValuablePostPostMostValuableCheckboxQuery($selector: UserMostValuablePostSelector, $limit: Int, $enableTotal: Boolean) {\n    userMostValuablePosts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserMostValuablePostInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserMostValuablePostPostMostValuableCheckboxQueryDocument,
    "\n  mutation updateUserMostValuablePostPostMostValuableCheckbox($selector: SelectorInput!, $data: UpdateUserMostValuablePostDataInput!) {\n    updateUserMostValuablePost(selector: $selector, data: $data) {\n      data {\n        ...UserMostValuablePostInfo\n      }\n    }\n  }\n": typeof types.updateUserMostValuablePostPostMostValuableCheckboxDocument,
    "\n  mutation createUserMostValuablePostPostMostValuableCheckbox($data: CreateUserMostValuablePostDataInput!) {\n    createUserMostValuablePost(data: $data) {\n      data {\n        ...UserMostValuablePostInfo\n      }\n    }\n  }\n": typeof types.createUserMostValuablePostPostMostValuableCheckboxDocument,
    "\n  query multiPostPostsByVoteQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostPostsByVoteQueryDocument,
    "\n  query multiVotePostsByVoteWrapperQuery($selector: VoteSelector, $limit: Int, $enableTotal: Boolean) {\n    votes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserVotes\n      }\n      totalCount\n    }\n  }\n": typeof types.multiVotePostsByVoteWrapperQueryDocument,
    "\n  query multiRevisionPostsCompareRevisionsQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionHistoryEntry\n      }\n      totalCount\n    }\n  }\n": typeof types.multiRevisionPostsCompareRevisionsQueryDocument,
    "\n  query PostsCompareRevisions($documentId: String, $sequenceId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsWithNavigation\n      }\n    }\n  }\n": typeof types.PostsCompareRevisionsDocument,
    "\n  query multiCommentPostsDialogItemNewCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentPostsDialogItemNewCommentsListQueryDocument,
    "\n  query PostsEditFormUser($documentId: String, $eventForm: Boolean) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersCurrentPostRateLimit\n      }\n    }\n  }\n": typeof types.PostsEditFormUserDocument,
    "\n  query PostsEditFormPost($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsEditQueryFragment\n      }\n    }\n  }\n": typeof types.PostsEditFormPostDocument,
    "\n  query PostsGroupDetails($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsHomeFragment\n      }\n    }\n  }\n": typeof types.PostsGroupDetailsDocument,
    "\n  query PostsHighlight($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsExpandedHighlight\n      }\n    }\n  }\n": typeof types.PostsHighlightDocument,
    "\n  query multiCommentPostsItemNewCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentPostsItemNewCommentsListQueryDocument,
    "\n    query LatestDialogueMessages($dialogueId: String!, $unreadCount: Int!) {\n      latestDialogueMessages(dialogueId: $dialogueId, numMessages: $unreadCount)\n    }\n  ": typeof types.LatestDialogueMessagesDocument,
    "\n  query PostsItemWrapper($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.PostsItemWrapperDocument,
    "\n  mutation createPostPostsNewForm($data: CreatePostDataInput!) {\n    createPost(data: $data) {\n      data {\n        ...PostsEdit\n      }\n    }\n  }\n": typeof types.createPostPostsNewFormDocument,
    "\n  query PostsNewForm4($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersEdit\n      }\n    }\n  }\n": typeof types.PostsNewForm4Document,
    "\n  query PostsNewForm3($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsEditMutationFragment\n      }\n    }\n  }\n": typeof types.PostsNewForm3Document,
    "\n  query PostsNewForm2($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsIsOnline\n      }\n    }\n  }\n": typeof types.PostsNewForm2Document,
    "\n  query PostsNewForm1($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsEditQueryFragment\n      }\n    }\n  }\n": typeof types.PostsNewForm1Document,
    "\n  query PostsNewForm($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n": typeof types.PostsNewFormDocument,
    "\n  query multiReviewWinnerBestOfLessWrongAnnouncementQuery($selector: ReviewWinnerSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewWinners(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ReviewWinnerAnnouncement\n      }\n      totalCount\n    }\n  }\n": typeof types.multiReviewWinnerBestOfLessWrongAnnouncementQueryDocument,
    "\n  mutation createSplashArtCoordinateImageCropPreview($data: CreateSplashArtCoordinateDataInput!) {\n    createSplashArtCoordinate(data: $data) {\n      data {\n        ...SplashArtCoordinates\n      }\n    }\n  }\n": typeof types.createSplashArtCoordinateImageCropPreviewDocument,
    "\n  mutation createSplashArtCoordinatePostWithArtGrid($data: CreateSplashArtCoordinateDataInput!) {\n    createSplashArtCoordinate(data: $data) {\n      data {\n        ...SplashArtCoordinatesEdit\n      }\n    }\n  }\n": typeof types.createSplashArtCoordinatePostWithArtGridDocument,
    "\n  query multiCommentReviewPillContainerQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentWithRepliesFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentReviewPillContainerQueryDocument,
    "\n    mutation flipSplashArtImage($reviewWinnerArtId: String!) {\n      flipSplashArtImage(reviewWinnerArtId: $reviewWinnerArtId)\n    }\n  ": typeof types.flipSplashArtImageDocument,
    "\n  query multiReviewWinnerArtSplashImageEditingOptionsQuery($selector: ReviewWinnerArtSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewWinnerArts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ReviewWinnerArtImages\n      }\n      totalCount\n    }\n  }\n": typeof types.multiReviewWinnerArtSplashImageEditingOptionsQueryDocument,
    "\n  query PostBody($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostSideComments\n      }\n    }\n  }\n": typeof types.PostBodyDocument,
    "\n    mutation AcceptCoauthorRequest($postId: String, $userId: String, $accept: Boolean) {\n        acceptCoauthorRequest(postId: $postId, userId: $userId, accept: $accept) {\n          ...PostsDetails\n        }\n    }\n  ": typeof types.AcceptCoauthorRequestDocument,
    "\n  query multiCommentPostsPageQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentPostsPageQueryDocument,
    "\n  query postCommentsThreadQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": typeof types.postCommentsThreadQueryDocument,
    "\n  query PostsPageWrapper1($documentId: String, $sequenceId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsWithNavigationAndRevision\n      }\n    }\n  }\n": typeof types.PostsPageWrapper1Document,
    "\n  query PostsPageWrapper($documentId: String, $sequenceId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsWithNavigation\n      }\n    }\n  }\n": typeof types.PostsPageWrapperDocument,
    "\n  query PostsRevisionsList($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsRevisionsList\n      }\n    }\n  }\n": typeof types.PostsRevisionsListDocument,
    "\n    mutation RegisterRSVP($postId: String, $name: String, $email: String, $private: Boolean, $response: String) {\n        RSVPToEvent(postId: $postId, name: $name, email: $email, private: $private, response: $response) {\n        ...PostsDetails\n        }\n    }\n  ": typeof types.RegisterRSVPDocument,
    "\n    mutation CancelRSVPToEvent($postId: String, $name: String, $userId: String) {\n        CancelRSVPToEvent(postId: $postId, name: $name, userId: $userId) {\n        ...PostsDetails\n        }\n    }\n  ": typeof types.CancelRSVPToEventDocument,
    "\n  query LWPostsPreviewTooltip1($documentId: String, $dialogueMessageId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostWithDialogueMessage\n      }\n    }\n  }\n": typeof types.LWPostsPreviewTooltip1Document,
    "\n  query LWPostsPreviewTooltip($documentId: String, $hash: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...HighlightWithHash\n      }\n    }\n  }\n": typeof types.LWPostsPreviewTooltipDocument,
    "\n  query PostsPreviewTooltipSingle4($documentId: String) {\n    tagRel(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagRelFragment\n      }\n    }\n  }\n": typeof types.PostsPreviewTooltipSingle4Document,
    "\n  query PostsPreviewTooltipSingle3($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n": typeof types.PostsPreviewTooltipSingle3Document,
    "\n  query PostsPreviewTooltipSingle($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.PostsPreviewTooltipSingleDocument,
    "\n  query multiPostPostsTimeBlockQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostPostsTimeBlockQueryDocument,
    "\n  query getRecombeeLatestPosts($limit: Int, $settings: JSON) {\n    RecombeeLatestPosts(limit: $limit, settings: $settings) {\n      results {\n        post {\n          ...PostsListWithVotes\n        }\n        scenario\n        recommId\n        generatedAt\n        curated\n        stickied\n      }\n    }\n  }\n": typeof types.getRecombeeLatestPostsDocument,
    "\n  query getRecombeeHybridPosts($limit: Int, $settings: JSON) {\n    RecombeeHybridPosts(limit: $limit, settings: $settings) {\n      results {\n        post {\n          ...PostsListWithVotes\n        }\n        scenario\n        recommId\n        generatedAt\n        curated\n        stickied\n      }\n    }\n  }\n": typeof types.getRecombeeHybridPostsDocument,
    "\n  mutation createCommentDialogueSubmit($data: CreateCommentDataInput!) {\n    createComment(data: $data) {\n      data {\n        ...CommentEdit\n      }\n    }\n  }\n": typeof types.createCommentDialogueSubmitDocument,
    "\n  query multiPostusePostQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsPage\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostusePostQueryDocument,
    "\n  query postsListWithVotes($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": typeof types.postsListWithVotesDocument,
    "\n  query postsListTagWithVotes($selector: PostSelector, $limit: Int, $enableTotal: Boolean, $tagId: String) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListTagWithVotes\n      }\n      totalCount\n    }\n  }\n": typeof types.postsListTagWithVotesDocument,
    "\n  query multiCommentQuickTakesSectionQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentQuickTakesSectionQueryDocument,
    "\n  query multiTaguseQuickTakesTagsQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagPreviewFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTaguseQuickTakesTagsQueryDocument,
    "\n  query multiPostRecentDiscussionThreadsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean, $commentsLimit: Int, $maxAgeHours: Int, $af: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsRecentDiscussion\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostRecentDiscussionThreadsListQueryDocument,
    "\n    query CuratedAndPopularThisWeek($limit: Int) {\n      CuratedAndPopularThisWeek(limit: $limit) {\n        results {\n          ...PostsListWithVotes\n        }\n      }\n    }\n  ": typeof types.CuratedAndPopularThisWeekDocument,
    "\n  query multiPostRecommendationsSamplePageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostRecommendationsSamplePageQueryDocument,
    "\n  query WelcomePostItem($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n": typeof types.WelcomePostItemDocument,
    "\n      mutation observeRecommendation($postId: String!) {\n        observeRecommendation(postId: $postId)\n      }\n    ": typeof types.observeRecommendationDocument,
    "\n      mutation clickRecommendation($postId: String!) {\n        clickRecommendation(postId: $postId)\n      }\n    ": typeof types.clickRecommendationDocument,
    "\n    query ContinueReadingQuery {\n      ContinueReading {\n        sequence {\n          ...SequenceContinueReadingFragment\n        }\n        collection {\n          ...CollectionContinueReadingFragment\n        }\n        nextPost {\n          ...PostsListWithVotes\n        }\n        numRead\n        numTotal\n        lastReadTime\n      }\n    }\n  ": typeof types.ContinueReadingQueryDocument,
    "\n    mutation dismissRecommendation($postId: String) {\n      dismissRecommendation(postId: $postId)\n    }\n  ": typeof types.dismissRecommendationDocument,
    "\n      query RecommendationsQuery($count: Int, $algorithm: JSON) {\n        Recommendations(count: $count, algorithm: $algorithm) {\n          ...PostsListWithVotesAndSequence\n        }\n      }\n    ": typeof types.RecommendationsQueryDocument,
    "\n  query multiReviewWinnerArtBestOfLessWrongAdminQuery($selector: ReviewWinnerArtSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewWinnerArts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ReviewWinnerArtImages\n      }\n      totalCount\n    }\n  }\n": typeof types.multiReviewWinnerArtBestOfLessWrongAdminQueryDocument,
    "\n    query BestOfLessWrongAdmin {\n      GetAllReviewWinners {\n        ...PostsTopItemInfo\n      }\n    }\n  ": typeof types.BestOfLessWrongAdminDocument,
    "\n  query FrontpageBestOfLWWidget($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n": typeof types.FrontpageBestOfLWWidgetDocument,
    "\n    mutation GenerateCoverImagesForPost($postId: String!, $prompt: String) {\n      generateCoverImagesForPost(postId: $postId, prompt: $prompt) { \n        _id\n      }\n    }\n  ": typeof types.GenerateCoverImagesForPostDocument,
    "\n  query multiCommentLatestReviewQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentLatestReviewQueryDocument,
    "\n  query PostNominatedNotification($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.PostNominatedNotificationDocument,
    "\n      query getPostsUserCommentedOn($limit: Int, $filter: PostReviewFilter, $sort: PostReviewSort) {\n        PostsUserCommentedOn(limit: $limit, filter: $filter, sort: $sort) {\n          posts {\n            ...PostsListWithVotes\n          }\n        }\n      }\n    ": typeof types.getPostsUserCommentedOnDocument,
    "\n  query multiPostQuickReviewPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsReviewVotingList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostQuickReviewPageQueryDocument,
    "\n  query multiPostQuickReviewPage2022Query($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsReviewVotingList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostQuickReviewPage2022QueryDocument,
    "\n  query multiReviewVoteReviewAdminDashboardQuery($selector: ReviewVoteSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewVotes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...reviewAdminDashboard\n      }\n      totalCount\n    }\n  }\n": typeof types.multiReviewVoteReviewAdminDashboardQueryDocument,
    "\n  query multiCommentReviewPostCommentsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentWithRepliesFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentReviewPostCommentsQueryDocument,
    "\n  query multiCommentReviewProgressNominationsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentReviewProgressNominationsQueryDocument,
    "\n  query multiCommentReviewProgressReviewsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentReviewProgressReviewsQueryDocument,
    "\n  query multiReviewVoteReviewProgressVotingQuery($selector: ReviewVoteSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewVotes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...reviewVoteFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiReviewVoteReviewProgressVotingQueryDocument,
    "\n  query multiReviewVoteReviewVotingCanvasQuery($selector: ReviewVoteSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewVotes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...reviewVoteFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiReviewVoteReviewVotingCanvasQueryDocument,
    "\n    query GivingSeasonHeartsQuery($electionName: String!) {\n      GivingSeasonHearts(electionName: $electionName) {\n        userId\n        displayName\n        x\n        y\n        theta\n      }\n    }\n  ": typeof types.GivingSeasonHeartsQueryDocument,
    "\n      mutation AddGivingSeasonHeart(\n        $electionName: String!,\n        $x: Float!,\n        $y: Float!,\n        $theta: Float!\n      ) {\n        AddGivingSeasonHeart(\n          electionName: $electionName,\n          x: $x,\n          y: $y,\n          theta: $theta\n        ) {\n          userId\n          displayName\n          x\n          y\n          theta\n        }\n      }\n    ": typeof types.AddGivingSeasonHeartDocument,
    "\n      mutation RemoveGivingSeasonHeart($electionName: String!) {\n        RemoveGivingSeasonHeart(electionName: $electionName) {\n          userId\n          displayName\n          x\n          y\n          theta\n        }\n      }\n    ": typeof types.RemoveGivingSeasonHeartDocument,
    "\n  query ReviewVotingExpandedPost($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.ReviewVotingExpandedPostDocument,
    "\n  query multiPostReviewVotingPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsReviewVotingList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostReviewVotingPageQueryDocument,
    "\n    mutation submitReviewVote($postId: String, $qualitativeScore: Int, $quadraticChange: Int, $newQuadraticScore: Int, $comment: String, $year: String, $dummy: Boolean) {\n      submitReviewVote(postId: $postId, qualitativeScore: $qualitativeScore, quadraticChange: $quadraticChange, comment: $comment, newQuadraticScore: $newQuadraticScore, year: $year, dummy: $dummy) {\n        ...PostsReviewVotingList\n      }\n    }\n  ": typeof types.submitReviewVoteDocument,
    "\n  mutation updateUserReviews2019($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": typeof types.updateUserReviews2019Document,
    "\n  query multiCommentReviewsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentReviewsListQueryDocument,
    "\n  query RotatingReviewWinnerSpotlightDisplay($documentId: String) {\n    spotlight(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SpotlightDisplay\n      }\n    }\n  }\n": typeof types.RotatingReviewWinnerSpotlightDisplayDocument,
    "\n  query RotatingReviewWinnerSpotlight {\n    GetAllReviewWinners {\n      ...PostForReviewWinnerItem\n    }\n  }\n": typeof types.RotatingReviewWinnerSpotlightDocument,
    "\n  query multiCommentSingleLineReviewsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentSingleLineReviewsListQueryDocument,
    "\n  query multiUserUserReviewsQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserUserReviewsQueryDocument,
    "\n  mutation updateRevisionCompareRevisions($selector: SelectorInput!, $data: UpdateRevisionDataInput!) {\n    updateRevision(selector: $selector, data: $data) {\n      data {\n        ...RevisionEdit\n      }\n    }\n  }\n": typeof types.updateRevisionCompareRevisionsDocument,
    "\n    query RevisionsDiff($collectionName: String!, $fieldName: String!, $id: String!, $beforeRev: String, $afterRev: String!, $trim: Boolean) {\n      RevisionsDiff(collectionName: $collectionName, fieldName: $fieldName, id: $id, beforeRev: $beforeRev, afterRev: $afterRev, trim: $trim)\n    }\n  ": typeof types.RevisionsDiffDocument,
    "\n  query multiRevisionPostsRevisionSelectQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionMetadataWithChangeMetrics\n      }\n      totalCount\n    }\n  }\n": typeof types.multiRevisionPostsRevisionSelectQueryDocument,
    "\n  query PostsRevisionSelect($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsDetails\n      }\n    }\n  }\n": typeof types.PostsRevisionSelectDocument,
    "\n  query multiRevisionTagPageRevisionSelectQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionHistoryEntry\n      }\n      totalCount\n    }\n  }\n": typeof types.multiRevisionTagPageRevisionSelectQueryDocument,
    "\n  query multiRSSFeedNewFeedButtonQuery($selector: RSSFeedSelector, $limit: Int, $enableTotal: Boolean) {\n    rSSFeeds(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RSSFeedMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiRSSFeedNewFeedButtonQueryDocument,
    "\n  mutation createRSSFeedNewFeedButton($data: CreateRSSFeedDataInput!) {\n    createRSSFeed(data: $data) {\n      data {\n        ...newRSSFeedFragment\n      }\n    }\n  }\n": typeof types.createRSSFeedNewFeedButtonDocument,
    "\n  query multiUserAprilFools2022Query($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserAprilFools2022QueryDocument,
    "\n  query HomepageCommunityMap($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.HomepageCommunityMapDocument,
    "\n    mutation launchPetrovMissile($launchCode: String) {\n      PetrovDayLaunchMissile(launchCode: $launchCode) {\n        launchCode\n      }\n    }\n  ": typeof types.launchPetrovMissileDocument,
    "\n    query petrovDayLaunchResolvers {\n      PetrovDayCheckIfIncoming {\n        launched\n        createdAt\n      }\n    }\n  ": typeof types.petrovDayLaunchResolversDocument,
    "\n  query multiPetrovDayActionOptIntoPetrovButtonQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPetrovDayActionOptIntoPetrovButtonQueryDocument,
    "\n  mutation createPetrovDayActionOptIntoPetrovButton($data: CreatePetrovDayActionDataInput!) {\n    createPetrovDayAction(data: $data) {\n      data {\n        ...PetrovDayActionInfo\n      }\n    }\n  }\n": typeof types.createPetrovDayActionOptIntoPetrovButtonDocument,
    "\n  query multiPetrovDayActionPetrovAdminConsoleQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPetrovDayActionPetrovAdminConsoleQueryDocument,
    "\n  query multiPetrovDayActionPetrovGameWrapperQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPetrovDayActionPetrovGameWrapperQueryDocument,
    "\n    query petrov2024checkIfNuked {\n      petrov2024checkIfNuked\n    }\n  ": typeof types.petrov2024checkIfNukedDocument,
    "\n  query multiPetrovDayActionPetrovLaunchConsoleQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPetrovDayActionPetrovLaunchConsoleQueryDocument,
    "\n  mutation createPetrovDayActionPetrovLaunchConsole($data: CreatePetrovDayActionDataInput!) {\n    createPetrovDayAction(data: $data) {\n      data {\n        ...PetrovDayActionInfo\n      }\n    }\n  }\n": typeof types.createPetrovDayActionPetrovLaunchConsoleDocument,
    "\n  query multiPetrovDayActionPetrovWarningConsoleQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPetrovDayActionPetrovWarningConsoleQueryDocument,
    "\n  mutation createPetrovDayActionPetrovWarningConsole($data: CreatePetrovDayActionDataInput!) {\n    createPetrovDayAction(data: $data) {\n      data {\n        ...PetrovDayActionInfo\n      }\n    }\n  }\n": typeof types.createPetrovDayActionPetrovWarningConsoleDocument,
    "\n    query petrovDay2024Resolvers {\n      PetrovDay2024CheckNumberOfIncoming {\n        count\n      }\n    }\n  ": typeof types.petrovDay2024ResolversDocument,
    "\n  mutation updateChapterAddDraftPostDialog($selector: SelectorInput!, $data: UpdateChapterDataInput!) {\n    updateChapter(selector: $selector, data: $data) {\n      data {\n        ...ChaptersFragment\n      }\n    }\n  }\n": typeof types.updateChapterAddDraftPostDialogDocument,
    "\n  mutation updateBookBooksForm($selector: SelectorInput!, $data: UpdateBookDataInput!) {\n    updateBook(selector: $selector, data: $data) {\n      data {\n        ...BookPageFragment\n      }\n    }\n  }\n": typeof types.updateBookBooksFormDocument,
    "\n  mutation createBookBooksForm($data: CreateBookDataInput!) {\n    createBook(data: $data) {\n      data {\n        ...BookPageFragment\n      }\n    }\n  }\n": typeof types.createBookBooksFormDocument,
    "\n  query BooksItem($documentId: String) {\n    book(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...BookEdit\n      }\n    }\n  }\n": typeof types.BooksItemDocument,
    "\n  mutation updateChapterChaptersForm($selector: SelectorInput!, $data: UpdateChapterDataInput!) {\n    updateChapter(selector: $selector, data: $data) {\n      data {\n        ...ChaptersEdit\n      }\n    }\n  }\n": typeof types.updateChapterChaptersFormDocument,
    "\n  mutation createChapterChaptersForm($data: CreateChapterDataInput!) {\n    createChapter(data: $data) {\n      data {\n        ...ChaptersEdit\n      }\n    }\n  }\n": typeof types.createChapterChaptersFormDocument,
    "\n  query ChaptersItem($documentId: String) {\n    chapter(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ChaptersEdit\n      }\n    }\n  }\n": typeof types.ChaptersItemDocument,
    "\n  query multiChapterChaptersListQuery($selector: ChapterSelector, $limit: Int, $enableTotal: Boolean) {\n    chapters(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ChaptersFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiChapterChaptersListQueryDocument,
    "\n  mutation updateCollectionCollectionsEditForm($selector: SelectorInput!, $data: UpdateCollectionDataInput!) {\n    updateCollection(selector: $selector, data: $data) {\n      data {\n        ...CollectionsPageFragment\n      }\n    }\n  }\n": typeof types.updateCollectionCollectionsEditFormDocument,
    "\n  query CollectionsPage($documentId: String) {\n    collection(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CollectionsPageFragment\n      }\n    }\n  }\n": typeof types.CollectionsPageDocument,
    "\n  query CollectionsEdit($documentId: String) {\n    collection(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CollectionsEditFragment\n      }\n    }\n  }\n": typeof types.CollectionsEditDocument,
    "\n  query multiPostSequenceDraftsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostSequenceDraftsListQueryDocument,
    "\n  mutation updateSequenceSequencesForm($selector: SelectorInput!, $data: UpdateSequenceDataInput!) {\n    updateSequence(selector: $selector, data: $data) {\n      data {\n        ...SequencesEdit\n      }\n    }\n  }\n": typeof types.updateSequenceSequencesFormDocument,
    "\n  mutation createSequenceSequencesForm($data: CreateSequenceDataInput!) {\n    createSequence(data: $data) {\n      data {\n        ...SequencesEdit\n      }\n    }\n  }\n": typeof types.createSequenceSequencesFormDocument,
    "\n  query multiSequenceSequencesGridWrapperQuery($selector: SequenceSelector, $limit: Int, $enableTotal: Boolean) {\n    sequences(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SequencesPageFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiSequenceSequencesGridWrapperQueryDocument,
    "\n  query SequencesPage($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesPageFragment\n      }\n    }\n  }\n": typeof types.SequencesPageDocument,
    "\n  query SequencesEdit($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesEdit\n      }\n    }\n  }\n": typeof types.SequencesEditDocument,
    "\n  query multiChapterSequencesSummaryQuery($selector: ChapterSelector, $limit: Int, $enableTotal: Boolean) {\n    chapters(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ChaptersFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiChapterSequencesSummaryQueryDocument,
    "\n    query GetAllReviewWinners {\n      GetAllReviewWinners {\n        ...PostsTopItemInfo\n      }\n    }\n  ": typeof types.GetAllReviewWinnersDocument,
    "\n    mutation updateContinueReading($sequenceId: String!, $postId: String!) {\n      updateContinueReading(sequenceId: $sequenceId, postId: $postId)\n    }\n  ": typeof types.updateContinueReadingDocument,
    "\n  query ProfileShortform($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n": typeof types.ProfileShortformDocument,
    "\n  query multiCommentRepliesToCommentListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentRepliesToCommentListQueryDocument,
    "\n  query multiCommentShortformThreadListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentWithRepliesFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentShortformThreadListQueryDocument,
    "\n  query multiCommentShortformTimeBlockQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentShortformTimeBlockQueryDocument,
    "\n  query DisplaySpotlightQuery {\n    currentSpotlight {\n      ...SpotlightDisplay\n    }\n  }\n": typeof types.DisplaySpotlightQueryDocument,
    "\n  mutation updateSpotlightSpotlightForm($selector: SelectorInput!, $data: UpdateSpotlightDataInput!) {\n    updateSpotlight(selector: $selector, data: $data) {\n      data {\n        ...SpotlightEditQueryFragment\n      }\n    }\n  }\n": typeof types.updateSpotlightSpotlightFormDocument,
    "\n  mutation createSpotlightSpotlightForm($data: CreateSpotlightDataInput!) {\n    createSpotlight(data: $data) {\n      data {\n        ...SpotlightEditQueryFragment\n      }\n    }\n  }\n": typeof types.createSpotlightSpotlightFormDocument,
    "\n  query multiSpotlightSpotlightHistoryQuery($selector: SpotlightSelector, $limit: Int, $enableTotal: Boolean) {\n    spotlights(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SpotlightDisplay\n      }\n      totalCount\n    }\n  }\n": typeof types.multiSpotlightSpotlightHistoryQueryDocument,
    "\n  mutation updateSpotlightSpotlightItem($selector: SelectorInput!, $data: UpdateSpotlightDataInput!) {\n    updateSpotlight(selector: $selector, data: $data) {\n      data {\n        ...SpotlightDisplay\n      }\n    }\n  }\n": typeof types.updateSpotlightSpotlightItemDocument,
    "\n  query SpotlightItem($documentId: String) {\n    spotlight(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SpotlightEditQueryFragment\n      }\n    }\n  }\n": typeof types.SpotlightItemDocument,
    "\n  query SpotlightStartOrContinueReadingQuery($spotlightId: String) {\n    spotlight(input: {selector: {documentId: $spotlightId}}) {\n      result {\n        _id\n        sequenceChapters {\n          ...ChaptersFragment\n        }\n      }\n    }\n  }\n": typeof types.SpotlightStartOrContinueReadingQueryDocument,
    "\n  query multiSpotlightSpotlightsPageQuery($selector: SpotlightSelector, $limit: Int, $enableTotal: Boolean) {\n    spotlights(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SpotlightDisplay\n      }\n      totalCount\n    }\n  }\n": typeof types.multiSpotlightSpotlightsPageQueryDocument,
    "\n    mutation publishAndDeDuplicateSpotlight($spotlightId: String) {\n      publishAndDeDuplicateSpotlight(spotlightId: $spotlightId) {\n        ...SpotlightDisplay\n      }\n    }\n  ": typeof types.publishAndDeDuplicateSpotlightDocument,
    "\n  query multiSubscriptionFollowUserSearchQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SubscriptionState\n      }\n      totalCount\n    }\n  }\n": typeof types.multiSubscriptionFollowUserSearchQueryDocument,
    "\n  query UserFollowingCount($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      totalCount\n    }\n  }\n": typeof types.UserFollowingCountDocument,
    "\n    query SuggestedFeedSubscriptionUsers($limit: Int) {\n      SuggestedFeedSubscriptionUsers(limit: $limit) {\n        results {\n          ...UsersMinimumInfo\n        }\n      }\n    }\n  ": typeof types.SuggestedFeedSubscriptionUsersDocument,
    "\n  mutation updateCommentAFSuggestCommentsItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentComment\n      }\n    }\n  }\n": typeof types.updateCommentAFSuggestCommentsItemDocument,
    "\n  query multiCommentAFSuggestCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SuggestAlignmentComment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentAFSuggestCommentsListQueryDocument,
    "\n  mutation updatePostAFSuggestPostsItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentPost\n      }\n    }\n  }\n": typeof types.updatePostAFSuggestPostsItemDocument,
    "\n  query multiPostAFSuggestPostsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SuggestAlignmentPost\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostAFSuggestPostsListQueryDocument,
    "\n  mutation updateUserAFSuggestUsersItem($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...SunshineUsersList\n      }\n    }\n  }\n": typeof types.updateUserAFSuggestUsersItemDocument,
    "\n  query multiUserAFSuggestUsersListQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SuggestAlignmentUser\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserAFSuggestUsersListQueryDocument,
    "\n    query AllReactedComments($limit: Int) {\n      CommentsWithReacts(limit: $limit) {\n        results {\n          ...CommentsListWithParentMetadata\n        }\n      }\n    }\n  ": typeof types.AllReactedCommentsDocument,
    "\n  query multiLWEventEmailHistoryQuery($selector: LWEventSelector, $limit: Int, $enableTotal: Boolean) {\n    lWEvents(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...emailHistoryFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiLWEventEmailHistoryQueryDocument,
    "\n  query ModGPTDashboardQuery($selector: CommentSelector, $limit: Int) {\n    comments(selector: $selector, limit: $limit) {\n      results {\n        ...CommentsListWithModGPTAnalysis\n      }\n    }\n  }\n": typeof types.ModGPTDashboardQueryDocument,
    "\n  query multiClientIdModerationAltAccountsQuery($selector: ClientIdSelector, $limit: Int, $enableTotal: Boolean) {\n    clientIds(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModeratorClientIDInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiClientIdModerationAltAccountsQueryDocument,
    "\n  query multiUserModerationAltAccountsQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserAltAccountsFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserModerationAltAccountsQueryDocument,
    "\n  query ModerationAltAccounts($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UserAltAccountsFragment\n      }\n    }\n  }\n": typeof types.ModerationAltAccountsDocument,
    "\n    query ModeratorIPAddressInfo($ipAddress: String!) {\n      moderatorViewIPAddress(ipAddress: $ipAddress) {\n        ip\n        userIds\n      }\n    }\n  ": typeof types.ModeratorIPAddressInfoDocument,
    "\n  query multiUserModerationDashboardQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineUsersList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserModerationDashboardQueryDocument,
    "\n  mutation updateUserModeratorActions($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...SunshineUsersList\n      }\n    }\n  }\n": typeof types.updateUserModeratorActionsDocument,
    "\n  query multiConversationModeratorMessageCountQuery($selector: ConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    conversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ConversationsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiConversationModeratorMessageCountQueryDocument,
    "\n  query multiUserAltAccountInfoQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineUsersList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserAltAccountInfoQueryDocument,
    "\n  mutation updateModeratorActionModeratorActionItem($selector: SelectorInput!, $data: UpdateModeratorActionDataInput!) {\n    updateModeratorAction(selector: $selector, data: $data) {\n      data {\n        ...ModeratorActionDisplay\n      }\n    }\n  }\n": typeof types.updateModeratorActionModeratorActionItemDocument,
    "\n  query multiUserRecentlyActiveUsersQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineUsersList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserRecentlyActiveUsersQueryDocument,
    "\n  query NewCommentModerationWarning($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n": typeof types.NewCommentModerationWarningDocument,
    "\n  mutation createModeratorActionNewModeratorActionDialog($data: CreateModeratorActionDataInput!) {\n    createModeratorAction(data: $data) {\n      data {\n        ...ModeratorActionDisplay\n      }\n    }\n  }\n": typeof types.createModeratorActionNewModeratorActionDialogDocument,
    "\n  query NewPostModerationWarning($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n": typeof types.NewPostModerationWarningDocument,
    "\n  query multiModerationTemplateRejectContentDialogQuery($selector: ModerationTemplateSelector, $limit: Int, $enableTotal: Boolean) {\n    moderationTemplates(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModerationTemplateFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiModerationTemplateRejectContentDialogQueryDocument,
    "\n  mutation createReportReportForm($data: CreateReportDataInput!) {\n    createReport(data: $data) {\n      data {\n        ...UnclaimedReportsList\n      }\n    }\n  }\n": typeof types.createReportReportFormDocument,
    "\n  mutation updatePostSunshineCuratedSuggestionsItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...SunshineCurationPostsList\n      }\n    }\n  }\n": typeof types.updatePostSunshineCuratedSuggestionsItemDocument,
    "\n  query multiPostsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostsListQueryDocument,
    "\n  query multiSunshineCurationPostsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineCurationPostsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiSunshineCurationPostsListQueryDocument,
    "\n  query multiGoogleServiceAccountSessionSunshineGoogleServiceAccountQuery($selector: GoogleServiceAccountSessionSelector, $limit: Int, $enableTotal: Boolean) {\n    googleServiceAccountSessions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...GoogleServiceAccountSessionAdminInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiGoogleServiceAccountSessionSunshineGoogleServiceAccountQueryDocument,
    "\n  mutation updateCommentSunshineNewCommentsItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n": typeof types.updateCommentSunshineNewCommentsItemDocument,
    "\n  query multiCommentSunshineNewCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentSunshineNewCommentsListQueryDocument,
    "\n  mutation updatePostSunshineNewPostsItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.updatePostSunshineNewPostsItemDocument,
    "\n  mutation createModeratorActionSunshineNewPostsItem($data: CreateModeratorActionDataInput!) {\n    createModeratorAction(data: $data) {\n      data {\n        ...ModeratorActionsDefaultFragment\n      }\n    }\n  }\n": typeof types.createModeratorActionSunshineNewPostsItemDocument,
    "\n  query multiPostSunshineNewPostsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshinePostsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostSunshineNewPostsListQueryDocument,
    "\n  query multiTagRelSunshineNewTagsItemQuery($selector: TagRelSelector, $limit: Int, $enableTotal: Boolean) {\n    tagRels(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagRelFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagRelSunshineNewTagsItemQueryDocument,
    "\n  mutation updateTagSunshineNewTagsItem($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...SunshineTagFragment\n      }\n    }\n  }\n": typeof types.updateTagSunshineNewTagsItemDocument,
    "\n  query multiTagSunshineNewTagsListQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineTagFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagSunshineNewTagsListQueryDocument,
    "\n  query multiCommentSunshineNewUsersInfoQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentSunshineNewUsersInfoQueryDocument,
    "\n  query multiUserSunshineNewUsersListQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineUsersList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserSunshineNewUsersListQueryDocument,
    "\n  query SunshineNewUsersProfileInfo($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SunshineUsersList\n      }\n    }\n  }\n": typeof types.SunshineNewUsersProfileInfoDocument,
    "\n  query multiReportSunshineReportedContentListQuery($selector: ReportSelector, $limit: Int, $enableTotal: Boolean) {\n    reports(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UnclaimedReportsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiReportSunshineReportedContentListQueryDocument,
    "\n  mutation updatePostSunshineReportedItem1($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.updatePostSunshineReportedItem1Document,
    "\n  mutation updateCommentSunshineReportedItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n": typeof types.updateCommentSunshineReportedItemDocument,
    "\n  mutation updateReportSunshineReportedContentList($selector: SelectorInput!, $data: UpdateReportDataInput!) {\n    updateReport(selector: $selector, data: $data) {\n      data {\n        ...UnclaimedReportsList\n      }\n    }\n  }\n": typeof types.updateReportSunshineReportedContentListDocument,
    "\n  query multiModerationTemplateSunshineSendMessageWithDefaultsQuery($selector: ModerationTemplateSelector, $limit: Int, $enableTotal: Boolean) {\n    moderationTemplates(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModerationTemplateFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiModerationTemplateSunshineSendMessageWithDefaultsQueryDocument,
    "\n  query multiConversationSunshineUserMessagesQuery($selector: ConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    conversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ConversationsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiConversationSunshineUserMessagesQueryDocument,
    "\n  query multiUserRateLimitUserRateLimitItemQuery($selector: UserRateLimitSelector, $limit: Int, $enableTotal: Boolean) {\n    userRateLimits(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserRateLimitDisplay\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserRateLimitUserRateLimitItemQueryDocument,
    "\n  mutation updateUserRateLimitUserRateLimitItem1($selector: SelectorInput!, $data: UpdateUserRateLimitDataInput!) {\n    updateUserRateLimit(selector: $selector, data: $data) {\n      data {\n        ...UserRateLimitsDefaultFragment\n      }\n    }\n  }\n": typeof types.updateUserRateLimitUserRateLimitItem1Document,
    "\n  mutation updateUserRateLimitUserRateLimitItem($selector: SelectorInput!, $data: UpdateUserRateLimitDataInput!) {\n    updateUserRateLimit(selector: $selector, data: $data) {\n      data {\n        ...UserRateLimitDisplay\n      }\n    }\n  }\n": typeof types.updateUserRateLimitUserRateLimitItemDocument,
    "\n  mutation createUserRateLimitUserRateLimitItem1($data: CreateUserRateLimitDataInput!) {\n    createUserRateLimit(data: $data) {\n      data {\n        ...UserRateLimitsDefaultFragment\n      }\n    }\n  }\n": typeof types.createUserRateLimitUserRateLimitItem1Document,
    "\n  mutation createUserRateLimitUserRateLimitItem($data: CreateUserRateLimitDataInput!) {\n    createUserRateLimit(data: $data) {\n      data {\n        ...UserRateLimitDisplay\n      }\n    }\n  }\n": typeof types.createUserRateLimitUserRateLimitItemDocument,
    "\n  query multiCommentUsersReviewInfoCardQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentUsersReviewInfoCardQueryDocument,
    "\n  query DeletedCommentsModerationLogQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DeletedCommentsModerationLog\n      }\n      totalCount\n    }\n  }\n": typeof types.DeletedCommentsModerationLogQueryDocument,
    "\n  query UsersBannedFromPostsModerationLogQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersBannedFromPostsModerationLog\n      }\n      totalCount\n    }\n  }\n": typeof types.UsersBannedFromPostsModerationLogQueryDocument,
    "\n  query UsersBannedFromUsersModerationLogQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersBannedFromUsersModerationLog\n      }\n      totalCount\n    }\n  }\n": typeof types.UsersBannedFromUsersModerationLogQueryDocument,
    "\n  query ModeratorActionModerationLogQuery($selector: ModeratorActionSelector, $limit: Int, $enableTotal: Boolean) {\n    moderatorActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModeratorActionDisplay\n      }\n      totalCount\n    }\n  }\n": typeof types.ModeratorActionModerationLogQueryDocument,
    "\n  query UserRateLimitModerationLogQuery($selector: UserRateLimitSelector, $limit: Int, $enableTotal: Boolean) {\n    userRateLimits(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserRateLimitDisplay\n      }\n      totalCount\n    }\n  }\n": typeof types.UserRateLimitModerationLogQueryDocument,
    "\n  query multiCommentRejectedCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentRejectedCommentsListQueryDocument,
    "\n  query multiSurveyScheduleSurveyAdminPageQuery($selector: SurveyScheduleSelector, $limit: Int, $enableTotal: Boolean) {\n    surveySchedules(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SurveyScheduleEdit\n      }\n      totalCount\n    }\n  }\n": typeof types.multiSurveyScheduleSurveyAdminPageQueryDocument,
    "\n  query multiSurveySurveyAdminPageQuery($selector: SurveySelector, $limit: Int, $enableTotal: Boolean) {\n    surveys(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SurveyMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiSurveySurveyAdminPageQueryDocument,
    "\n  mutation createSurveySurveyAdminPage($data: CreateSurveyDataInput!) {\n    createSurvey(data: $data) {\n      data {\n        ...SurveyMinimumInfo\n      }\n    }\n  }\n": typeof types.createSurveySurveyAdminPageDocument,
    "\n  query SurveyEditPage($documentId: String) {\n    survey(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SurveyMinimumInfo\n      }\n    }\n  }\n": typeof types.SurveyEditPageDocument,
    "\n    mutation editSurvey($surveyId: String!, $name: String!, $questions: [SurveyQuestionInfo!]!) {\n      editSurvey(surveyId: $surveyId, name: $name, questions: $questions) {\n        ...SurveyMinimumInfo\n      }\n    }\n  ": typeof types.editSurveyDocument,
    "\n  mutation createSurveyResponseSurveyPostsItem($data: CreateSurveyResponseDataInput!) {\n    createSurveyResponse(data: $data) {\n      data {\n        ...SurveyResponseMinimumInfo\n      }\n    }\n  }\n": typeof types.createSurveyResponseSurveyPostsItemDocument,
    "\n  mutation updateSurveyScheduleSurveyScheduleEditPage($selector: SelectorInput!, $data: UpdateSurveyScheduleDataInput!) {\n    updateSurveySchedule(selector: $selector, data: $data) {\n      data {\n        ...SurveyScheduleEdit\n      }\n    }\n  }\n": typeof types.updateSurveyScheduleSurveyScheduleEditPageDocument,
    "\n  mutation createSurveyScheduleSurveyScheduleEditPage($data: CreateSurveyScheduleDataInput!) {\n    createSurveySchedule(data: $data) {\n      data {\n        ...SurveyScheduleEdit\n      }\n    }\n  }\n": typeof types.createSurveyScheduleSurveyScheduleEditPageDocument,
    "\n  query SurveyScheduleEditPage($documentId: String) {\n    surveySchedule(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SurveyScheduleEdit\n      }\n    }\n  }\n": typeof types.SurveyScheduleEditPageDocument,
    "\n    mutation addPostsToTag($tagId: String, $postId: String) {\n      addOrUpvoteTag(tagId: $tagId, postId: $postId) {\n        ...TagRelCreationFragment\n      }\n    }\n  ": typeof types.addPostsToTagDocument,
    "\n  query AllPostsPageTagRevisionItem($documentId: String) {\n    revision(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...RevisionHistoryEntry\n      }\n    }\n  }\n": typeof types.AllPostsPageTagRevisionItemDocument,
    "\n  query multiTagAllTagsAlphabeticalQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagPreviewFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagAllTagsAlphabeticalQueryDocument,
    "\n  query AllWikiTagsPageQuery($slugs: [String!]!) {\n    tags(selector: { tagsBySlugs: { slugs: $slugs } }) {\n      results {\n        ...ConceptItemFragment\n      }\n    }\n  }\n": typeof types.AllWikiTagsPageQueryDocument,
    "\n  query multiTagArbitalExplorePageQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ExplorePageTagFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagArbitalExplorePageQueryDocument,
    "\n  query multiTagCoreTagsChecklistQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagCoreTagsChecklistQueryDocument,
    "\n  query multiTagCoreTagsSectionQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagDetailsFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagCoreTagsSectionQueryDocument,
    "\n  query EAAllTagsPage($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n": typeof types.EAAllTagsPageDocument,
    "\n  query multiTagEATagPageQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagEATagPageQueryDocument,
    "\n  query EATagPage($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n": typeof types.EATagPageDocument,
    "\n  query FilterMode($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagPreviewFragment\n      }\n    }\n  }\n": typeof types.FilterModeDocument,
    "\n    query multiTagRelFooterTagListQuery($selector: TagRelSelector, $limit: Int, $enableTotal: Boolean) {\n      tagRels(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n        results {\n          ...TagRelMinimumFragment\n        }\n        totalCount\n      }\n    }\n  ": typeof types.multiTagRelFooterTagListQueryDocument,
    "\n    mutation addOrUpvoteTag($tagId: String, $postId: String) {\n      addOrUpvoteTag(tagId: $tagId, postId: $postId) {\n        ...TagRelMinimumFragment\n      }\n    }\n  ": typeof types.addOrUpvoteTagDocument,
    "\n  query multiTagLWTagPageQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagLWTagPageQueryDocument,
    "\n  query LWTagPage($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n": typeof types.LWTagPageDocument,
    "\n  mutation updateTagNewTagPage($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...TagEditFragment\n      }\n    }\n  }\n": typeof types.updateTagNewTagPageDocument,
    "\n  query multiTagNewTagsListQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineTagFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagNewTagsListQueryDocument,
    "\n    query getRandomTag {\n      RandomTag {slug}\n    }\n  ": typeof types.getRandomTagDocument,
    "\n  query multiMultiDocumentRedlinkTagPageQuery($selector: MultiDocumentSelector, $limit: Int, $enableTotal: Boolean) {\n    multiDocuments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...MultiDocumentMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiMultiDocumentRedlinkTagPageQueryDocument,
    "\n  query multiTagRedlinkTagPageQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagBasicInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagRedlinkTagPageQueryDocument,
    "\n  query multiSubscriptionSubscribeButtonQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SubscriptionState\n      }\n      totalCount\n    }\n  }\n": typeof types.multiSubscriptionSubscribeButtonQueryDocument,
    "\n  mutation createSubscriptionSubscribeButton($data: CreateSubscriptionDataInput!) {\n    createSubscription(data: $data) {\n      data {\n        ...SubscriptionState\n      }\n    }\n  }\n": typeof types.createSubscriptionSubscribeButtonDocument,
    "\n  query multiMultiDocumentSummariesEditFormQuery($selector: MultiDocumentSelector, $limit: Int, $enableTotal: Boolean) {\n    multiDocuments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...MultiDocumentContentDisplay\n      }\n      totalCount\n    }\n  }\n": typeof types.multiMultiDocumentSummariesEditFormQueryDocument,
    "\n    mutation reorderSummaries($parentDocumentId: String!, $parentDocumentCollectionName: String!, $summaryIds: [String!]!) {\n      reorderSummaries(parentDocumentId: $parentDocumentId, parentDocumentCollectionName: $parentDocumentCollectionName, summaryIds: $summaryIds)\n    }\n  ": typeof types.reorderSummariesDocument,
    "\n  mutation updateMultiDocumentSummaryForm($selector: SelectorInput!, $data: UpdateMultiDocumentDataInput!) {\n    updateMultiDocument(selector: $selector, data: $data) {\n      data {\n        ...MultiDocumentContentDisplay\n      }\n    }\n  }\n": typeof types.updateMultiDocumentSummaryFormDocument,
    "\n  mutation createMultiDocumentSummaryForm($data: CreateMultiDocumentDataInput!) {\n    createMultiDocument(data: $data) {\n      data {\n        ...MultiDocumentContentDisplay\n      }\n    }\n  }\n": typeof types.createMultiDocumentSummaryFormDocument,
    "\n  query multiRevisionTagCompareRevisionsQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionHistoryEntry\n      }\n      totalCount\n    }\n  }\n": typeof types.multiRevisionTagCompareRevisionsQueryDocument,
    "\n  query TagContributorsList($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagFullContributorsList\n      }\n    }\n  }\n": typeof types.TagContributorsListDocument,
    "\n  query multiCommentTagDiscussionQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentTagDiscussionQueryDocument,
    "\n  query multiCommentTagDiscussionButtonQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentTagDiscussionButtonQueryDocument,
    "\n  query multiCommentTagDiscussionSectionQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentTagDiscussionSectionQueryDocument,
    "\n  query multiRevisionTagEditsByUserQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionTagFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiRevisionTagEditsByUserQueryDocument,
    "\n    query getTagUpdates($before: Date!, $after: Date!) {\n      TagUpdatesInTimeBlock(before: $before, after: $after) {\n        tag {\n          ...TagHistoryFragment\n        }\n        revisionIds\n        commentCount\n        commentIds\n        lastRevisedAt\n        lastCommentedAt\n        added\n        removed\n        users {\n          ...UsersMinimumInfo\n        }\n        documentDeletions {\n          userId\n          documentId\n          netChange\n          type\n          docFields {\n            _id\n            slug\n            tabTitle\n            tabSubtitle\n          }\n          createdAt\n        }\n      }\n    }\n  ": typeof types.getTagUpdatesDocument,
    "\n  mutation updateTagFlagTagFlagEditAndNewForm($selector: SelectorInput!, $data: UpdateTagFlagDataInput!) {\n    updateTagFlag(selector: $selector, data: $data) {\n      data {\n        ...TagFlagFragment\n      }\n    }\n  }\n": typeof types.updateTagFlagTagFlagEditAndNewFormDocument,
    "\n  mutation createTagFlagTagFlagEditAndNewForm($data: CreateTagFlagDataInput!) {\n    createTagFlag(data: $data) {\n      data {\n        ...TagFlagFragment\n      }\n    }\n  }\n": typeof types.createTagFlagTagFlagEditAndNewFormDocument,
    "\n  query multiTagTagFlagItemQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagTagFlagItemQueryDocument,
    "\n  query TagFlagItem($documentId: String) {\n    tagFlag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagFlagFragment\n      }\n    }\n  }\n": typeof types.TagFlagItemDocument,
    "\n  mutation updateTagTagForm($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...TagWithFlagsFragment\n      }\n    }\n  }\n": typeof types.updateTagTagFormDocument,
    "\n  mutation createTagTagForm($data: CreateTagDataInput!) {\n    createTag(data: $data) {\n      data {\n        ...TagWithFlagsFragment\n      }\n    }\n  }\n": typeof types.createTagTagFormDocument,
    "\n  query multiChapterTagIntroSequenceQuery($selector: ChapterSelector, $limit: Int, $enableTotal: Boolean) {\n    chapters(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ChaptersFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiChapterTagIntroSequenceQueryDocument,
    "\n  query TagMergePage($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagFragment\n      }\n    }\n  }\n": typeof types.TagMergePageDocument,
    "\n    mutation mergeTags(\n      $sourceTagId: String!\n      $targetTagId: String!\n      $transferSubtags: Boolean!\n      $redirectSource: Boolean!\n    ) {\n      mergeTags(\n        sourceTagId: $sourceTagId\n        targetTagId: $targetTagId\n        transferSubtags: $transferSubtags\n        redirectSource: $redirectSource\n      )\n    }\n  ": typeof types.mergeTagsDocument,
    "\n    mutation promoteLensToMain($lensId: String!) {\n      promoteLensToMain(lensId: $lensId)\n    }\n  ": typeof types.promoteLensToMainDocument,
    "\n  query multiPostTagPreviewQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostTagPreviewQueryDocument,
    "\n  query TagSearchHit($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagPreviewFragment\n      }\n    }\n  }\n": typeof types.TagSearchHitDocument,
    "\n  query multiVoteTagVoteActivityQuery($selector: VoteSelector, $limit: Int, $enableTotal: Boolean) {\n    votes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagVotingActivity\n      }\n      totalCount\n    }\n  }\n": typeof types.multiVoteTagVoteActivityQueryDocument,
    "\n  query multiTagFlagTaggingDashboardQuery($selector: TagFlagSelector, $limit: Int, $enableTotal: Boolean) {\n    tagFlags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFlagFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagFlagTaggingDashboardQueryDocument,
    "\n  query multiTagTaggingDashboardQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagTaggingDashboardQueryDocument,
    "\n  query TaggingDashboard($documentId: String) {\n    tagFlag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagFlagEditFragment\n      }\n    }\n  }\n": typeof types.TaggingDashboardDocument,
    "\n  query multiTagRelTagsDetailsItemQuery($selector: TagRelSelector, $limit: Int, $enableTotal: Boolean) {\n    tagRels(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagRelFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagRelTagsDetailsItemQueryDocument,
    "\n  query TagsDetailsItem($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n": typeof types.TagsDetailsItemDocument,
    "\n    query GetTagsByCoreTagId(\n      $coreTagId: String,\n      $limit: Int,\n      $searchTagIds: [String]\n    ) {\n      TagsByCoreTagId(\n        coreTagId: $coreTagId,\n        limit: $limit,\n        searchTagIds: $searchTagIds\n      ) {\n        tags {\n          ...ConceptItemFragment\n        }\n        totalCount\n      }\n    }\n  ": typeof types.GetTagsByCoreTagIdDocument,
    "\n  mutation updateMultiDocumentLensForm($selector: SelectorInput!, $data: UpdateMultiDocumentDataInput!) {\n    updateMultiDocument(selector: $selector, data: $data) {\n      data {\n        ...MultiDocumentEdit\n      }\n    }\n  }\n": typeof types.updateMultiDocumentLensFormDocument,
    "\n  mutation createMultiDocumentLensForm($data: CreateMultiDocumentDataInput!) {\n    createMultiDocument(data: $data) {\n      data {\n        ...MultiDocumentEdit\n      }\n    }\n  }\n": typeof types.createMultiDocumentLensFormDocument,
    "\n  query multiUserSidebarMembersBoxQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserSidebarMembersBoxQueryDocument,
    "\n  mutation updateTagSidebarSubtagsBox($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...TagBasicInfo\n      }\n    }\n  }\n": typeof types.updateTagSidebarSubtagsBoxDocument,
    "\n  query SidebarSubtagsBox($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagSubtagFragment\n      }\n    }\n  }\n": typeof types.SidebarSubtagsBoxDocument,
    "\n  query multiUserSubforumMembersDialogQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserSubforumMembersDialogQueryDocument,
    "\n  mutation updateUserTagRelSubforumSubforumTab($selector: SelectorInput!, $data: UpdateUserTagRelDataInput!) {\n    updateUserTagRel(selector: $selector, data: $data) {\n      data {\n        ...UserTagRelDetails\n      }\n    }\n  }\n": typeof types.updateUserTagRelSubforumSubforumTabDocument,
    "\n    mutation UserUpdateSubforumMembership($tagId: String!, $member: Boolean!) {\n      UserUpdateSubforumMembership(tagId: $tagId, member: $member) {\n        ...UsersCurrent\n      }\n    }\n  ": typeof types.UserUpdateSubforumMembershipDocument,
    "\n  query SubforumWikiTab($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n": typeof types.SubforumWikiTabDocument,
    "\n  query multiUserTagRelTagSubforumPage2Query($selector: UserTagRelSelector, $limit: Int, $enableTotal: Boolean) {\n    userTagRels(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserTagRelDetails\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserTagRelTagSubforumPage2QueryDocument,
    "\n  query multiTagTagSubforumPage2Query($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagTagSubforumPage2QueryDocument,
    "\n  mutation createUserTagRelTagSubforumPage2($data: CreateUserTagRelDataInput!) {\n    createUserTagRel(data: $data) {\n      data {\n        ...UserTagRelDetails\n      }\n    }\n  }\n": typeof types.createUserTagRelTagSubforumPage2Document,
    "\n  query tagFragmentBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagFragment\n      }\n    }\n  }\n": typeof types.tagBySlugDocument,
    "\n  query tagBasicInfoBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagBasicInfo\n      }\n    }\n  }\n": typeof types.tagBasicInfoBySlugDocument,
    "\n  query allTagsPageFragmentBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...AllTagsPageFragment\n      }\n    }\n  }\n": typeof types.allTagsPageBySlugDocument,
    "\n  query tagPageFragmentBySlug($selector: TagSelector, $limit: Int, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageFragment\n      }\n    }\n  }\n": typeof types.tagPageBySlugDocument,
    "\n  query tagPageWithRevisionFragmentBySlug($selector: TagSelector, $limit: Int, $version: String, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageWithRevisionFragment\n      }\n    }\n  }\n": typeof types.tagPageWithRevisionBySlugDocument,
    "\n  query tagEditFragmentBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagEditFragment\n      }\n    }\n  }\n": typeof types.tagEditBySlugDocument,
    "\n  query tagHistoryFragmentBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagHistoryFragment\n      }\n    }\n  }\n": typeof types.tagHistoryBySlugDocument,
    "\n  query tagPageWithArbitalContentFragmentBySlug($selector: TagSelector, $limit: Int, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageWithArbitalContentFragment\n      }\n    }\n  }\n": typeof types.tagPageWithArbitalContentBySlugDocument,
    "\n  query tagPageRevisionWithArbitalContentFragmentBySlug($selector: TagSelector, $limit: Int, $version: String, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageRevisionWithArbitalContentFragment\n      }\n    }\n  }\n": typeof types.tagPageRevisionWithArbitalContentBySlugDocument,
    "\n  query tagPageWithArbitalContentAndLensRevisionFragmentBySlug($selector: TagSelector, $limit: Int, $version: String, $contributorsLimit: Int, $lensSlug: String) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageWithArbitalContentAndLensRevisionFragment\n      }\n    }\n  }\n": typeof types.tagPageWithArbitalContentAndLensRevisionBySlugDocument,
    "\n  query getTagOrLensPreview($slug: String!, $hash: String) {\n    TagPreview(slug: $slug, hash: $hash) {\n      tag {\n        ...TagPreviewFragment\n      }\n      lens {\n        ...MultiDocumentContentDisplay\n      }\n      summaries {\n        ...MultiDocumentContentDisplay\n      }\n    }\n  }\n": typeof types.getTagOrLensPreviewDocument,
    "\n  query getTagOrLensSectionPreview($slug: String!, $hash: String) {\n    TagPreview(slug: $slug, hash: $hash) {\n      tag {\n        ...TagSectionPreviewFragment\n      }\n      lens {\n        ...MultiDocumentContentDisplay\n      }\n      summaries {\n        ...MultiDocumentContentDisplay\n      }\n    }\n  }\n": typeof types.getTagOrLensSectionPreviewDocument,
    "\n  query getTagPreview($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPreviewFragment\n      }\n    }\n  }\n": typeof types.getTagPreviewDocument,
    "\n  query getTagSectionPreview($selector: TagSelector, $limit: Int, $hash: String) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagSectionPreviewFragment\n      }\n    }\n  }\n": typeof types.getTagSectionPreviewDocument,
    "\n  query LocalgroupPageTitle($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsBase\n      }\n    }\n  }\n": typeof types.LocalgroupPageTitleDocument,
    "\n  query PostsPageHeaderTitle($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsBase\n      }\n    }\n  }\n": typeof types.PostsPageHeaderTitleDocument,
    "\n  query SequencesPageTitle($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesPageTitleFragment\n      }\n    }\n  }\n": typeof types.SequencesPageTitleDocument,
    "\n  query multiUserUserPageTitleQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserUserPageTitleQueryDocument,
    "\n  query SingleCommentForFeedback($documentId: String!) {\n    comment(input: { selector: { _id: $documentId } }) {\n      result {\n        ...UltraFeedComment\n      }\n    }\n  }\n": typeof types.SingleCommentForFeedbackDocument,
    "\n  mutation createUltraFeedEventUltraFeedItemFooter($data: CreateUltraFeedEventDataInput!) {\n    createUltraFeedEvent(data: $data) {\n      data {\n        ...UltraFeedEventsDefaultFragment\n      }\n    }\n  }\n": typeof types.createUltraFeedEventUltraFeedItemFooterDocument,
    "\n  mutation createUltraFeedEventUltraFeedObserver($data: CreateUltraFeedEventDataInput!) {\n    createUltraFeedEvent(data: $data) {\n      data {\n        ...UltraFeedEventsDefaultFragment\n      }\n    }\n  }\n": typeof types.createUltraFeedEventUltraFeedObserverDocument,
    "\n  query multiCommentUltraFeedPostDialogQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiCommentUltraFeedPostDialogQueryDocument,
    "\n  query UltraFeedPostDialog($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UltraFeedPostFragment\n      }\n    }\n  }\n": typeof types.UltraFeedPostDialogDocument,
    "\n  query UltraFeedTargetComment($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentWithRepliesFragment\n      }\n    }\n  }\n": typeof types.UltraFeedTargetCommentDocument,
    "\n  query LocalPostQuery($documentId: String!) {\n    post(selector: { _id: $documentId }) {\n      result {\n        ...UltraFeedPostFragment\n      }\n    }\n  }\n": typeof types.LocalPostQueryDocument,
    "\n  query ForeignPostQuery($documentId: String!) {\n    post(selector: { _id: $documentId }) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n": typeof types.ForeignPostQueryDocument,
    "\n  query UserRecentPostsForCompactCard($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.UserRecentPostsForCompactCardDocument,
    "\n  query UltraFeedThreadItem($documentId: String) {\n    post(selector: { _id: $documentId }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n": typeof types.UltraFeedThreadItemDocument,
    "\n  mutation createUltraFeedEventSeeLess($data: CreateUltraFeedEventDataInput!) {\n    createUltraFeedEvent(data: $data) {\n      data {\n        ...UltraFeedEventsDefaultFragment\n      }\n    }\n  }\n": typeof types.createUltraFeedEventSeeLessDocument,
    "\n  mutation updateUltraFeedEvent($selector: String!, $data: UpdateUltraFeedEventDataInput!) {\n    updateUltraFeedEvent(selector: $selector, data: $data) {\n      data {\n        _id\n      }\n    }\n  }\n": typeof types.updateUltraFeedEventDocument,
    "\n    mutation connectCrossposter($token: String) {\n      connectCrossposter(token: $token)\n    }\n  ": typeof types.connectCrossposterDocument,
    "\n  mutation updateUserEditProfileForm($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n": typeof types.updateUserEditProfileFormDocument,
    "\n  query EditProfileForm($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersProfileEdit\n      }\n    }\n  }\n": typeof types.EditProfileFormDocument,
    "\n  query EditProfileFormGetUserBySlug($slug: String!) {\n    GetUserBySlug(slug: $slug) {\n      ...UsersProfileEdit\n    }\n  }\n": typeof types.EditProfileFormGetUserBySlugDocument,
    "\n    mutation useEmailToken($token: String) {\n      useEmailToken(token: $token)\n    }\n  ": typeof types.useEmailTokenDocument,
    "\n    mutation sendEventTriggeredDM($eventType: String!) {\n      sendEventTriggeredDM(eventType: $eventType)\n    }\n  ": typeof types.sendEventTriggeredDMDocument,
    "\n  query multiPostFriendlyUsersProfileQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostFriendlyUsersProfileQueryDocument,
    "\n  query multiLocalgroupFriendlyUsersProfileQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n": typeof types.multiLocalgroupFriendlyUsersProfileQueryDocument,
    "\n  query multiUserFriendlyUsersProfileQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n        profileTags {\n          ...TagPreviewFragment\n        }\n        organizerOfGroups {\n          ...localGroupsBase\n        }\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserFriendlyUsersProfileQueryDocument,
    "\n  query KarmaChangeNotifier($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UserKarmaChanges\n      }\n    }\n  }\n": typeof types.KarmaChangeNotifierDocument,
    "\n  query multiPostLWUserTooltipContentQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostLWUserTooltipContentQueryDocument,
    "\n  query TopKarmaUsers($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.TopKarmaUsersDocument,
    "\n  query AirtableLeaderboards {\n    AirtableLeaderboards {\n      name\n      leaderboardAmount\n    }\n  }\n": typeof types.AirtableLeaderboardsDocument,
    "\n        query getNetKarmaChangesForAuthorsOverPeriod($days: Int!, $limit: Int!) {\n          NetKarmaChangesForAuthorsOverPeriod(days: $days, limit: $limit) {\n            userId\n            netKarma\n          }\n        }\n      ": typeof types.getNetKarmaChangesForAuthorsOverPeriodDocument,
    "\n    mutation login($username: String, $password: String) {\n      login(username: $username, password: $password) {\n        token\n      }\n    }\n  ": typeof types.loginDocument,
    "\n    mutation signup($email: String, $username: String, $password: String, $subscribeToCurated: Boolean, $reCaptchaToken: String, $abTestKey: String) {\n      signup(email: $email, username: $username, password: $password, subscribeToCurated: $subscribeToCurated, reCaptchaToken: $reCaptchaToken, abTestKey: $abTestKey) {\n        token\n      }\n    }\n  ": typeof types.signupDocument,
    "\n    mutation resetPassword($email: String) {\n      resetPassword(email: $email)\n    }\n  ": typeof types.resetPasswordDocument,
    "\n    mutation usePasswordResetEmailToken($token: String, $args: JSON) {\n      useEmailToken(token: $token, args: $args)\n    }\n  ": typeof types.usePasswordResetEmailTokenDocument,
    "\n  query multiSubscriptionSubscriptionsListQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SubscriptionState\n      }\n      totalCount\n    }\n  }\n": typeof types.multiSubscriptionSubscriptionsListQueryDocument,
    "\n  query UserContentFeedPosts($userId: String!, $limit: Int!, $sortedBy: String!) {\n    posts(selector: { userPosts: { userId: $userId, sortedBy: $sortedBy } }, limit: $limit, enableTotal: true) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": typeof types.UserContentFeedPostsDocument,
    "\n  query UserContentFeedComments($userId: String!, $limit: Int!, $sortBy: String!) {\n    comments(selector: { profileComments: { userId: $userId, sortBy: $sortBy } }, limit: $limit, enableTotal: true) {\n      results {\n        ...CommentsList\n        post {\n          ...PostsListWithVotes\n        }\n        topLevelComment {\n          ...CommentsListWithTopLevelComment\n        }\n      }\n      totalCount\n    }\n  }\n": typeof types.UserContentFeedCommentsDocument,
    "\n  query UserContentFeedThread($topLevelCommentId: String!, $limit: Int) {\n    comments(selector: { repliesToCommentThreadIncludingRoot: { topLevelCommentId: $topLevelCommentId } }, limit: $limit) {\n      results {\n        ...UltraFeedComment\n      }\n    }\n  }\n": typeof types.UserContentFeedThreadDocument,
    "\n  query UsersNameWrapper($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": typeof types.UsersNameWrapperDocument,
    "\n  query multiUserUsersProfileQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n": typeof types.multiUserUsersProfileQueryDocument,
    "\n  mutation updateUserDeactivateAccountSection($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n": typeof types.updateUserDeactivateAccountSectionDocument,
    "\n  mutation updateUserDeleteAccountSection($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n": typeof types.updateUserDeleteAccountSectionDocument,
    "\n  query UsersAccountManagementGetUserBySlug($slug: String!) {\n    GetUserBySlug(slug: $slug) {\n      ...UsersEdit\n    }\n  }\n": typeof types.UsersAccountManagementGetUserBySlugDocument,
    "\n  mutation updateUserUsersEditForm($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n": typeof types.updateUserUsersEditFormDocument,
    "\n  query UsersEditFormGetUserBySlug($slug: String!) {\n    GetUserBySlug(slug: $slug) {\n      ...UsersEdit\n    }\n  }\n": typeof types.UsersEditFormGetUserBySlugDocument,
    "\n  query SubscribedUser($documentId: String!) {\n    user(input: { selector: { _id: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": typeof types.SubscribedUserDocument,
    "\n  query SubscribedPost($documentId: String!) {\n    post(input: { selector: { _id: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.SubscribedPostDocument,
    "\n  query SubscribedComment($documentId: String!) {\n    comment(input: { selector: { _id: $documentId } }) {\n      result {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n": typeof types.SubscribedCommentDocument,
    "\n  query SubscribedLocalgroup($documentId: String!) {\n    localgroup(input: { selector: { _id: $documentId } }) {\n      result {\n        ...localGroupsBase\n      }\n    }\n  }\n": typeof types.SubscribedLocalgroupDocument,
    "\n  query SubscribedTag($documentId: String!) {\n    tag(input: { selector: { _id: $documentId } }) {\n      result {\n        ...TagPreviewFragment\n      }\n    }\n  }\n": typeof types.SubscribedTagDocument,
    "\n  query SubscribedSequence($documentId: String!) {\n    sequence(input: { selector: { _id: $documentId } }) {\n      result {\n        ...SequencesPageTitleFragment\n      }\n    }\n  }\n": typeof types.SubscribedSequenceDocument,
    "\n  mutation updateUserReactionsPalette($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": typeof types.updateUserReactionsPaletteDocument,
    "\n  mutation performVoteComment($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteComment(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteComment\n      }\n      showVotingPatternWarning\n    }\n  }\n": typeof types.performVoteCommentDocument,
    "\n  mutation performVotePost($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVotePost(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVotePost\n      }\n      showVotingPatternWarning\n    }\n  }\n": typeof types.performVotePostDocument,
    "\n  mutation performVoteTagRel($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteTagRel(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteTagRel\n      }\n      showVotingPatternWarning\n    }\n  }\n": typeof types.performVoteTagRelDocument,
    "\n  mutation performVoteRevision($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteRevision(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteRevision\n      }\n      showVotingPatternWarning\n    }\n  }\n": typeof types.performVoteRevisionDocument,
    "\n  mutation performVoteElectionCandidate($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteElectionCandidate(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteElectionCandidate\n      }\n      showVotingPatternWarning\n    }\n  }\n": typeof types.performVoteElectionCandidateDocument,
    "\n  mutation performVoteTag($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteTag(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteTag\n      }\n      showVotingPatternWarning\n    }\n  }\n": typeof types.performVoteTagDocument,
    "\n  mutation performVoteMultiDocument($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteMultiDocument(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteMultiDocument\n      }\n      showVotingPatternWarning\n    }\n  }\n": typeof types.performVoteMultiDocumentDocument,
    "\n  query emailstests($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsRevision\n      }\n    }\n  }\n": typeof types.emailstestsDocument,
    "\n  mutation updateCommentCommentsNewForm($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentComment\n      }\n    }\n  }\n": typeof types.updateCommentCommentsNewFormDocument,
    "\n  mutation updatePostPostsEditForm($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentPost\n      }\n    }\n  }\n": typeof types.updatePostPostsEditFormDocument,
    "\n  fragment AdvisorRequestsMinimumInfo on AdvisorRequest {\n    _id\n    userId\n    createdAt\n    interestedInMetaculus\n    jobAds\n  }\n": typeof types.AdvisorRequestsMinimumInfoDoc,
    "\n  fragment AutomatedContentEvaluationsFragment on AutomatedContentEvaluation {\n    _id\n    score\n    sentenceScores {\n      sentence\n      score\n    }\n    aiChoice\n    aiReasoning\n    aiCoT\n  }\n": typeof types.AutomatedContentEvaluationsFragmentDoc,
    "\n  fragment BansAdminPageFragment on Ban {\n    _id\n    createdAt\n    expirationDate\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    reason\n    comment\n    ip\n    properties\n  }\n": typeof types.BansAdminPageFragmentDoc,
    "\n  fragment BookmarksWithDocumentFragment on Bookmark {\n    ...BookmarksDefaultFragment\n    post {\n      ...PostsListWithVotes\n    }\n  }\n": typeof types.BookmarksWithDocumentFragmentDoc,
    "\n  fragment BookmarksFeedItemFragment on Bookmark {\n    ...BookmarksDefaultFragment\n    post {\n      ...PostsListWithVotes\n    }\n    comment {\n      ...UltraFeedComment\n    }\n  }\n": typeof types.BookmarksFeedItemFragmentDoc,
    "\n  fragment BookPageFragment on Book {\n    _id\n    createdAt\n    title\n    number\n    subtitle\n    tocTitle\n    contents {\n      ...RevisionDisplay\n    }\n    sequenceIds\n    sequences {\n      ...SequencesPageWithChaptersFragment\n    }\n    postIds\n    posts {\n      ...PostsListWithVotes\n    }\n    collectionId\n    displaySequencesAsGrid\n    hideProgressBar\n    showChapters\n  }\n": typeof types.BookPageFragmentDoc,
    "\n  fragment BookEdit on Book {\n    ...BookPageFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.BookEditDoc,
    "\n  fragment ChaptersFragment on Chapter {\n    _id\n    createdAt\n    title\n    subtitle\n    contents {\n      ...RevisionDisplay\n    }\n    number\n    sequenceId\n    postIds\n    posts {\n      ...PostsListWithVotes\n    }\n  }\n": typeof types.ChaptersFragmentDoc,
    "\n  fragment ChaptersEdit on Chapter {\n    ...ChaptersFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.ChaptersEditDoc,
    "\n  fragment CkEditorUserSessionInfo on CkEditorUserSession {\n    _id\n    userId\n    documentId\n    endedAt\n    endedBy\n  }\n": typeof types.CkEditorUserSessionInfoDoc,
    "\n  fragment ModeratorClientIDInfo on ClientId {\n    _id\n    clientId\n    createdAt\n    firstSeenReferrer\n    firstSeenLandingPage\n    users {\n      ...UsersMinimumInfo\n    }\n  }\n": typeof types.ModeratorClientIDInfoDoc,
    "\n  fragment CollectionContinueReadingFragment on Collection {\n    _id\n    title\n    slug\n    gridImageId\n  }\n": typeof types.CollectionContinueReadingFragmentDoc,
    "\n  fragment CollectionsPageFragment on Collection {\n    _id\n    createdAt\n    slug\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    contents {\n      ...RevisionDisplay\n    }\n    firstPageLink\n    gridImageId\n    books {\n      ...BookPageFragment\n    }\n    hideStartReadingButton\n    noindex\n  }\n": typeof types.CollectionsPageFragmentDoc,
    "\n  fragment CollectionsEditFragment on Collection {\n    ...CollectionsPageFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.CollectionsEditFragmentDoc,
    "\n  fragment CollectionsBestOfFragment on Collection {\n    _id\n    createdAt\n    slug\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    gridImageId\n    noindex\n    postsCount\n    readPostsCount\n    contents {\n      ...RevisionDisplay\n    }\n  }\n": typeof types.CollectionsBestOfFragmentDoc,
    "\n  fragment CommentModeratorActionDisplay on CommentModeratorAction {\n    _id\n    comment {\n      ...CommentsListWithModerationMetadata\n    }\n    commentId\n    type\n    active\n    createdAt\n    endedAt\n  }\n": typeof types.CommentModeratorActionDisplayDoc,
    "\n  fragment CommentsList on Comment {\n    _id\n    postId\n    tagId\n    tag {\n      _id\n      slug\n    }\n    relevantTagIds\n    relevantTags {\n      ...TagPreviewFragment\n    }\n    tagCommentType\n    parentCommentId\n    topLevelCommentId\n    descendentCount\n    title\n    contents {\n      _id\n      html\n      plaintextMainText\n      wordCount\n    }\n    postedAt\n    lastEditedAt\n    repliesBlockedUntil\n    userId\n    draft\n    deleted\n    deletedPublic\n    deletedByUserId\n    deletedReason\n    hideAuthor\n    authorIsUnreviewed\n    user {\n      ...UsersMinimumInfo\n    }\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    voteCount\n    emojiReactors\n    af\n    afDate\n    moveToAlignmentUserId\n    afBaseScore\n    afExtendedScore\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    needsReview\n    answer\n    parentAnswerId\n    retracted\n    postVersion\n    reviewedByUserId\n    shortform\n    shortformFrontpage\n    lastSubthreadActivity\n    moderatorHat\n    hideModeratorHat\n    nominatedForReview\n    reviewingForReview\n    promoted\n    promotedByUser {\n      ...UsersMinimumInfo\n    }\n    directChildrenCount\n    votingSystem\n    isPinnedOnProfile\n    debateResponse\n    rejected\n    rejectedReason\n    originalDialogueId\n\n    forumEventId\n    forumEventMetadata\n  }\n": typeof types.CommentsListDoc,
    "\n  fragment CommentsListWithTopLevelComment on Comment {\n    ...CommentsList\n    topLevelComment {\n      ...CommentsList\n    }\n  }\n": typeof types.CommentsListWithTopLevelCommentDoc,
    "\n  fragment UltraFeedComment on Comment {\n    ...CommentsList\n    post {\n      ...PostsListWithVotes\n    }\n  }\n": typeof types.UltraFeedCommentDoc,
    "\n  fragment ShortformComments on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    relevantTags {\n      ...TagPreviewFragment\n    }\n  }\n": typeof types.ShortformCommentsDoc,
    "\n  fragment DraftComments on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    parentComment {\n      _id\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": typeof types.DraftCommentsDoc,
    "\n  fragment CommentWithRepliesFragment on Comment {\n    ...CommentsList\n    lastSubthreadActivity\n    latestChildren {\n      ...CommentsList\n    }\n    tag {\n      ...TagBasicInfo\n    }\n    post {\n      ...PostsBase\n    }\n  }\n": typeof types.CommentWithRepliesFragmentDoc,
    "\n  fragment CommentEdit on Comment {\n    ...CommentsList\n    relevantTagIds\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.CommentEditDoc,
    "\n  fragment DeletedCommentsMetaData on Comment {\n    _id\n    deleted\n    deletedDate\n    deletedByUser {\n      _id\n      displayName\n    }\n    deletedReason\n    deletedPublic\n  }\n": typeof types.DeletedCommentsMetaDataDoc,
    "\n  fragment DeletedCommentsModerationLog on Comment {\n    ...DeletedCommentsMetaData\n    user {\n      ...UsersMinimumInfo\n    }\n    post {\n      title\n      slug\n      _id\n    }\n  }\n": typeof types.DeletedCommentsModerationLogDoc,
    "\n  fragment CommentsListWithParentMetadata on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n      isRead\n    }\n    tag {\n      ...TagBasicInfo\n    }\n  }\n": typeof types.CommentsListWithParentMetadataDoc,
    "\n  fragment StickySubforumCommentFragment on Comment {\n    ...CommentWithRepliesFragment\n    tag {\n      ...TagBasicInfo\n    }\n  }\n": typeof types.StickySubforumCommentFragmentDoc,
    "\n  fragment WithVoteComment on Comment {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n  }\n": typeof types.WithVoteCommentDoc,
    "\n  fragment CommentsListWithModerationMetadata on Comment {\n    ...CommentWithRepliesFragment\n    allVotes {\n      voteType\n    }\n  }\n": typeof types.CommentsListWithModerationMetadataDoc,
    "\n  fragment CommentsListWithModGPTAnalysis on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    modGPTAnalysis\n  }\n": typeof types.CommentsListWithModGPTAnalysisDoc,
    "\n  fragment CommentsForAutocomplete on Comment {\n    _id\n    postId\n    baseScore\n    extendedScore\n    createdAt\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      markdown\n    }\n    post {\n      ...PostsForAutocomplete\n    }\n  }\n": typeof types.CommentsForAutocompleteDoc,
    "\n  fragment CommentsForAutocompleteWithParents on Comment {\n    ...CommentsForAutocomplete\n    parentComment {\n      ...CommentsForAutocomplete\n      parentComment {\n        ...CommentsForAutocomplete\n        parentComment {\n          ...CommentsForAutocomplete\n          parentComment {\n            ...CommentsForAutocomplete\n            parentComment {\n              ...CommentsForAutocomplete\n              parentComment {\n                ...CommentsForAutocomplete\n                parentComment {\n                  ...CommentsForAutocomplete\n                  parentComment {\n                    ...CommentsForAutocomplete\n                    parentComment {\n                      ...CommentsForAutocomplete\n                      parentComment {\n                        ...CommentsForAutocomplete\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.CommentsForAutocompleteWithParentsDoc,
    "\n  fragment SuggestAlignmentComment on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    suggestForAlignmentUserIds\n    suggestForAlignmentUsers {\n      _id\n      displayName\n    }\n  }\n": typeof types.SuggestAlignmentCommentDoc,
    "\n  fragment ConversationsMinimumInfo on Conversation {\n    _id\n    createdAt\n    latestActivity\n    title\n    participantIds\n    archivedByIds\n    messageCount\n    moderator\n  }\n": typeof types.ConversationsMinimumInfoDoc,
    "\n  fragment ConversationsList on Conversation {\n    ...ConversationsMinimumInfo\n    participants {\n      ...UsersMinimumInfo\n    }\n    latestMessage {\n      ...messageListFragment\n    }\n  }\n": typeof types.ConversationsListDoc,
    "\n  fragment ConversationsListWithReadStatus on Conversation {\n    ...ConversationsList\n    hasUnreadMessages\n  }\n": typeof types.ConversationsListWithReadStatusDoc,
    "\n  fragment CurationNoticesFragment on CurationNotice {\n    _id\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    commentId\n    comment {\n      ...CommentsList\n    }\n    postId\n    post {\n      ...PostsMinimumInfo\n    }\n    deleted\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.CurationNoticesFragmentDoc,
    "\n  fragment DialogueCheckInfo on DialogueCheck {\n    _id\n    userId\n    targetUserId\n    checked\n    checkedAt\n    hideInRecommendations\n    matchPreference {\n      ...DialogueMatchPreferenceInfo\n    }\n    reciprocalMatchPreference {\n      ...DialogueMatchPreferenceInfo\n    }\n  }\n": typeof types.DialogueCheckInfoDoc,
    "\n  fragment DialogueMatchPreferenceInfo on DialogueMatchPreference {\n    _id\n    dialogueCheckId\n    topicNotes\n    topicPreferences\n    syncPreference\n    asyncPreference\n    formatNotes\n    generatedDialogueId\n    deleted\n  }\n": typeof types.DialogueMatchPreferenceInfoDoc,
    "\n  fragment DigestPostsMinimumInfo on DigestPost {\n    _id\n    digestId\n    postId\n    emailDigestStatus\n    onsiteDigestStatus\n  }\n": typeof types.DigestPostsMinimumInfoDoc,
    "\n  fragment DigestsMinimumInfo on Digest {\n    _id\n    num\n    startDate\n    endDate\n    publishedDate\n    onsiteImageId\n    onsitePrimaryColor\n  }\n": typeof types.DigestsMinimumInfoDoc,
    "\n  fragment ElectionCandidateBasicInfo on ElectionCandidate {\n    _id\n    electionName\n    name\n    logoSrc\n    href\n    fundraiserLink\n    gwwcLink\n    gwwcId\n    description\n    tagId\n    tag {\n      ...TagBasicInfo\n    }\n    postCount\n    baseScore\n    score\n    extendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.ElectionCandidateBasicInfoDoc,
    "\n  fragment ElectionCandidateSimple on ElectionCandidate {\n    _id\n    name\n    logoSrc\n    href\n    fundraiserLink\n    description\n  }\n": typeof types.ElectionCandidateSimpleDoc,
    "\n  fragment WithVoteElectionCandidate on ElectionCandidate {\n    __typename\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.WithVoteElectionCandidateDoc,
    "\n  fragment ElectionVoteInfo on ElectionVote {\n    _id\n    electionName\n    userId\n    compareState\n    vote\n    submittedAt\n    submissionComments\n    userExplanation\n    userOtherComments\n  }\n": typeof types.ElectionVoteInfoDoc,
    "\n  fragment ElectionVoteRecentDiscussion on ElectionVote {\n    _id\n    electionName\n    submittedAt\n  }\n": typeof types.ElectionVoteRecentDiscussionDoc,
    "\n  fragment ElicitQuestionFragment on ElicitQuestion {\n    _id\n    title\n    notes\n    resolution\n    resolvesBy\n  }\n": typeof types.ElicitQuestionFragmentDoc,
    "\n  fragment FeaturedResourcesFragment on FeaturedResource {\n    _id\n    title\n    body\n    ctaText\n    ctaUrl\n    expiresAt\n  }\n": typeof types.FeaturedResourcesFragmentDoc,
    "\n  fragment FieldChangeFragment on FieldChange {\n    _id\n    createdAt\n    userId\n    changeGroup\n    documentId\n    fieldName\n    oldValue\n    newValue\n  }\n": typeof types.FieldChangeFragmentDoc,
    "\n  fragment ForumEventsMinimumInfo on ForumEvent {\n    _id\n    title\n    startDate\n    endDate\n    darkColor\n    lightColor\n    bannerTextColor\n    contrastColor\n    tagId\n    postId\n    commentId\n    bannerImageId\n    eventFormat\n    customComponent\n    commentPrompt\n    isGlobal\n\n    pollAgreeWording\n    pollDisagreeWording\n\n    maxStickersPerUser\n  }\n": typeof types.ForumEventsMinimumInfoDoc,
    "\n  fragment ForumEventsDisplay on ForumEvent {\n    ...ForumEventsMinimumInfo\n    publicData\n    voteCount\n\n    post {\n      ...PostsMinimumInfo\n    }\n    tag {\n      ...TagBasicInfo\n    }\n    frontpageDescription {\n      _id\n      html\n    }\n    frontpageDescriptionMobile {\n      _id\n      html\n    }\n    postPageDescription {\n      _id\n      html\n    }\n    pollQuestion {\n      _id\n      html\n      plaintextMainText\n    }\n  }\n": typeof types.ForumEventsDisplayDoc,
    "\n  fragment ForumEventsEdit on ForumEvent {\n    ...ForumEventsMinimumInfo\n    frontpageDescription {\n      ...RevisionEdit\n    }\n    frontpageDescriptionMobile {\n      ...RevisionEdit\n    }\n    postPageDescription {\n      ...RevisionEdit\n    }\n    pollQuestion {\n      ...RevisionEdit\n    }\n  }\n": typeof types.ForumEventsEditDoc,
    "\n  fragment GardenCodeFragment on GardenCode {\n    _id\n    code\n    title\n    userId\n    deleted\n    slug\n    startTime\n    endTime\n    fbLink\n    type\n    afOnly\n    contents {\n      ...RevisionDisplay\n    }\n  }\n": typeof types.GardenCodeFragmentDoc,
    "\n  fragment GardenCodeFragmentEdit on GardenCode {\n    _id\n    code\n    title\n    userId\n    deleted\n    slug\n    startTime\n    endTime\n    fbLink\n    type\n    afOnly\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.GardenCodeEditFragmentDoc,
    "\n  fragment GoogleServiceAccountSessionInfo on GoogleServiceAccountSession {\n    _id\n    email\n  }\n": typeof types.GoogleServiceAccountSessionInfoDoc,
    "\n  fragment GoogleServiceAccountSessionAdminInfo on GoogleServiceAccountSession {\n    _id\n    email\n    estimatedExpiry\n  }\n": typeof types.GoogleServiceAccountSessionAdminInfoDoc,
    "\n  fragment JargonTerms on JargonTerm {\n    _id\n    postId\n    term\n    contents {\n      ...RevisionEdit\n    }\n    humansAndOrAIEdited\n    approved\n    deleted\n    altTerms\n  }\n": typeof types.JargonTermsDoc,
    "\n  fragment JargonTermsPost on JargonTerm {\n    _id\n    term\n    humansAndOrAIEdited\n    approved\n    deleted\n    altTerms\n    contents {\n      ...RevisionDisplay\n    }\n  }\n": typeof types.JargonTermsPostDoc,
    "\n  fragment JargonTermsWithPostInfo on JargonTerm {\n    ...JargonTerms\n    post {\n      ...PostsMinimumInfo\n    }\n  }\n": typeof types.JargonTermsWithPostInfoDoc,
    "\n  fragment LlmConversationsFragment on LlmConversation {\n    _id\n    userId\n    title\n    createdAt\n    lastUpdatedAt\n    deleted\n  }\n": typeof types.LlmConversationsFragmentDoc,
    "\n  fragment LlmConversationsViewingPageFragment on LlmConversation {\n    ...LlmConversationsFragment\n    totalCharacterCount\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": typeof types.LlmConversationsViewingPageFragmentDoc,
    "\n  fragment LlmConversationsWithMessagesFragment on LlmConversation {\n    ...LlmConversationsFragment\n    messages {\n      ...LlmMessagesFragment\n    }\n  }\n": typeof types.LlmConversationsWithMessagesFragmentDoc,
    "\n  fragment LlmMessagesFragment on LlmMessage {\n    _id\n    userId\n    conversationId\n    role\n    content\n    createdAt\n  }\n": typeof types.LlmMessagesFragmentDoc,
    "\n  fragment localGroupsBase on Localgroup {\n    _id\n    createdAt\n    organizerIds\n    organizers {\n      ...UsersMinimumInfo\n    }\n    lastActivity\n    name\n    nameInAnotherLanguage\n    isOnline\n    location\n    googleLocation\n    mongoLocation\n    types\n    categories\n    contactInfo\n    facebookLink\n    facebookPageLink\n    meetupLink\n    slackLink\n    website\n    bannerImageId\n    inactive\n    deleted\n  }\n": typeof types.localGroupsBaseDoc,
    "\n  fragment localGroupsHomeFragment on Localgroup {\n    ...localGroupsBase\n    contents {\n      ...RevisionDisplay\n    }\n  }\n": typeof types.localGroupsHomeFragmentDoc,
    "\n  fragment localGroupsEdit on Localgroup {\n    ...localGroupsBase\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.localGroupsEditDoc,
    "\n  fragment localGroupsIsOnline on Localgroup {\n    _id\n    name\n    isOnline\n  }\n": typeof types.localGroupsIsOnlineDoc,
    "\n  fragment newEventFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    name\n    important\n    properties\n    intercom\n  }\n": typeof types.newEventFragmentDoc,
    "\n  fragment lastEventFragment on LWEvent {\n    _id\n    createdAt\n    documentId\n    userId\n    name\n    important\n    properties\n    intercom\n  }\n": typeof types.lastEventFragmentDoc,
    "\n  fragment lwEventsAdminPageFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    name\n    documentId\n    important\n    properties\n    intercom\n  }\n": typeof types.lwEventsAdminPageFragmentDoc,
    "\n  fragment emailHistoryFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    name\n    properties\n  }\n": typeof types.emailHistoryFragmentDoc,
    "\n  fragment messageListFragment on Message {\n    _id\n    user {\n      ...UsersMinimumInfo\n      profileImageId\n    }\n    contents {\n      html\n      plaintextMainText\n    }\n    createdAt\n    conversationId\n  }\n": typeof types.messageListFragmentDoc,
    "\n  fragment ModerationTemplateFragment on ModerationTemplate {\n    _id\n    name\n    collectionName\n    order\n    deleted\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.ModerationTemplateFragmentDoc,
    "\n  fragment ModeratorActionDisplay on ModeratorAction {\n    _id\n    user {\n      ...UsersMinimumInfo\n    }\n    userId\n    type\n    active\n    createdAt\n    endedAt\n  }\n": typeof types.ModeratorActionDisplayDoc,
    "\n  fragment MultiDocumentMinimumInfo on MultiDocument {\n    _id\n    parentDocumentId\n    collectionName\n    fieldName\n    userId\n    slug\n    oldSlugs\n    title\n    tabTitle\n    tabSubtitle\n    preview\n    index\n    deleted\n    createdAt\n    legacyData\n\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.MultiDocumentMinimumInfoDoc,
    "\n  fragment MultiDocumentContentDisplay on MultiDocument {\n    ...MultiDocumentMinimumInfo\n    tableOfContents\n    textLastUpdatedAt\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.MultiDocumentContentDisplayDoc,
    "\n  fragment MultiDocumentEdit on MultiDocument {\n    ...MultiDocumentContentDisplay\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    summaries {\n      ...MultiDocumentContentDisplay\n    }\n    textLastUpdatedAt\n  }\n": typeof types.MultiDocumentEditDoc,
    "\n  fragment MultiDocumentParentDocument on MultiDocument {\n    ...MultiDocumentEdit\n    parentTag {\n      ...TagHistoryFragment\n    }\n  }\n": typeof types.MultiDocumentParentDocumentDoc,
    "\n  fragment MultiDocumentWithContributors on MultiDocument {\n    ...MultiDocumentEdit\n    contributors {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        currentAttributionCharCount\n      }\n    }\n  }\n": typeof types.MultiDocumentWithContributorsDoc,
    "\n  fragment MultiDocumentRevision on MultiDocument {\n    ...MultiDocumentMinimumInfo\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n    tableOfContents(version: $version)\n  }\n": typeof types.MultiDocumentRevisionDoc,
    "\n  fragment MultiDocumentWithContributorsRevision on MultiDocument {\n    ...MultiDocumentRevision\n    contributors(version: $version) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        currentAttributionCharCount\n        contributionScore\n      }\n    }\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    textLastUpdatedAt\n  }\n": typeof types.MultiDocumentWithContributorsRevisionDoc,
    "\n  fragment WithVoteMultiDocument on MultiDocument {\n    ...MultiDocumentMinimumInfo\n  }\n": typeof types.WithVoteMultiDocumentDoc,
    "\n  fragment NotificationsList on Notification {\n    _id\n    documentId\n    documentType\n    deleted\n    userId\n    createdAt\n    link\n    message\n    type\n    viewed\n    extraData\n  }\n": typeof types.NotificationsListDoc,
    "\n  fragment PetrovDayActionInfo on PetrovDayAction {\n    _id\n    createdAt\n    userId\n    actionType\n    data\n  }\n": typeof types.PetrovDayActionInfoDoc,
    "\n  fragment PetrovDayLaunchInfo on PetrovDayLaunch {\n    _id\n    createdAt\n    launchCode\n    userId\n  }\n": typeof types.PetrovDayLaunchInfoDoc,
    "\n  fragment PodcastEpisodeFull on PodcastEpisode {\n    _id\n    podcastId\n    title\n    episodeLink\n    externalEpisodeId\n  }\n": typeof types.PodcastEpisodeFullDoc,
    "\n  fragment PodcastSelect on Podcast {\n    _id\n    title\n  }\n": typeof types.PodcastSelectDoc,
    "\n  fragment PostsMinimumInfo on Post {\n    _id\n    slug\n    title\n    draft\n    shortform\n    hideCommentKarma\n    af\n    currentUserReviewVote {\n      _id\n      qualitativeScore\n      quadraticScore\n    }\n    userId\n    coauthorStatuses {\n      userId\n      confirmed\n      requested\n    }\n    hasCoauthorPermission\n    rejected\n    debate\n    collabEditorDialogue\n  }\n": typeof types.PostsMinimumInfoDoc,
    "\n  fragment PostsTopItemInfo on Post {\n    ...PostsMinimumInfo\n    ...PostsAuthors\n    isRead\n    contents {\n      _id\n      htmlHighlight\n      wordCount\n      version\n    }\n    customHighlight {\n      _id\n      html\n    }\n    tags {\n      ...TagPreviewFragment\n    }\n    reviewWinner {\n      ...ReviewWinnerTopPostsPage\n    }\n    spotlight {\n      ...SpotlightReviewWinner\n    }\n    reviews {\n      ...CommentsList\n    }\n    finalReviewVoteScoreHighKarma\n  }\n": typeof types.PostsTopItemInfoDoc,
    "\n  fragment PostsBase on Post {\n    ...PostsMinimumInfo\n    \n    # Core fields\n    url\n    postedAt\n    createdAt\n    sticky\n    metaSticky\n    stickyPriority\n    status\n    frontpageDate\n    meta\n    deletedDraft\n    postCategory\n    tagRelevance\n\n    shareWithUsers\n    sharingSettings\n    linkSharingKey\n\n    contents_latest\n    commentCount\n    voteCount\n    baseScore\n    extendedScore\n    emojiReactors\n    unlisted\n    score\n    lastVisitedAt\n    isFuture\n    isRead\n    lastCommentedAt\n    lastCommentPromotedAt\n    canonicalCollectionSlug\n    curatedDate\n    commentsLocked\n    commentsLockedToAccountsCreatedAfter\n    debate\n\n    # questions\n    question\n    hiddenRelatedQuestion\n    originalPostRelationSourceId\n\n    userId\n    \n    # Local Event data\n    location\n    googleLocation\n    onlineEvent\n    globalEvent\n    startTime\n    endTime\n    localStartTime\n    localEndTime\n    eventRegistrationLink\n    joinEventLink\n    facebookLink\n    meetupLink\n    website\n    contactInfo\n    isEvent\n    eventImageId\n    eventType\n    types\n    groupId\n\n    # Review data \n    reviewedByUserId\n    suggestForCuratedUserIds\n    suggestForCuratedUsernames\n    reviewForCuratedUserId\n    authorIsUnreviewed\n\n    # Alignment Forum\n    afDate\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    afBaseScore\n    afExtendedScore\n    afCommentCount\n    afLastCommentedAt\n    afSticky\n    \n    hideAuthor\n    moderationStyle\n    ignoreRateLimits\n\n    submitToFrontpage\n    shortform\n    onlyVisibleToLoggedIn\n    onlyVisibleToEstablishedAccounts\n\n    reviewCount\n    reviewVoteCount\n    positiveReviewVoteCount\n    manifoldReviewMarketId\n\n    annualReviewMarketProbability\n    annualReviewMarketIsResolved\n    annualReviewMarketYear\n    annualReviewMarketUrl\n\n    group {\n      _id\n      name\n      organizerIds\n    }\n    rsvpCounts\n\n    podcastEpisodeId\n    forceAllowType3Audio\n\n    # deprecated\n    nominationCount2019\n    reviewCount2019\n\n    votingSystem\n    \n    disableRecommendation\n  }\n": typeof types.PostsBaseDoc,
    "\n  fragment PostsWithVotes on Post {\n    ...PostsBase\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.PostsWithVotesDoc,
    "\n  fragment PostsListWithVotes on Post {\n    ...PostsList\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.PostsListWithVotesDoc,
    "\n  fragment PostsListWithVotesAndSequence on Post {\n    ...PostsListWithVotes\n    canonicalSequence {\n      ...SequencesPageFragment\n    }\n  }\n": typeof types.PostsListWithVotesAndSequenceDoc,
    "\n  fragment UltraFeedPostFragment on Post {\n    ...PostsDetails\n    ...PostsListWithVotes\n    contents {\n      _id\n      html\n      htmlHighlight\n      wordCount\n      plaintextDescription\n      version\n    }\n    autoFrontpage\n    votingSystem\n  }\n": typeof types.UltraFeedPostFragmentDoc,
    "\n  fragment PostsReviewVotingList on Post {\n    ...PostsListWithVotes\n    reviewVoteScoreAllKarma\n    reviewVotesAllKarma\n    reviewVoteScoreHighKarma\n    reviewVotesHighKarma\n    reviewVoteScoreAF\n    reviewVotesAF\n  }\n": typeof types.PostsReviewVotingListDoc,
    "\n  fragment PostsModerationGuidelines on Post {\n    ...PostsMinimumInfo\n    frontpageDate\n    user {\n      _id\n      displayName\n      moderationStyle\n    }\n    moderationStyle\n    moderationGuidelines {\n      _id\n      html\n      originalContents {\n        type\n        data\n      }\n    }\n  }\n": typeof types.PostsModerationGuidelinesDoc,
    "\n  fragment PostsAuthors on Post {\n    user {\n      ...UsersMinimumInfo\n      profileImageId\n      \n      # Author moderation info\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n      groups\n      banned\n      allCommentingDisabled\n    }\n    coauthors {\n      ...UsersMinimumInfo\n    }\n  }\n": typeof types.PostsAuthorsDoc,
    "\n  fragment PostsListBase on Post {\n    ...PostsBase\n    ...PostsAuthors\n    readTimeMinutes\n    rejectedReason\n    customHighlight {\n      _id\n      html\n      plaintextDescription\n    }\n    lastPromotedComment {\n      _id\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n    bestAnswer {\n      ...CommentsList\n    }\n    tags {\n      ...TagBasicInfo\n    }\n    socialPreviewData {\n      _id\n      imageUrl\n    }\n\n    feedId\n    totalDialogueResponseCount\n    unreadDebateResponseCount\n    dialogTooltipPreview\n    disableSidenotes\n  }\n": typeof types.PostsListBaseDoc,
    "\n  fragment PostsList on Post {\n    ...PostsListBase\n    deletedDraft\n    contents {\n      _id\n      htmlHighlight\n      plaintextDescription\n      wordCount\n      version\n    }\n    fmCrosspost {\n      isCrosspost\n      hostedHere\n      foreignPostId\n    }\n    bannedUserIds\n  }\n": typeof types.PostsListDoc,
    "\n  fragment SunshineCurationPostsList on Post {\n    ...PostsList\n    curationNotices {\n      ...CurationNoticesFragment\n    }\n  }\n": typeof types.SunshineCurationPostsListDoc,
    "\n  fragment PostsListTag on Post {\n    ...PostsList\n    tagRel(tagId: $tagId) {\n      ...WithVoteTagRel\n    }\n  }\n": typeof types.PostsListTagDoc,
    "\n  fragment PostsListTagWithVotes on Post {\n    ...PostsListWithVotes\n    tagRel(tagId: $tagId) {\n      ...WithVoteTagRel\n    }\n  }\n": typeof types.PostsListTagWithVotesDoc,
    "\n  fragment PostsDetails on Post {\n    ...PostsListBase\n\n    canonicalSource\n    noIndex\n    viewCount\n    tags {\n      ...TagPreviewFragment\n    }\n    socialPreviewData {\n      _id\n      text\n      imageUrl\n    }\n    \n    # Tags\n    tagRelevance\n    \n    # Posts-page display options\n    commentSortOrder\n    sideCommentVisibility\n    \n    # Sequence navigation\n    collectionTitle\n    canonicalPrevPostSlug\n    canonicalNextPostSlug\n    canonicalSequenceId\n    canonicalBookId\n    canonicalSequence {\n      _id\n      title\n    }\n    canonicalBook {\n      _id\n      title\n    }\n    canonicalCollection {\n      _id\n      title\n    }\n\n    # Podcast\n    podcastEpisode {\n      _id\n      title\n      podcast {\n        _id\n        title\n        applePodcastLink\n        spotifyPodcastLink\n      }\n      episodeLink\n      externalEpisodeId\n    }\n\n    # Moderation stuff\n    bannedUserIds\n    moderationStyle\n    \n    # Voting\n    currentUserVote\n    currentUserExtendedVote\n    \n    # RSS metadata\n    feedLink\n    feed {\n      ...RSSFeedMinimumInfo\n    }\n    \n    # Related Questions\n    sourcePostRelations {\n      _id\n      sourcePostId\n      sourcePost {\n        ...PostsListWithVotes\n      }\n      order\n    }\n    targetPostRelations {\n      _id\n      sourcePostId\n      targetPostId\n      targetPost {\n        ...PostsListWithVotes\n      }\n      order\n    }\n    \n    # Events\n    rsvps\n    activateRSVPs\n\n    # Crossposting\n    fmCrosspost {\n      isCrosspost\n      hostedHere\n      foreignPostId\n    }\n\n    # Jargon Terms\n    glossary {\n      ...JargonTermsPost\n    }\n  }\n": typeof types.PostsDetailsDoc,
    "\n  fragment PostsExpandedHighlight on Post {\n    _id\n    contents {\n      _id\n      html\n      wordCount\n    }\n  }\n": typeof types.PostsExpandedHighlightDoc,
    "\n  fragment PostsPlaintextDescription on Post {\n    _id\n    contents {\n      _id\n      plaintextDescription\n    }\n  }\n": typeof types.PostsPlaintextDescriptionDoc,
    "\n  fragment PostsRevision on Post {\n    ...PostsDetails\n\n    # Content & Revisions\n    version\n    contents(version: $version) {\n      ...RevisionDisplay\n    }\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n": typeof types.PostsRevisionDoc,
    "\n  fragment PostsRevisionEdit on Post {\n    ...PostsDetails\n\n    # Content & Revisions\n    version\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n": typeof types.PostsRevisionEditDoc,
    "\n  fragment PostsWithNavigationAndRevision on Post {\n    ...PostsRevision\n    ...PostSequenceNavigation\n    customHighlight {\n      ...RevisionDisplay\n    }\n    \n    tableOfContentsRevision(version: $version)\n    reviewWinner {\n      ...ReviewWinnerAll\n    }\n  }\n": typeof types.PostsWithNavigationAndRevisionDoc,
    "\n  fragment PostsWithNavigation on Post {\n    ...PostsPage\n    ...PostSequenceNavigation\n    \n    tableOfContents\n    reviewWinner {\n      ...ReviewWinnerAll\n    }\n  }\n": typeof types.PostsWithNavigationDoc,
    "\n  fragment PostSequenceNavigation on Post {\n    # Prev/next sequence navigation\n    sequence(sequenceId: $sequenceId) {\n      ...SequencesPageFragment\n    }\n    prevPost(sequenceId: $sequenceId) {\n      ...PostsListWithVotes\n      sequence(sequenceId: $sequenceId, prevOrNext: \"prev\") {\n        _id\n      }\n    }\n    nextPost(sequenceId: $sequenceId) {\n      ...PostsListWithVotes\n      sequence(sequenceId: $sequenceId, prevOrNext: \"next\") {\n        _id\n      }\n    }\n  }\n": typeof types.PostSequenceNavigationDoc,
    "\n  fragment PostsPage on Post {\n    ...PostsDetails\n    version\n    contents {\n      ...RevisionDisplay\n    }\n    customHighlight {\n      ...RevisionDisplay\n    }\n    myEditorAccess\n  }\n": typeof types.PostsPageDoc,
    "\n  fragment PostsEdit on Post {\n    ...PostsDetails\n    ...PostSideComments\n    myEditorAccess\n    version\n    coauthorStatuses {\n      userId\n      confirmed\n      requested\n    }\n    readTimeMinutesOverride\n    fmCrosspost {\n      isCrosspost\n      hostedHere\n      foreignPostId\n    }\n    hideFromRecentDiscussions\n    hideFromPopularComments\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n    customHighlight {\n      ...RevisionEdit\n    }\n    tableOfContents\n    subforumTagId\n    socialPreviewImageId\n    socialPreview {\n      imageId\n      text\n    }\n    socialPreviewData {\n      _id\n      imageId\n      text\n    }\n    user {\n      ...UsersMinimumInfo\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n    }\n    usersSharedWith {\n      ...UsersMinimumInfo\n    }\n    coauthors {\n      ...UsersMinimumInfo\n    }\n    generateDraftJargon\n  }\n": typeof types.PostsEditDoc,
    "\n  fragment PostsEditQueryFragment on Post {\n    ...PostsEdit\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n  }\n": typeof types.PostsEditQueryFragmentDoc,
    "\n  fragment PostsEditMutationFragment on Post {\n    ...PostsEdit\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.PostsEditMutationFragmentDoc,
    "\n  fragment PostsRevisionsList on Post {\n    _id\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n": typeof types.PostsRevisionsListDoc,
    "\n  fragment PostsRecentDiscussion on Post {\n    ...PostsListWithVotes\n    recentComments(commentsLimit: $commentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsList\n    }\n  }\n": typeof types.PostsRecentDiscussionDoc,
    "\n  fragment ShortformRecentDiscussion on Post {\n    ...PostsListWithVotes\n    recentComments(commentsLimit: $commentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsListWithTopLevelComment\n    }\n  }\n": typeof types.ShortformRecentDiscussionDoc,
    "\n  fragment UsersBannedFromPostsModerationLog on Post {\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    slug\n    _id\n    bannedUserIds\n  }\n": typeof types.UsersBannedFromPostsModerationLogDoc,
    "\n  fragment SunshinePostsList on Post {\n    ...PostsListBase\n\n    currentUserVote\n    currentUserExtendedVote\n    fmCrosspost {\n      isCrosspost\n      hostedHere\n      foreignPostId\n    }\n    rejectedReason\n    autoFrontpage\n\n    contents {\n      _id\n      html\n      htmlHighlight\n      wordCount\n      version\n    }\n\n    automatedContentEvaluations {\n      ...AutomatedContentEvaluationsFragment\n    }\n\n    moderationGuidelines {\n      _id\n      html\n    }\n\n    user {\n      ...UsersMinimumInfo\n      biography {\n        ...RevisionDisplay\n      }\n      profileImageId\n      \n      # Author moderation info\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n      \n      moderationGuidelines {\n        _id\n        html\n      }\n\n      needsReview\n      moderatorActions {\n        ...ModeratorActionDisplay\n      }\n    }\n  }\n": typeof types.SunshinePostsListDoc,
    "\n  fragment WithVotePost on Post {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n  }\n": typeof types.WithVotePostDoc,
    "\n  fragment HighlightWithHash on Post {\n    _id\n    contents {\n      _id\n      htmlHighlightStartingAtHash(hash: $hash)\n    }\n  }\n": typeof types.HighlightWithHashDoc,
    "\n  fragment PostWithDialogueMessage on Post {\n    _id\n    dialogueMessageContents(dialogueMessageId: $dialogueMessageId)\n  }\n": typeof types.PostWithDialogueMessageDoc,
    "\n  fragment PostSideComments on Post {\n    _id\n    sideComments\n    sideCommentsCache {\n      ...SideCommentCacheMinimumInfo\n    }\n  }\n": typeof types.PostSideCommentsDoc,
    "\n  fragment PostWithGeneratedSummary on Post {\n    _id\n    languageModelSummary\n  }\n": typeof types.PostWithGeneratedSummaryDoc,
    "\n  fragment PostsBestOfList on Post {\n    ...PostsListWithVotes\n    podcastEpisode {\n      _id\n      title\n      podcast {\n        _id\n        title\n        applePodcastLink\n        spotifyPodcastLink\n      }\n      episodeLink\n      externalEpisodeId\n    }\n    socialPreviewData {\n      _id\n      text\n      imageUrl\n    }\n    firstVideoAttribsForPreview\n  }\n": typeof types.PostsBestOfListDoc,
    "\n  fragment PostsRSSFeed on Post {\n    ...PostsPage\n    scoreExceeded2Date\n    scoreExceeded30Date\n    scoreExceeded45Date\n    scoreExceeded75Date\n    scoreExceeded125Date\n    scoreExceeded200Date\n    metaDate\n  }\n": typeof types.PostsRSSFeedDoc,
    "\n  fragment PostsOriginalContents on Post {\n    _id\n    contents {\n      _id\n      originalContents {\n        type\n        data\n      }\n    }\n  }\n": typeof types.PostsOriginalContentsDoc,
    "\n  fragment PostsHTML on Post {\n    _id\n    contents {\n      ...RevisionHTML\n    }\n  }\n": typeof types.PostsHTMLDoc,
    "\n  fragment PostsForAutocomplete on Post {\n    _id\n    title\n    userId\n    baseScore\n    extendedScore\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      markdown\n    }\n  }\n": typeof types.PostsForAutocompleteDoc,
    "\n  fragment PostForReviewWinnerItem on Post {\n    _id\n    spotlight {\n      _id\n    }\n    reviewWinner {\n      _id\n      category\n    }\n  }\n": typeof types.PostForReviewWinnerItemDoc,
    "\n  fragment PostsTwitterAdmin on Post {\n    ...PostsListWithVotes\n    user {\n      ...UsersSocialMediaInfo\n    }\n    coauthors {\n      ...UsersSocialMediaInfo\n    }\n  }\n": typeof types.PostsTwitterAdminDoc,
    "\n  fragment SuggestAlignmentPost on Post {\n    ...PostsList\n    suggestForAlignmentUsers {\n      _id\n      displayName\n    }\n  }\n": typeof types.SuggestAlignmentPostDoc,
    "\n  fragment UnclaimedReportsList on Report {\n    _id\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    commentId\n    comment {\n      ...CommentsList\n      post {\n        ...PostsMinimumInfo\n      }\n      tag {\n        ...TagBasicInfo\n      }\n    }\n    postId\n    post {\n      ...PostsList\n    }\n    reportedUser {\n      ...SunshineUsersList\n    }\n    closedAt\n    createdAt\n    claimedUserId\n    claimedUser {\n      _id\n      displayName\n      username\n      slug\n    }\n    link\n    description\n    reportedAsSpam\n    markedAsSpam\n  }\n": typeof types.UnclaimedReportsListDoc,
    "\n  fragment reviewVoteFragment on ReviewVote {\n    _id\n    createdAt\n    userId\n    postId\n    qualitativeScore\n    quadraticScore\n    comment\n    year\n    dummy\n    reactions\n  }\n": typeof types.reviewVoteFragmentDoc,
    "\n  fragment reviewVoteWithUserAndPost on ReviewVote {\n    ...reviewVoteFragment\n    user {\n      ...UsersMinimumInfo\n      email\n      emails\n    }\n    post {\n      ...PostsMinimumInfo\n    }\n  }\n": typeof types.reviewVoteWithUserAndPostDoc,
    "\n  fragment reviewAdminDashboard on ReviewVote {\n    _id\n    createdAt\n    userId\n    user {\n      _id\n      displayName\n      karma\n    }\n  }\n": typeof types.reviewAdminDashboardDoc,
    "\n  fragment ReviewWinnerArtImages on ReviewWinnerArt {\n    _id\n    postId\n    splashArtImagePrompt\n    splashArtImageUrl\n    activeSplashArtCoordinates {\n      ...SplashArtCoordinatesEdit\n    }\n  }\n": typeof types.ReviewWinnerArtImagesDoc,
    "\n  fragment ReviewWinnerEditDisplay on ReviewWinner {\n    _id\n    postId\n    reviewYear\n    curatedOrder\n    reviewRanking\n  }\n": typeof types.ReviewWinnerEditDisplayDoc,
    "\n  fragment ReviewWinnerTopPostsDisplay on ReviewWinner {\n    _id\n    postId\n    post {\n      ...PostsTopItemInfo\n    }\n    reviewYear\n    curatedOrder\n    reviewRanking\n  }\n": typeof types.ReviewWinnerTopPostsDisplayDoc,
    "\n  fragment ReviewWinnerAll on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    postId\n    reviewYear\n    reviewRanking\n    reviewWinnerArt {\n      ...ReviewWinnerArtImages\n    }\n    competitorCount\n  }\n": typeof types.ReviewWinnerAllDoc,
    "\n  fragment ReviewWinnerTopPostsPage on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    reviewYear\n    reviewRanking\n    reviewWinnerArt {\n      splashArtImageUrl\n      activeSplashArtCoordinates {\n        ...SplashArtCoordinatesEdit\n      }\n    }\n  }\n": typeof types.ReviewWinnerTopPostsPageDoc,
    "\n  fragment ReviewWinnerAnnouncement on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    reviewYear\n    reviewRanking\n    competitorCount\n    postId\n    post {\n      _id\n      title\n      slug\n    }\n  }\n": typeof types.ReviewWinnerAnnouncementDoc,
    "\n  fragment RevisionDisplay on Revision {\n    _id\n    version\n    html\n    wordCount\n    htmlHighlight\n    plaintextDescription\n  }\n": typeof types.RevisionDisplayDoc,
    "\n  fragment RevisionHTML on Revision {\n    _id\n    html\n  }\n": typeof types.RevisionHTMLDoc,
    "\n  fragment RevisionEdit on Revision {\n    ...RevisionDisplay\n    updateType\n    editedAt\n    userId\n    commitMessage\n    originalContents {\n      type\n      data\n    }\n    markdown\n    ckEditorMarkup\n  }\n": typeof types.RevisionEditDoc,
    "\n  fragment RevisionMetadata on Revision {\n    _id\n    version\n    editedAt\n    commitMessage\n    userId\n    \n    score\n    baseScore\n    extendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.RevisionMetadataDoc,
    "\n  fragment RevisionMetadataWithChangeMetrics on Revision {\n    ...RevisionMetadata\n    changeMetrics\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": typeof types.RevisionMetadataWithChangeMetricsDoc,
    "\n  fragment RevisionHistoryEntry on Revision {\n    ...RevisionMetadata\n    documentId\n    collectionName\n    changeMetrics\n    legacyData\n    skipAttributions\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": typeof types.RevisionHistoryEntryDoc,
    "\n  fragment RevisionHistorySummaryEdit on Revision {\n    ...RevisionHistoryEntry\n    summary {\n      ...MultiDocumentMinimumInfo\n      parentTag {\n        _id\n        name\n      }\n      parentLens {\n        _id\n        title\n        tabTitle\n        tabSubtitle\n      }\n    }\n  }\n": typeof types.RevisionHistorySummaryEditDoc,
    "\n  fragment RevisionTagFragment on Revision {\n    ...RevisionHistoryEntry\n    tag {\n      ...TagHistoryFragment\n    }\n    lens {\n      ...MultiDocumentParentDocument\n    }\n  }\n": typeof types.RevisionTagFragmentDoc,
    "\n  fragment RecentDiscussionRevisionTagFragment on Revision {\n    ...RevisionHistoryEntry\n    tag {\n      ...TagRecentDiscussion\n    }\n  }\n": typeof types.RecentDiscussionRevisionTagFragmentDoc,
    "\n  fragment WithVoteRevision on Revision {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    voteCount\n  }\n": typeof types.WithVoteRevisionDoc,
    "\n  fragment RSSFeedMinimumInfo on RSSFeed {\n    _id\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    createdAt\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    importAsDraft\n  }\n": typeof types.RSSFeedMinimumInfoDoc,
    "\n  fragment newRSSFeedFragment on RSSFeed {\n    _id\n    userId\n    createdAt\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    status\n    importAsDraft\n  }\n": typeof types.newRSSFeedFragmentDoc,
    "\n  fragment RSSFeedMutationFragment on RSSFeed {\n    _id\n    userId\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    importAsDraft\n  }\n": typeof types.RSSFeedMutationFragmentDoc,
    "\n  fragment SequencesPageTitleFragment on Sequence {\n    _id\n    title\n    canonicalCollectionSlug\n    canonicalCollection {\n      _id\n      title\n    }\n  }\n": typeof types.SequencesPageTitleFragmentDoc,
    "\n  fragment SequencesPageFragment on Sequence {\n    ...SequencesPageTitleFragment\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      ...RevisionDisplay\n    }\n    gridImageId\n    bannerImageId\n    canonicalCollectionSlug\n    draft\n    isDeleted\n    hidden\n    hideFromAuthorPage\n    noindex\n    curatedOrder\n    userProfileOrder\n    af\n    postsCount\n    readPostsCount\n  }\n": typeof types.SequencesPageFragmentDoc,
    "\n  fragment SequenceContinueReadingFragment on Sequence {\n    _id\n    title\n    gridImageId\n    canonicalCollectionSlug\n  }\n": typeof types.SequenceContinueReadingFragmentDoc,
    "\n  fragment SequencesPageWithChaptersFragment on Sequence {\n    ...SequencesPageFragment\n    chapters {\n      ...ChaptersFragment\n    }\n  }\n": typeof types.SequencesPageWithChaptersFragmentDoc,
    "\n  fragment SequencesEdit on Sequence {\n    ...SequencesPageFragment\n    contents { \n      ...RevisionEdit\n    }\n  }\n": typeof types.SequencesEditDoc,
    "\n  fragment SideCommentCacheMinimumInfo on SideCommentCache {\n    _id\n    postId\n    annotatedHtml\n    commentsByBlock\n    version\n    createdAt\n  }\n": typeof types.SideCommentCacheMinimumInfoDoc,
    "\n  fragment SplashArtCoordinates on SplashArtCoordinate {\n    _id\n    reviewWinnerArtId\n    leftXPct\n    leftYPct\n    leftHeightPct\n    leftWidthPct\n    leftFlipped\n    middleXPct\n    middleYPct\n    middleHeightPct\n    middleWidthPct\n    middleFlipped\n    rightXPct\n    rightYPct\n    rightHeightPct\n    rightWidthPct\n    rightFlipped\n  }\n": typeof types.SplashArtCoordinatesDoc,
    "\n  fragment SplashArtCoordinatesEdit on SplashArtCoordinate {\n    ...SplashArtCoordinates\n    createdAt\n  }\n": typeof types.SplashArtCoordinatesEditDoc,
    "\n  fragment SpotlightMinimumInfo on Spotlight {\n    _id\n    documentId\n    documentType\n    spotlightImageId\n    spotlightDarkImageId\n    spotlightSplashImageUrl\n    draft\n    deletedDraft\n    position\n    lastPromotedAt\n    customTitle\n    customSubtitle\n    subtitleUrl\n    headerTitle\n    headerTitleLeftColor\n    headerTitleRightColor\n    duration\n    showAuthor\n    imageFade\n    imageFadeColor\n  }\n": typeof types.SpotlightMinimumInfoDoc,
    "\n  fragment SpotlightReviewWinner on Spotlight {\n    ...SpotlightMinimumInfo\n    description {\n      html\n    }\n    sequenceChapters {\n      ...ChaptersFragment\n    }\n  }\n": typeof types.SpotlightReviewWinnerDoc,
    "\n  fragment SpotlightHeaderEventSubtitle on Spotlight {\n    ...SpotlightMinimumInfo\n    post {\n      _id\n      slug\n    }\n    sequence {\n      _id\n    }\n    tag {\n      _id\n      slug\n    }\n  }\n": typeof types.SpotlightHeaderEventSubtitleDoc,
    "\n  fragment SpotlightDisplay on Spotlight {\n    ...SpotlightMinimumInfo\n    post {\n      _id\n      slug\n      title\n\n      user {\n        ...UsersMinimumInfo\n      }\n      reviews {\n        _id\n      }\n    }\n    sequence {\n      _id\n      title\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n    tag {\n      _id\n      name\n      slug\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n    description {\n      html\n    }\n  }\n": typeof types.SpotlightDisplayDoc,
    "\n  fragment SpotlightEditQueryFragment on Spotlight {\n    ...SpotlightMinimumInfo\n    description {\n      ...RevisionEdit\n    }\n  }\n": typeof types.SpotlightEditQueryFragmentDoc,
    "\n  fragment SubscriptionState on Subscription {\n    _id\n    userId\n    createdAt\n    state\n    documentId\n    collectionName\n    deleted\n    type\n  }\n": typeof types.SubscriptionStateDoc,
    "\n  fragment MembersOfGroupFragment on Subscription {\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": typeof types.MembersOfGroupFragmentDoc,
    "\n  fragment SurveyQuestionMinimumInfo on SurveyQuestion {\n    _id\n    question\n    format\n    order\n  }\n": typeof types.SurveyQuestionMinimumInfoDoc,
    "\n  fragment SurveyResponseMinimumInfo on SurveyResponse {\n    _id\n    surveyId\n    surveyScheduleId\n    userId\n    clientId\n    response\n  }\n": typeof types.SurveyResponseMinimumInfoDoc,
    "\n  fragment SurveyScheduleMinimumInfo on SurveySchedule {\n    _id\n    survey {\n      ...SurveyMinimumInfo\n    }\n  }\n": typeof types.SurveyScheduleMinimumInfoDoc,
    "\n  fragment SurveyScheduleEdit on SurveySchedule {\n    ...SurveyScheduleMinimumInfo\n    surveyId\n    name\n    impressionsLimit\n    maxVisitorPercentage\n    minKarma\n    maxKarma\n    target\n    startDate\n    endDate\n    deactivated\n    createdAt\n  }\n": typeof types.SurveyScheduleEditDoc,
    "\n  fragment SurveyMinimumInfo on Survey {\n    _id\n    name\n    questions {\n      ...SurveyQuestionMinimumInfo\n    }\n    createdAt\n  }\n": typeof types.SurveyMinimumInfoDoc,
    "\n  fragment TagFlagFragment on TagFlag {\n    _id\n    createdAt\n    name\n    slug\n    order\n    deleted\n    contents { \n      html\n      htmlHighlight\n      plaintextDescription\n    }\n  }\n": typeof types.TagFlagFragmentDoc,
    "\n  fragment TagFlagEditFragment on TagFlag {\n    ...TagFlagFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.TagFlagEditFragmentDoc,
    "\n  fragment TagRelBasicInfo on TagRel {\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    tagId\n    postId\n    autoApplied\n  }\n": typeof types.TagRelBasicInfoDoc,
    "\n  fragment TagRelFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    post {\n      ...PostsList\n    }\n    currentUserVote\n    currentUserExtendedVote\n    currentUserCanVote\n  }\n": typeof types.TagRelFragmentDoc,
    "\n  fragment TagRelHistoryFragment on TagRel {\n    ...TagRelBasicInfo\n    createdAt\n    user {\n      ...UsersMinimumInfo\n    }\n    post {\n      ...PostsList\n    }\n  }\n": typeof types.TagRelHistoryFragmentDoc,
    "\n  fragment TagRelCreationFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    post {\n      ...PostsList\n      tagRelevance\n      tagRel(tagId: $tagId) {\n        ...WithVoteTagRel\n      }\n    }\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.TagRelCreationFragmentDoc,
    "\n  fragment TagRelMinimumFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    currentUserVote\n    currentUserExtendedVote\n    currentUserCanVote\n  }\n": typeof types.TagRelMinimumFragmentDoc,
    "\n  fragment WithVoteTagRel on TagRel {\n    __typename\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.WithVoteTagRelDoc,
    "\n  fragment TagBasicInfo on Tag {\n    _id\n    userId\n    name\n    shortName\n    slug\n    core\n    postCount\n    adminOnly\n    canEditUserIds\n    suggestedAsFilter\n    needsReview\n    descriptionTruncationCount\n    createdAt\n    wikiOnly\n    deleted\n    isSubforum\n    noindex\n    isArbitalImport\n    isPlaceholderPage\n\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.TagBasicInfoDoc,
    "\n  fragment TagDetailsFragment on Tag {\n    ...TagBasicInfo\n    subtitle\n    oldSlugs\n    isRead\n    defaultOrder\n    reviewedByUserId\n    wikiGrade\n    subforumModeratorIds\n    subforumModerators {\n      ...UsersMinimumInfo\n    }\n    moderationGuidelines {\n      _id\n      html\n    }\n    bannerImageId\n    squareImageId\n    lesswrongWikiImportSlug\n    lesswrongWikiImportRevision\n    sequence {\n      ...SequencesPageFragment\n    }\n  }\n": typeof types.TagDetailsFragmentDoc,
    "\n  fragment TagFragment on Tag {\n    ...TagDetailsFragment\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      html\n      htmlHighlight\n      plaintextDescription\n      version\n      editedAt\n    }\n    canVoteOnRels\n  }\n": typeof types.TagFragmentDoc,
    "\n  fragment TagHistoryFragment on Tag {\n    ...TagFragment\n    textLastUpdatedAt\n    tableOfContents\n    user {\n      ...UsersMinimumInfo\n    }\n    lensesIncludingDeleted {\n      ...MultiDocumentContentDisplay\n    }\n  }\n": typeof types.TagHistoryFragmentDoc,
    "\n  fragment TagCreationHistoryFragment on Tag {\n    ...TagFragment\n    user {\n      ...UsersMinimumInfo\n    }\n    description {\n      html\n    }\n  }\n": typeof types.TagCreationHistoryFragmentDoc,
    "\n  fragment TagRevisionFragment on Tag {\n    ...TagDetailsFragment\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    isRead\n    description(version: $version) {\n      _id\n      version\n      html\n      htmlHighlight\n      plaintextDescription\n      editedAt\n      \n      user {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": typeof types.TagRevisionFragmentDoc,
    "\n  fragment TagPreviewFragment on Tag {\n    ...TagBasicInfo\n    isRead\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      htmlHighlight\n    }\n    canVoteOnRels\n    isArbitalImport\n  }\n": typeof types.TagPreviewFragmentDoc,
    "\n  fragment TagSectionPreviewFragment on Tag {\n    ...TagBasicInfo\n    isRead\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      htmlHighlightStartingAtHash(hash: $hash)\n    }\n    canVoteOnRels\n  }\n": typeof types.TagSectionPreviewFragmentDoc,
    "\n  fragment TagSubforumFragment on Tag {\n    ...TagPreviewFragment\n    subforumModeratorIds\n    tableOfContents\n    subforumWelcomeText {\n      _id\n      html\n    }\n  }\n": typeof types.TagSubforumFragmentDoc,
    "\n  fragment TagSubtagFragment on Tag {\n    _id\n    subforumModeratorIds\n    subTags {\n      ...TagPreviewFragment\n    }\n  }\n": typeof types.TagSubtagFragmentDoc,
    "\n  fragment TagSubforumSidebarFragment on Tag {\n    ...TagBasicInfo\n  }\n": typeof types.TagSubforumSidebarFragmentDoc,
    "\n  fragment TagDetailedPreviewFragment on Tag {\n    ...TagDetailsFragment\n    description {\n      _id\n      htmlHighlight\n    }\n  }\n": typeof types.TagDetailedPreviewFragmentDoc,
    "\n  fragment TagWithFlagsFragment on Tag {\n    ...TagFragment\n    tagFlagsIds\n    tagFlags {\n      ...TagFlagFragment\n    }\n  }\n": typeof types.TagWithFlagsFragmentDoc,
    "\n  fragment TagWithFlagsAndRevisionFragment on Tag {\n    ...TagRevisionFragment\n    tagFlagsIds\n    tagFlags {\n      ...TagFlagFragment\n    }\n  }\n": typeof types.TagWithFlagsAndRevisionFragmentDoc,
    "\n  fragment ArbitalLinkedPagesFragment on ArbitalLinkedPages {\n    faster {\n      _id\n      name\n      slug\n    }\n    slower {\n      _id\n      name\n      slug\n    }\n    moreTechnical {\n      _id\n      name\n      slug\n    }\n    lessTechnical {\n      _id\n      name\n      slug\n    }\n    requirements {\n      _id\n      name\n      slug\n    }\n    teaches {\n      _id\n      name\n      slug\n    }\n    parents {\n      _id\n      name\n      slug\n    }\n    children {\n      _id\n      name\n      slug\n    }\n  }\n": typeof types.ArbitalLinkedPagesFragmentDoc,
    "\n  fragment TagPageArbitalContentFragment on Tag {\n    lenses {\n      ...MultiDocumentWithContributors\n    }\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n  }\n": typeof types.TagPageArbitalContentFragmentDoc,
    "\n  fragment TagPageFragment on Tag {\n    ...TagWithFlagsFragment\n    tableOfContents\n    postsDefaultSortOrder\n    subforumIntroPost {\n      ...PostsListWithVotes\n    }\n    subforumWelcomeText {\n      _id\n      html\n    }\n    contributors(limit: $contributorsLimit) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    canVoteOnRels\n    forceAllowType3Audio\n    textLastUpdatedAt\n  }\n": typeof types.TagPageFragmentDoc,
    "\n  fragment TagPageWithArbitalContentFragment on Tag {\n    ...TagPageFragment\n    ...TagPageArbitalContentFragment\n  }\n": typeof types.TagPageWithArbitalContentFragmentDoc,
    "\n  fragment AllTagsPageFragment on Tag {\n    ...TagWithFlagsFragment\n    tableOfContents\n  }\n": typeof types.AllTagsPageFragmentDoc,
    "\n  fragment TagPageWithRevisionFragment on Tag {\n    ...TagWithFlagsAndRevisionFragment\n    tableOfContents(version: $version)\n    textLastUpdatedAt\n    postsDefaultSortOrder\n    subforumIntroPost {\n      ...PostsListWithVotes\n    }\n    subforumWelcomeText {\n      _id\n      html\n    }\n    contributors(limit: $contributorsLimit, version: $version) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    canVoteOnRels\n    forceAllowType3Audio\n  }\n": typeof types.TagPageWithRevisionFragmentDoc,
    "\n  fragment TagPageRevisionWithArbitalContentFragment on Tag {\n    ...TagPageWithRevisionFragment\n    ...TagPageArbitalContentFragment\n  }\n": typeof types.TagPageRevisionWithArbitalContentFragmentDoc,
    "\n  fragment TagFullContributorsList on Tag {\n    contributors {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n  }\n": typeof types.TagFullContributorsListDoc,
    "\n  fragment TagEditFragment on Tag {\n    ...TagDetailsFragment\n    isPostType\n    parentTagId\n    parentTag {\n      ...TagBasicInfo\n    }\n    subforumIntroPostId\n    tagFlagsIds\n    postsDefaultSortOrder\n    introSequenceId\n    canVoteOnRels\n    \n    autoTagModel\n    autoTagPrompt\n    \n    description {\n      ...RevisionEdit\n    }\n    subforumWelcomeText {\n      ...RevisionEdit\n    }\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n  }\n": typeof types.TagEditFragmentDoc,
    "\n  fragment TagRecentDiscussion on Tag {\n    ...TagFragment\n    lastVisitedAt\n    recentComments(tagCommentsLimit: $tagCommentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsList\n    }\n  }\n": typeof types.TagRecentDiscussionDoc,
    "\n  fragment SunshineTagFragment on Tag {\n    ...TagFragment\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": typeof types.SunshineTagFragmentDoc,
    "\n  fragment UserOnboardingTag on Tag {\n    _id\n    name\n    slug\n    bannerImageId\n    squareImageId\n  }\n": typeof types.UserOnboardingTagDoc,
    "\n  fragment TagName on Tag {\n    _id\n    name\n    slug\n  }\n": typeof types.TagNameDoc,
    "\n  fragment ExplorePageTagFragment on Tag {\n    ...TagFragment\n    contributors(limit: $contributorsLimit) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    legacyData\n  }\n": typeof types.ExplorePageTagFragmentDoc,
    "\n  fragment ConceptItemFragment on Tag {\n    _id\n    core\n    name\n    slug\n    oldSlugs\n    postCount\n    baseScore\n    description {\n      _id\n      wordCount\n    }\n    wikiOnly\n    isArbitalImport\n    coreTagId\n    maxScore\n    usersWhoLiked {\n      _id\n      displayName\n    }\n  }\n": typeof types.ConceptItemFragmentDoc,
    "\n  fragment TagPageWithArbitalContentAndLensRevisionFragment on Tag {\n    ...TagPageFragment\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    lenses(lensSlug: $lensSlug, version: $version) {\n      ...MultiDocumentWithContributorsRevision\n    }\n  }\n": typeof types.TagPageWithArbitalContentAndLensRevisionFragmentDoc,
    "\n  fragment WithVoteTag on Tag {\n    ...TagBasicInfo\n  }\n": typeof types.WithVoteTagDoc,
    "\n  fragment TypingIndicatorInfo on TypingIndicator {\n    _id\n    userId\n    documentId\n    lastUpdated\n  }\n": typeof types.TypingIndicatorInfoDoc,
    "\n  fragment UserEAGDetailsMinimumInfo on UserEAGDetail {\n    _id\n    userId\n    createdAt\n    lastUpdated\n    careerStage\n    countryOrRegion\n    nearestCity\n    willingnessToRelocate\n    experiencedIn\n    interestedIn\n  }\n": typeof types.UserEAGDetailsMinimumInfoDoc,
    "\n  fragment UserJobAdsMinimumInfo on UserJobAd {\n    _id\n    userId\n    createdAt\n    lastUpdated\n    jobName\n    adState\n    reminderSetAt\n  }\n": typeof types.UserJobAdsMinimumInfoDoc,
    "\n  fragment UserMostValuablePostInfo on UserMostValuablePost {\n    _id\n    userId\n    postId\n    deleted\n  }\n": typeof types.UserMostValuablePostInfoDoc,
    "\n  fragment UserRateLimitDisplay on UserRateLimit {\n    _id\n    user {\n      ...UsersMinimumInfo\n    }\n    userId\n    type\n    actionsPerInterval\n    intervalUnit\n    intervalLength\n    createdAt\n    endedAt\n  }\n": typeof types.UserRateLimitDisplayDoc,
    "\n  fragment UserTagRelDetails on UserTagRel {\n    _id\n    userId\n    tagId\n    subforumShowUnreadInSidebar\n    subforumEmailNotifications\n    subforumHideIntroPost\n  }\n": typeof types.UserTagRelDetailsDoc,
    "\n  fragment UsersMinimumInfo on User {\n    _id\n    slug\n    createdAt\n    username\n    displayName\n    profileImageId\n    karma\n    afKarma\n    deleted\n    isAdmin\n    htmlBio\n    jobTitle\n    organization\n    postCount\n    commentCount\n    sequenceCount\n    afPostCount\n    afCommentCount\n    spamRiskScore\n    tagRevisionCount\n    reviewedByUserId\n  }\n": typeof types.UsersMinimumInfoDoc,
    "\n  fragment UsersProfile on User {\n    ...UsersMinimumInfo\n    fullName\n    previousDisplayName\n    oldSlugs\n    groups\n    jobTitle\n    organization\n    careerStage\n    biography {\n      ...RevisionDisplay\n    }\n    howOthersCanHelpMe {\n      ...RevisionDisplay\n    }\n    howICanHelpOthers {\n      ...RevisionDisplay\n    }\n    profileTagIds\n    organizerOfGroupIds\n    programParticipation\n    website\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    githubProfileURL\n    afSequenceCount\n    afSequenceDraftCount\n    sequenceDraftCount\n    moderationStyle\n    moderationGuidelines {\n      ...RevisionDisplay\n    }\n    bannedUserIds\n    location\n    googleLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    mongoLocation\n    shortformFeedId\n    petrovPressedButtonDate\n    petrovOptOut\n    sortDraftsBy\n    email\n    emails\n    banned\n    noindex\n    paymentEmail\n    paymentInfo\n    goodHeartTokens\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n  }\n": typeof types.UsersProfileDoc,
    "\n  fragment UsersCurrent on User {\n    ...UsersMinimumInfo\n    oldSlugs\n    groups\n    jobTitle\n    organization\n    careerStage\n    profileTagIds\n    organizerOfGroupIds\n    moderationStyle\n    moderationGuidelines {\n      ...RevisionDisplay\n    }\n    bannedUserIds\n    location\n    googleLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    mongoLocation\n    shortformFeedId\n    sortDraftsBy\n    email\n    emails\n    banned\n    paymentEmail\n    paymentInfo\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n\n    usernameUnset\n    taggingDashboardCollapsed\n\n    beta\n    acceptedTos\n    pageUrl\n    isReviewed\n    nullifyVotes\n    hideIntercom\n    hideNavigationSidebar\n    hideCommunitySection\n    hasContinueReading\n    expandedFrontpageSections {\n      community\n      recommendations\n      quickTakes\n      quickTakesCommunity\n      popularComments\n    }\n    hidePostsRecommendations\n    currentFrontpageFilter\n    frontpageSelectedTab\n    frontpageFilterSettings\n    hideFrontpageFilterSettingsDesktop\n    allPostsTimeframe\n    allPostsSorting\n    allPostsFilter\n    allPostsShowLowKarma\n    allPostsIncludeEvents\n    allPostsHideCommunity\n    allPostsOpenSettings\n    draftsListSorting\n    draftsListShowArchived\n    draftsListShowShared\n    lastNotificationsCheck\n    bannedUserIds\n    bannedPersonalUserIds\n    moderationStyle\n    noKibitz\n    showHideKarmaOption\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    commentSorting\n    location\n    googleLocation\n    mongoLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    nearbyEventsNotifications\n    nearbyEventsNotificationsLocation\n    nearbyEventsNotificationsRadius\n    nearbyPeopleNotificationThreshold\n    hideFrontpageMap\n    emailSubscribedToCurated\n    subscribedToDigest\n    subscribedToNewsletter\n    unsubscribeFromAll\n    whenConfirmationEmailSent\n    hideSubscribePoke\n    hideMeetupsPoke\n    hideHomeRHS\n    noCollapseCommentsFrontpage\n    noCollapseCommentsPosts\n    noSingleLineComments\n    showCommunityInRecentDiscussion\n    karmaChangeNotifierSettings\n    karmaChangeLastOpened\n    shortformFeedId\n    viewUnreviewedComments\n    recommendationSettings\n    theme\n\n    hasAnyBookmarks\n\n    hiddenPostsMetadata {\n      postId\n    }\n\n    auto_subscribe_to_my_posts\n    auto_subscribe_to_my_comments\n    autoSubscribeAsOrganizer\n    noExpandUnreadCommentsReview\n    hideFrontpageBookAd\n\n    abTestKey\n    abTestOverrides\n\n    sortDraftsBy\n    reactPaletteStyle\n\n    petrovPressedButtonDate\n    petrovLaunchCodeDate\n    petrovOptOut\n    lastUsedTimezone\n\n    acknowledgedNewUserGuidelines\n    notificationSubforumUnread\n    subforumPreferredLayout\n    \n    hideJobAdUntil\n    criticismTipsDismissed\n    \n    allowDatadogSessionReplay\n    hideFrontpageBook2020Ad\n\n    showDialoguesList\n    showMyDialogues\n    showMatches\n    showRecommendedPartners\n    hideActiveDialogueUsers\n\n    hideSunshineSidebar\n    optedOutOfSurveys\n    postGlossariesPinned\n    generateJargonForDrafts\n    generateJargonForPublishedPosts\n  }\n": typeof types.UsersCurrentDoc,
    "\n  fragment UsersCurrentCommentRateLimit on User {\n    _id\n    rateLimitNextAbleToComment(postId: $postId)\n  }\n": typeof types.UsersCurrentCommentRateLimitDoc,
    "\n  fragment UsersCurrentPostRateLimit on User {\n    _id\n    rateLimitNextAbleToPost(eventForm: $eventForm)\n  }\n": typeof types.UsersCurrentPostRateLimitDoc,
    "\n  fragment UserBookmarkedPosts on User {\n    _id\n    bookmarkedPosts {\n      ...PostsList\n    }\n  }\n": typeof types.UserBookmarkedPostsDoc,
    "\n  fragment UserKarmaChanges on User {\n    _id\n    karmaChanges {\n      totalChange\n      updateFrequency\n      startDate\n      endDate\n      nextBatchDate\n      posts {\n        _id\n        scoreChange\n        postId\n        title\n        slug\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n        collectionName\n      }\n      comments {\n        _id\n        scoreChange\n        commentId\n        description\n        postId\n        postTitle\n        postSlug\n        tagSlug\n        tagName\n        tagCommentType\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n        collectionName\n      }\n      tagRevisions {\n        _id\n        scoreChange\n        tagId\n        tagSlug\n        tagName\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n        collectionName\n      }\n      todaysKarmaChanges {\n        posts {\n          _id\n          scoreChange\n          postId\n          title\n          slug\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n        comments {\n          _id\n          scoreChange\n          commentId\n          description\n          postId\n          postTitle\n          postSlug\n          tagSlug\n          tagName\n          tagCommentType\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n        tagRevisions {\n          _id\n          scoreChange\n          tagId\n          tagSlug\n          tagName\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n      }\n      thisWeeksKarmaChanges {\n        posts {\n          _id\n          scoreChange\n          postId\n          title\n          slug\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n        comments {\n          _id\n          scoreChange\n          commentId\n          description\n          postId\n          postTitle\n          postSlug\n          tagSlug\n          tagName\n          tagCommentType\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n        tagRevisions {\n          _id\n          scoreChange\n          tagId\n          tagSlug\n          tagName\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n      }\n    }\n  }\n": typeof types.UserKarmaChangesDoc,
    "\n  fragment UsersBannedFromUsersModerationLog on User {\n    _id\n    slug\n    displayName\n    bannedUserIds\n    bannedPersonalUserIds\n  }\n": typeof types.UsersBannedFromUsersModerationLogDoc,
    "\n  fragment SunshineUsersList on User {\n    ...UsersMinimumInfo\n    karma\n    htmlBio\n    website\n    createdAt\n    email\n    emails\n    commentCount\n    maxCommentCount\n    postCount\n    maxPostCount\n    voteCount\n    smallUpvoteCount\n    bigUpvoteCount\n    smallDownvoteCount\n    bigDownvoteCount\n    banned\n    reviewedByUserId\n    reviewedAt\n    signUpReCaptchaRating\n    mapLocation\n    needsReview\n    sunshineNotes\n    sunshineFlagged\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n    snoozedUntilContentCount\n    nullifyVotes\n    deleteContent\n    \n    moderatorActions {\n      ...ModeratorActionDisplay\n    }\n    usersContactedBeforeReview\n    associatedClientIds {\n      clientId\n      firstSeenReferrer\n      firstSeenLandingPage\n      userIds\n    }\n    altAccountsDetected\n\n    voteReceivedCount\n    smallUpvoteReceivedCount\n    bigUpvoteReceivedCount\n    smallDownvoteReceivedCount\n    bigDownvoteReceivedCount\n\n    recentKarmaInfo\n    lastNotificationsCheck\n  }\n": typeof types.SunshineUsersListDoc,
    "\n  fragment UserAltAccountsFragment on User {\n    ...SunshineUsersList\n    IPs\n  }\n": typeof types.UserAltAccountsFragmentDoc,
    "\n  fragment UsersMapEntry on User {\n    _id\n    displayName\n    username\n    fullName\n    slug\n    mapLocationLatLng {\n      lat\n      lng\n    }\n    mapLocationSet\n    htmlMapMarkerText\n  }\n": typeof types.UsersMapEntryDoc,
    "\n  fragment UsersEdit on User {\n    ...UsersProfile\n    ...UsersCurrent\n\n    biography {\n      ...RevisionEdit\n    }\n    # Moderation Guidelines editor information\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n\n    # UI Settings\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    hideIntercom\n    commentSorting\n    currentFrontpageFilter\n    noCollapseCommentsPosts\n    noCollapseCommentsFrontpage\n    noSingleLineComments\n    hideCommunitySection\n    showCommunityInRecentDiscussion\n    hidePostsRecommendations\n    beta\n    theme\n\n    # Emails\n    email\n    whenConfirmationEmailSent\n    emailSubscribedToCurated\n    subscribedToDigest\n    subscribedToNewsletter\n    unsubscribeFromAll\n    hasAuth0Id\n\n    # Moderation\n    moderatorAssistance\n    collapseModerationGuidelines\n    bannedUserIds\n    bannedPersonalUserIds\n    noKibitz\n    showHideKarmaOption\n\n    # Ban & Purge\n    nullifyVotes\n    deleteContent\n    banned\n\n    # Name\n    username\n    displayName\n    fullName\n\n    # Location\n    mongoLocation\n    googleLocation\n    location\n    \n    # Map Location (public)\n    mapLocation\n    \n    # Privacy settings\n    hideFromPeopleDirectory\n    allowDatadogSessionReplay\n\n    # Admin & Review\n    reviewedByUserId\n\n    # Alignment Forum\n    reviewForAlignmentForumUserId\n    groups\n    afApplicationText\n    afSubmittedApplication\n\n    # Karma Settings\n    karmaChangeLastOpened\n    karmaChangeNotifierSettings\n\n    notificationShortformContent\n    notificationCommentsOnSubscribedPost\n    notificationRepliesToMyComments\n    notificationRepliesToSubscribedComments\n    notificationSubscribedUserPost\n    notificationSubscribedUserComment\n    notificationSubscribedTagPost\n    notificationSubscribedSequencePost\n    notificationPostsInGroups\n    notificationPrivateMessage\n    notificationSharedWithMe\n    notificationAlignmentSubmissionApproved\n    notificationEventInRadius\n    notificationRSVPs\n    notificationCommentsOnDraft\n    notificationPostsNominatedReview\n    notificationGroupAdministration\n    notificationSubforumUnread\n    notificationNewMention\n    notificationNewDialogueChecks\n    notificationYourTurnMatchForm\n    notificationDialogueMessages\n    notificationPublishedDialogueMessages\n\n    hideFrontpageMap\n    hideTaggingProgressBar\n    hideFrontpageBookAd\n    hideFrontpageBook2020Ad\n\n    deleted\n    permanentDeletionRequestedAt\n\n    twitterProfileURLAdmin\n  }\n": typeof types.UsersEditDoc,
    "\n  fragment UsersWithReviewInfo on User {\n    ...UsersMinimumInfo\n    reviewVoteCount\n    email\n  }\n": typeof types.UsersWithReviewInfoDoc,
    "\n  fragment UsersProfileEdit on User {\n    _id\n    slug\n    displayName\n    jobTitle\n    organization\n    careerStage\n    profileImageId\n    biography {\n      ...RevisionEdit\n    }\n    howOthersCanHelpMe {\n      ...RevisionEdit\n    }\n    howICanHelpOthers {\n      ...RevisionEdit\n    }\n    profileTagIds\n    organizerOfGroupIds\n    organizerOfGroups {\n      ...localGroupsBase\n    }\n    programParticipation\n    mapLocation\n    website\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    githubProfileURL\n  }\n": typeof types.UsersProfileEditDoc,
    "\n  fragment UsersCrosspostInfo on User {\n    _id\n    username\n    slug\n    fmCrosspostUserId\n  }\n": typeof types.UsersCrosspostInfoDoc,
    "\n  fragment UsersOptedInToDialogueFacilitation on User {\n    _id\n    displayName\n  }\n": typeof types.UsersOptedInToDialogueFacilitationDoc,
    "\n  fragment UserOnboardingAuthor on User {\n    _id\n    displayName\n    profileImageId\n    karma\n    jobTitle\n    organization\n  }\n": typeof types.UserOnboardingAuthorDoc,
    "\n  fragment UsersSocialMediaInfo on User {\n    ...UsersProfile\n    twitterProfileURLAdmin\n  }\n": typeof types.UsersSocialMediaInfoDoc,
    "\n  fragment SuggestAlignmentUser on User {\n    ...UsersMinimumInfo\n    afKarma\n    afPostCount\n    afCommentCount\n    reviewForAlignmentForumUserId\n    groups\n    afApplicationText\n    afSubmittedApplication\n  }\n": typeof types.SuggestAlignmentUserDoc,
    "\n  fragment TagRelVotes on Vote {\n    _id\n    userId\n    voteType\n    power\n    documentId\n    votedAt\n    isUnvote\n    tagRel {\n      ...WithVoteTagRel\n    }\n  }\n": typeof types.TagRelVotesDoc,
    "\n  fragment TagVotingActivity on Vote {\n    ...TagRelVotes\n    tagRel {\n      ...TagRelFragment\n    }\n  }\n": typeof types.TagVotingActivityDoc,
    "\n  fragment UserVotes on Vote {\n    _id\n    userId\n    voteType\n    power\n    cancelled\n    documentId\n    votedAt\n    isUnvote\n    collectionName\n  }\n": typeof types.UserVotesDoc,
    "\n  fragment UserVotesWithDocument on Vote {\n    ...UserVotes\n    comment {\n      ...CommentsListWithParentMetadata\n    }\n    post {\n      ...PostsListWithVotes\n    }\n  }\n": typeof types.UserVotesWithDocumentDoc,
    "\n    query getCurrentUser {\n      currentUser {\n        ...UsersCurrent\n      }\n    }\n  ": typeof types.getCurrentUserDocument,
    "\n  mutation createLWEventwithNewEvents($data: CreateLWEventDataInput!) {\n    createLWEvent(data: $data) {\n      data {\n        ...newEventFragment\n      }\n    }\n  }\n": typeof types.createLWEventwithNewEventsDocument,
    "\n  query multiTagfilterSettingsQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagBasicInfo\n      }\n      totalCount\n    }\n  }\n": typeof types.multiTagfilterSettingsQueryDocument,
    "\n  fragment AdvisorRequestsDefaultFragment on AdvisorRequest {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    interestedInMetaculus\n    jobAds\n  }\n": typeof types.AdvisorRequestsDefaultFragmentDoc,
    "\n  fragment ArbitalCachesDefaultFragment on ArbitalCaches {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": typeof types.ArbitalCachesDefaultFragmentDoc,
    "\n  fragment ArbitalTagContentRelsDefaultFragment on ArbitalTagContentRel {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    parentDocumentId\n    childDocumentId\n    parentCollectionName\n    childCollectionName\n    type\n    level\n    isStrong\n  }\n": typeof types.ArbitalTagContentRelsDefaultFragmentDoc,
    "\n  fragment AutomatedContentEvaluationsDefaultFragment on AutomatedContentEvaluation {\n    _id\n    createdAt\n    revisionId\n    score\n    aiChoice\n    aiReasoning\n    aiCoT\n  }\n": typeof types.AutomatedContentEvaluationsDefaultFragmentDoc,
    "\n  fragment BansDefaultFragment on Ban {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    expirationDate\n    userId\n    ip\n    reason\n    comment\n    properties\n  }\n": typeof types.BansDefaultFragmentDoc,
    "\n  fragment BookmarksDefaultFragment on Bookmark {\n    _id\n    createdAt\n    documentId\n    collectionName\n    userId\n    lastUpdated\n    active\n  }\n": typeof types.BookmarksDefaultFragmentDoc,
    "\n  fragment BooksDefaultFragment on Book {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    postedAt\n    title\n    subtitle\n    tocTitle\n    collectionId\n    number\n    postIds\n    sequenceIds\n    displaySequencesAsGrid\n    hideProgressBar\n    showChapters\n  }\n": typeof types.BooksDefaultFragmentDoc,
    "\n  fragment ChaptersDefaultFragment on Chapter {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    title\n    subtitle\n    number\n    sequenceId\n    postIds\n  }\n": typeof types.ChaptersDefaultFragmentDoc,
    "\n  fragment CkEditorUserSessionsDefaultFragment on CkEditorUserSession {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    documentId\n    userId\n    endedAt\n    endedBy\n  }\n": typeof types.CkEditorUserSessionsDefaultFragmentDoc,
    "\n  fragment ClientIdsDefaultFragment on ClientId {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    clientId\n    firstSeenReferrer\n    firstSeenLandingPage\n    userIds\n    invalidated\n    lastSeenAt\n    timesSeen\n  }\n": typeof types.ClientIdsDefaultFragmentDoc,
    "\n  fragment CollectionsDefaultFragment on Collection {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    userId\n    title\n    slug\n    gridImageId\n    firstPageLink\n    hideStartReadingButton\n    noindex\n  }\n": typeof types.CollectionsDefaultFragmentDoc,
    "\n  fragment CommentModeratorActionsDefaultFragment on CommentModeratorAction {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    commentId\n    type\n    endedAt\n  }\n": typeof types.CommentModeratorActionsDefaultFragmentDoc,
    "\n  fragment CommentsDefaultFragment on Comment {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    pingbacks\n    parentCommentId\n    topLevelCommentId\n    postedAt\n    lastEditedAt\n    author\n    postId\n    tagId\n    forumEventId\n    forumEventMetadata\n    tagCommentType\n    subforumStickyPriority\n    userId\n    userIP\n    userAgent\n    referrer\n    authorIsUnreviewed\n    answer\n    parentAnswerId\n    directChildrenCount\n    descendentCount\n    shortform\n    shortformFrontpage\n    nominatedForReview\n    reviewingForReview\n    lastSubthreadActivity\n    postVersion\n    promoted\n    promotedByUserId\n    promotedAt\n    hideKarma\n    legacy\n    legacyId\n    legacyPoll\n    legacyParentId\n    draft\n    retracted\n    deleted\n    deletedPublic\n    deletedReason\n    deletedDate\n    deletedByUserId\n    spam\n    repliesBlockedUntil\n    needsReview\n    reviewedByUserId\n    hideAuthor\n    moderatorHat\n    hideModeratorHat\n    isPinnedOnProfile\n    title\n    relevantTagIds\n    debateResponse\n    rejected\n    modGPTAnalysis\n    modGPTRecommendation\n    rejectedReason\n    rejectedByUserId\n    af\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    afDate\n    moveToAlignmentUserId\n    agentFoundationsId\n    originalDialogueId\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n": typeof types.CommentsDefaultFragmentDoc,
    "\n  fragment ConversationsDefaultFragment on Conversation {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    title\n    participantIds\n    latestActivity\n    af\n    messageCount\n    moderator\n    archivedByIds\n  }\n": typeof types.ConversationsDefaultFragmentDoc,
    "\n  fragment CronHistoriesDefaultFragment on CronHistory {\n    _id\n    intendedAt\n    name\n    startedAt\n    finishedAt\n    result\n  }\n": typeof types.CronHistoriesDefaultFragmentDoc,
    "\n  fragment CurationEmailsDefaultFragment on CurationEmail {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    postId\n  }\n": typeof types.CurationEmailsDefaultFragmentDoc,
    "\n  fragment CurationNoticesDefaultFragment on CurationNotice {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    userId\n    commentId\n    postId\n    deleted\n  }\n": typeof types.CurationNoticesDefaultFragmentDoc,
    "\n  fragment DatabaseMetadataDefaultFragment on DatabaseMetadata {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": typeof types.DatabaseMetadataDefaultFragmentDoc,
    "\n  fragment DebouncerEventsDefaultFragment on DebouncerEvents {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": typeof types.DebouncerEventsDefaultFragmentDoc,
    "\n  fragment DialogueChecksDefaultFragment on DialogueCheck {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    targetUserId\n    checked\n    checkedAt\n    hideInRecommendations\n  }\n": typeof types.DialogueChecksDefaultFragmentDoc,
    "\n  fragment DialogueMatchPreferencesDefaultFragment on DialogueMatchPreference {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    dialogueCheckId\n    topicPreferences\n    topicNotes\n    syncPreference\n    asyncPreference\n    formatNotes\n    calendlyLink\n    generatedDialogueId\n    deleted\n  }\n": typeof types.DialogueMatchPreferencesDefaultFragmentDoc,
    "\n  fragment DigestPostsDefaultFragment on DigestPost {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    digestId\n    postId\n    emailDigestStatus\n    onsiteDigestStatus\n  }\n": typeof types.DigestPostsDefaultFragmentDoc,
    "\n  fragment DigestsDefaultFragment on Digest {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    num\n    startDate\n    endDate\n    publishedDate\n    onsiteImageId\n    onsitePrimaryColor\n  }\n": typeof types.DigestsDefaultFragmentDoc,
    "\n  fragment ElectionCandidatesDefaultFragment on ElectionCandidate {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    electionName\n    name\n    logoSrc\n    href\n    fundraiserLink\n    gwwcLink\n    gwwcId\n    description\n    userId\n    postCount\n    tagId\n    isElectionFundraiser\n    amountRaised\n    targetAmount\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n": typeof types.ElectionCandidatesDefaultFragmentDoc,
    "\n  fragment ElectionVotesDefaultFragment on ElectionVote {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    electionName\n    userId\n    compareState\n    vote\n    submittedAt\n    submissionComments\n    userExplanation\n    userOtherComments\n  }\n": typeof types.ElectionVotesDefaultFragmentDoc,
    "\n  fragment ElicitQuestionPredictionsDefaultFragment on ElicitQuestionPrediction {\n    _id\n    prediction\n    createdAt\n    notes\n    userId\n    sourceUrl\n    sourceId\n    binaryQuestionId\n    isDeleted\n  }\n": typeof types.ElicitQuestionPredictionsDefaultFragmentDoc,
    "\n  fragment ElicitQuestionsDefaultFragment on ElicitQuestion {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    title\n    notes\n    resolution\n    resolvesBy\n  }\n": typeof types.ElicitQuestionsDefaultFragmentDoc,
    "\n  fragment EmailTokensDefaultFragment on EmailTokens {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": typeof types.EmailTokensDefaultFragmentDoc,
    "\n  fragment FeaturedResourcesDefaultFragment on FeaturedResource {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    title\n    body\n    ctaText\n    ctaUrl\n    expiresAt\n  }\n": typeof types.FeaturedResourcesDefaultFragmentDoc,
    "\n  fragment FieldChangesDefaultFragment on FieldChange {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    changeGroup\n    documentId\n    fieldName\n    oldValue\n    newValue\n  }\n": typeof types.FieldChangesDefaultFragmentDoc,
    "\n  fragment ForumEventsDefaultFragment on ForumEvent {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    frontpageDescription_latest\n    frontpageDescriptionMobile_latest\n    postPageDescription_latest\n    title\n    startDate\n    endDate\n    darkColor\n    lightColor\n    bannerTextColor\n    contrastColor\n    tagId\n    postId\n    commentId\n    bannerImageId\n    includesPoll\n    isGlobal\n    eventFormat\n    pollQuestion_latest\n    pollAgreeWording\n    pollDisagreeWording\n    maxStickersPerUser\n    customComponent\n    commentPrompt\n    publicData\n  }\n": typeof types.ForumEventsDefaultFragmentDoc,
    "\n  fragment GardenCodesDefaultFragment on GardenCode {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    pingbacks\n    slug\n    code\n    title\n    userId\n    startTime\n    endTime\n    fbLink\n    type\n    hidden\n    deleted\n    afOnly\n  }\n": typeof types.GardenCodesDefaultFragmentDoc,
    "\n  fragment GoogleServiceAccountSessionsDefaultFragment on GoogleServiceAccountSession {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    email\n    estimatedExpiry\n    active\n    revoked\n  }\n": typeof types.GoogleServiceAccountSessionsDefaultFragmentDoc,
    "\n  fragment ImagesDefaultFragment on Images {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": typeof types.ImagesDefaultFragmentDoc,
    "\n  fragment JargonTermsDefaultFragment on JargonTerm {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    postId\n    term\n    approved\n    deleted\n    altTerms\n  }\n": typeof types.JargonTermsDefaultFragmentDoc,
    "\n  fragment LWEventsDefaultFragment on LWEvent {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    name\n    documentId\n    important\n    properties\n    intercom\n  }\n": typeof types.LWEventsDefaultFragmentDoc,
    "\n  fragment LegacyDataDefaultFragment on LegacyData {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": typeof types.LegacyDataDefaultFragmentDoc,
    "\n  fragment LlmConversationsDefaultFragment on LlmConversation {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    title\n    model\n    systemPrompt\n    deleted\n  }\n": typeof types.LlmConversationsDefaultFragmentDoc,
    "\n  fragment LlmMessagesDefaultFragment on LlmMessage {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    conversationId\n    role\n    content\n  }\n": typeof types.LlmMessagesDefaultFragmentDoc,
    "\n  fragment LocalgroupsDefaultFragment on Localgroup {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    name\n    nameInAnotherLanguage\n    organizerIds\n    lastActivity\n    types\n    categories\n    isOnline\n    mongoLocation\n    googleLocation\n    location\n    contactInfo\n    facebookLink\n    facebookPageLink\n    meetupLink\n    slackLink\n    website\n    bannerImageId\n    inactive\n    deleted\n  }\n": typeof types.LocalgroupsDefaultFragmentDoc,
    "\n  fragment ManifoldProbabilitiesCachesDefaultFragment on ManifoldProbabilitiesCache {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    marketId\n    probability\n    isResolved\n    year\n    lastUpdated\n    url\n  }\n": typeof types.ManifoldProbabilitiesCachesDefaultFragmentDoc,
    "\n  fragment MessagesDefaultFragment on Message {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    userId\n    conversationId\n    noEmail\n  }\n": typeof types.MessagesDefaultFragmentDoc,
    "\n  fragment MigrationsDefaultFragment on Migration {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": typeof types.MigrationsDefaultFragmentDoc,
    "\n  fragment ModerationTemplatesDefaultFragment on ModerationTemplate {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    name\n    collectionName\n    order\n    deleted\n  }\n": typeof types.ModerationTemplatesDefaultFragmentDoc,
    "\n  fragment ModeratorActionsDefaultFragment on ModeratorAction {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    type\n    endedAt\n  }\n": typeof types.ModeratorActionsDefaultFragmentDoc,
    "\n  fragment MultiDocumentsDefaultFragment on MultiDocument {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    pingbacks\n    slug\n    oldSlugs\n    title\n    preview\n    tabTitle\n    tabSubtitle\n    userId\n    parentDocumentId\n    collectionName\n    fieldName\n    index\n    contributionStats\n    htmlWithContributorAnnotations\n    deleted\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n": typeof types.MultiDocumentsDefaultFragmentDoc,
    "\n  fragment NotificationsDefaultFragment on Notification {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    documentId\n    documentType\n    extraData\n    link\n    title\n    message\n    type\n    deleted\n    viewed\n    emailed\n    waitingForBatch\n  }\n": typeof types.NotificationsDefaultFragmentDoc,
    "\n  fragment PageCacheDefaultFragment on PageCacheEntry {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": typeof types.PageCacheDefaultFragmentDoc,
    "\n  fragment PetrovDayActionsDefaultFragment on PetrovDayAction {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    actionType\n    data\n    userId\n  }\n": typeof types.PetrovDayActionsDefaultFragmentDoc,
    "\n  fragment PetrovDayLaunchsDefaultFragment on PetrovDayLaunch {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    launchCode\n    hashedLaunchCode\n    userId\n  }\n": typeof types.PetrovDayLaunchsDefaultFragmentDoc,
    "\n  fragment PodcastEpisodesDefaultFragment on PodcastEpisode {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    podcastId\n    title\n    episodeLink\n    externalEpisodeId\n  }\n": typeof types.PodcastEpisodesDefaultFragmentDoc,
    "\n  fragment PodcastsDefaultFragment on Podcast {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    title\n    applePodcastLink\n    spotifyPodcastLink\n  }\n": typeof types.PodcastsDefaultFragmentDoc,
    "\n  fragment PostRecommendationsDefaultFragment on PostRecommendation {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    clientId\n    postId\n    strategyName\n    strategySettings\n    recommendationCount\n    lastRecommendedAt\n    clickedAt\n  }\n": typeof types.PostRecommendationsDefaultFragmentDoc,
    "\n  fragment PostRelationsDefaultFragment on PostRelation {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    type\n    sourcePostId\n    targetPostId\n    order\n  }\n": typeof types.PostRelationsDefaultFragmentDoc,
    "\n  fragment PostsDefaultFragment on Post {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    pingbacks\n    moderationGuidelines_latest\n    customHighlight_latest\n    slug\n    postedAt\n    modifiedAt\n    url\n    postCategory\n    title\n    viewCount\n    lastCommentedAt\n    clickCount\n    deletedDraft\n    status\n    isFuture\n    sticky\n    stickyPriority\n    userIP\n    userAgent\n    referrer\n    author\n    userId\n    question\n    authorIsUnreviewed\n    readTimeMinutesOverride\n    submitToFrontpage\n    hiddenRelatedQuestion\n    originalPostRelationSourceId\n    shortform\n    canonicalSource\n    nominationCount2018\n    nominationCount2019\n    reviewCount2018\n    reviewCount2019\n    reviewCount\n    reviewVoteCount\n    positiveReviewVoteCount\n    manifoldReviewMarketId\n    reviewVoteScoreAF\n    reviewVotesAF\n    reviewVoteScoreHighKarma\n    reviewVotesHighKarma\n    reviewVoteScoreAllKarma\n    reviewVotesAllKarma\n    finalReviewVoteScoreHighKarma\n    finalReviewVotesHighKarma\n    finalReviewVoteScoreAllKarma\n    finalReviewVotesAllKarma\n    finalReviewVoteScoreAF\n    finalReviewVotesAF\n    lastCommentPromotedAt\n    tagRelevance\n    noIndex\n    rsvps\n    activateRSVPs\n    nextDayReminderSent\n    onlyVisibleToLoggedIn\n    onlyVisibleToEstablishedAccounts\n    hideFromRecentDiscussions\n    votingSystem\n    podcastEpisodeId\n    forceAllowType3Audio\n    legacy\n    legacyId\n    legacySpam\n    feedId\n    feedLink\n    curatedDate\n    metaDate\n    suggestForCuratedUserIds\n    frontpageDate\n    autoFrontpage\n    collectionTitle\n    hasCoauthorPermission\n    socialPreviewImageId\n    socialPreviewImageAutoUrl\n    canonicalSequenceId\n    canonicalCollectionSlug\n    canonicalBookId\n    canonicalNextPostSlug\n    canonicalPrevPostSlug\n    unlisted\n    disableRecommendation\n    defaultRecommendation\n    hideFromPopularComments\n    draft\n    wasEverUndrafted\n    meta\n    hideFrontpageComments\n    maxBaseScore\n    scoreExceeded2Date\n    scoreExceeded30Date\n    scoreExceeded45Date\n    scoreExceeded75Date\n    scoreExceeded125Date\n    scoreExceeded200Date\n    bannedUserIds\n    commentsLocked\n    commentsLockedToAccountsCreatedAfter\n    organizerIds\n    groupId\n    eventType\n    isEvent\n    reviewedByUserId\n    reviewForCuratedUserId\n    startTime\n    localStartTime\n    endTime\n    localEndTime\n    eventRegistrationLink\n    joinEventLink\n    onlineEvent\n    globalEvent\n    mongoLocation\n    googleLocation\n    location\n    contactInfo\n    facebookLink\n    meetupLink\n    website\n    eventImageId\n    types\n    metaSticky\n    sharingSettings\n    shareWithUsers\n    linkSharingKey\n    linkSharingKeyUsedBy\n    commentSortOrder\n    hideAuthor\n    sideCommentVisibility\n    disableSidenotes\n    moderationStyle\n    ignoreRateLimits\n    hideCommentKarma\n    commentCount\n    topLevelCommentCount\n    debate\n    collabEditorDialogue\n    mostRecentPublishedDialogueResponseDate\n    rejected\n    rejectedReason\n    rejectedByUserId\n    subforumTagId\n    af\n    afDate\n    afCommentCount\n    afLastCommentedAt\n    afSticky\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    agentFoundationsId\n    swrCachingEnabled\n    generateDraftJargon\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n": typeof types.PostsDefaultFragmentDoc,
    "\n  fragment RSSFeedsDefaultFragment on RSSFeed {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    status\n    rawFeed\n    setCanonicalUrl\n    importAsDraft\n  }\n": typeof types.RSSFeedsDefaultFragmentDoc,
    "\n  fragment ReadStatusesDefaultFragment on ReadStatus {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": typeof types.ReadStatusesDefaultFragmentDoc,
    "\n  fragment RecommendationsCachesDefaultFragment on RecommendationsCache {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    postId\n    source\n    scenario\n    attributionId\n    ttlMs\n  }\n": typeof types.RecommendationsCachesDefaultFragmentDoc,
    "\n  fragment ReportsDefaultFragment on Report {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    reportedUserId\n    commentId\n    postId\n    link\n    claimedUserId\n    description\n    closedAt\n    markedAsSpam\n    reportedAsSpam\n  }\n": typeof types.ReportsDefaultFragmentDoc,
    "\n  fragment ReviewVotesDefaultFragment on ReviewVote {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    postId\n    qualitativeScore\n    quadraticScore\n    comment\n    year\n    dummy\n    reactions\n  }\n": typeof types.ReviewVotesDefaultFragmentDoc,
    "\n  fragment ReviewWinnerArtsDefaultFragment on ReviewWinnerArt {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    postId\n    splashArtImagePrompt\n    splashArtImageUrl\n  }\n": typeof types.ReviewWinnerArtsDefaultFragmentDoc,
    "\n  fragment ReviewWinnersDefaultFragment on ReviewWinner {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    postId\n    reviewYear\n    category\n    curatedOrder\n    reviewRanking\n    isAI\n  }\n": typeof types.ReviewWinnersDefaultFragmentDoc,
    "\n  fragment RevisionsDefaultFragment on Revision {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    documentId\n    collectionName\n    fieldName\n    editedAt\n    updateType\n    version\n    commitMessage\n    userId\n    draft\n    html\n    wordCount\n    changeMetrics\n    googleDocMetadata\n    skipAttributions\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n": typeof types.RevisionsDefaultFragmentDoc,
    "\n  fragment SequencesDefaultFragment on Sequence {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    lastUpdated\n    userId\n    title\n    bannerImageId\n    gridImageId\n    hideFromAuthorPage\n    draft\n    isDeleted\n    curatedOrder\n    userProfileOrder\n    canonicalCollectionSlug\n    hidden\n    noindex\n    af\n  }\n": typeof types.SequencesDefaultFragmentDoc,
    "\n  fragment SessionsDefaultFragment on Session {\n    _id\n    session\n    expires\n    lastModified\n  }\n": typeof types.SessionsDefaultFragmentDoc,
    "\n  fragment SideCommentCachesDefaultFragment on SideCommentCache {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": typeof types.SideCommentCachesDefaultFragmentDoc,
    "\n  fragment SplashArtCoordinatesDefaultFragment on SplashArtCoordinate {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    reviewWinnerArtId\n    leftXPct\n    leftYPct\n    leftHeightPct\n    leftWidthPct\n    leftFlipped\n    middleXPct\n    middleYPct\n    middleHeightPct\n    middleWidthPct\n    middleFlipped\n    rightXPct\n    rightYPct\n    rightHeightPct\n    rightWidthPct\n    rightFlipped\n  }\n": typeof types.SplashArtCoordinatesDefaultFragmentDoc,
    "\n  fragment SpotlightsDefaultFragment on Spotlight {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    description_latest\n    documentId\n    documentType\n    position\n    duration\n    customTitle\n    customSubtitle\n    subtitleUrl\n    headerTitle\n    headerTitleLeftColor\n    headerTitleRightColor\n    lastPromotedAt\n    spotlightSplashImageUrl\n    draft\n    deletedDraft\n    showAuthor\n    imageFade\n    imageFadeColor\n    spotlightImageId\n    spotlightDarkImageId\n  }\n": typeof types.SpotlightsDefaultFragmentDoc,
    "\n  fragment SubscriptionsDefaultFragment on Subscription {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    state\n    documentId\n    collectionName\n    deleted\n    type\n  }\n": typeof types.SubscriptionsDefaultFragmentDoc,
    "\n  fragment SurveyQuestionsDefaultFragment on SurveyQuestion {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    surveyId\n    question\n    format\n    order\n  }\n": typeof types.SurveyQuestionsDefaultFragmentDoc,
    "\n  fragment SurveyResponsesDefaultFragment on SurveyResponse {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    surveyId\n    surveyScheduleId\n    userId\n    clientId\n    response\n  }\n": typeof types.SurveyResponsesDefaultFragmentDoc,
    "\n  fragment SurveySchedulesDefaultFragment on SurveySchedule {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    surveyId\n    name\n    impressionsLimit\n    maxVisitorPercentage\n    minKarma\n    maxKarma\n    target\n    startDate\n    endDate\n    deactivated\n    clientIds\n  }\n": typeof types.SurveySchedulesDefaultFragmentDoc,
    "\n  fragment SurveysDefaultFragment on Survey {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    name\n  }\n": typeof types.SurveysDefaultFragmentDoc,
    "\n  fragment TagFlagsDefaultFragment on TagFlag {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    slug\n    name\n    deleted\n    order\n  }\n": typeof types.TagFlagsDefaultFragmentDoc,
    "\n  fragment TagRelsDefaultFragment on TagRel {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    tagId\n    postId\n    deleted\n    userId\n    backfilled\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n": typeof types.TagRelsDefaultFragmentDoc,
    "\n  fragment TagsDefaultFragment on Tag {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    description_latest\n    pingbacks\n    subforumWelcomeText_latest\n    moderationGuidelines_latest\n    slug\n    oldSlugs\n    name\n    shortName\n    subtitle\n    core\n    isPostType\n    suggestedAsFilter\n    defaultOrder\n    descriptionTruncationCount\n    postCount\n    userId\n    adminOnly\n    canEditUserIds\n    charsAdded\n    charsRemoved\n    deleted\n    lastCommentedAt\n    lastSubforumCommentAt\n    needsReview\n    reviewedByUserId\n    wikiGrade\n    wikiOnly\n    bannerImageId\n    squareImageId\n    tagFlagsIds\n    lesswrongWikiImportRevision\n    lesswrongWikiImportSlug\n    lesswrongWikiImportCompleted\n    htmlWithContributorAnnotations\n    contributionStats\n    introSequenceId\n    postsDefaultSortOrder\n    canVoteOnRels\n    isSubforum\n    subforumModeratorIds\n    subforumIntroPostId\n    parentTagId\n    subTagIds\n    autoTagModel\n    autoTagPrompt\n    noindex\n    isPlaceholderPage\n    coreTagId\n    forceAllowType3Audio\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n": typeof types.TagsDefaultFragmentDoc,
    "\n  fragment TweetsDefaultFragment on Tweet {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": typeof types.TweetsDefaultFragmentDoc,
    "\n  fragment TypingIndicatorsDefaultFragment on TypingIndicator {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    documentId\n    lastUpdated\n  }\n": typeof types.TypingIndicatorsDefaultFragmentDoc,
    "\n  fragment UltraFeedEventsDefaultFragment on UltraFeedEvent {\n    _id\n    createdAt\n    documentId\n    collectionName\n    eventType\n    userId\n    event\n    feedItemId\n  }\n": typeof types.UltraFeedEventsDefaultFragmentDoc,
    "\n  fragment UserActivitiesDefaultFragment on UserActivity {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": typeof types.UserActivitiesDefaultFragmentDoc,
    "\n  fragment UserEAGDetailsDefaultFragment on UserEAGDetail {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    careerStage\n    countryOrRegion\n    nearestCity\n    willingnessToRelocate\n    experiencedIn\n    interestedIn\n    lastUpdated\n  }\n": typeof types.UserEAGDetailsDefaultFragmentDoc,
    "\n  fragment UserJobAdsDefaultFragment on UserJobAd {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    jobName\n    adState\n    reminderSetAt\n    lastUpdated\n  }\n": typeof types.UserJobAdsDefaultFragmentDoc,
    "\n  fragment UserMostValuablePostsDefaultFragment on UserMostValuablePost {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    postId\n    deleted\n  }\n": typeof types.UserMostValuablePostsDefaultFragmentDoc,
    "\n  fragment UserRateLimitsDefaultFragment on UserRateLimit {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    type\n    intervalUnit\n    intervalLength\n    actionsPerInterval\n    endedAt\n  }\n": typeof types.UserRateLimitsDefaultFragmentDoc,
    "\n  fragment UserTagRelsDefaultFragment on UserTagRel {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    tagId\n    userId\n    subforumShowUnreadInSidebar\n    subforumEmailNotifications\n    subforumHideIntroPost\n  }\n": typeof types.UserTagRelsDefaultFragmentDoc,
    "\n  fragment UsersDefaultFragment on User {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    moderationGuidelines_latest\n    howOthersCanHelpMe_latest\n    howICanHelpOthers_latest\n    slug\n    oldSlugs\n    biography_latest\n    username\n    emails\n    isAdmin\n    profile\n    services\n    displayName\n    previousDisplayName\n    email\n    noindex\n    groups\n    lwWikiImport\n    theme\n    lastUsedTimezone\n    whenConfirmationEmailSent\n    legacy\n    commentSorting\n    sortDraftsBy\n    reactPaletteStyle\n    noKibitz\n    showHideKarmaOption\n    showPostAuthorCard\n    hideIntercom\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    noSingleLineComments\n    noCollapseCommentsPosts\n    noCollapseCommentsFrontpage\n    hideCommunitySection\n    showCommunityInRecentDiscussion\n    hidePostsRecommendations\n    petrovOptOut\n    optedOutOfSurveys\n    postGlossariesPinned\n    generateJargonForDrafts\n    generateJargonForPublishedPosts\n    acceptedTos\n    hideNavigationSidebar\n    currentFrontpageFilter\n    frontpageSelectedTab\n    frontpageFilterSettings\n    hideFrontpageFilterSettingsDesktop\n    allPostsTimeframe\n    allPostsFilter\n    allPostsSorting\n    allPostsShowLowKarma\n    allPostsIncludeEvents\n    allPostsHideCommunity\n    allPostsOpenSettings\n    draftsListSorting\n    draftsListShowArchived\n    draftsListShowShared\n    lastNotificationsCheck\n    karma\n    goodHeartTokens\n    moderationStyle\n    moderatorAssistance\n    collapseModerationGuidelines\n    bannedUserIds\n    bannedPersonalUserIds\n    bookmarksCount\n    legacyId\n    deleted\n    permanentDeletionRequestedAt\n    voteBanned\n    nullifyVotes\n    deleteContent\n    banned\n    auto_subscribe_to_my_posts\n    auto_subscribe_to_my_comments\n    autoSubscribeAsOrganizer\n    notificationCommentsOnSubscribedPost\n    notificationShortformContent\n    notificationRepliesToMyComments\n    notificationRepliesToSubscribedComments\n    notificationSubscribedUserPost\n    notificationSubscribedUserComment\n    notificationPostsInGroups\n    notificationSubscribedTagPost\n    notificationSubscribedSequencePost\n    notificationPrivateMessage\n    notificationSharedWithMe\n    notificationAlignmentSubmissionApproved\n    notificationEventInRadius\n    notificationKarmaPowersGained\n    notificationRSVPs\n    notificationGroupAdministration\n    notificationCommentsOnDraft\n    notificationPostsNominatedReview\n    notificationSubforumUnread\n    notificationNewMention\n    notificationDialogueMessages\n    notificationPublishedDialogueMessages\n    notificationAddedAsCoauthor\n    notificationDebateCommentsOnSubscribedPost\n    notificationDebateReplies\n    notificationDialogueMatch\n    notificationNewDialogueChecks\n    notificationYourTurnMatchForm\n    hideDialogueFacilitation\n    revealChecksToAdmins\n    optedInToDialogueFacilitation\n    showDialoguesList\n    showMyDialogues\n    showMatches\n    showRecommendedPartners\n    hideActiveDialogueUsers\n    karmaChangeNotifierSettings\n    karmaChangeLastOpened\n    karmaChangeBatchStart\n    emailSubscribedToCurated\n    subscribedToDigest\n    subscribedToNewsletter\n    unsubscribeFromAll\n    hideSubscribePoke\n    hideMeetupsPoke\n    hideHomeRHS\n    frontpagePostCount\n    sequenceCount\n    sequenceDraftCount\n    mongoLocation\n    googleLocation\n    location\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    nearbyEventsNotifications\n    nearbyEventsNotificationsLocation\n    nearbyEventsNotificationsMongoLocation\n    nearbyEventsNotificationsRadius\n    nearbyPeopleNotificationThreshold\n    hideFrontpageMap\n    hideTaggingProgressBar\n    hideFrontpageBookAd\n    hideFrontpageBook2019Ad\n    hideFrontpageBook2020Ad\n    sunshineNotes\n    sunshineFlagged\n    needsReview\n    sunshineSnoozed\n    snoozedUntilContentCount\n    reviewedByUserId\n    reviewedAt\n    afKarma\n    voteCount\n    smallUpvoteCount\n    smallDownvoteCount\n    bigUpvoteCount\n    bigDownvoteCount\n    voteReceivedCount\n    smallUpvoteReceivedCount\n    smallDownvoteReceivedCount\n    bigUpvoteReceivedCount\n    bigDownvoteReceivedCount\n    usersContactedBeforeReview\n    fullName\n    shortformFeedId\n    viewUnreviewedComments\n    beta\n    reviewVotesQuadratic\n    reviewVotesQuadratic2019\n    reviewVotesQuadratic2020\n    petrovPressedButtonDate\n    petrovLaunchCodeDate\n    defaultToCKEditor\n    signUpReCaptchaRating\n    noExpandUnreadCommentsReview\n    postCount\n    maxPostCount\n    commentCount\n    maxCommentCount\n    tagRevisionCount\n    abTestKey\n    abTestOverrides\n    walledGardenInvite\n    hideWalledGardenUI\n    walledGardenPortalOnboarded\n    taggingDashboardCollapsed\n    usernameUnset\n    paymentEmail\n    paymentInfo\n    profileUpdatedAt\n    profileImageId\n    jobTitle\n    organization\n    careerStage\n    website\n    fmCrosspostUserId\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    twitterProfileURLAdmin\n    githubProfileURL\n    profileTagIds\n    organizerOfGroupIds\n    programParticipation\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n    acknowledgedNewUserGuidelines\n    subforumPreferredLayout\n    hideJobAdUntil\n    criticismTipsDismissed\n    hideFromPeopleDirectory\n    allowDatadogSessionReplay\n    afPostCount\n    afCommentCount\n    afSequenceCount\n    afSequenceDraftCount\n    reviewForAlignmentForumUserId\n    afApplicationText\n    afSubmittedApplication\n    hideSunshineSidebar\n    inactiveSurveyEmailSentAt\n    userSurveyEmailSentAt\n    recommendationSettings\n  }\n": typeof types.UsersDefaultFragmentDoc,
    "\n  fragment VotesDefaultFragment on Vote {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    documentId\n    collectionName\n    userId\n    authorIds\n    voteType\n    extendedVoteType\n    power\n    afPower\n    cancelled\n    isUnvote\n    votedAt\n    documentIsAf\n    silenceNotification\n  }\n": typeof types.VotesDefaultFragmentDoc,
    "\n    query Lightcone2024FundraiserStripeAmounts {\n      Lightcone2024FundraiserStripeAmounts\n    }\n  ": typeof types.Lightcone2024FundraiserStripeAmountsDocument,
    "\n  fragment SubscribedPostAndCommentsFeed on SubscribedPostAndComments {\n    _id\n    post {\n      ...PostsList\n    }\n    comments {\n      ...CommentsList\n    }\n    expandCommentIds\n    postIsFromSubscribedUser\n  }\n": typeof types.SubscribedPostAndCommentsFeedDoc,
    "\n  fragment FeedPostFragment on FeedPost {\n    _id\n    postMetaInfo\n    post {\n      ...PostsListWithVotes\n    }\n  }\n": typeof types.FeedPostFragmentDoc,
    "\n  fragment FeedCommentThreadFragment on FeedCommentThread {\n    _id\n    commentMetaInfos\n    isOnReadPost\n    postSources\n    post {\n      ...PostsListWithVotes\n    }\n    comments {\n      ...UltraFeedComment\n    }\n  }\n": typeof types.FeedCommentThreadFragmentDoc,
    "\n  fragment FeedSpotlightFragment on FeedSpotlightItem {\n    _id\n    spotlight {\n      ...SpotlightDisplay\n    }\n    post {\n      ...PostsListWithVotes\n    }\n    spotlightMetaInfo {\n      sources\n      servedEventId\n    }\n  }\n": typeof types.FeedSpotlightFragmentDoc,
    "\n  fragment FeedSubscriptionSuggestionsFragment on FeedSubscriptionSuggestions {\n    _id\n    suggestedUsers {\n      ...UsersMinimumInfo\n    }\n  }\n": typeof types.FeedSubscriptionSuggestionsFragmentDoc,
    "\n  query multiPostsForAutocompleteQuery($input: MultiPostInput) {\n    posts(input: $input) {\n      results {\n        ...PostsForAutocomplete\n      }\n    }\n  }\n": typeof types.multiPostsForAutocompleteQueryDocument,
    "\n  query multiCommentsForAutocompleteQuery($input: MultiCommentInput) {\n    comments(input: $input) {\n      results {\n        ...CommentsForAutocomplete\n      }\n    }\n  }\n": typeof types.multiCommentsForAutocompleteQueryDocument,
    "\n  query multiCommentsForAutocompleteWithParentsQuery($input: MultiCommentInput) {\n    comments(input: $input) {\n      results {\n        ...CommentsForAutocompleteWithParents\n      }\n    }\n  }\n": typeof types.multiCommentsForAutocompleteWithParentsQueryDocument,
    "\n  query EmailComment2($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n": typeof types.EmailComment2Document,
    "\n  query EmailComment1($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagPreviewFragment\n      }\n    }\n  }\n": typeof types.EmailComment1Document,
    "\n  query EmailComment($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.EmailCommentDocument,
    "\n  query EmailUsernameByID($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": typeof types.EmailUsernameByIDDocument,
    "\n  query EventUpdatedEmail($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsBase\n      }\n    }\n  }\n": typeof types.EventUpdatedEmailDocument,
    "\n  query NewDialogueMessagesEmail1($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": typeof types.NewDialogueMessagesEmail1Document,
    "\n  query NewDialogueMessagesEmail($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsRevision\n      }\n    }\n  }\n": typeof types.NewDialogueMessagesEmailDocument,
    "\n  query PostNominatedEmail($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsRevision\n      }\n    }\n  }\n": typeof types.PostNominatedEmailDocument,
    "\n  query multiPostPostsEmailQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean, $version: String) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsRevision\n      }\n      totalCount\n    }\n  }\n": typeof types.multiPostPostsEmailQueryDocument,
    "\n  query getCrosspostPostsWithNavigation($input: SinglePostInput, $sequenceId: String) {\n    post(input: $input) {\n      result {\n        ...PostsWithNavigation\n      }\n    }\n  }\n": typeof types.getCrosspostPostsWithNavigationDocument,
    "\n  query getCrosspostPostsWithNavigationAndRevision($input: SinglePostInput, $version: String, $sequenceId: String) {\n    post(input: $input) {\n      result {\n        ...PostsWithNavigationAndRevision\n      }\n    }\n  }\n": typeof types.getCrosspostPostsWithNavigationAndRevisionDocument,
    "\n  query getCrosspostPostsList($input: SinglePostInput) {\n    post(input: $input) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": typeof types.getCrosspostPostsListDocument,
    "\n  query getCrosspostSunshinePostsList($input: SinglePostInput) {\n    post(input: $input) {\n      result {\n        ...SunshinePostsList\n      }\n    }\n  }\n": typeof types.getCrosspostSunshinePostsListDocument,
    "\n  query getCrosspostPostsPage($input: SinglePostInput) {\n    post(input: $input) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n": typeof types.getCrosspostPostsPageDocument,
    "\n  query singleDraftPostForLLMQuery($input: SinglePostInput, $version: String) {\n    post(input: $input) {\n      result {\n        ...PostsEditQueryFragment\n      }\n    }\n  }\n": typeof types.singleDraftPostForLLMQueryDocument,
    "\n  query singlePublishedPostForLLMQuery($input: SinglePostInput) {\n    post(input: $input) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n": typeof types.singlePublishedPostForLLMQueryDocument,
    "\n  query multiPostsForLLMQuery($input: MultiPostInput) {\n    posts(input: $input) {\n      results {\n        ...PostsPage\n      }\n    }\n  }\n": typeof types.multiPostsForLLMQueryDocument,
};
const documents: Documents = {
    "\n  mutation updateUserLayout($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": types.updateUserLayoutDocument,
    "\n  query multiGoogleServiceAccountSessionAdminGoogleServiceAccountQuery($selector: GoogleServiceAccountSessionSelector, $limit: Int, $enableTotal: Boolean) {\n    googleServiceAccountSessions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...GoogleServiceAccountSessionAdminInfo\n      }\n      totalCount\n    }\n  }\n": types.multiGoogleServiceAccountSessionAdminGoogleServiceAccountQueryDocument,
    "\n    mutation revokeGoogleServiceAccountTokens {\n      revokeGoogleServiceAccountTokens\n    }\n  ": types.revokeGoogleServiceAccountTokensDocument,
    "\n    query AdminMetadataQuery {\n      AdminMetadata\n    }\n  ": types.AdminMetadataQueryDocument,
    "\n    query SearchSynonyms {\n      SearchSynonyms\n    }\n  ": types.SearchSynonymsDocument,
    "mutation UpdateSearchSynonyms($synonyms: [String!]!) {\n      UpdateSearchSynonyms(synonyms: $synonyms)\n    }": types.UpdateSearchSynonymsDocument,
    "\n  mutation updateCurationNoticeCurationNoticesForm($selector: SelectorInput!, $data: UpdateCurationNoticeDataInput!) {\n    updateCurationNotice(selector: $selector, data: $data) {\n      data {\n        ...CurationNoticesFragment\n      }\n    }\n  }\n": types.updateCurationNoticeCurationNoticesFormDocument,
    "\n  mutation createCurationNoticeCurationNoticesForm($data: CreateCurationNoticeDataInput!) {\n    createCurationNotice(data: $data) {\n      data {\n        ...CurationNoticesFragment\n      }\n    }\n  }\n": types.createCurationNoticeCurationNoticesFormDocument,
    "\n  mutation updatePostCurationNoticesItem1($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": types.updatePostCurationNoticesItem1Document,
    "\n  mutation updateCurationNoticeCurationNoticesItem($selector: SelectorInput!, $data: UpdateCurationNoticeDataInput!) {\n    updateCurationNotice(selector: $selector, data: $data) {\n      data {\n        ...CurationNoticesFragment\n      }\n    }\n  }\n": types.updateCurationNoticeCurationNoticesItemDocument,
    "\n  mutation createCommentCurationNoticesItem($data: CreateCommentDataInput!) {\n    createComment(data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": types.createCommentCurationNoticesItemDocument,
    "\n  query multiCurationNoticeCurationPageQuery($selector: CurationNoticeSelector, $limit: Int, $enableTotal: Boolean) {\n    curationNotices(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CurationNoticesFragment\n      }\n      totalCount\n    }\n  }\n": types.multiCurationNoticeCurationPageQueryDocument,
    "\n    query randomUser($userIsAuthor: String!) {\n      GetRandomUser(userIsAuthor: $userIsAuthor) {\n        ...UsersMinimumInfo\n      }\n    }\n  ": types.randomUserDocument,
    "\n    query CrossedKarmaThreshold($limit: Int!) {\n      CrossedKarmaThreshold(limit: $limit) {\n        results {\n          ...PostsTwitterAdmin\n        }\n      }\n    }\n  ": types.CrossedKarmaThresholdDocument,
    "\n    query MigrationsDashboardQuery {\n      MigrationsDashboard {\n        migrations {\n          name\n          dateWritten\n          runs { name started finished succeeded }\n          lastRun\n        }\n      }\n    }\n  ": types.MigrationsDashboardQueryDocument,
    "\n  query multiCommentAFUnreviewedCommentCountQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SuggestAlignmentComment\n      }\n      totalCount\n    }\n  }\n": types.multiCommentAFUnreviewedCommentCountQueryDocument,
    "\n    mutation alignmentPost($postId: String, $af: Boolean) {\n      alignmentPost(postId: $postId, af: $af) {\n        ...PostsList\n      }\n    }\n  ": types.alignmentPostDocument,
    "\n  query multiUserAuthorAnalyticsPageQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiUserAuthorAnalyticsPageQueryDocument,
    "\n  query PostsAnalyticsPage($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n": types.PostsAnalyticsPageDocument,
    "\n  query multiBookmarkBookmarksFeedQuery($selector: BookmarkSelector, $limit: Int, $enableTotal: Boolean) {\n    bookmarks(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...BookmarksFeedItemFragment\n      }\n      totalCount\n    }\n  }\n": types.multiBookmarkBookmarksFeedQueryDocument,
    "\n  query multiBookmarkBookmarksListQuery($selector: BookmarkSelector, $limit: Int, $enableTotal: Boolean) {\n    bookmarks(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...BookmarksWithDocumentFragment\n      }\n      totalCount\n    }\n  }\n": types.multiBookmarkBookmarksListQueryDocument,
    "\n      query getReadHistory($limit: Int, $filter: PostReviewFilter, $sort: PostReviewSort) {\n        UserReadHistory(limit: $limit, filter: $filter, sort: $sort) {\n          posts {\n            ...PostsListWithVotes\n            lastVisitedAt\n          }\n        }\n      }\n    ": types.getReadHistoryDocument,
    "\n  query multiVoteVoteHistoryTabQuery($selector: VoteSelector, $limit: Int, $enableTotal: Boolean) {\n    votes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserVotesWithDocument\n      }\n      totalCount\n    }\n  }\n": types.multiVoteVoteHistoryTabQueryDocument,
    "\n  mutation updateUserBook2020FrontpageWidget($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": types.updateUserBook2020FrontpageWidgetDocument,
    "\n  mutation updateUserBookFrontpageWidget($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": types.updateUserBookFrontpageWidgetDocument,
    "\n  query CommentById($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n": types.CommentByIdDocument,
    "\n  mutation updateCommentCommentForm($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": types.updateCommentCommentFormDocument,
    "\n  mutation createCommentCommentForm($data: CreateCommentDataInput!) {\n    createComment(data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": types.createCommentCommentFormDocument,
    "\n  query CommentPermalink($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentWithRepliesFragment\n      }\n    }\n  }\n": types.CommentPermalinkDocument,
    "\n  query LinkedDraftCommentQuery($documentId: String!) {\n    comment(selector: { _id: $documentId }) {\n      result {\n        ...DraftComments\n      }\n    }\n  }\n": types.LinkedDraftCommentQueryDocument,
    "\n  query DraftCommentsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DraftComments\n      }\n      totalCount\n    }\n  }\n": types.DraftCommentsQueryDocument,
    "\n  query CommentEdit($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentEdit\n      }\n    }\n  }\n": types.CommentEditDocument,
    "\n  query CommentDeletedMetadata($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...DeletedCommentsMetaData\n      }\n    }\n  }\n": types.CommentDeletedMetadataDocument,
    "\n  query CommentPollVote($documentId: String) {\n    forumEvent(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ForumEventsDisplay\n      }\n    }\n  }\n": types.CommentPollVoteDocument,
    "\n  query CommentsNewForm($documentId: String, $postId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersCurrentCommentRateLimit\n      }\n    }\n  }\n": types.CommentsNewFormDocument,
    "\n    mutation upsertUserTypingIndicator($documentId: String!) {\n      upsertUserTypingIndicator(documentId: $documentId) {\n        ...TypingIndicatorInfo\n      }\n    }\n  ": types.upsertUserTypingIndicatorDocument,
    "\n  query multiLWEventLastVisitListQuery($selector: LWEventSelector, $limit: Int, $enableTotal: Boolean) {\n    lWEvents(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...lastEventFragment\n      }\n      totalCount\n    }\n  }\n": types.multiLWEventLastVisitListQueryDocument,
    "\n  query PostsModerationGuidelines($documentId: String) {\n    PostsModerationGuidelines: post(selector: { documentId: $documentId }) {\n      result {\n        ...PostsModerationGuidelines\n      }\n      __typename\n    }\n  }\n": types.PostsModerationGuidelinesDocument,
    "\n  query TagModerationGuidelines($documentId: String) {\n    TagModerationGuidelines: tag(selector: { documentId: $documentId }) {\n      result {\n        ...TagFragment\n      }\n      __typename\n    }\n  }\n": types.TagModerationGuidelinesDocument,
    "\n  mutation updatePostModerationGuidelinesEditForm($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsPage\n      }\n    }\n  }\n": types.updatePostModerationGuidelinesEditFormDocument,
    "\n  mutation updateTagModerationGuidelinesEditForm($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...TagWithFlagsFragment\n      }\n    }\n  }\n": types.updateTagModerationGuidelinesEditFormDocument,
    "\n  query PostsEditQuery($documentId: String!, $version: String) {\n    post(selector:  { documentId: $documentId }) {\n      result {\n        ...PostsEditQueryFragment\n      }\n    }\n  }\n": types.PostsEditQueryDocument,
    "\n  query TagEditQuery($documentId: String!) {\n    tag(selector: { documentId: $documentId }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n": types.TagEditQueryDocument,
    "\n  query multiCommentModeratorCommentsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": types.multiCommentModeratorCommentsQueryDocument,
    "\n  query NewUserGuidelinesDialog($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n": types.NewUserGuidelinesDialogDocument,
    "\n  query ParentCommentSingle($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n": types.ParentCommentSingleDocument,
    "\n    query PopularComments($limit: Int) {\n      PopularComments(limit: $limit) {\n        results {\n          ...CommentsListWithParentMetadata\n        }\n      }\n    }\n  ": types.PopularCommentsDocument,
    "\n  query multiCommentRecentCommentsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": types.multiCommentRecentCommentsQueryDocument,
    "\n  query SideCommentSingle($commentId: String!) {\n    comment(input: { selector: { _id: $commentId } }) {\n      result {\n        ...CommentWithRepliesFragment\n      }\n    }\n  }\n": types.SideCommentSingleDocument,
    "\n  query multiCommentUserCommentsRepliesQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": types.multiCommentUserCommentsRepliesQueryDocument,
    "\n  query multiUserUserCommentsRepliesQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n": types.multiUserUserCommentsRepliesQueryDocument,
    "\n  query multiCommentuseCommentQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": types.multiCommentuseCommentQueryDocument,
    "\n    mutation sendVertexMediaCompleteEventMutation($postId: String!, $attributionId: String) {\n      sendVertexMediaCompleteEvent(postId: $postId, attributionId: $attributionId)\n    }\n  ": types.sendVertexMediaCompleteEventMutationDocument,
    "\n  query multiCommentCommentsListCondensedQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n": types.multiCommentCommentsListCondensedQueryDocument,
    "\n  query HeaderEventSubtitleSpotlightQuery {\n    currentSpotlight {\n      ...SpotlightHeaderEventSubtitle\n    }\n  }\n": types.HeaderEventSubtitleSpotlightQueryDocument,
    "\n  query multiTagHomeTagBarQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagHomeTagBarQueryDocument,
    "\n    mutation sendVertexViewHomePageEventMutation {\n      sendVertexViewHomePageEvent\n    }\n  ": types.sendVertexViewHomePageEventMutationDocument,
    "\n  query multiFeaturedResourceFeaturedResourceBannerQuery($selector: FeaturedResourceSelector, $limit: Int, $enableTotal: Boolean) {\n    featuredResources(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...FeaturedResourcesFragment\n      }\n      totalCount\n    }\n  }\n": types.multiFeaturedResourceFeaturedResourceBannerQueryDocument,
    "\n  query multiTagSubforumsListQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagSubforumSidebarFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagSubforumsListQueryDocument,
    "\n  query PostExcerpt($documentId: String, $hash: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...HighlightWithHash\n      }\n    }\n  }\n": types.PostExcerptDocument,
    "\n  query AllTagsActivityFeed($limit: Int, $cutoff: Date, $offset: Int) {\n    AllTagsActivityFeed(limit: $limit, cutoff: $cutoff, offset: $offset) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagCreated {\n          ...TagCreationHistoryFragment\n        }\n        tagRevision {\n          ...RevisionTagFragment\n        }\n        tagDiscussionComment {\n          ...CommentsListWithParentMetadata\n        }\n      }\n    }\n  }\n": types.AllTagsActivityFeedDocument,
    "\n  query TagHistoryFeed($limit: Int, $cutoff: Date, $offset: Int, $tagId: String!, $options: JSON) {\n    TagHistoryFeed(limit: $limit, cutoff: $cutoff, offset: $offset, tagId: $tagId, options: $options) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagCreated {\n          ...TagHistoryFragment\n        }\n        tagRevision {\n          ...RevisionHistoryEntry\n        }\n        lensRevision {\n          ...RevisionHistoryEntry\n        }\n        summaryRevision {\n          ...RevisionHistorySummaryEdit\n        }\n        tagApplied {\n          ...TagRelHistoryFragment\n        }\n        tagDiscussionComment {\n          ...CommentsList\n        }\n        wikiMetadataChanged {\n          ...FieldChangeFragment\n        }\n        lensOrSummaryMetadataChanged {\n          ...FieldChangeFragment\n        }\n      }\n    }\n  }\n": types.TagHistoryFeedDocument,
    "\n  query RecentDiscussionFeed($limit: Int, $cutoff: Date, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int, $tagCommentsLimit: Int) {\n    RecentDiscussionFeed(limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        postCommented {\n          ...PostsRecentDiscussion\n        }\n        shortformCommented {\n          ...ShortformRecentDiscussion\n        }\n        tagDiscussed {\n          ...TagRecentDiscussion\n        }\n        tagRevised {\n          ...RecentDiscussionRevisionTagFragment\n        }\n      }\n    }\n  }\n": types.RecentDiscussionFeedDocument,
    "\n  query SubscribedFeed($limit: Int, $cutoff: Date, $offset: Int, $af: Boolean) {\n    SubscribedFeed(limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        postCommented {\n          ...SubscribedPostAndCommentsFeed\n        }\n      }\n    }\n  }\n": types.SubscribedFeedDocument,
    "\n  query SubforumMagicFeed($tagId: String!, $limit: Int, $cutoff: Float, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumMagicFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n": types.SubforumMagicFeedDocument,
    "\n  query SubforumNewFeed($tagId: String!, $limit: Int, $cutoff: Date, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumNewFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n": types.SubforumNewFeedDocument,
    "\n  query SubforumOldFeed($tagId: String!, $limit: Int, $cutoff: Date, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumOldFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n": types.SubforumOldFeedDocument,
    "\n  query SubforumRecentCommentsFeed($tagId: String!, $limit: Int, $cutoff: Date, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumRecentCommentsFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n": types.SubforumRecentCommentsFeedDocument,
    "\n  query SubforumTopFeed($tagId: String!, $limit: Int, $cutoff: Int, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumTopFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n": types.SubforumTopFeedDocument,
    "\n  query UltraFeed($limit: Int, $cutoff: Date, $offset: Int, $sessionId: String, $settings: JSON) {\n    UltraFeed(limit: $limit, cutoff: $cutoff, offset: $offset, sessionId: $sessionId, settings: $settings) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        feedCommentThread {\n          ...FeedCommentThreadFragment\n        }\n        feedPost {\n          ...FeedPostFragment\n        }\n        feedSpotlight {\n          ...FeedSpotlightFragment\n        }\n        feedSubscriptionSuggestions {\n          ...FeedSubscriptionSuggestionsFragment\n        }\n      }\n    }\n  }\n": types.UltraFeedDocument,
    "\n  mutation updateUserCommunity($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersProfile\n      }\n    }\n  }\n": types.updateUserCommunityDocument,
    "\n  query multiLocalgroupLocalGroupsQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n": types.multiLocalgroupLocalGroupsQueryDocument,
    "\n  query multiLocalgroupOnlineGroupsQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n": types.multiLocalgroupOnlineGroupsQueryDocument,
    "\n  query ElicitBlockData($questionId: String) {\n    ElicitBlockData(questionId: $questionId) {\n      _id\n      title\n      notes\n      resolvesBy\n      resolution\n      predictions {\n        _id,\n        predictionId,\n        prediction,\n        createdAt,\n        notes,\n        sourceUrl,\n        sourceId,\n        binaryQuestionId\n        creator {\n          _id,\n          displayName,\n          sourceUserId\n          lwUser {\n            ...UsersMinimumInfo\n          }\n        }\n      }\n    }\n  }\n": types.ElicitBlockDataDocument,
    "\n  mutation ElicitPrediction($questionId:String, $prediction: Int) {\n    MakeElicitPrediction(questionId:$questionId, prediction: $prediction) {\n      _id\n      title\n      notes\n      resolvesBy\n      resolution\n      predictions {\n        _id,\n        predictionId,\n        prediction,\n        createdAt,\n        notes,\n        sourceUrl,\n        sourceId,\n        binaryQuestionId\n        creator {\n          _id,\n          displayName,\n          sourceUserId\n          lwUser {\n            ...UsersMinimumInfo\n          }\n        }\n      }\n    }\n  }\n": types.ElicitPredictionDocument,
    "\n    query RecentlyActiveDialogues($limit: Int) {\n      RecentlyActiveDialogues(limit: $limit) {\n        results {\n          ...PostsListWithVotes\n        }\n      }\n    }\n  ": types.RecentlyActiveDialoguesDocument,
    "\n    query MyDialogues($limit: Int) {\n      MyDialogues(limit: $limit) {\n        results {\n          ...PostsListWithVotes\n        }\n      }\n    }\n  ": types.MyDialoguesDocument,
    "\n  query DialoguesPage($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n": types.DialoguesPageDocument,
    "\n  mutation updatePostBanUserFromPostDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsPage\n      }\n    }\n  }\n": types.updatePostBanUserFromPostDropdownItemDocument,
    "\n  query CommentActions($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsDetails\n      }\n    }\n  }\n": types.CommentActionsDocument,
    "\n    mutation lockThread($commentId: String!, $until: String) {\n      lockThread(commentId: $commentId, until: $until)\n    }\n  ": types.lockThreadDocument,
    "\n    mutation unlockThread($commentId: String!) {\n      unlockThread(commentId: $commentId)\n    }\n  ": types.unlockThreadDocument,
    "\n  mutation updateCommentMoveToAlignmentCommentDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": types.updateCommentMoveToAlignmentCommentDropdownItemDocument,
    "\n  mutation updateCommentMoveToAnswersDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": types.updateCommentMoveToAnswersDropdownItemDocument,
    "\n  mutation updateCommentPinToProfileDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": types.updateCommentPinToProfileDropdownItemDocument,
    "\n  mutation updateCommentRetractCommentDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": types.updateCommentRetractCommentDropdownItemDocument,
    "\n  mutation updateCommentShortformFrontpageDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": types.updateCommentShortformFrontpageDropdownItemDocument,
    "\n  mutation updateCommentSuggestAlignmentCommentDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentComment\n      }\n    }\n  }\n": types.updateCommentSuggestAlignmentCommentDropdownItemDocument,
    "\n  mutation updateCommentToggleIsModeratorCommentDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": types.updateCommentToggleIsModeratorCommentDropdownItemDocument,
    "\n    mutation moderateComment($commentId: String, $deleted: Boolean, $deletedReason: String, $deletedPublic: Boolean) {\n      moderateComment(commentId: $commentId, deleted: $deleted, deletedReason: $deletedReason, deletedPublic: $deletedPublic) {\n        ...CommentsList\n      }\n    }\n  ": types.moderateCommentDocument,
    "\n  mutation updateUserApproveNewUserDropdownItem($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": types.updateUserApproveNewUserDropdownItemDocument,
    "\n  mutation updatePostDeleteDraftDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": types.updatePostDeleteDraftDropdownItemDocument,
    "\n  mutation updatePostExcludeFromRecommendationsDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": types.updatePostExcludeFromRecommendationsDropdownItemDocument,
    "\n    mutation markAsReadOrUnread($postId: String, $isRead: Boolean) {\n      markAsReadOrUnread(postId: $postId, isRead: $isRead)\n    }\n  ": types.markAsReadOrUnreadDocument,
    "\n  mutation updatePostMoveToDraftDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": types.updatePostMoveToDraftDropdownItemDocument,
    "\n  mutation updatePostMoveToFrontpageDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": types.updatePostMoveToFrontpageDropdownItemDocument,
    "\n  mutation updatePostResyncRssDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsEdit\n      }\n    }\n  }\n": types.updatePostResyncRssDropdownItemDocument,
    "\n    query getRssPostChanges($postId: String!) {\n      RssPostChanges(postId: $postId) {\n        isChanged\n        newHtml\n        htmlDiff\n      }\n    }\n  ": types.getRssPostChangesDocument,
    "\n  mutation updateUserShortformDropdownItem($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": types.updateUserShortformDropdownItemDocument,
    "\n  mutation updatePostSuggestAlignmentPostDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": types.updatePostSuggestAlignmentPostDropdownItemDocument,
    "\n  mutation updatePostSuggestCuratedDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": types.updatePostSuggestCuratedDropdownItemDocument,
    "\n    mutation setIsHidden($postId: String!, $isHidden: Boolean!) {\n      setIsHidden(postId: $postId, isHidden: $isHidden) {\n        ...UsersCurrent\n      }\n    }\n  ": types.setIsHiddenDocument,
    "\n  query multiPostsListWithVotesQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": types.multiPostsListWithVotesQueryDocument,
    "\n  query multiCollectionEABestOfPageQuery($selector: CollectionSelector, $limit: Int, $enableTotal: Boolean) {\n    collections(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CollectionsBestOfFragment\n      }\n      totalCount\n    }\n  }\n": types.multiCollectionEABestOfPageQueryDocument,
    "\n  query multiSequenceEABestOfPageQuery($selector: SequenceSelector, $limit: Int, $enableTotal: Boolean) {\n    sequences(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SequencesPageFragment\n      }\n      totalCount\n    }\n  }\n": types.multiSequenceEABestOfPageQueryDocument,
    "\n  query multiPostsBestOfListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsBestOfList\n      }\n      totalCount\n    }\n  }\n": types.multiPostsBestOfListQueryDocument,
    "\n  query multiDigestEADigestPageQuery($selector: DigestSelector, $limit: Int, $enableTotal: Boolean) {\n    digests(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DigestsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiDigestEADigestPageQueryDocument,
    "\n    query getDigestPosts($num: Int) {\n      DigestPosts(num: $num) {\n        ...PostsListWithVotes\n      }\n    }\n  ": types.getDigestPostsDocument,
    "\n  query EAHomeHandbook($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesPageFragment\n      }\n    }\n  }\n": types.EAHomeHandbookDocument,
    "\n  query multiPostEAHomeRightHandSideQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": types.multiPostEAHomeRightHandSideQueryDocument,
    "\n  query multiPostInstagramLandingPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": types.multiPostInstagramLandingPageQueryDocument,
    "\n  query multiChapterInstagramLandingPageQuery($selector: ChapterSelector, $limit: Int, $enableTotal: Boolean) {\n    chapters(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ChaptersFragment\n      }\n      totalCount\n    }\n  }\n": types.multiChapterInstagramLandingPageQueryDocument,
    "\n  query multiUserEAGDetailTargetedJobAdSectionQuery($selector: UserEAGDetailSelector, $limit: Int, $enableTotal: Boolean) {\n    userEAGDetails(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserEAGDetailsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiUserEAGDetailTargetedJobAdSectionQueryDocument,
    "\n  query multiUserJobAdTargetedJobAdSectionQuery($selector: UserJobAdSelector, $limit: Int, $enableTotal: Boolean) {\n    userJobAds(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserJobAdsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiUserJobAdTargetedJobAdSectionQueryDocument,
    "\n  mutation updateUserJobAdTargetedJobAdSection($selector: SelectorInput!, $data: UpdateUserJobAdDataInput!) {\n    updateUserJobAd(selector: $selector, data: $data) {\n      data {\n        ...UserJobAdsMinimumInfo\n      }\n    }\n  }\n": types.updateUserJobAdTargetedJobAdSectionDocument,
    "\n  mutation createUserJobAdTargetedJobAdSection($data: CreateUserJobAdDataInput!) {\n    createUserJobAd(data: $data) {\n      data {\n        ...UserJobAdsMinimumInfo\n      }\n    }\n  }\n": types.createUserJobAdTargetedJobAdSectionDocument,
    "\n      query getUserReadsPerCoreTag($userId: String!) {\n        UserReadsPerCoreTag(userId: $userId) {\n          tagId\n          userReadCount\n        }\n      }\n    ": types.getUserReadsPerCoreTagDocument,
    "\n  mutation updateDigestConfirmPublishDialog($selector: SelectorInput!, $data: UpdateDigestDataInput!) {\n    updateDigest(selector: $selector, data: $data) {\n      data {\n        ...DigestsMinimumInfo\n      }\n    }\n  }\n": types.updateDigestConfirmPublishDialogDocument,
    "\n  query multiDigestDigestsQuery($selector: DigestSelector, $limit: Int, $enableTotal: Boolean) {\n    digests(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DigestsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiDigestDigestsQueryDocument,
    "\n  query multiDigestEditDigestQuery($selector: DigestSelector, $limit: Int, $enableTotal: Boolean) {\n    digests(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DigestsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiDigestEditDigestQueryDocument,
    "\n  mutation updateDigestPostEditDigest($selector: SelectorInput!, $data: UpdateDigestPostDataInput!) {\n    updateDigestPost(selector: $selector, data: $data) {\n      data {\n        ...DigestPostsMinimumInfo\n      }\n    }\n  }\n": types.updateDigestPostEditDigestDocument,
    "\n  mutation createDigestPostEditDigest($data: CreateDigestPostDataInput!) {\n    createDigestPost(data: $data) {\n      data {\n        ...DigestPostsMinimumInfo\n      }\n    }\n  }\n": types.createDigestPostEditDigestDocument,
    "\n    query getDigestPlannerData($digestId: String, $startDate: Date, $endDate: Date) {\n      DigestPlannerData(digestId: $digestId, startDate: $startDate, endDate: $endDate) {\n        post {\n          ...PostsListWithVotes\n        }\n        digestPost {\n          _id\n          emailDigestStatus\n          onsiteDigestStatus\n        }\n        rating\n      }\n    }\n  ": types.getDigestPlannerDataDocument,
    "\n  mutation updateDigestEditDigestActionButtons($selector: SelectorInput!, $data: UpdateDigestDataInput!) {\n    updateDigest(selector: $selector, data: $data) {\n      data {\n        ...DigestsMinimumInfo\n      }\n    }\n  }\n": types.updateDigestEditDigestActionButtonsDocument,
    "\n  mutation updateDigestEditDigestHeader($selector: SelectorInput!, $data: UpdateDigestDataInput!) {\n    updateDigest(selector: $selector, data: $data) {\n      data {\n        ...DigestsMinimumInfo\n      }\n    }\n  }\n": types.updateDigestEditDigestHeaderDocument,
    "\n    mutation NewUserCompleteProfile(\n      $username: String!,\n      $subscribeToDigest: Boolean!,\n      $email: String,\n      $acceptedTos: Boolean\n    ) {\n      NewUserCompleteProfile(\n        username: $username,\n        subscribeToDigest: $subscribeToDigest,\n        email: $email,\n        acceptedTos: $acceptedTos\n      ) {\n        username\n        slug\n        displayName\n      }\n    }\n  ": types.NewUserCompleteProfileDocument,
    "\n    query isDisplayNameTaken($displayName: String!) {\n      IsDisplayNameTaken(displayName: $displayName)\n    }\n  ": types.isDisplayNameTakenDocument,
    "\n  query multiUseruseSuggestedSubscriptionsQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserOnboardingAuthor\n      }\n      totalCount\n    }\n  }\n": types.multiUseruseSuggestedSubscriptionsQueryDocument,
    "\n  query multiTaguseSuggestedSubscriptionsQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserOnboardingTag\n      }\n      totalCount\n    }\n  }\n": types.multiTaguseSuggestedSubscriptionsQueryDocument,
    "\n  query EAGApplicationImportForm($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersEdit\n      }\n    }\n  }\n": types.EAGApplicationImportFormDocument,
    "\n  query multiPosthooksQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": types.multiPosthooksQueryDocument,
    "\n  query multiVotehooksQuery($selector: VoteSelector, $limit: Int, $enableTotal: Boolean) {\n    votes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserVotes\n      }\n      totalCount\n    }\n  }\n": types.multiVotehooksQueryDocument,
    "\n    query getWrappedData($userId: String!, $year: Int!) {\n      UserWrappedDataByYear(userId: $userId, year: $year) {\n        engagementPercentile\n        postsReadCount\n        totalSeconds\n        daysVisited\n        mostReadTopics {\n          name\n          shortName\n          slug\n          count\n        }\n        relativeMostReadCoreTopics {\n          tagId\n          tagName\n          tagShortName\n          userReadCount\n          readLikelihoodRatio\n        }\n        mostReadAuthors {\n          _id\n          displayName\n          slug\n          profileImageId\n          count\n          engagementPercentile\n        }\n        topPosts {\n          _id\n          title\n          slug\n          baseScore\n        }\n        postCount\n        authorPercentile\n        topComment {\n          _id\n          postedAt\n          postId\n          postTitle\n          postSlug\n          baseScore\n          extendedScore\n          contents {\n            html\n          }\n        }\n        commentCount\n        commenterPercentile\n        topShortform {\n          _id\n          postedAt\n          postId\n          baseScore\n          extendedScore\n          contents {\n            html\n          }\n        }\n        shortformCount\n        shortformPercentile\n        karmaChange\n        combinedKarmaVals {\n          date\n          postKarma\n          commentKarma\n        }\n        mostReceivedReacts {\n          name\n          count\n        }\n        personality\n      }\n    }\n  ": types.getWrappedDataDocument,
    "\n  query multiPostCKPostEditorQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiPostCKPostEditorQueryDocument,
    "\n    mutation sendNewDialogueMessageNotification($postId: String!, $dialogueHtml: String!) {\n      sendNewDialogueMessageNotification(postId: $postId, dialogueHtml: $dialogueHtml)\n    }\n  ": types.sendNewDialogueMessageNotificationDocument,
    "\n  mutation updatePostEditTitle($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsMinimumInfo\n      }\n    }\n  }\n": types.updatePostEditTitleDocument,
    "\n    query getPostIsCriticism($args: JSON) {\n      PostIsCriticism(args: $args)\n    }\n    ": types.getPostIsCriticismDocument,
    "\n    mutation autosaveRevision($postId: String!, $contents: AutosaveContentType!) {\n      autosaveRevision(postId: $postId, contents: $contents) {\n        ...RevisionEdit\n      }\n    }\n  ": types.autosaveRevisionDocument,
    "\n    query LinkSharingQuery($postId: String!, $linkSharingKey: String!) {\n      getLinkSharedPost(postId: $postId, linkSharingKey: $linkSharingKey) {\n        ...PostsEdit\n      }\n    }\n  ": types.LinkSharingQueryDocument,
    "\n  query multiRevisionPostVersionHistoryQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionMetadataWithChangeMetrics\n      }\n      totalCount\n    }\n  }\n": types.multiRevisionPostVersionHistoryQueryDocument,
    "\n  query PostVersionHistory($documentId: String) {\n    revision(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...RevisionDisplay\n        ...RevisionMetadata\n      }\n    }\n  }\n": types.PostVersionHistoryDocument,
    "\n    mutation revertPostToRevision($postId: String!, $revisionId: String!) {\n      revertPostToRevision(postId: $postId, revisionId: $revisionId) {\n        ...PostsEdit\n      }\n    }\n  ": types.revertPostToRevisionDocument,
    "\n  query PresenceList($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": types.PresenceListDocument,
    "\n  query multiRevisionTagVersionHistoryQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionMetadataWithChangeMetrics\n      }\n      totalCount\n    }\n  }\n": types.multiRevisionTagVersionHistoryQueryDocument,
    "\n  query TagVersionHistory($documentId: String) {\n    revision(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...RevisionDisplay\n      }\n    }\n  }\n": types.TagVersionHistoryDocument,
    "\n    mutation revertToRevision($tagId: String!, $revertToRevisionId: String!, $contributorsLimit: Int) {\n      revertTagToRevision(tagId: $tagId, revertToRevisionId: $revertToRevisionId) {\n        ...TagPageFragment\n      }\n    }\n  ": types.revertToRevisionDocument,
    "\n  mutation createElicitQuestionCreateClaimDialog($data: CreateElicitQuestionDataInput!) {\n    createElicitQuestion(data: $data) {\n      data {\n        ...ElicitQuestionFragment\n      }\n    }\n  }\n": types.createElicitQuestionCreateClaimDialogDocument,
    "\n    query ConvertDocument($document: JSON, $targetFormat: String) {\n      convertDocument(document: $document, targetFormat: $targetFormat)\n    }\n  ": types.ConvertDocumentDocument,
    "\n  query multiPostEventsHomeQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": types.multiPostEventsHomeQueryDocument,
    "\n  mutation updateUserEventsHome($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersProfile\n      }\n    }\n  }\n": types.updateUserEventsHomeDocument,
    "\n  query FMCrosspostControl($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersCrosspostInfo\n      }\n    }\n  }\n": types.FMCrosspostControlDocument,
    "\n    mutation unlinkCrossposter {\n      unlinkCrossposter\n    }\n  ": types.unlinkCrossposterDocument,
    "\n  query multiTagFormComponentPostEditorTaggingQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagFormComponentPostEditorTaggingQueryDocument,
    "\n  query ImageUpload($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": types.ImageUploadDocument,
    "\n  query multiPodcastEpisodePodcastEpisodeInputQuery($selector: PodcastEpisodeSelector, $limit: Int, $enableTotal: Boolean) {\n    podcastEpisodes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PodcastEpisodeFull\n      }\n      totalCount\n    }\n  }\n": types.multiPodcastEpisodePodcastEpisodeInputQueryDocument,
    "\n  query multiPodcastPodcastEpisodeInputQuery($selector: PodcastSelector, $limit: Int, $enableTotal: Boolean) {\n    podcasts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PodcastSelect\n      }\n      totalCount\n    }\n  }\n": types.multiPodcastPodcastEpisodeInputQueryDocument,
    "\n  mutation createPodcastEpisodePodcastEpisodeInput($data: CreatePodcastEpisodeDataInput!) {\n    createPodcastEpisode(data: $data) {\n      data {\n        ...PodcastEpisodesDefaultFragment\n      }\n    }\n  }\n": types.createPodcastEpisodePodcastEpisodeInputDocument,
    "\n  query multiLocalgroupSelectLocalgroupQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsBase\n      }\n      totalCount\n    }\n  }\n": types.multiLocalgroupSelectLocalgroupQueryDocument,
    "\n  query SequencesListEditorItem($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesPageFragment\n      }\n    }\n  }\n": types.SequencesListEditorItemDocument,
    "\n  query SingleTagItem($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagBasicInfo\n      }\n    }\n  }\n": types.SingleTagItemDocument,
    "\n  query SingleUsersItem($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersProfile\n      }\n    }\n  }\n": types.SingleUsersItemDocument,
    "\n  query multiTagFlagTagFlagToggleListQuery($selector: TagFlagSelector, $limit: Int, $enableTotal: Boolean) {\n    tagFlags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFlagFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagFlagTagFlagToggleListQueryDocument,
    "\n  query TagSelect($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagBasicInfo\n      }\n    }\n  }\n": types.TagSelectDocument,
    "\n  mutation updateForumEventForumEventForm($selector: SelectorInput!, $data: UpdateForumEventDataInput!) {\n    updateForumEvent(selector: $selector, data: $data) {\n      data {\n        ...ForumEventsEdit\n      }\n    }\n  }\n": types.updateForumEventForumEventFormDocument,
    "\n  mutation createForumEventForumEventForm($data: CreateForumEventDataInput!) {\n    createForumEvent(data: $data) {\n      data {\n        ...ForumEventsEdit\n      }\n    }\n  }\n": types.createForumEventForumEventFormDocument,
    "\n  query ForumEventForm($documentId: String) {\n    forumEvent(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ForumEventsEdit\n      }\n    }\n  }\n": types.ForumEventFormDocument,
    "\n  query multiCommentForumEventPollQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n": types.multiCommentForumEventPollQueryDocument,
    "\n  query multiUserForumEventPollQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiUserForumEventPollQueryDocument,
    "\n  query ForumEventPoll($documentId: String) {\n    forumEvent(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ForumEventsDisplay\n      }\n    }\n  }\n": types.ForumEventPollDocument,
    "\n    mutation AddForumEventVote($forumEventId: String!, $x: Float!, $delta: Float, $postIds: [String]) {\n      AddForumEventVote(forumEventId: $forumEventId, x: $x, delta: $delta, postIds: $postIds)\n    }\n  ": types.AddForumEventVoteDocument,
    "\n    mutation RemoveForumEventVote($forumEventId: String!) {\n      RemoveForumEventVote(forumEventId: $forumEventId)\n    }\n  ": types.RemoveForumEventVoteDocument,
    "\n  query ForumEventPostPageBanner($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsDetails\n      }\n    }\n  }\n": types.ForumEventPostPageBannerDocument,
    "\n  query ForumEventPostPagePollSection2($documentId: String) {\n    forumEvent(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ForumEventsDisplay\n      }\n    }\n  }\n": types.ForumEventPostPagePollSection2Document,
    "\n  query ForumEventPostPagePollSection($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsDetails\n      }\n    }\n  }\n": types.ForumEventPostPagePollSectionDocument,
    "\n  query multiCommentForumEventStickersQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n": types.multiCommentForumEventStickersQueryDocument,
    "\n  query multiUserForumEventStickersQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiUserForumEventStickersQueryDocument,
    "\n    mutation RemoveForumEventSticker($forumEventId: String!, $stickerId: String!) {\n      RemoveForumEventSticker(forumEventId: $forumEventId, stickerId: $stickerId)\n    }\n  ": types.RemoveForumEventStickerDocument,
    "\n  query multiForumEventForumEventsListQuery($selector: ForumEventSelector, $limit: Int, $enableTotal: Boolean) {\n    forumEvents(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ForumEventsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiForumEventForumEventsListQueryDocument,
    "\n    query MultiPostAnalyticsQuery($userId: String, $postIds: [String], $sortBy: String, $desc: Boolean, $limit: Int) {\n      MultiPostAnalytics(userId: $userId, postIds: $postIds, sortBy: $sortBy, desc: $desc, limit: $limit) {\n        posts {\n          _id\n          title\n          slug\n          postedAt\n          views\n          uniqueViews\n          reads\n          meanReadingTime\n          karma\n          comments\n        }\n        totalCount\n      }\n    }\n  ": types.MultiPostAnalyticsQueryDocument,
    "\n    query AnalyticsSeriesQuery($userId: String, $postIds: [String], $startDate: Date, $endDate: Date) {\n      AnalyticsSeries(userId: $userId, postIds: $postIds, startDate: $startDate, endDate: $endDate) {\n        date\n        views\n        reads\n        karma\n        comments\n      }\n    }\n  ": types.AnalyticsSeriesQueryDocument,
    "\n  query multiBookmarkuseBookmarkQuery($selector: BookmarkSelector, $limit: Int, $enableTotal: Boolean) {\n    bookmarks(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...BookmarksDefaultFragment\n      }\n      totalCount\n    }\n  }\n": types.multiBookmarkuseBookmarkQueryDocument,
    "\n    mutation ToggleBookmarkMutation($input: ToggleBookmarkInput!) {\n      toggleBookmark(input: $input) {\n        data {\n          ...BookmarksDefaultFragment\n        }\n      }\n    }\n  ": types.ToggleBookmarkMutationDocument,
    "\n  query multiForumEventuseCurrentForumEventQuery($selector: ForumEventSelector, $limit: Int, $enableTotal: Boolean) {\n    forumEvents(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ForumEventsDisplay\n      }\n      totalCount\n    }\n  }\n": types.multiForumEventuseCurrentForumEventQueryDocument,
    "\n    query CurrentFrontpageSurvey {\n      CurrentFrontpageSurvey {\n        ...SurveyScheduleMinimumInfo\n      }\n    }\n  ": types.CurrentFrontpageSurveyDocument,
    "\n      mutation UserExpandFrontpageSection($section: String!, $expanded: Boolean!) {\n        UserExpandFrontpageSection(section: $section, expanded: $expanded)\n      }\n    ": types.UserExpandFrontpageSectionDocument,
    "\n  query GetCrosspostQuery($args: JSON) {\n    getCrosspost(args: $args)\n  }\n": types.GetCrosspostQueryDocument,
    "\n    mutation initiateConversation($participantIds: [String!]!, $af: Boolean, $moderator: Boolean) {\n      initiateConversation(participantIds: $participantIds, af: $af, moderator: $moderator) {\n        ...ConversationsMinimumInfo\n      }\n    }\n  ": types.initiateConversationDocument,
    "\n      mutation markConversationRead($conversationId: String!) {\n        markConversationRead(conversationId: $conversationId)\n      }\n    ": types.markConversationReadDocument,
    "\n  query multiSubscriptionuseNotifyMeQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SubscriptionState\n      }\n      totalCount\n    }\n  }\n": types.multiSubscriptionuseNotifyMeQueryDocument,
    "\n  mutation createSubscriptionuseNotifyMe($data: CreateSubscriptionDataInput!) {\n    createSubscription(data: $data) {\n      data {\n        ...SubscriptionState\n      }\n    }\n  }\n": types.createSubscriptionuseNotifyMeDocument,
    "\n    query PostAnalyticsQuery($postId: String!) {\n      PostAnalytics(postId: $postId) {\n        allViews\n        uniqueClientViews\n        uniqueClientViews10Sec\n        medianReadingTime\n        uniqueClientViews5Min\n        uniqueClientViewsSeries {\n          date\n          uniqueClientViews\n        }\n      }\n    }\n  ": types.PostAnalyticsQueryDocument,
    "\n  query multiPostusePublishedPostsQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshinePostsList\n      }\n      totalCount\n    }\n  }\n": types.multiPostusePublishedPostsQueryDocument,
    "\n  query RecentOpportunitiesQuery($selector: PostSelector, $limit: Int) {\n    posts(selector: $selector, limit: $limit) {\n      results {\n        ...PostsListWithVotes\n      }\n    }\n  }\n": types.RecentOpportunitiesQueryDocument,
    "\n  query RecentOpportunitiesWithSequenceQuery($selector: PostSelector, $limit: Int) {\n    posts(selector: $selector, limit: $limit) {\n      results {\n        ...PostsListWithVotesAndSequence\n      }\n    }\n  }\n": types.RecentOpportunitiesWithSequenceQueryDocument,
    "\n    mutation increasePostViewCountMutation($postId: String) {\n      increasePostViewCount(postId: $postId)\n    }\n  ": types.increasePostViewCountMutationDocument,
    "\n    mutation sendVertexViewItemEventMutation($postId: String!, $attributionId: String) {\n      sendVertexViewItemEvent(postId: $postId, attributionId: $attributionId)\n    }\n  ": types.sendVertexViewItemEventMutationDocument,
    "\n    mutation markPostCommentsRead($postId: String!) {\n      markPostCommentsRead(postId: $postId)\n    }\n  ": types.markPostCommentsReadDocument,
    "\n    mutation RefreshDbSettings {\n      RefreshDbSettings\n    }\n  ": types.RefreshDbSettingsDocument,
    "\n  mutation rejectPostMutation($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...SunshinePostsList\n      }\n    }\n  }\n": types.rejectPostMutationDocument,
    "\n  mutation rejectCommentMutation($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n": types.rejectCommentMutationDocument,
    "\n  query multiMultiDocumentuseTagOrLensQuery($selector: MultiDocumentSelector, $limit: Int, $enableTotal: Boolean) {\n    multiDocuments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...MultiDocumentParentDocument\n      }\n      totalCount\n    }\n  }\n": types.multiMultiDocumentuseTagOrLensQueryDocument,
    "\n    query UnreadNotificationCountQuery {\n      unreadNotificationCounts {\n        unreadNotifications\n        unreadPrivateMessages\n        faviconBadgeNumber\n        checkedAt\n      }\n    }\n  ": types.UnreadNotificationCountQueryDocument,
    "\n  mutation updateUseruseUpdateCurrentUser($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": types.updateUseruseUpdateCurrentUserDocument,
    "\n  mutation updateUseruseUpdateGlossaryPinnedState($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": types.updateUseruseUpdateGlossaryPinnedStateDocument,
    "\n  query multiJargonTermGlossaryEditFormQuery($selector: JargonTermSelector, $limit: Int, $enableTotal: Boolean) {\n    jargonTerms(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...JargonTerms\n      }\n      totalCount\n    }\n  }\n": types.multiJargonTermGlossaryEditFormQueryDocument,
    "\n  mutation updateJargonTermGlossaryEditForm1($selector: SelectorInput!, $data: UpdateJargonTermDataInput!) {\n    updateJargonTerm(selector: $selector, data: $data) {\n      data {\n        ...JargonTerms\n      }\n    }\n  }\n": types.updateJargonTermGlossaryEditForm1Document,
    "\n  mutation updatePostGlossaryEditForm($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsEdit\n      }\n    }\n  }\n": types.updatePostGlossaryEditFormDocument,
    "\n    mutation getNewJargonTerms($postId: String!, $glossaryPrompt: String, $examplePost: String, $exampleTerm: String, $exampleAltTerm: String, $exampleDefinition: String) {\n      getNewJargonTerms(postId: $postId, glossaryPrompt: $glossaryPrompt, examplePost: $examplePost, exampleTerm: $exampleTerm, exampleAltTerm: $exampleAltTerm, exampleDefinition: $exampleDefinition) {\n        ...JargonTerms\n      }\n    }\n  ": types.getNewJargonTermsDocument,
    "\n  query multiPostGlossaryEditorPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean, $version: String) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsEditQueryFragment\n      }\n      totalCount\n    }\n  }\n": types.multiPostGlossaryEditorPageQueryDocument,
    "\n  mutation updateJargonTermJargonEditorRow($selector: SelectorInput!, $data: UpdateJargonTermDataInput!) {\n    updateJargonTerm(selector: $selector, data: $data) {\n      data {\n        ...JargonTerms\n      }\n    }\n  }\n": types.updateJargonTermJargonEditorRowDocument,
    "\n  mutation updateJargonTermJargonTermForm($selector: SelectorInput!, $data: UpdateJargonTermDataInput!) {\n    updateJargonTerm(selector: $selector, data: $data) {\n      data {\n        ...JargonTerms\n      }\n    }\n  }\n": types.updateJargonTermJargonTermFormDocument,
    "\n  mutation createJargonTermJargonTermForm($data: CreateJargonTermDataInput!) {\n    createJargonTerm(data: $data) {\n      data {\n        ...JargonTerms\n      }\n    }\n  }\n": types.createJargonTermJargonTermFormDocument,
    "\n    query getPostsWithApprovedJargon($limit: Int!) {\n      PostsWithApprovedJargon(limit: $limit) {\n        results {\n          post {\n            ...PostsListWithVotes\n          }\n          jargonTerms {\n            ...JargonTerms\n          }\n        }\n      }\n    }\n  ": types.getPostsWithApprovedJargonDocument,
    "\n  query multiCommentAutocompleteModelSettingsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": types.multiCommentAutocompleteModelSettingsQueryDocument,
    "\n  query multiPostAutocompleteModelSettingsQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": types.multiPostAutocompleteModelSettingsQueryDocument,
    "\n  query multiLlmConversationLlmChatWrapperQuery($selector: LlmConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    llmConversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...LlmConversationsFragment\n      }\n      totalCount\n    }\n  }\n": types.multiLlmConversationLlmChatWrapperQueryDocument,
    "\n  mutation updateLlmConversationLlmChatWrapper($selector: SelectorInput!, $data: UpdateLlmConversationDataInput!) {\n    updateLlmConversation(selector: $selector, data: $data) {\n      data {\n        ...LlmConversationsFragment\n      }\n    }\n  }\n": types.updateLlmConversationLlmChatWrapperDocument,
    "\n  query LlmChatWrapper($documentId: String) {\n    llmConversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...LlmConversationsWithMessagesFragment\n      }\n    }\n  }\n": types.LlmChatWrapperDocument,
    "\n  query multiLlmConversationLlmConversationsViewingPageQuery($selector: LlmConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    llmConversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...LlmConversationsViewingPageFragment\n      }\n      totalCount\n    }\n  }\n": types.multiLlmConversationLlmConversationsViewingPageQueryDocument,
    "\n  query LlmConversationsViewingPage($documentId: String) {\n    llmConversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...LlmConversationsWithMessagesFragment\n      }\n    }\n  }\n": types.LlmConversationsViewingPageDocument,
    "\n  query PostSummaryDialog($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostWithGeneratedSummary\n      }\n    }\n  }\n": types.PostSummaryDialogDocument,
    "\n  query PostLinkPreviewSequence($documentId: String, $allowNull: Boolean) {\n    sequence(input: { selector: { documentId: $documentId }, allowNull: $allowNull }) {\n      result {\n        ...SequencesPageFragment\n      }\n    }\n  }\n": types.PostLinkPreviewSequenceDocument,
    "\n  query PostLinkPreviewComment($documentId: String, $allowNull: Boolean) {\n    comment(input: { selector: { documentId: $documentId }, allowNull: $allowNull }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n": types.PostLinkPreviewCommentDocument,
    "\n  query PostLinkPreviewPost($documentId: String, $allowNull: Boolean) {\n    post(input: { selector: { documentId: $documentId }, allowNull: $allowNull }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": types.PostLinkPreviewPostDocument,
    "\n    query ArbitalPageRequest($arbitalSlug: String!) {\n      ArbitalPageData(pageAlias: $arbitalSlug) {\n        title\n        html\n      }\n    }\n  ": types.ArbitalPageRequestDocument,
    "\n  mutation updateUserCommunityHome($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersProfile\n      }\n    }\n  }\n": types.updateUserCommunityHomeDocument,
    "\n  query multiUserCommunityMapQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMapEntry\n      }\n      totalCount\n    }\n  }\n": types.multiUserCommunityMapQueryDocument,
    "\n  query multiLocalgroupCommunityMapQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n": types.multiLocalgroupCommunityMapQueryDocument,
    "\n  query multiPostCommunityMapQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": types.multiPostCommunityMapQueryDocument,
    "\n  mutation updateLocalgroupGroupFormDialog($selector: SelectorInput!, $data: UpdateLocalgroupDataInput!) {\n    updateLocalgroup(selector: $selector, data: $data) {\n      data {\n        ...localGroupsHomeFragment\n      }\n    }\n  }\n": types.updateLocalgroupGroupFormDialogDocument,
    "\n  mutation createLocalgroupGroupFormDialog($data: CreateLocalgroupDataInput!) {\n    createLocalgroup(data: $data) {\n      data {\n        ...localGroupsHomeFragment\n      }\n    }\n  }\n": types.createLocalgroupGroupFormDialogDocument,
    "\n  query GroupFormDialog($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsEdit\n      }\n    }\n  }\n": types.GroupFormDialogDocument,
    "\n  query multiPostLocalGroupPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": types.multiPostLocalGroupPageQueryDocument,
    "\n  query LocalGroupPage($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsHomeFragment\n      }\n    }\n  }\n": types.LocalGroupPageDocument,
    "\n  query multiSubscriptionLocalGroupSubscribersQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...MembersOfGroupFragment\n      }\n      totalCount\n    }\n  }\n": types.multiSubscriptionLocalGroupSubscribersQueryDocument,
    "\n  query multiLocalgroupLocalGroupsListQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n": types.multiLocalgroupLocalGroupsListQueryDocument,
    "\n  query SetPersonalMapLocationDialog($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersEdit\n      }\n    }\n  }\n": types.SetPersonalMapLocationDialogDocument,
    "\n  query multiPostTabNavigationEventsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": types.multiPostTabNavigationEventsListQueryDocument,
    "\n  query multiMessageConversationContentsQuery($selector: MessageSelector, $limit: Int, $enableTotal: Boolean) {\n    messages(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...messageListFragment\n      }\n      totalCount\n    }\n  }\n": types.multiMessageConversationContentsQueryDocument,
    "\n  mutation updateConversationInboxNavigation($selector: SelectorInput!, $data: UpdateConversationDataInput!) {\n    updateConversation(selector: $selector, data: $data) {\n      data {\n        ...ConversationsList\n      }\n    }\n  }\n": types.updateConversationInboxNavigationDocument,
    "\n  query ConversationPage($documentId: String) {\n    conversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ConversationsList\n      }\n    }\n  }\n": types.ConversationPageDocument,
    "\n  query multiMessageConversationPreviewQuery($selector: MessageSelector, $limit: Int, $enableTotal: Boolean) {\n    messages(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...messageListFragment\n      }\n      totalCount\n    }\n  }\n": types.multiMessageConversationPreviewQueryDocument,
    "\n  query ConversationPreview($documentId: String) {\n    conversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ConversationsList\n      }\n    }\n  }\n": types.ConversationPreviewDocument,
    "\n  mutation updateConversationConversationTitleEditForm($selector: SelectorInput!, $data: UpdateConversationDataInput!) {\n    updateConversation(selector: $selector, data: $data) {\n      data {\n        ...ConversationsList\n      }\n    }\n  }\n": types.updateConversationConversationTitleEditFormDocument,
    "\n  query multiConversationFriendlyInboxQuery($selector: ConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    conversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ConversationsListWithReadStatus\n      }\n      totalCount\n    }\n  }\n": types.multiConversationFriendlyInboxQueryDocument,
    "\n  query FriendlyInbox($documentId: String) {\n    conversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ConversationsListWithReadStatus\n      }\n    }\n  }\n": types.FriendlyInboxDocument,
    "\n  query multiConversationInboxNavigationQuery($selector: ConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    conversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ConversationsList\n      }\n      totalCount\n    }\n  }\n": types.multiConversationInboxNavigationQueryDocument,
    "\n  query MessageUserGetUserBySlug($slug: String!) {\n    GetUserBySlug(slug: $slug) {\n      ...UsersMinimumInfo\n    }\n  }\n": types.MessageUserGetUserBySlugDocument,
    "\n  mutation createMessageMessagesNewForm($data: CreateMessageDataInput!) {\n    createMessage(data: $data) {\n      data {\n        ...messageListFragment\n      }\n    }\n  }\n": types.createMessageMessagesNewFormDocument,
    "\n  query MessagesNewForm($documentId: String) {\n    moderationTemplate(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ModerationTemplateFragment\n      }\n    }\n  }\n": types.MessagesNewFormDocument,
    "\n  mutation updateModerationTemplateModerationTemplateForm($selector: SelectorInput!, $data: UpdateModerationTemplateDataInput!) {\n    updateModerationTemplate(selector: $selector, data: $data) {\n      data {\n        ...ModerationTemplateFragment\n      }\n    }\n  }\n": types.updateModerationTemplateModerationTemplateFormDocument,
    "\n  mutation createModerationTemplateModerationTemplateForm($data: CreateModerationTemplateDataInput!) {\n    createModerationTemplate(data: $data) {\n      data {\n        ...ModerationTemplateFragment\n      }\n    }\n  }\n": types.createModerationTemplateModerationTemplateFormDocument,
    "\n  query multiModerationTemplateModerationTemplatesPageQuery($selector: ModerationTemplateSelector, $limit: Int, $enableTotal: Boolean) {\n    moderationTemplates(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModerationTemplateFragment\n      }\n      totalCount\n    }\n  }\n": types.multiModerationTemplateModerationTemplatesPageQueryDocument,
    "\n  query CommentOnYourDraftNotificationHover($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsMinimumInfo\n      }\n    }\n  }\n": types.CommentOnYourDraftNotificationHoverDocument,
    "\n      query EmailPreviewQuery($notificationIds: [String], $postId: String) {\n        EmailPreview(notificationIds: $notificationIds, postId: $postId) { to subject html text }\n      }\n  ": types.EmailPreviewQueryDocument,
    "\n  query multiNotificationNotificationsListQuery($selector: NotificationSelector, $limit: Int, $enableTotal: Boolean) {\n    notifications(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...NotificationsList\n      }\n      totalCount\n    }\n  }\n": types.multiNotificationNotificationsListQueryDocument,
    "\n  query NotificationsMenuButton($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UserKarmaChanges\n      }\n    }\n  }\n": types.NotificationsMenuButtonDocument,
    "\n  query NotificationsPage($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UserKarmaChanges\n      }\n    }\n  }\n": types.NotificationsPageDocument,
    "\n  query NotificationsPageItem($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n": types.NotificationsPageItemDocument,
    "\n    query getNotificationDisplays($limit: Int, $type: String) {\n      NotificationDisplays(limit: $limit, type: $type) {\n        results\n      }\n    }\n  ": types.getNotificationDisplaysDocument,
    "\n    mutation MarkAllNotificationsAsRead {\n      MarkAllNotificationsAsRead\n    }\n  ": types.MarkAllNotificationsAsReadDocument,
    "\n  mutation updateNotificationNotificationsPopoverNotification($selector: SelectorInput!, $data: UpdateNotificationDataInput!) {\n    updateNotification(selector: $selector, data: $data) {\n      data {\n        ...NotificationsList\n      }\n    }\n  }\n": types.updateNotificationNotificationsPopoverNotificationDocument,
    "\n  query TagRelNotificationItem($documentId: String) {\n    tagRel(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagRelFragment\n      }\n    }\n  }\n": types.TagRelNotificationItemDocument,
    "\n  query multiUserAdminPaymentsPageQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n": types.multiUserAdminPaymentsPageQueryDocument,
    "\n  mutation updateUserEditPaymentInfoPage($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n": types.updateUserEditPaymentInfoPageDocument,
    "\n  query multiTagusePeopleDirectoryQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagName\n      }\n      totalCount\n    }\n  }\n": types.multiTagusePeopleDirectoryQueryDocument,
    "\n    query ActiveTagCount {\n      ActiveTagCount\n    }\n  ": types.ActiveTagCountDocument,
    "\n  query AddToCalendarButton($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsPlaintextDescription\n      }\n    }\n  }\n": types.AddToCalendarButtonDocument,
    "\n  query multiPostCurrentOpenThreadPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiPostCurrentOpenThreadPageQueryDocument,
    "\n  query multiPostDraftsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": types.multiPostDraftsListQueryDocument,
    "\n  mutation updatePostDraftsList($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": types.updatePostDraftsListDocument,
    "\n  mutation updatePostExternalPostImporter($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": types.updatePostExternalPostImporterDocument,
    "\n  mutation createCommentExternalPostImporter($data: CreateCommentDataInput!) {\n    createComment(data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n": types.createCommentExternalPostImporterDocument,
    "\n    mutation importUrlAsDraftPost($url: String!) {\n      importUrlAsDraftPost(url: $url) {\n        alreadyExists\n        post {\n          _id\n          slug\n          title\n          content\n          url\n          postedAt\n          createdAt\n          modifiedAt\n          userId\n          draft\n          coauthorStatuses {\n            userId\n            confirmed\n            requested\n          }\n        }\n      }\n    }\n  ": types.importUrlAsDraftPostDocument,
    "\n  query FeedPostsHighlight($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsExpandedHighlight\n      }\n    }\n  }\n": types.FeedPostsHighlightDocument,
    "\n  query multiGoogleServiceAccountSessionGoogleDocImportButtonQuery($selector: GoogleServiceAccountSessionSelector, $limit: Int, $enableTotal: Boolean) {\n    googleServiceAccountSessions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...GoogleServiceAccountSessionInfo\n      }\n      totalCount\n    }\n  }\n": types.multiGoogleServiceAccountSessionGoogleDocImportButtonQueryDocument,
    "\n      query latestGoogleDocMetadata($postId: String!, $version: String) {\n        latestGoogleDocMetadata(postId: $postId, version: $version)\n      }\n    ": types.latestGoogleDocMetadataDocument,
    "\n      query CanAccessGoogleDoc($fileUrl: String!) {\n        CanAccessGoogleDoc(fileUrl: $fileUrl)\n      }\n    ": types.CanAccessGoogleDocDocument,
    "\n      mutation ImportGoogleDoc($fileUrl: String!, $postId: String) {\n        ImportGoogleDoc(fileUrl: $fileUrl, postId: $postId) {\n          ...PostsBase\n        }\n      }\n    ": types.ImportGoogleDocDocument,
    "\n  query multiPostLWPostsByVoteQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": types.multiPostLWPostsByVoteQueryDocument,
    "\n  mutation createPostNewDialogueDialog($data: CreatePostDataInput!) {\n    createPost(data: $data) {\n      data {\n        ...PostsEdit\n      }\n    }\n  }\n": types.createPostNewDialogueDialogDocument,
    "\n  query multiPostPingbacksListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": types.multiPostPingbacksListQueryDocument,
    "\n  mutation updatePostPostForm($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsEditMutationFragment\n      }\n    }\n  }\n": types.updatePostPostFormDocument,
    "\n  mutation createPostPostForm($data: CreatePostDataInput!) {\n    createPost(data: $data) {\n      data {\n        ...PostsEditMutationFragment\n      }\n    }\n  }\n": types.createPostPostFormDocument,
    "\n  query multiUserMostValuablePostPostMostValuableCheckboxQuery($selector: UserMostValuablePostSelector, $limit: Int, $enableTotal: Boolean) {\n    userMostValuablePosts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserMostValuablePostInfo\n      }\n      totalCount\n    }\n  }\n": types.multiUserMostValuablePostPostMostValuableCheckboxQueryDocument,
    "\n  mutation updateUserMostValuablePostPostMostValuableCheckbox($selector: SelectorInput!, $data: UpdateUserMostValuablePostDataInput!) {\n    updateUserMostValuablePost(selector: $selector, data: $data) {\n      data {\n        ...UserMostValuablePostInfo\n      }\n    }\n  }\n": types.updateUserMostValuablePostPostMostValuableCheckboxDocument,
    "\n  mutation createUserMostValuablePostPostMostValuableCheckbox($data: CreateUserMostValuablePostDataInput!) {\n    createUserMostValuablePost(data: $data) {\n      data {\n        ...UserMostValuablePostInfo\n      }\n    }\n  }\n": types.createUserMostValuablePostPostMostValuableCheckboxDocument,
    "\n  query multiPostPostsByVoteQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": types.multiPostPostsByVoteQueryDocument,
    "\n  query multiVotePostsByVoteWrapperQuery($selector: VoteSelector, $limit: Int, $enableTotal: Boolean) {\n    votes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserVotes\n      }\n      totalCount\n    }\n  }\n": types.multiVotePostsByVoteWrapperQueryDocument,
    "\n  query multiRevisionPostsCompareRevisionsQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionHistoryEntry\n      }\n      totalCount\n    }\n  }\n": types.multiRevisionPostsCompareRevisionsQueryDocument,
    "\n  query PostsCompareRevisions($documentId: String, $sequenceId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsWithNavigation\n      }\n    }\n  }\n": types.PostsCompareRevisionsDocument,
    "\n  query multiCommentPostsDialogItemNewCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": types.multiCommentPostsDialogItemNewCommentsListQueryDocument,
    "\n  query PostsEditFormUser($documentId: String, $eventForm: Boolean) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersCurrentPostRateLimit\n      }\n    }\n  }\n": types.PostsEditFormUserDocument,
    "\n  query PostsEditFormPost($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsEditQueryFragment\n      }\n    }\n  }\n": types.PostsEditFormPostDocument,
    "\n  query PostsGroupDetails($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsHomeFragment\n      }\n    }\n  }\n": types.PostsGroupDetailsDocument,
    "\n  query PostsHighlight($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsExpandedHighlight\n      }\n    }\n  }\n": types.PostsHighlightDocument,
    "\n  query multiCommentPostsItemNewCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": types.multiCommentPostsItemNewCommentsListQueryDocument,
    "\n    query LatestDialogueMessages($dialogueId: String!, $unreadCount: Int!) {\n      latestDialogueMessages(dialogueId: $dialogueId, numMessages: $unreadCount)\n    }\n  ": types.LatestDialogueMessagesDocument,
    "\n  query PostsItemWrapper($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": types.PostsItemWrapperDocument,
    "\n  mutation createPostPostsNewForm($data: CreatePostDataInput!) {\n    createPost(data: $data) {\n      data {\n        ...PostsEdit\n      }\n    }\n  }\n": types.createPostPostsNewFormDocument,
    "\n  query PostsNewForm4($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersEdit\n      }\n    }\n  }\n": types.PostsNewForm4Document,
    "\n  query PostsNewForm3($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsEditMutationFragment\n      }\n    }\n  }\n": types.PostsNewForm3Document,
    "\n  query PostsNewForm2($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsIsOnline\n      }\n    }\n  }\n": types.PostsNewForm2Document,
    "\n  query PostsNewForm1($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsEditQueryFragment\n      }\n    }\n  }\n": types.PostsNewForm1Document,
    "\n  query PostsNewForm($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n": types.PostsNewFormDocument,
    "\n  query multiReviewWinnerBestOfLessWrongAnnouncementQuery($selector: ReviewWinnerSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewWinners(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ReviewWinnerAnnouncement\n      }\n      totalCount\n    }\n  }\n": types.multiReviewWinnerBestOfLessWrongAnnouncementQueryDocument,
    "\n  mutation createSplashArtCoordinateImageCropPreview($data: CreateSplashArtCoordinateDataInput!) {\n    createSplashArtCoordinate(data: $data) {\n      data {\n        ...SplashArtCoordinates\n      }\n    }\n  }\n": types.createSplashArtCoordinateImageCropPreviewDocument,
    "\n  mutation createSplashArtCoordinatePostWithArtGrid($data: CreateSplashArtCoordinateDataInput!) {\n    createSplashArtCoordinate(data: $data) {\n      data {\n        ...SplashArtCoordinatesEdit\n      }\n    }\n  }\n": types.createSplashArtCoordinatePostWithArtGridDocument,
    "\n  query multiCommentReviewPillContainerQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentWithRepliesFragment\n      }\n      totalCount\n    }\n  }\n": types.multiCommentReviewPillContainerQueryDocument,
    "\n    mutation flipSplashArtImage($reviewWinnerArtId: String!) {\n      flipSplashArtImage(reviewWinnerArtId: $reviewWinnerArtId)\n    }\n  ": types.flipSplashArtImageDocument,
    "\n  query multiReviewWinnerArtSplashImageEditingOptionsQuery($selector: ReviewWinnerArtSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewWinnerArts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ReviewWinnerArtImages\n      }\n      totalCount\n    }\n  }\n": types.multiReviewWinnerArtSplashImageEditingOptionsQueryDocument,
    "\n  query PostBody($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostSideComments\n      }\n    }\n  }\n": types.PostBodyDocument,
    "\n    mutation AcceptCoauthorRequest($postId: String, $userId: String, $accept: Boolean) {\n        acceptCoauthorRequest(postId: $postId, userId: $userId, accept: $accept) {\n          ...PostsDetails\n        }\n    }\n  ": types.AcceptCoauthorRequestDocument,
    "\n  query multiCommentPostsPageQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": types.multiCommentPostsPageQueryDocument,
    "\n  query postCommentsThreadQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": types.postCommentsThreadQueryDocument,
    "\n  query PostsPageWrapper1($documentId: String, $sequenceId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsWithNavigationAndRevision\n      }\n    }\n  }\n": types.PostsPageWrapper1Document,
    "\n  query PostsPageWrapper($documentId: String, $sequenceId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsWithNavigation\n      }\n    }\n  }\n": types.PostsPageWrapperDocument,
    "\n  query PostsRevisionsList($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsRevisionsList\n      }\n    }\n  }\n": types.PostsRevisionsListDocument,
    "\n    mutation RegisterRSVP($postId: String, $name: String, $email: String, $private: Boolean, $response: String) {\n        RSVPToEvent(postId: $postId, name: $name, email: $email, private: $private, response: $response) {\n        ...PostsDetails\n        }\n    }\n  ": types.RegisterRSVPDocument,
    "\n    mutation CancelRSVPToEvent($postId: String, $name: String, $userId: String) {\n        CancelRSVPToEvent(postId: $postId, name: $name, userId: $userId) {\n        ...PostsDetails\n        }\n    }\n  ": types.CancelRSVPToEventDocument,
    "\n  query LWPostsPreviewTooltip1($documentId: String, $dialogueMessageId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostWithDialogueMessage\n      }\n    }\n  }\n": types.LWPostsPreviewTooltip1Document,
    "\n  query LWPostsPreviewTooltip($documentId: String, $hash: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...HighlightWithHash\n      }\n    }\n  }\n": types.LWPostsPreviewTooltipDocument,
    "\n  query PostsPreviewTooltipSingle4($documentId: String) {\n    tagRel(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagRelFragment\n      }\n    }\n  }\n": types.PostsPreviewTooltipSingle4Document,
    "\n  query PostsPreviewTooltipSingle3($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n": types.PostsPreviewTooltipSingle3Document,
    "\n  query PostsPreviewTooltipSingle($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": types.PostsPreviewTooltipSingleDocument,
    "\n  query multiPostPostsTimeBlockQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": types.multiPostPostsTimeBlockQueryDocument,
    "\n  query getRecombeeLatestPosts($limit: Int, $settings: JSON) {\n    RecombeeLatestPosts(limit: $limit, settings: $settings) {\n      results {\n        post {\n          ...PostsListWithVotes\n        }\n        scenario\n        recommId\n        generatedAt\n        curated\n        stickied\n      }\n    }\n  }\n": types.getRecombeeLatestPostsDocument,
    "\n  query getRecombeeHybridPosts($limit: Int, $settings: JSON) {\n    RecombeeHybridPosts(limit: $limit, settings: $settings) {\n      results {\n        post {\n          ...PostsListWithVotes\n        }\n        scenario\n        recommId\n        generatedAt\n        curated\n        stickied\n      }\n    }\n  }\n": types.getRecombeeHybridPostsDocument,
    "\n  mutation createCommentDialogueSubmit($data: CreateCommentDataInput!) {\n    createComment(data: $data) {\n      data {\n        ...CommentEdit\n      }\n    }\n  }\n": types.createCommentDialogueSubmitDocument,
    "\n  query multiPostusePostQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsPage\n      }\n      totalCount\n    }\n  }\n": types.multiPostusePostQueryDocument,
    "\n  query postsListWithVotes($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": types.postsListWithVotesDocument,
    "\n  query postsListTagWithVotes($selector: PostSelector, $limit: Int, $enableTotal: Boolean, $tagId: String) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListTagWithVotes\n      }\n      totalCount\n    }\n  }\n": types.postsListTagWithVotesDocument,
    "\n  query multiCommentQuickTakesSectionQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n": types.multiCommentQuickTakesSectionQueryDocument,
    "\n  query multiTaguseQuickTakesTagsQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagPreviewFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTaguseQuickTakesTagsQueryDocument,
    "\n  query multiPostRecentDiscussionThreadsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean, $commentsLimit: Int, $maxAgeHours: Int, $af: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsRecentDiscussion\n      }\n      totalCount\n    }\n  }\n": types.multiPostRecentDiscussionThreadsListQueryDocument,
    "\n    query CuratedAndPopularThisWeek($limit: Int) {\n      CuratedAndPopularThisWeek(limit: $limit) {\n        results {\n          ...PostsListWithVotes\n        }\n      }\n    }\n  ": types.CuratedAndPopularThisWeekDocument,
    "\n  query multiPostRecommendationsSamplePageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": types.multiPostRecommendationsSamplePageQueryDocument,
    "\n  query WelcomePostItem($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n": types.WelcomePostItemDocument,
    "\n      mutation observeRecommendation($postId: String!) {\n        observeRecommendation(postId: $postId)\n      }\n    ": types.observeRecommendationDocument,
    "\n      mutation clickRecommendation($postId: String!) {\n        clickRecommendation(postId: $postId)\n      }\n    ": types.clickRecommendationDocument,
    "\n    query ContinueReadingQuery {\n      ContinueReading {\n        sequence {\n          ...SequenceContinueReadingFragment\n        }\n        collection {\n          ...CollectionContinueReadingFragment\n        }\n        nextPost {\n          ...PostsListWithVotes\n        }\n        numRead\n        numTotal\n        lastReadTime\n      }\n    }\n  ": types.ContinueReadingQueryDocument,
    "\n    mutation dismissRecommendation($postId: String) {\n      dismissRecommendation(postId: $postId)\n    }\n  ": types.dismissRecommendationDocument,
    "\n      query RecommendationsQuery($count: Int, $algorithm: JSON) {\n        Recommendations(count: $count, algorithm: $algorithm) {\n          ...PostsListWithVotesAndSequence\n        }\n      }\n    ": types.RecommendationsQueryDocument,
    "\n  query multiReviewWinnerArtBestOfLessWrongAdminQuery($selector: ReviewWinnerArtSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewWinnerArts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ReviewWinnerArtImages\n      }\n      totalCount\n    }\n  }\n": types.multiReviewWinnerArtBestOfLessWrongAdminQueryDocument,
    "\n    query BestOfLessWrongAdmin {\n      GetAllReviewWinners {\n        ...PostsTopItemInfo\n      }\n    }\n  ": types.BestOfLessWrongAdminDocument,
    "\n  query FrontpageBestOfLWWidget($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n": types.FrontpageBestOfLWWidgetDocument,
    "\n    mutation GenerateCoverImagesForPost($postId: String!, $prompt: String) {\n      generateCoverImagesForPost(postId: $postId, prompt: $prompt) { \n        _id\n      }\n    }\n  ": types.GenerateCoverImagesForPostDocument,
    "\n  query multiCommentLatestReviewQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": types.multiCommentLatestReviewQueryDocument,
    "\n  query PostNominatedNotification($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": types.PostNominatedNotificationDocument,
    "\n      query getPostsUserCommentedOn($limit: Int, $filter: PostReviewFilter, $sort: PostReviewSort) {\n        PostsUserCommentedOn(limit: $limit, filter: $filter, sort: $sort) {\n          posts {\n            ...PostsListWithVotes\n          }\n        }\n      }\n    ": types.getPostsUserCommentedOnDocument,
    "\n  query multiPostQuickReviewPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsReviewVotingList\n      }\n      totalCount\n    }\n  }\n": types.multiPostQuickReviewPageQueryDocument,
    "\n  query multiPostQuickReviewPage2022Query($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsReviewVotingList\n      }\n      totalCount\n    }\n  }\n": types.multiPostQuickReviewPage2022QueryDocument,
    "\n  query multiReviewVoteReviewAdminDashboardQuery($selector: ReviewVoteSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewVotes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...reviewAdminDashboard\n      }\n      totalCount\n    }\n  }\n": types.multiReviewVoteReviewAdminDashboardQueryDocument,
    "\n  query multiCommentReviewPostCommentsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentWithRepliesFragment\n      }\n      totalCount\n    }\n  }\n": types.multiCommentReviewPostCommentsQueryDocument,
    "\n  query multiCommentReviewProgressNominationsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": types.multiCommentReviewProgressNominationsQueryDocument,
    "\n  query multiCommentReviewProgressReviewsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": types.multiCommentReviewProgressReviewsQueryDocument,
    "\n  query multiReviewVoteReviewProgressVotingQuery($selector: ReviewVoteSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewVotes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...reviewVoteFragment\n      }\n      totalCount\n    }\n  }\n": types.multiReviewVoteReviewProgressVotingQueryDocument,
    "\n  query multiReviewVoteReviewVotingCanvasQuery($selector: ReviewVoteSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewVotes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...reviewVoteFragment\n      }\n      totalCount\n    }\n  }\n": types.multiReviewVoteReviewVotingCanvasQueryDocument,
    "\n    query GivingSeasonHeartsQuery($electionName: String!) {\n      GivingSeasonHearts(electionName: $electionName) {\n        userId\n        displayName\n        x\n        y\n        theta\n      }\n    }\n  ": types.GivingSeasonHeartsQueryDocument,
    "\n      mutation AddGivingSeasonHeart(\n        $electionName: String!,\n        $x: Float!,\n        $y: Float!,\n        $theta: Float!\n      ) {\n        AddGivingSeasonHeart(\n          electionName: $electionName,\n          x: $x,\n          y: $y,\n          theta: $theta\n        ) {\n          userId\n          displayName\n          x\n          y\n          theta\n        }\n      }\n    ": types.AddGivingSeasonHeartDocument,
    "\n      mutation RemoveGivingSeasonHeart($electionName: String!) {\n        RemoveGivingSeasonHeart(electionName: $electionName) {\n          userId\n          displayName\n          x\n          y\n          theta\n        }\n      }\n    ": types.RemoveGivingSeasonHeartDocument,
    "\n  query ReviewVotingExpandedPost($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": types.ReviewVotingExpandedPostDocument,
    "\n  query multiPostReviewVotingPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsReviewVotingList\n      }\n      totalCount\n    }\n  }\n": types.multiPostReviewVotingPageQueryDocument,
    "\n    mutation submitReviewVote($postId: String, $qualitativeScore: Int, $quadraticChange: Int, $newQuadraticScore: Int, $comment: String, $year: String, $dummy: Boolean) {\n      submitReviewVote(postId: $postId, qualitativeScore: $qualitativeScore, quadraticChange: $quadraticChange, comment: $comment, newQuadraticScore: $newQuadraticScore, year: $year, dummy: $dummy) {\n        ...PostsReviewVotingList\n      }\n    }\n  ": types.submitReviewVoteDocument,
    "\n  mutation updateUserReviews2019($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": types.updateUserReviews2019Document,
    "\n  query multiCommentReviewsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": types.multiCommentReviewsListQueryDocument,
    "\n  query RotatingReviewWinnerSpotlightDisplay($documentId: String) {\n    spotlight(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SpotlightDisplay\n      }\n    }\n  }\n": types.RotatingReviewWinnerSpotlightDisplayDocument,
    "\n  query RotatingReviewWinnerSpotlight {\n    GetAllReviewWinners {\n      ...PostForReviewWinnerItem\n    }\n  }\n": types.RotatingReviewWinnerSpotlightDocument,
    "\n  query multiCommentSingleLineReviewsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": types.multiCommentSingleLineReviewsListQueryDocument,
    "\n  query multiUserUserReviewsQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n": types.multiUserUserReviewsQueryDocument,
    "\n  mutation updateRevisionCompareRevisions($selector: SelectorInput!, $data: UpdateRevisionDataInput!) {\n    updateRevision(selector: $selector, data: $data) {\n      data {\n        ...RevisionEdit\n      }\n    }\n  }\n": types.updateRevisionCompareRevisionsDocument,
    "\n    query RevisionsDiff($collectionName: String!, $fieldName: String!, $id: String!, $beforeRev: String, $afterRev: String!, $trim: Boolean) {\n      RevisionsDiff(collectionName: $collectionName, fieldName: $fieldName, id: $id, beforeRev: $beforeRev, afterRev: $afterRev, trim: $trim)\n    }\n  ": types.RevisionsDiffDocument,
    "\n  query multiRevisionPostsRevisionSelectQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionMetadataWithChangeMetrics\n      }\n      totalCount\n    }\n  }\n": types.multiRevisionPostsRevisionSelectQueryDocument,
    "\n  query PostsRevisionSelect($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsDetails\n      }\n    }\n  }\n": types.PostsRevisionSelectDocument,
    "\n  query multiRevisionTagPageRevisionSelectQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionHistoryEntry\n      }\n      totalCount\n    }\n  }\n": types.multiRevisionTagPageRevisionSelectQueryDocument,
    "\n  query multiRSSFeedNewFeedButtonQuery($selector: RSSFeedSelector, $limit: Int, $enableTotal: Boolean) {\n    rSSFeeds(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RSSFeedMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiRSSFeedNewFeedButtonQueryDocument,
    "\n  mutation createRSSFeedNewFeedButton($data: CreateRSSFeedDataInput!) {\n    createRSSFeed(data: $data) {\n      data {\n        ...newRSSFeedFragment\n      }\n    }\n  }\n": types.createRSSFeedNewFeedButtonDocument,
    "\n  query multiUserAprilFools2022Query($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n": types.multiUserAprilFools2022QueryDocument,
    "\n  query HomepageCommunityMap($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": types.HomepageCommunityMapDocument,
    "\n    mutation launchPetrovMissile($launchCode: String) {\n      PetrovDayLaunchMissile(launchCode: $launchCode) {\n        launchCode\n      }\n    }\n  ": types.launchPetrovMissileDocument,
    "\n    query petrovDayLaunchResolvers {\n      PetrovDayCheckIfIncoming {\n        launched\n        createdAt\n      }\n    }\n  ": types.petrovDayLaunchResolversDocument,
    "\n  query multiPetrovDayActionOptIntoPetrovButtonQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n": types.multiPetrovDayActionOptIntoPetrovButtonQueryDocument,
    "\n  mutation createPetrovDayActionOptIntoPetrovButton($data: CreatePetrovDayActionDataInput!) {\n    createPetrovDayAction(data: $data) {\n      data {\n        ...PetrovDayActionInfo\n      }\n    }\n  }\n": types.createPetrovDayActionOptIntoPetrovButtonDocument,
    "\n  query multiPetrovDayActionPetrovAdminConsoleQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n": types.multiPetrovDayActionPetrovAdminConsoleQueryDocument,
    "\n  query multiPetrovDayActionPetrovGameWrapperQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n": types.multiPetrovDayActionPetrovGameWrapperQueryDocument,
    "\n    query petrov2024checkIfNuked {\n      petrov2024checkIfNuked\n    }\n  ": types.petrov2024checkIfNukedDocument,
    "\n  query multiPetrovDayActionPetrovLaunchConsoleQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n": types.multiPetrovDayActionPetrovLaunchConsoleQueryDocument,
    "\n  mutation createPetrovDayActionPetrovLaunchConsole($data: CreatePetrovDayActionDataInput!) {\n    createPetrovDayAction(data: $data) {\n      data {\n        ...PetrovDayActionInfo\n      }\n    }\n  }\n": types.createPetrovDayActionPetrovLaunchConsoleDocument,
    "\n  query multiPetrovDayActionPetrovWarningConsoleQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n": types.multiPetrovDayActionPetrovWarningConsoleQueryDocument,
    "\n  mutation createPetrovDayActionPetrovWarningConsole($data: CreatePetrovDayActionDataInput!) {\n    createPetrovDayAction(data: $data) {\n      data {\n        ...PetrovDayActionInfo\n      }\n    }\n  }\n": types.createPetrovDayActionPetrovWarningConsoleDocument,
    "\n    query petrovDay2024Resolvers {\n      PetrovDay2024CheckNumberOfIncoming {\n        count\n      }\n    }\n  ": types.petrovDay2024ResolversDocument,
    "\n  mutation updateChapterAddDraftPostDialog($selector: SelectorInput!, $data: UpdateChapterDataInput!) {\n    updateChapter(selector: $selector, data: $data) {\n      data {\n        ...ChaptersFragment\n      }\n    }\n  }\n": types.updateChapterAddDraftPostDialogDocument,
    "\n  mutation updateBookBooksForm($selector: SelectorInput!, $data: UpdateBookDataInput!) {\n    updateBook(selector: $selector, data: $data) {\n      data {\n        ...BookPageFragment\n      }\n    }\n  }\n": types.updateBookBooksFormDocument,
    "\n  mutation createBookBooksForm($data: CreateBookDataInput!) {\n    createBook(data: $data) {\n      data {\n        ...BookPageFragment\n      }\n    }\n  }\n": types.createBookBooksFormDocument,
    "\n  query BooksItem($documentId: String) {\n    book(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...BookEdit\n      }\n    }\n  }\n": types.BooksItemDocument,
    "\n  mutation updateChapterChaptersForm($selector: SelectorInput!, $data: UpdateChapterDataInput!) {\n    updateChapter(selector: $selector, data: $data) {\n      data {\n        ...ChaptersEdit\n      }\n    }\n  }\n": types.updateChapterChaptersFormDocument,
    "\n  mutation createChapterChaptersForm($data: CreateChapterDataInput!) {\n    createChapter(data: $data) {\n      data {\n        ...ChaptersEdit\n      }\n    }\n  }\n": types.createChapterChaptersFormDocument,
    "\n  query ChaptersItem($documentId: String) {\n    chapter(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ChaptersEdit\n      }\n    }\n  }\n": types.ChaptersItemDocument,
    "\n  query multiChapterChaptersListQuery($selector: ChapterSelector, $limit: Int, $enableTotal: Boolean) {\n    chapters(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ChaptersFragment\n      }\n      totalCount\n    }\n  }\n": types.multiChapterChaptersListQueryDocument,
    "\n  mutation updateCollectionCollectionsEditForm($selector: SelectorInput!, $data: UpdateCollectionDataInput!) {\n    updateCollection(selector: $selector, data: $data) {\n      data {\n        ...CollectionsPageFragment\n      }\n    }\n  }\n": types.updateCollectionCollectionsEditFormDocument,
    "\n  query CollectionsPage($documentId: String) {\n    collection(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CollectionsPageFragment\n      }\n    }\n  }\n": types.CollectionsPageDocument,
    "\n  query CollectionsEdit($documentId: String) {\n    collection(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CollectionsEditFragment\n      }\n    }\n  }\n": types.CollectionsEditDocument,
    "\n  query multiPostSequenceDraftsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": types.multiPostSequenceDraftsListQueryDocument,
    "\n  mutation updateSequenceSequencesForm($selector: SelectorInput!, $data: UpdateSequenceDataInput!) {\n    updateSequence(selector: $selector, data: $data) {\n      data {\n        ...SequencesEdit\n      }\n    }\n  }\n": types.updateSequenceSequencesFormDocument,
    "\n  mutation createSequenceSequencesForm($data: CreateSequenceDataInput!) {\n    createSequence(data: $data) {\n      data {\n        ...SequencesEdit\n      }\n    }\n  }\n": types.createSequenceSequencesFormDocument,
    "\n  query multiSequenceSequencesGridWrapperQuery($selector: SequenceSelector, $limit: Int, $enableTotal: Boolean) {\n    sequences(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SequencesPageFragment\n      }\n      totalCount\n    }\n  }\n": types.multiSequenceSequencesGridWrapperQueryDocument,
    "\n  query SequencesPage($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesPageFragment\n      }\n    }\n  }\n": types.SequencesPageDocument,
    "\n  query SequencesEdit($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesEdit\n      }\n    }\n  }\n": types.SequencesEditDocument,
    "\n  query multiChapterSequencesSummaryQuery($selector: ChapterSelector, $limit: Int, $enableTotal: Boolean) {\n    chapters(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ChaptersFragment\n      }\n      totalCount\n    }\n  }\n": types.multiChapterSequencesSummaryQueryDocument,
    "\n    query GetAllReviewWinners {\n      GetAllReviewWinners {\n        ...PostsTopItemInfo\n      }\n    }\n  ": types.GetAllReviewWinnersDocument,
    "\n    mutation updateContinueReading($sequenceId: String!, $postId: String!) {\n      updateContinueReading(sequenceId: $sequenceId, postId: $postId)\n    }\n  ": types.updateContinueReadingDocument,
    "\n  query ProfileShortform($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n": types.ProfileShortformDocument,
    "\n  query multiCommentRepliesToCommentListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": types.multiCommentRepliesToCommentListQueryDocument,
    "\n  query multiCommentShortformThreadListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentWithRepliesFragment\n      }\n      totalCount\n    }\n  }\n": types.multiCommentShortformThreadListQueryDocument,
    "\n  query multiCommentShortformTimeBlockQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n": types.multiCommentShortformTimeBlockQueryDocument,
    "\n  query DisplaySpotlightQuery {\n    currentSpotlight {\n      ...SpotlightDisplay\n    }\n  }\n": types.DisplaySpotlightQueryDocument,
    "\n  mutation updateSpotlightSpotlightForm($selector: SelectorInput!, $data: UpdateSpotlightDataInput!) {\n    updateSpotlight(selector: $selector, data: $data) {\n      data {\n        ...SpotlightEditQueryFragment\n      }\n    }\n  }\n": types.updateSpotlightSpotlightFormDocument,
    "\n  mutation createSpotlightSpotlightForm($data: CreateSpotlightDataInput!) {\n    createSpotlight(data: $data) {\n      data {\n        ...SpotlightEditQueryFragment\n      }\n    }\n  }\n": types.createSpotlightSpotlightFormDocument,
    "\n  query multiSpotlightSpotlightHistoryQuery($selector: SpotlightSelector, $limit: Int, $enableTotal: Boolean) {\n    spotlights(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SpotlightDisplay\n      }\n      totalCount\n    }\n  }\n": types.multiSpotlightSpotlightHistoryQueryDocument,
    "\n  mutation updateSpotlightSpotlightItem($selector: SelectorInput!, $data: UpdateSpotlightDataInput!) {\n    updateSpotlight(selector: $selector, data: $data) {\n      data {\n        ...SpotlightDisplay\n      }\n    }\n  }\n": types.updateSpotlightSpotlightItemDocument,
    "\n  query SpotlightItem($documentId: String) {\n    spotlight(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SpotlightEditQueryFragment\n      }\n    }\n  }\n": types.SpotlightItemDocument,
    "\n  query SpotlightStartOrContinueReadingQuery($spotlightId: String) {\n    spotlight(input: {selector: {documentId: $spotlightId}}) {\n      result {\n        _id\n        sequenceChapters {\n          ...ChaptersFragment\n        }\n      }\n    }\n  }\n": types.SpotlightStartOrContinueReadingQueryDocument,
    "\n  query multiSpotlightSpotlightsPageQuery($selector: SpotlightSelector, $limit: Int, $enableTotal: Boolean) {\n    spotlights(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SpotlightDisplay\n      }\n      totalCount\n    }\n  }\n": types.multiSpotlightSpotlightsPageQueryDocument,
    "\n    mutation publishAndDeDuplicateSpotlight($spotlightId: String) {\n      publishAndDeDuplicateSpotlight(spotlightId: $spotlightId) {\n        ...SpotlightDisplay\n      }\n    }\n  ": types.publishAndDeDuplicateSpotlightDocument,
    "\n  query multiSubscriptionFollowUserSearchQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SubscriptionState\n      }\n      totalCount\n    }\n  }\n": types.multiSubscriptionFollowUserSearchQueryDocument,
    "\n  query UserFollowingCount($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      totalCount\n    }\n  }\n": types.UserFollowingCountDocument,
    "\n    query SuggestedFeedSubscriptionUsers($limit: Int) {\n      SuggestedFeedSubscriptionUsers(limit: $limit) {\n        results {\n          ...UsersMinimumInfo\n        }\n      }\n    }\n  ": types.SuggestedFeedSubscriptionUsersDocument,
    "\n  mutation updateCommentAFSuggestCommentsItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentComment\n      }\n    }\n  }\n": types.updateCommentAFSuggestCommentsItemDocument,
    "\n  query multiCommentAFSuggestCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SuggestAlignmentComment\n      }\n      totalCount\n    }\n  }\n": types.multiCommentAFSuggestCommentsListQueryDocument,
    "\n  mutation updatePostAFSuggestPostsItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentPost\n      }\n    }\n  }\n": types.updatePostAFSuggestPostsItemDocument,
    "\n  query multiPostAFSuggestPostsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SuggestAlignmentPost\n      }\n      totalCount\n    }\n  }\n": types.multiPostAFSuggestPostsListQueryDocument,
    "\n  mutation updateUserAFSuggestUsersItem($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...SunshineUsersList\n      }\n    }\n  }\n": types.updateUserAFSuggestUsersItemDocument,
    "\n  query multiUserAFSuggestUsersListQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SuggestAlignmentUser\n      }\n      totalCount\n    }\n  }\n": types.multiUserAFSuggestUsersListQueryDocument,
    "\n    query AllReactedComments($limit: Int) {\n      CommentsWithReacts(limit: $limit) {\n        results {\n          ...CommentsListWithParentMetadata\n        }\n      }\n    }\n  ": types.AllReactedCommentsDocument,
    "\n  query multiLWEventEmailHistoryQuery($selector: LWEventSelector, $limit: Int, $enableTotal: Boolean) {\n    lWEvents(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...emailHistoryFragment\n      }\n      totalCount\n    }\n  }\n": types.multiLWEventEmailHistoryQueryDocument,
    "\n  query ModGPTDashboardQuery($selector: CommentSelector, $limit: Int) {\n    comments(selector: $selector, limit: $limit) {\n      results {\n        ...CommentsListWithModGPTAnalysis\n      }\n    }\n  }\n": types.ModGPTDashboardQueryDocument,
    "\n  query multiClientIdModerationAltAccountsQuery($selector: ClientIdSelector, $limit: Int, $enableTotal: Boolean) {\n    clientIds(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModeratorClientIDInfo\n      }\n      totalCount\n    }\n  }\n": types.multiClientIdModerationAltAccountsQueryDocument,
    "\n  query multiUserModerationAltAccountsQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserAltAccountsFragment\n      }\n      totalCount\n    }\n  }\n": types.multiUserModerationAltAccountsQueryDocument,
    "\n  query ModerationAltAccounts($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UserAltAccountsFragment\n      }\n    }\n  }\n": types.ModerationAltAccountsDocument,
    "\n    query ModeratorIPAddressInfo($ipAddress: String!) {\n      moderatorViewIPAddress(ipAddress: $ipAddress) {\n        ip\n        userIds\n      }\n    }\n  ": types.ModeratorIPAddressInfoDocument,
    "\n  query multiUserModerationDashboardQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineUsersList\n      }\n      totalCount\n    }\n  }\n": types.multiUserModerationDashboardQueryDocument,
    "\n  mutation updateUserModeratorActions($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...SunshineUsersList\n      }\n    }\n  }\n": types.updateUserModeratorActionsDocument,
    "\n  query multiConversationModeratorMessageCountQuery($selector: ConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    conversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ConversationsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiConversationModeratorMessageCountQueryDocument,
    "\n  query multiUserAltAccountInfoQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineUsersList\n      }\n      totalCount\n    }\n  }\n": types.multiUserAltAccountInfoQueryDocument,
    "\n  mutation updateModeratorActionModeratorActionItem($selector: SelectorInput!, $data: UpdateModeratorActionDataInput!) {\n    updateModeratorAction(selector: $selector, data: $data) {\n      data {\n        ...ModeratorActionDisplay\n      }\n    }\n  }\n": types.updateModeratorActionModeratorActionItemDocument,
    "\n  query multiUserRecentlyActiveUsersQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineUsersList\n      }\n      totalCount\n    }\n  }\n": types.multiUserRecentlyActiveUsersQueryDocument,
    "\n  query NewCommentModerationWarning($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n": types.NewCommentModerationWarningDocument,
    "\n  mutation createModeratorActionNewModeratorActionDialog($data: CreateModeratorActionDataInput!) {\n    createModeratorAction(data: $data) {\n      data {\n        ...ModeratorActionDisplay\n      }\n    }\n  }\n": types.createModeratorActionNewModeratorActionDialogDocument,
    "\n  query NewPostModerationWarning($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n": types.NewPostModerationWarningDocument,
    "\n  query multiModerationTemplateRejectContentDialogQuery($selector: ModerationTemplateSelector, $limit: Int, $enableTotal: Boolean) {\n    moderationTemplates(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModerationTemplateFragment\n      }\n      totalCount\n    }\n  }\n": types.multiModerationTemplateRejectContentDialogQueryDocument,
    "\n  mutation createReportReportForm($data: CreateReportDataInput!) {\n    createReport(data: $data) {\n      data {\n        ...UnclaimedReportsList\n      }\n    }\n  }\n": types.createReportReportFormDocument,
    "\n  mutation updatePostSunshineCuratedSuggestionsItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...SunshineCurationPostsList\n      }\n    }\n  }\n": types.updatePostSunshineCuratedSuggestionsItemDocument,
    "\n  query multiPostsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": types.multiPostsListQueryDocument,
    "\n  query multiSunshineCurationPostsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineCurationPostsList\n      }\n      totalCount\n    }\n  }\n": types.multiSunshineCurationPostsListQueryDocument,
    "\n  query multiGoogleServiceAccountSessionSunshineGoogleServiceAccountQuery($selector: GoogleServiceAccountSessionSelector, $limit: Int, $enableTotal: Boolean) {\n    googleServiceAccountSessions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...GoogleServiceAccountSessionAdminInfo\n      }\n      totalCount\n    }\n  }\n": types.multiGoogleServiceAccountSessionSunshineGoogleServiceAccountQueryDocument,
    "\n  mutation updateCommentSunshineNewCommentsItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n": types.updateCommentSunshineNewCommentsItemDocument,
    "\n  query multiCommentSunshineNewCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": types.multiCommentSunshineNewCommentsListQueryDocument,
    "\n  mutation updatePostSunshineNewPostsItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": types.updatePostSunshineNewPostsItemDocument,
    "\n  mutation createModeratorActionSunshineNewPostsItem($data: CreateModeratorActionDataInput!) {\n    createModeratorAction(data: $data) {\n      data {\n        ...ModeratorActionsDefaultFragment\n      }\n    }\n  }\n": types.createModeratorActionSunshineNewPostsItemDocument,
    "\n  query multiPostSunshineNewPostsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshinePostsList\n      }\n      totalCount\n    }\n  }\n": types.multiPostSunshineNewPostsListQueryDocument,
    "\n  query multiTagRelSunshineNewTagsItemQuery($selector: TagRelSelector, $limit: Int, $enableTotal: Boolean) {\n    tagRels(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagRelFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagRelSunshineNewTagsItemQueryDocument,
    "\n  mutation updateTagSunshineNewTagsItem($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...SunshineTagFragment\n      }\n    }\n  }\n": types.updateTagSunshineNewTagsItemDocument,
    "\n  query multiTagSunshineNewTagsListQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineTagFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagSunshineNewTagsListQueryDocument,
    "\n  query multiCommentSunshineNewUsersInfoQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": types.multiCommentSunshineNewUsersInfoQueryDocument,
    "\n  query multiUserSunshineNewUsersListQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineUsersList\n      }\n      totalCount\n    }\n  }\n": types.multiUserSunshineNewUsersListQueryDocument,
    "\n  query SunshineNewUsersProfileInfo($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SunshineUsersList\n      }\n    }\n  }\n": types.SunshineNewUsersProfileInfoDocument,
    "\n  query multiReportSunshineReportedContentListQuery($selector: ReportSelector, $limit: Int, $enableTotal: Boolean) {\n    reports(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UnclaimedReportsList\n      }\n      totalCount\n    }\n  }\n": types.multiReportSunshineReportedContentListQueryDocument,
    "\n  mutation updatePostSunshineReportedItem1($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n": types.updatePostSunshineReportedItem1Document,
    "\n  mutation updateCommentSunshineReportedItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n": types.updateCommentSunshineReportedItemDocument,
    "\n  mutation updateReportSunshineReportedContentList($selector: SelectorInput!, $data: UpdateReportDataInput!) {\n    updateReport(selector: $selector, data: $data) {\n      data {\n        ...UnclaimedReportsList\n      }\n    }\n  }\n": types.updateReportSunshineReportedContentListDocument,
    "\n  query multiModerationTemplateSunshineSendMessageWithDefaultsQuery($selector: ModerationTemplateSelector, $limit: Int, $enableTotal: Boolean) {\n    moderationTemplates(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModerationTemplateFragment\n      }\n      totalCount\n    }\n  }\n": types.multiModerationTemplateSunshineSendMessageWithDefaultsQueryDocument,
    "\n  query multiConversationSunshineUserMessagesQuery($selector: ConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    conversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ConversationsList\n      }\n      totalCount\n    }\n  }\n": types.multiConversationSunshineUserMessagesQueryDocument,
    "\n  query multiUserRateLimitUserRateLimitItemQuery($selector: UserRateLimitSelector, $limit: Int, $enableTotal: Boolean) {\n    userRateLimits(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserRateLimitDisplay\n      }\n      totalCount\n    }\n  }\n": types.multiUserRateLimitUserRateLimitItemQueryDocument,
    "\n  mutation updateUserRateLimitUserRateLimitItem1($selector: SelectorInput!, $data: UpdateUserRateLimitDataInput!) {\n    updateUserRateLimit(selector: $selector, data: $data) {\n      data {\n        ...UserRateLimitsDefaultFragment\n      }\n    }\n  }\n": types.updateUserRateLimitUserRateLimitItem1Document,
    "\n  mutation updateUserRateLimitUserRateLimitItem($selector: SelectorInput!, $data: UpdateUserRateLimitDataInput!) {\n    updateUserRateLimit(selector: $selector, data: $data) {\n      data {\n        ...UserRateLimitDisplay\n      }\n    }\n  }\n": types.updateUserRateLimitUserRateLimitItemDocument,
    "\n  mutation createUserRateLimitUserRateLimitItem1($data: CreateUserRateLimitDataInput!) {\n    createUserRateLimit(data: $data) {\n      data {\n        ...UserRateLimitsDefaultFragment\n      }\n    }\n  }\n": types.createUserRateLimitUserRateLimitItem1Document,
    "\n  mutation createUserRateLimitUserRateLimitItem($data: CreateUserRateLimitDataInput!) {\n    createUserRateLimit(data: $data) {\n      data {\n        ...UserRateLimitDisplay\n      }\n    }\n  }\n": types.createUserRateLimitUserRateLimitItemDocument,
    "\n  query multiCommentUsersReviewInfoCardQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": types.multiCommentUsersReviewInfoCardQueryDocument,
    "\n  query DeletedCommentsModerationLogQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DeletedCommentsModerationLog\n      }\n      totalCount\n    }\n  }\n": types.DeletedCommentsModerationLogQueryDocument,
    "\n  query UsersBannedFromPostsModerationLogQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersBannedFromPostsModerationLog\n      }\n      totalCount\n    }\n  }\n": types.UsersBannedFromPostsModerationLogQueryDocument,
    "\n  query UsersBannedFromUsersModerationLogQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersBannedFromUsersModerationLog\n      }\n      totalCount\n    }\n  }\n": types.UsersBannedFromUsersModerationLogQueryDocument,
    "\n  query ModeratorActionModerationLogQuery($selector: ModeratorActionSelector, $limit: Int, $enableTotal: Boolean) {\n    moderatorActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModeratorActionDisplay\n      }\n      totalCount\n    }\n  }\n": types.ModeratorActionModerationLogQueryDocument,
    "\n  query UserRateLimitModerationLogQuery($selector: UserRateLimitSelector, $limit: Int, $enableTotal: Boolean) {\n    userRateLimits(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserRateLimitDisplay\n      }\n      totalCount\n    }\n  }\n": types.UserRateLimitModerationLogQueryDocument,
    "\n  query multiCommentRejectedCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n": types.multiCommentRejectedCommentsListQueryDocument,
    "\n  query multiSurveyScheduleSurveyAdminPageQuery($selector: SurveyScheduleSelector, $limit: Int, $enableTotal: Boolean) {\n    surveySchedules(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SurveyScheduleEdit\n      }\n      totalCount\n    }\n  }\n": types.multiSurveyScheduleSurveyAdminPageQueryDocument,
    "\n  query multiSurveySurveyAdminPageQuery($selector: SurveySelector, $limit: Int, $enableTotal: Boolean) {\n    surveys(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SurveyMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiSurveySurveyAdminPageQueryDocument,
    "\n  mutation createSurveySurveyAdminPage($data: CreateSurveyDataInput!) {\n    createSurvey(data: $data) {\n      data {\n        ...SurveyMinimumInfo\n      }\n    }\n  }\n": types.createSurveySurveyAdminPageDocument,
    "\n  query SurveyEditPage($documentId: String) {\n    survey(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SurveyMinimumInfo\n      }\n    }\n  }\n": types.SurveyEditPageDocument,
    "\n    mutation editSurvey($surveyId: String!, $name: String!, $questions: [SurveyQuestionInfo!]!) {\n      editSurvey(surveyId: $surveyId, name: $name, questions: $questions) {\n        ...SurveyMinimumInfo\n      }\n    }\n  ": types.editSurveyDocument,
    "\n  mutation createSurveyResponseSurveyPostsItem($data: CreateSurveyResponseDataInput!) {\n    createSurveyResponse(data: $data) {\n      data {\n        ...SurveyResponseMinimumInfo\n      }\n    }\n  }\n": types.createSurveyResponseSurveyPostsItemDocument,
    "\n  mutation updateSurveyScheduleSurveyScheduleEditPage($selector: SelectorInput!, $data: UpdateSurveyScheduleDataInput!) {\n    updateSurveySchedule(selector: $selector, data: $data) {\n      data {\n        ...SurveyScheduleEdit\n      }\n    }\n  }\n": types.updateSurveyScheduleSurveyScheduleEditPageDocument,
    "\n  mutation createSurveyScheduleSurveyScheduleEditPage($data: CreateSurveyScheduleDataInput!) {\n    createSurveySchedule(data: $data) {\n      data {\n        ...SurveyScheduleEdit\n      }\n    }\n  }\n": types.createSurveyScheduleSurveyScheduleEditPageDocument,
    "\n  query SurveyScheduleEditPage($documentId: String) {\n    surveySchedule(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SurveyScheduleEdit\n      }\n    }\n  }\n": types.SurveyScheduleEditPageDocument,
    "\n    mutation addPostsToTag($tagId: String, $postId: String) {\n      addOrUpvoteTag(tagId: $tagId, postId: $postId) {\n        ...TagRelCreationFragment\n      }\n    }\n  ": types.addPostsToTagDocument,
    "\n  query AllPostsPageTagRevisionItem($documentId: String) {\n    revision(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...RevisionHistoryEntry\n      }\n    }\n  }\n": types.AllPostsPageTagRevisionItemDocument,
    "\n  query multiTagAllTagsAlphabeticalQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagPreviewFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagAllTagsAlphabeticalQueryDocument,
    "\n  query AllWikiTagsPageQuery($slugs: [String!]!) {\n    tags(selector: { tagsBySlugs: { slugs: $slugs } }) {\n      results {\n        ...ConceptItemFragment\n      }\n    }\n  }\n": types.AllWikiTagsPageQueryDocument,
    "\n  query multiTagArbitalExplorePageQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ExplorePageTagFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagArbitalExplorePageQueryDocument,
    "\n  query multiTagCoreTagsChecklistQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagCoreTagsChecklistQueryDocument,
    "\n  query multiTagCoreTagsSectionQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagDetailsFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagCoreTagsSectionQueryDocument,
    "\n  query EAAllTagsPage($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n": types.EAAllTagsPageDocument,
    "\n  query multiTagEATagPageQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagEATagPageQueryDocument,
    "\n  query EATagPage($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n": types.EATagPageDocument,
    "\n  query FilterMode($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagPreviewFragment\n      }\n    }\n  }\n": types.FilterModeDocument,
    "\n    query multiTagRelFooterTagListQuery($selector: TagRelSelector, $limit: Int, $enableTotal: Boolean) {\n      tagRels(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n        results {\n          ...TagRelMinimumFragment\n        }\n        totalCount\n      }\n    }\n  ": types.multiTagRelFooterTagListQueryDocument,
    "\n    mutation addOrUpvoteTag($tagId: String, $postId: String) {\n      addOrUpvoteTag(tagId: $tagId, postId: $postId) {\n        ...TagRelMinimumFragment\n      }\n    }\n  ": types.addOrUpvoteTagDocument,
    "\n  query multiTagLWTagPageQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagLWTagPageQueryDocument,
    "\n  query LWTagPage($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n": types.LWTagPageDocument,
    "\n  mutation updateTagNewTagPage($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...TagEditFragment\n      }\n    }\n  }\n": types.updateTagNewTagPageDocument,
    "\n  query multiTagNewTagsListQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineTagFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagNewTagsListQueryDocument,
    "\n    query getRandomTag {\n      RandomTag {slug}\n    }\n  ": types.getRandomTagDocument,
    "\n  query multiMultiDocumentRedlinkTagPageQuery($selector: MultiDocumentSelector, $limit: Int, $enableTotal: Boolean) {\n    multiDocuments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...MultiDocumentMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiMultiDocumentRedlinkTagPageQueryDocument,
    "\n  query multiTagRedlinkTagPageQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagBasicInfo\n      }\n      totalCount\n    }\n  }\n": types.multiTagRedlinkTagPageQueryDocument,
    "\n  query multiSubscriptionSubscribeButtonQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SubscriptionState\n      }\n      totalCount\n    }\n  }\n": types.multiSubscriptionSubscribeButtonQueryDocument,
    "\n  mutation createSubscriptionSubscribeButton($data: CreateSubscriptionDataInput!) {\n    createSubscription(data: $data) {\n      data {\n        ...SubscriptionState\n      }\n    }\n  }\n": types.createSubscriptionSubscribeButtonDocument,
    "\n  query multiMultiDocumentSummariesEditFormQuery($selector: MultiDocumentSelector, $limit: Int, $enableTotal: Boolean) {\n    multiDocuments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...MultiDocumentContentDisplay\n      }\n      totalCount\n    }\n  }\n": types.multiMultiDocumentSummariesEditFormQueryDocument,
    "\n    mutation reorderSummaries($parentDocumentId: String!, $parentDocumentCollectionName: String!, $summaryIds: [String!]!) {\n      reorderSummaries(parentDocumentId: $parentDocumentId, parentDocumentCollectionName: $parentDocumentCollectionName, summaryIds: $summaryIds)\n    }\n  ": types.reorderSummariesDocument,
    "\n  mutation updateMultiDocumentSummaryForm($selector: SelectorInput!, $data: UpdateMultiDocumentDataInput!) {\n    updateMultiDocument(selector: $selector, data: $data) {\n      data {\n        ...MultiDocumentContentDisplay\n      }\n    }\n  }\n": types.updateMultiDocumentSummaryFormDocument,
    "\n  mutation createMultiDocumentSummaryForm($data: CreateMultiDocumentDataInput!) {\n    createMultiDocument(data: $data) {\n      data {\n        ...MultiDocumentContentDisplay\n      }\n    }\n  }\n": types.createMultiDocumentSummaryFormDocument,
    "\n  query multiRevisionTagCompareRevisionsQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionHistoryEntry\n      }\n      totalCount\n    }\n  }\n": types.multiRevisionTagCompareRevisionsQueryDocument,
    "\n  query TagContributorsList($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagFullContributorsList\n      }\n    }\n  }\n": types.TagContributorsListDocument,
    "\n  query multiCommentTagDiscussionQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": types.multiCommentTagDiscussionQueryDocument,
    "\n  query multiCommentTagDiscussionButtonQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": types.multiCommentTagDiscussionButtonQueryDocument,
    "\n  query multiCommentTagDiscussionSectionQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": types.multiCommentTagDiscussionSectionQueryDocument,
    "\n  query multiRevisionTagEditsByUserQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionTagFragment\n      }\n      totalCount\n    }\n  }\n": types.multiRevisionTagEditsByUserQueryDocument,
    "\n    query getTagUpdates($before: Date!, $after: Date!) {\n      TagUpdatesInTimeBlock(before: $before, after: $after) {\n        tag {\n          ...TagHistoryFragment\n        }\n        revisionIds\n        commentCount\n        commentIds\n        lastRevisedAt\n        lastCommentedAt\n        added\n        removed\n        users {\n          ...UsersMinimumInfo\n        }\n        documentDeletions {\n          userId\n          documentId\n          netChange\n          type\n          docFields {\n            _id\n            slug\n            tabTitle\n            tabSubtitle\n          }\n          createdAt\n        }\n      }\n    }\n  ": types.getTagUpdatesDocument,
    "\n  mutation updateTagFlagTagFlagEditAndNewForm($selector: SelectorInput!, $data: UpdateTagFlagDataInput!) {\n    updateTagFlag(selector: $selector, data: $data) {\n      data {\n        ...TagFlagFragment\n      }\n    }\n  }\n": types.updateTagFlagTagFlagEditAndNewFormDocument,
    "\n  mutation createTagFlagTagFlagEditAndNewForm($data: CreateTagFlagDataInput!) {\n    createTagFlag(data: $data) {\n      data {\n        ...TagFlagFragment\n      }\n    }\n  }\n": types.createTagFlagTagFlagEditAndNewFormDocument,
    "\n  query multiTagTagFlagItemQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagTagFlagItemQueryDocument,
    "\n  query TagFlagItem($documentId: String) {\n    tagFlag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagFlagFragment\n      }\n    }\n  }\n": types.TagFlagItemDocument,
    "\n  mutation updateTagTagForm($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...TagWithFlagsFragment\n      }\n    }\n  }\n": types.updateTagTagFormDocument,
    "\n  mutation createTagTagForm($data: CreateTagDataInput!) {\n    createTag(data: $data) {\n      data {\n        ...TagWithFlagsFragment\n      }\n    }\n  }\n": types.createTagTagFormDocument,
    "\n  query multiChapterTagIntroSequenceQuery($selector: ChapterSelector, $limit: Int, $enableTotal: Boolean) {\n    chapters(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ChaptersFragment\n      }\n      totalCount\n    }\n  }\n": types.multiChapterTagIntroSequenceQueryDocument,
    "\n  query TagMergePage($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagFragment\n      }\n    }\n  }\n": types.TagMergePageDocument,
    "\n    mutation mergeTags(\n      $sourceTagId: String!\n      $targetTagId: String!\n      $transferSubtags: Boolean!\n      $redirectSource: Boolean!\n    ) {\n      mergeTags(\n        sourceTagId: $sourceTagId\n        targetTagId: $targetTagId\n        transferSubtags: $transferSubtags\n        redirectSource: $redirectSource\n      )\n    }\n  ": types.mergeTagsDocument,
    "\n    mutation promoteLensToMain($lensId: String!) {\n      promoteLensToMain(lensId: $lensId)\n    }\n  ": types.promoteLensToMainDocument,
    "\n  query multiPostTagPreviewQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": types.multiPostTagPreviewQueryDocument,
    "\n  query TagSearchHit($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagPreviewFragment\n      }\n    }\n  }\n": types.TagSearchHitDocument,
    "\n  query multiVoteTagVoteActivityQuery($selector: VoteSelector, $limit: Int, $enableTotal: Boolean) {\n    votes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagVotingActivity\n      }\n      totalCount\n    }\n  }\n": types.multiVoteTagVoteActivityQueryDocument,
    "\n  query multiTagFlagTaggingDashboardQuery($selector: TagFlagSelector, $limit: Int, $enableTotal: Boolean) {\n    tagFlags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFlagFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagFlagTaggingDashboardQueryDocument,
    "\n  query multiTagTaggingDashboardQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagTaggingDashboardQueryDocument,
    "\n  query TaggingDashboard($documentId: String) {\n    tagFlag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagFlagEditFragment\n      }\n    }\n  }\n": types.TaggingDashboardDocument,
    "\n  query multiTagRelTagsDetailsItemQuery($selector: TagRelSelector, $limit: Int, $enableTotal: Boolean) {\n    tagRels(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagRelFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagRelTagsDetailsItemQueryDocument,
    "\n  query TagsDetailsItem($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n": types.TagsDetailsItemDocument,
    "\n    query GetTagsByCoreTagId(\n      $coreTagId: String,\n      $limit: Int,\n      $searchTagIds: [String]\n    ) {\n      TagsByCoreTagId(\n        coreTagId: $coreTagId,\n        limit: $limit,\n        searchTagIds: $searchTagIds\n      ) {\n        tags {\n          ...ConceptItemFragment\n        }\n        totalCount\n      }\n    }\n  ": types.GetTagsByCoreTagIdDocument,
    "\n  mutation updateMultiDocumentLensForm($selector: SelectorInput!, $data: UpdateMultiDocumentDataInput!) {\n    updateMultiDocument(selector: $selector, data: $data) {\n      data {\n        ...MultiDocumentEdit\n      }\n    }\n  }\n": types.updateMultiDocumentLensFormDocument,
    "\n  mutation createMultiDocumentLensForm($data: CreateMultiDocumentDataInput!) {\n    createMultiDocument(data: $data) {\n      data {\n        ...MultiDocumentEdit\n      }\n    }\n  }\n": types.createMultiDocumentLensFormDocument,
    "\n  query multiUserSidebarMembersBoxQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n": types.multiUserSidebarMembersBoxQueryDocument,
    "\n  mutation updateTagSidebarSubtagsBox($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...TagBasicInfo\n      }\n    }\n  }\n": types.updateTagSidebarSubtagsBoxDocument,
    "\n  query SidebarSubtagsBox($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagSubtagFragment\n      }\n    }\n  }\n": types.SidebarSubtagsBoxDocument,
    "\n  query multiUserSubforumMembersDialogQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n": types.multiUserSubforumMembersDialogQueryDocument,
    "\n  mutation updateUserTagRelSubforumSubforumTab($selector: SelectorInput!, $data: UpdateUserTagRelDataInput!) {\n    updateUserTagRel(selector: $selector, data: $data) {\n      data {\n        ...UserTagRelDetails\n      }\n    }\n  }\n": types.updateUserTagRelSubforumSubforumTabDocument,
    "\n    mutation UserUpdateSubforumMembership($tagId: String!, $member: Boolean!) {\n      UserUpdateSubforumMembership(tagId: $tagId, member: $member) {\n        ...UsersCurrent\n      }\n    }\n  ": types.UserUpdateSubforumMembershipDocument,
    "\n  query SubforumWikiTab($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n": types.SubforumWikiTabDocument,
    "\n  query multiUserTagRelTagSubforumPage2Query($selector: UserTagRelSelector, $limit: Int, $enableTotal: Boolean) {\n    userTagRels(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserTagRelDetails\n      }\n      totalCount\n    }\n  }\n": types.multiUserTagRelTagSubforumPage2QueryDocument,
    "\n  query multiTagTagSubforumPage2Query($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n": types.multiTagTagSubforumPage2QueryDocument,
    "\n  mutation createUserTagRelTagSubforumPage2($data: CreateUserTagRelDataInput!) {\n    createUserTagRel(data: $data) {\n      data {\n        ...UserTagRelDetails\n      }\n    }\n  }\n": types.createUserTagRelTagSubforumPage2Document,
    "\n  query tagFragmentBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagFragment\n      }\n    }\n  }\n": types.tagBySlugDocument,
    "\n  query tagBasicInfoBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagBasicInfo\n      }\n    }\n  }\n": types.tagBasicInfoBySlugDocument,
    "\n  query allTagsPageFragmentBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...AllTagsPageFragment\n      }\n    }\n  }\n": types.allTagsPageBySlugDocument,
    "\n  query tagPageFragmentBySlug($selector: TagSelector, $limit: Int, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageFragment\n      }\n    }\n  }\n": types.tagPageBySlugDocument,
    "\n  query tagPageWithRevisionFragmentBySlug($selector: TagSelector, $limit: Int, $version: String, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageWithRevisionFragment\n      }\n    }\n  }\n": types.tagPageWithRevisionBySlugDocument,
    "\n  query tagEditFragmentBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagEditFragment\n      }\n    }\n  }\n": types.tagEditBySlugDocument,
    "\n  query tagHistoryFragmentBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagHistoryFragment\n      }\n    }\n  }\n": types.tagHistoryBySlugDocument,
    "\n  query tagPageWithArbitalContentFragmentBySlug($selector: TagSelector, $limit: Int, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageWithArbitalContentFragment\n      }\n    }\n  }\n": types.tagPageWithArbitalContentBySlugDocument,
    "\n  query tagPageRevisionWithArbitalContentFragmentBySlug($selector: TagSelector, $limit: Int, $version: String, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageRevisionWithArbitalContentFragment\n      }\n    }\n  }\n": types.tagPageRevisionWithArbitalContentBySlugDocument,
    "\n  query tagPageWithArbitalContentAndLensRevisionFragmentBySlug($selector: TagSelector, $limit: Int, $version: String, $contributorsLimit: Int, $lensSlug: String) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageWithArbitalContentAndLensRevisionFragment\n      }\n    }\n  }\n": types.tagPageWithArbitalContentAndLensRevisionBySlugDocument,
    "\n  query getTagOrLensPreview($slug: String!, $hash: String) {\n    TagPreview(slug: $slug, hash: $hash) {\n      tag {\n        ...TagPreviewFragment\n      }\n      lens {\n        ...MultiDocumentContentDisplay\n      }\n      summaries {\n        ...MultiDocumentContentDisplay\n      }\n    }\n  }\n": types.getTagOrLensPreviewDocument,
    "\n  query getTagOrLensSectionPreview($slug: String!, $hash: String) {\n    TagPreview(slug: $slug, hash: $hash) {\n      tag {\n        ...TagSectionPreviewFragment\n      }\n      lens {\n        ...MultiDocumentContentDisplay\n      }\n      summaries {\n        ...MultiDocumentContentDisplay\n      }\n    }\n  }\n": types.getTagOrLensSectionPreviewDocument,
    "\n  query getTagPreview($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPreviewFragment\n      }\n    }\n  }\n": types.getTagPreviewDocument,
    "\n  query getTagSectionPreview($selector: TagSelector, $limit: Int, $hash: String) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagSectionPreviewFragment\n      }\n    }\n  }\n": types.getTagSectionPreviewDocument,
    "\n  query LocalgroupPageTitle($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsBase\n      }\n    }\n  }\n": types.LocalgroupPageTitleDocument,
    "\n  query PostsPageHeaderTitle($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsBase\n      }\n    }\n  }\n": types.PostsPageHeaderTitleDocument,
    "\n  query SequencesPageTitle($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesPageTitleFragment\n      }\n    }\n  }\n": types.SequencesPageTitleDocument,
    "\n  query multiUserUserPageTitleQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiUserUserPageTitleQueryDocument,
    "\n  query SingleCommentForFeedback($documentId: String!) {\n    comment(input: { selector: { _id: $documentId } }) {\n      result {\n        ...UltraFeedComment\n      }\n    }\n  }\n": types.SingleCommentForFeedbackDocument,
    "\n  mutation createUltraFeedEventUltraFeedItemFooter($data: CreateUltraFeedEventDataInput!) {\n    createUltraFeedEvent(data: $data) {\n      data {\n        ...UltraFeedEventsDefaultFragment\n      }\n    }\n  }\n": types.createUltraFeedEventUltraFeedItemFooterDocument,
    "\n  mutation createUltraFeedEventUltraFeedObserver($data: CreateUltraFeedEventDataInput!) {\n    createUltraFeedEvent(data: $data) {\n      data {\n        ...UltraFeedEventsDefaultFragment\n      }\n    }\n  }\n": types.createUltraFeedEventUltraFeedObserverDocument,
    "\n  query multiCommentUltraFeedPostDialogQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n": types.multiCommentUltraFeedPostDialogQueryDocument,
    "\n  query UltraFeedPostDialog($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UltraFeedPostFragment\n      }\n    }\n  }\n": types.UltraFeedPostDialogDocument,
    "\n  query UltraFeedTargetComment($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentWithRepliesFragment\n      }\n    }\n  }\n": types.UltraFeedTargetCommentDocument,
    "\n  query LocalPostQuery($documentId: String!) {\n    post(selector: { _id: $documentId }) {\n      result {\n        ...UltraFeedPostFragment\n      }\n    }\n  }\n": types.LocalPostQueryDocument,
    "\n  query ForeignPostQuery($documentId: String!) {\n    post(selector: { _id: $documentId }) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n": types.ForeignPostQueryDocument,
    "\n  query UserRecentPostsForCompactCard($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n    }\n  }\n": types.UserRecentPostsForCompactCardDocument,
    "\n  query UltraFeedThreadItem($documentId: String) {\n    post(selector: { _id: $documentId }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n": types.UltraFeedThreadItemDocument,
    "\n  mutation createUltraFeedEventSeeLess($data: CreateUltraFeedEventDataInput!) {\n    createUltraFeedEvent(data: $data) {\n      data {\n        ...UltraFeedEventsDefaultFragment\n      }\n    }\n  }\n": types.createUltraFeedEventSeeLessDocument,
    "\n  mutation updateUltraFeedEvent($selector: String!, $data: UpdateUltraFeedEventDataInput!) {\n    updateUltraFeedEvent(selector: $selector, data: $data) {\n      data {\n        _id\n      }\n    }\n  }\n": types.updateUltraFeedEventDocument,
    "\n    mutation connectCrossposter($token: String) {\n      connectCrossposter(token: $token)\n    }\n  ": types.connectCrossposterDocument,
    "\n  mutation updateUserEditProfileForm($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n": types.updateUserEditProfileFormDocument,
    "\n  query EditProfileForm($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersProfileEdit\n      }\n    }\n  }\n": types.EditProfileFormDocument,
    "\n  query EditProfileFormGetUserBySlug($slug: String!) {\n    GetUserBySlug(slug: $slug) {\n      ...UsersProfileEdit\n    }\n  }\n": types.EditProfileFormGetUserBySlugDocument,
    "\n    mutation useEmailToken($token: String) {\n      useEmailToken(token: $token)\n    }\n  ": types.useEmailTokenDocument,
    "\n    mutation sendEventTriggeredDM($eventType: String!) {\n      sendEventTriggeredDM(eventType: $eventType)\n    }\n  ": types.sendEventTriggeredDMDocument,
    "\n  query multiPostFriendlyUsersProfileQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.multiPostFriendlyUsersProfileQueryDocument,
    "\n  query multiLocalgroupFriendlyUsersProfileQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n": types.multiLocalgroupFriendlyUsersProfileQueryDocument,
    "\n  query multiUserFriendlyUsersProfileQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n        profileTags {\n          ...TagPreviewFragment\n        }\n        organizerOfGroups {\n          ...localGroupsBase\n        }\n      }\n      totalCount\n    }\n  }\n": types.multiUserFriendlyUsersProfileQueryDocument,
    "\n  query KarmaChangeNotifier($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UserKarmaChanges\n      }\n    }\n  }\n": types.KarmaChangeNotifierDocument,
    "\n  query multiPostLWUserTooltipContentQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n": types.multiPostLWUserTooltipContentQueryDocument,
    "\n  query TopKarmaUsers($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n": types.TopKarmaUsersDocument,
    "\n  query AirtableLeaderboards {\n    AirtableLeaderboards {\n      name\n      leaderboardAmount\n    }\n  }\n": types.AirtableLeaderboardsDocument,
    "\n        query getNetKarmaChangesForAuthorsOverPeriod($days: Int!, $limit: Int!) {\n          NetKarmaChangesForAuthorsOverPeriod(days: $days, limit: $limit) {\n            userId\n            netKarma\n          }\n        }\n      ": types.getNetKarmaChangesForAuthorsOverPeriodDocument,
    "\n    mutation login($username: String, $password: String) {\n      login(username: $username, password: $password) {\n        token\n      }\n    }\n  ": types.loginDocument,
    "\n    mutation signup($email: String, $username: String, $password: String, $subscribeToCurated: Boolean, $reCaptchaToken: String, $abTestKey: String) {\n      signup(email: $email, username: $username, password: $password, subscribeToCurated: $subscribeToCurated, reCaptchaToken: $reCaptchaToken, abTestKey: $abTestKey) {\n        token\n      }\n    }\n  ": types.signupDocument,
    "\n    mutation resetPassword($email: String) {\n      resetPassword(email: $email)\n    }\n  ": types.resetPasswordDocument,
    "\n    mutation usePasswordResetEmailToken($token: String, $args: JSON) {\n      useEmailToken(token: $token, args: $args)\n    }\n  ": types.usePasswordResetEmailTokenDocument,
    "\n  query multiSubscriptionSubscriptionsListQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SubscriptionState\n      }\n      totalCount\n    }\n  }\n": types.multiSubscriptionSubscriptionsListQueryDocument,
    "\n  query UserContentFeedPosts($userId: String!, $limit: Int!, $sortedBy: String!) {\n    posts(selector: { userPosts: { userId: $userId, sortedBy: $sortedBy } }, limit: $limit, enableTotal: true) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n": types.UserContentFeedPostsDocument,
    "\n  query UserContentFeedComments($userId: String!, $limit: Int!, $sortBy: String!) {\n    comments(selector: { profileComments: { userId: $userId, sortBy: $sortBy } }, limit: $limit, enableTotal: true) {\n      results {\n        ...CommentsList\n        post {\n          ...PostsListWithVotes\n        }\n        topLevelComment {\n          ...CommentsListWithTopLevelComment\n        }\n      }\n      totalCount\n    }\n  }\n": types.UserContentFeedCommentsDocument,
    "\n  query UserContentFeedThread($topLevelCommentId: String!, $limit: Int) {\n    comments(selector: { repliesToCommentThreadIncludingRoot: { topLevelCommentId: $topLevelCommentId } }, limit: $limit) {\n      results {\n        ...UltraFeedComment\n      }\n    }\n  }\n": types.UserContentFeedThreadDocument,
    "\n  query UsersNameWrapper($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": types.UsersNameWrapperDocument,
    "\n  query multiUserUsersProfileQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n": types.multiUserUsersProfileQueryDocument,
    "\n  mutation updateUserDeactivateAccountSection($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n": types.updateUserDeactivateAccountSectionDocument,
    "\n  mutation updateUserDeleteAccountSection($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n": types.updateUserDeleteAccountSectionDocument,
    "\n  query UsersAccountManagementGetUserBySlug($slug: String!) {\n    GetUserBySlug(slug: $slug) {\n      ...UsersEdit\n    }\n  }\n": types.UsersAccountManagementGetUserBySlugDocument,
    "\n  mutation updateUserUsersEditForm($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n": types.updateUserUsersEditFormDocument,
    "\n  query UsersEditFormGetUserBySlug($slug: String!) {\n    GetUserBySlug(slug: $slug) {\n      ...UsersEdit\n    }\n  }\n": types.UsersEditFormGetUserBySlugDocument,
    "\n  query SubscribedUser($documentId: String!) {\n    user(input: { selector: { _id: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": types.SubscribedUserDocument,
    "\n  query SubscribedPost($documentId: String!) {\n    post(input: { selector: { _id: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": types.SubscribedPostDocument,
    "\n  query SubscribedComment($documentId: String!) {\n    comment(input: { selector: { _id: $documentId } }) {\n      result {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n": types.SubscribedCommentDocument,
    "\n  query SubscribedLocalgroup($documentId: String!) {\n    localgroup(input: { selector: { _id: $documentId } }) {\n      result {\n        ...localGroupsBase\n      }\n    }\n  }\n": types.SubscribedLocalgroupDocument,
    "\n  query SubscribedTag($documentId: String!) {\n    tag(input: { selector: { _id: $documentId } }) {\n      result {\n        ...TagPreviewFragment\n      }\n    }\n  }\n": types.SubscribedTagDocument,
    "\n  query SubscribedSequence($documentId: String!) {\n    sequence(input: { selector: { _id: $documentId } }) {\n      result {\n        ...SequencesPageTitleFragment\n      }\n    }\n  }\n": types.SubscribedSequenceDocument,
    "\n  mutation updateUserReactionsPalette($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n": types.updateUserReactionsPaletteDocument,
    "\n  mutation performVoteComment($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteComment(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteComment\n      }\n      showVotingPatternWarning\n    }\n  }\n": types.performVoteCommentDocument,
    "\n  mutation performVotePost($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVotePost(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVotePost\n      }\n      showVotingPatternWarning\n    }\n  }\n": types.performVotePostDocument,
    "\n  mutation performVoteTagRel($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteTagRel(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteTagRel\n      }\n      showVotingPatternWarning\n    }\n  }\n": types.performVoteTagRelDocument,
    "\n  mutation performVoteRevision($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteRevision(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteRevision\n      }\n      showVotingPatternWarning\n    }\n  }\n": types.performVoteRevisionDocument,
    "\n  mutation performVoteElectionCandidate($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteElectionCandidate(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteElectionCandidate\n      }\n      showVotingPatternWarning\n    }\n  }\n": types.performVoteElectionCandidateDocument,
    "\n  mutation performVoteTag($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteTag(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteTag\n      }\n      showVotingPatternWarning\n    }\n  }\n": types.performVoteTagDocument,
    "\n  mutation performVoteMultiDocument($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteMultiDocument(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteMultiDocument\n      }\n      showVotingPatternWarning\n    }\n  }\n": types.performVoteMultiDocumentDocument,
    "\n  query emailstests($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsRevision\n      }\n    }\n  }\n": types.emailstestsDocument,
    "\n  mutation updateCommentCommentsNewForm($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentComment\n      }\n    }\n  }\n": types.updateCommentCommentsNewFormDocument,
    "\n  mutation updatePostPostsEditForm($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentPost\n      }\n    }\n  }\n": types.updatePostPostsEditFormDocument,
    "\n  fragment AdvisorRequestsMinimumInfo on AdvisorRequest {\n    _id\n    userId\n    createdAt\n    interestedInMetaculus\n    jobAds\n  }\n": types.AdvisorRequestsMinimumInfoDoc,
    "\n  fragment AutomatedContentEvaluationsFragment on AutomatedContentEvaluation {\n    _id\n    score\n    sentenceScores {\n      sentence\n      score\n    }\n    aiChoice\n    aiReasoning\n    aiCoT\n  }\n": types.AutomatedContentEvaluationsFragmentDoc,
    "\n  fragment BansAdminPageFragment on Ban {\n    _id\n    createdAt\n    expirationDate\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    reason\n    comment\n    ip\n    properties\n  }\n": types.BansAdminPageFragmentDoc,
    "\n  fragment BookmarksWithDocumentFragment on Bookmark {\n    ...BookmarksDefaultFragment\n    post {\n      ...PostsListWithVotes\n    }\n  }\n": types.BookmarksWithDocumentFragmentDoc,
    "\n  fragment BookmarksFeedItemFragment on Bookmark {\n    ...BookmarksDefaultFragment\n    post {\n      ...PostsListWithVotes\n    }\n    comment {\n      ...UltraFeedComment\n    }\n  }\n": types.BookmarksFeedItemFragmentDoc,
    "\n  fragment BookPageFragment on Book {\n    _id\n    createdAt\n    title\n    number\n    subtitle\n    tocTitle\n    contents {\n      ...RevisionDisplay\n    }\n    sequenceIds\n    sequences {\n      ...SequencesPageWithChaptersFragment\n    }\n    postIds\n    posts {\n      ...PostsListWithVotes\n    }\n    collectionId\n    displaySequencesAsGrid\n    hideProgressBar\n    showChapters\n  }\n": types.BookPageFragmentDoc,
    "\n  fragment BookEdit on Book {\n    ...BookPageFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.BookEditDoc,
    "\n  fragment ChaptersFragment on Chapter {\n    _id\n    createdAt\n    title\n    subtitle\n    contents {\n      ...RevisionDisplay\n    }\n    number\n    sequenceId\n    postIds\n    posts {\n      ...PostsListWithVotes\n    }\n  }\n": types.ChaptersFragmentDoc,
    "\n  fragment ChaptersEdit on Chapter {\n    ...ChaptersFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.ChaptersEditDoc,
    "\n  fragment CkEditorUserSessionInfo on CkEditorUserSession {\n    _id\n    userId\n    documentId\n    endedAt\n    endedBy\n  }\n": types.CkEditorUserSessionInfoDoc,
    "\n  fragment ModeratorClientIDInfo on ClientId {\n    _id\n    clientId\n    createdAt\n    firstSeenReferrer\n    firstSeenLandingPage\n    users {\n      ...UsersMinimumInfo\n    }\n  }\n": types.ModeratorClientIDInfoDoc,
    "\n  fragment CollectionContinueReadingFragment on Collection {\n    _id\n    title\n    slug\n    gridImageId\n  }\n": types.CollectionContinueReadingFragmentDoc,
    "\n  fragment CollectionsPageFragment on Collection {\n    _id\n    createdAt\n    slug\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    contents {\n      ...RevisionDisplay\n    }\n    firstPageLink\n    gridImageId\n    books {\n      ...BookPageFragment\n    }\n    hideStartReadingButton\n    noindex\n  }\n": types.CollectionsPageFragmentDoc,
    "\n  fragment CollectionsEditFragment on Collection {\n    ...CollectionsPageFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.CollectionsEditFragmentDoc,
    "\n  fragment CollectionsBestOfFragment on Collection {\n    _id\n    createdAt\n    slug\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    gridImageId\n    noindex\n    postsCount\n    readPostsCount\n    contents {\n      ...RevisionDisplay\n    }\n  }\n": types.CollectionsBestOfFragmentDoc,
    "\n  fragment CommentModeratorActionDisplay on CommentModeratorAction {\n    _id\n    comment {\n      ...CommentsListWithModerationMetadata\n    }\n    commentId\n    type\n    active\n    createdAt\n    endedAt\n  }\n": types.CommentModeratorActionDisplayDoc,
    "\n  fragment CommentsList on Comment {\n    _id\n    postId\n    tagId\n    tag {\n      _id\n      slug\n    }\n    relevantTagIds\n    relevantTags {\n      ...TagPreviewFragment\n    }\n    tagCommentType\n    parentCommentId\n    topLevelCommentId\n    descendentCount\n    title\n    contents {\n      _id\n      html\n      plaintextMainText\n      wordCount\n    }\n    postedAt\n    lastEditedAt\n    repliesBlockedUntil\n    userId\n    draft\n    deleted\n    deletedPublic\n    deletedByUserId\n    deletedReason\n    hideAuthor\n    authorIsUnreviewed\n    user {\n      ...UsersMinimumInfo\n    }\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    voteCount\n    emojiReactors\n    af\n    afDate\n    moveToAlignmentUserId\n    afBaseScore\n    afExtendedScore\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    needsReview\n    answer\n    parentAnswerId\n    retracted\n    postVersion\n    reviewedByUserId\n    shortform\n    shortformFrontpage\n    lastSubthreadActivity\n    moderatorHat\n    hideModeratorHat\n    nominatedForReview\n    reviewingForReview\n    promoted\n    promotedByUser {\n      ...UsersMinimumInfo\n    }\n    directChildrenCount\n    votingSystem\n    isPinnedOnProfile\n    debateResponse\n    rejected\n    rejectedReason\n    originalDialogueId\n\n    forumEventId\n    forumEventMetadata\n  }\n": types.CommentsListDoc,
    "\n  fragment CommentsListWithTopLevelComment on Comment {\n    ...CommentsList\n    topLevelComment {\n      ...CommentsList\n    }\n  }\n": types.CommentsListWithTopLevelCommentDoc,
    "\n  fragment UltraFeedComment on Comment {\n    ...CommentsList\n    post {\n      ...PostsListWithVotes\n    }\n  }\n": types.UltraFeedCommentDoc,
    "\n  fragment ShortformComments on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    relevantTags {\n      ...TagPreviewFragment\n    }\n  }\n": types.ShortformCommentsDoc,
    "\n  fragment DraftComments on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    parentComment {\n      _id\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": types.DraftCommentsDoc,
    "\n  fragment CommentWithRepliesFragment on Comment {\n    ...CommentsList\n    lastSubthreadActivity\n    latestChildren {\n      ...CommentsList\n    }\n    tag {\n      ...TagBasicInfo\n    }\n    post {\n      ...PostsBase\n    }\n  }\n": types.CommentWithRepliesFragmentDoc,
    "\n  fragment CommentEdit on Comment {\n    ...CommentsList\n    relevantTagIds\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.CommentEditDoc,
    "\n  fragment DeletedCommentsMetaData on Comment {\n    _id\n    deleted\n    deletedDate\n    deletedByUser {\n      _id\n      displayName\n    }\n    deletedReason\n    deletedPublic\n  }\n": types.DeletedCommentsMetaDataDoc,
    "\n  fragment DeletedCommentsModerationLog on Comment {\n    ...DeletedCommentsMetaData\n    user {\n      ...UsersMinimumInfo\n    }\n    post {\n      title\n      slug\n      _id\n    }\n  }\n": types.DeletedCommentsModerationLogDoc,
    "\n  fragment CommentsListWithParentMetadata on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n      isRead\n    }\n    tag {\n      ...TagBasicInfo\n    }\n  }\n": types.CommentsListWithParentMetadataDoc,
    "\n  fragment StickySubforumCommentFragment on Comment {\n    ...CommentWithRepliesFragment\n    tag {\n      ...TagBasicInfo\n    }\n  }\n": types.StickySubforumCommentFragmentDoc,
    "\n  fragment WithVoteComment on Comment {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n  }\n": types.WithVoteCommentDoc,
    "\n  fragment CommentsListWithModerationMetadata on Comment {\n    ...CommentWithRepliesFragment\n    allVotes {\n      voteType\n    }\n  }\n": types.CommentsListWithModerationMetadataDoc,
    "\n  fragment CommentsListWithModGPTAnalysis on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    modGPTAnalysis\n  }\n": types.CommentsListWithModGPTAnalysisDoc,
    "\n  fragment CommentsForAutocomplete on Comment {\n    _id\n    postId\n    baseScore\n    extendedScore\n    createdAt\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      markdown\n    }\n    post {\n      ...PostsForAutocomplete\n    }\n  }\n": types.CommentsForAutocompleteDoc,
    "\n  fragment CommentsForAutocompleteWithParents on Comment {\n    ...CommentsForAutocomplete\n    parentComment {\n      ...CommentsForAutocomplete\n      parentComment {\n        ...CommentsForAutocomplete\n        parentComment {\n          ...CommentsForAutocomplete\n          parentComment {\n            ...CommentsForAutocomplete\n            parentComment {\n              ...CommentsForAutocomplete\n              parentComment {\n                ...CommentsForAutocomplete\n                parentComment {\n                  ...CommentsForAutocomplete\n                  parentComment {\n                    ...CommentsForAutocomplete\n                    parentComment {\n                      ...CommentsForAutocomplete\n                      parentComment {\n                        ...CommentsForAutocomplete\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.CommentsForAutocompleteWithParentsDoc,
    "\n  fragment SuggestAlignmentComment on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    suggestForAlignmentUserIds\n    suggestForAlignmentUsers {\n      _id\n      displayName\n    }\n  }\n": types.SuggestAlignmentCommentDoc,
    "\n  fragment ConversationsMinimumInfo on Conversation {\n    _id\n    createdAt\n    latestActivity\n    title\n    participantIds\n    archivedByIds\n    messageCount\n    moderator\n  }\n": types.ConversationsMinimumInfoDoc,
    "\n  fragment ConversationsList on Conversation {\n    ...ConversationsMinimumInfo\n    participants {\n      ...UsersMinimumInfo\n    }\n    latestMessage {\n      ...messageListFragment\n    }\n  }\n": types.ConversationsListDoc,
    "\n  fragment ConversationsListWithReadStatus on Conversation {\n    ...ConversationsList\n    hasUnreadMessages\n  }\n": types.ConversationsListWithReadStatusDoc,
    "\n  fragment CurationNoticesFragment on CurationNotice {\n    _id\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    commentId\n    comment {\n      ...CommentsList\n    }\n    postId\n    post {\n      ...PostsMinimumInfo\n    }\n    deleted\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.CurationNoticesFragmentDoc,
    "\n  fragment DialogueCheckInfo on DialogueCheck {\n    _id\n    userId\n    targetUserId\n    checked\n    checkedAt\n    hideInRecommendations\n    matchPreference {\n      ...DialogueMatchPreferenceInfo\n    }\n    reciprocalMatchPreference {\n      ...DialogueMatchPreferenceInfo\n    }\n  }\n": types.DialogueCheckInfoDoc,
    "\n  fragment DialogueMatchPreferenceInfo on DialogueMatchPreference {\n    _id\n    dialogueCheckId\n    topicNotes\n    topicPreferences\n    syncPreference\n    asyncPreference\n    formatNotes\n    generatedDialogueId\n    deleted\n  }\n": types.DialogueMatchPreferenceInfoDoc,
    "\n  fragment DigestPostsMinimumInfo on DigestPost {\n    _id\n    digestId\n    postId\n    emailDigestStatus\n    onsiteDigestStatus\n  }\n": types.DigestPostsMinimumInfoDoc,
    "\n  fragment DigestsMinimumInfo on Digest {\n    _id\n    num\n    startDate\n    endDate\n    publishedDate\n    onsiteImageId\n    onsitePrimaryColor\n  }\n": types.DigestsMinimumInfoDoc,
    "\n  fragment ElectionCandidateBasicInfo on ElectionCandidate {\n    _id\n    electionName\n    name\n    logoSrc\n    href\n    fundraiserLink\n    gwwcLink\n    gwwcId\n    description\n    tagId\n    tag {\n      ...TagBasicInfo\n    }\n    postCount\n    baseScore\n    score\n    extendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.ElectionCandidateBasicInfoDoc,
    "\n  fragment ElectionCandidateSimple on ElectionCandidate {\n    _id\n    name\n    logoSrc\n    href\n    fundraiserLink\n    description\n  }\n": types.ElectionCandidateSimpleDoc,
    "\n  fragment WithVoteElectionCandidate on ElectionCandidate {\n    __typename\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.WithVoteElectionCandidateDoc,
    "\n  fragment ElectionVoteInfo on ElectionVote {\n    _id\n    electionName\n    userId\n    compareState\n    vote\n    submittedAt\n    submissionComments\n    userExplanation\n    userOtherComments\n  }\n": types.ElectionVoteInfoDoc,
    "\n  fragment ElectionVoteRecentDiscussion on ElectionVote {\n    _id\n    electionName\n    submittedAt\n  }\n": types.ElectionVoteRecentDiscussionDoc,
    "\n  fragment ElicitQuestionFragment on ElicitQuestion {\n    _id\n    title\n    notes\n    resolution\n    resolvesBy\n  }\n": types.ElicitQuestionFragmentDoc,
    "\n  fragment FeaturedResourcesFragment on FeaturedResource {\n    _id\n    title\n    body\n    ctaText\n    ctaUrl\n    expiresAt\n  }\n": types.FeaturedResourcesFragmentDoc,
    "\n  fragment FieldChangeFragment on FieldChange {\n    _id\n    createdAt\n    userId\n    changeGroup\n    documentId\n    fieldName\n    oldValue\n    newValue\n  }\n": types.FieldChangeFragmentDoc,
    "\n  fragment ForumEventsMinimumInfo on ForumEvent {\n    _id\n    title\n    startDate\n    endDate\n    darkColor\n    lightColor\n    bannerTextColor\n    contrastColor\n    tagId\n    postId\n    commentId\n    bannerImageId\n    eventFormat\n    customComponent\n    commentPrompt\n    isGlobal\n\n    pollAgreeWording\n    pollDisagreeWording\n\n    maxStickersPerUser\n  }\n": types.ForumEventsMinimumInfoDoc,
    "\n  fragment ForumEventsDisplay on ForumEvent {\n    ...ForumEventsMinimumInfo\n    publicData\n    voteCount\n\n    post {\n      ...PostsMinimumInfo\n    }\n    tag {\n      ...TagBasicInfo\n    }\n    frontpageDescription {\n      _id\n      html\n    }\n    frontpageDescriptionMobile {\n      _id\n      html\n    }\n    postPageDescription {\n      _id\n      html\n    }\n    pollQuestion {\n      _id\n      html\n      plaintextMainText\n    }\n  }\n": types.ForumEventsDisplayDoc,
    "\n  fragment ForumEventsEdit on ForumEvent {\n    ...ForumEventsMinimumInfo\n    frontpageDescription {\n      ...RevisionEdit\n    }\n    frontpageDescriptionMobile {\n      ...RevisionEdit\n    }\n    postPageDescription {\n      ...RevisionEdit\n    }\n    pollQuestion {\n      ...RevisionEdit\n    }\n  }\n": types.ForumEventsEditDoc,
    "\n  fragment GardenCodeFragment on GardenCode {\n    _id\n    code\n    title\n    userId\n    deleted\n    slug\n    startTime\n    endTime\n    fbLink\n    type\n    afOnly\n    contents {\n      ...RevisionDisplay\n    }\n  }\n": types.GardenCodeFragmentDoc,
    "\n  fragment GardenCodeFragmentEdit on GardenCode {\n    _id\n    code\n    title\n    userId\n    deleted\n    slug\n    startTime\n    endTime\n    fbLink\n    type\n    afOnly\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.GardenCodeEditFragmentDoc,
    "\n  fragment GoogleServiceAccountSessionInfo on GoogleServiceAccountSession {\n    _id\n    email\n  }\n": types.GoogleServiceAccountSessionInfoDoc,
    "\n  fragment GoogleServiceAccountSessionAdminInfo on GoogleServiceAccountSession {\n    _id\n    email\n    estimatedExpiry\n  }\n": types.GoogleServiceAccountSessionAdminInfoDoc,
    "\n  fragment JargonTerms on JargonTerm {\n    _id\n    postId\n    term\n    contents {\n      ...RevisionEdit\n    }\n    humansAndOrAIEdited\n    approved\n    deleted\n    altTerms\n  }\n": types.JargonTermsDoc,
    "\n  fragment JargonTermsPost on JargonTerm {\n    _id\n    term\n    humansAndOrAIEdited\n    approved\n    deleted\n    altTerms\n    contents {\n      ...RevisionDisplay\n    }\n  }\n": types.JargonTermsPostDoc,
    "\n  fragment JargonTermsWithPostInfo on JargonTerm {\n    ...JargonTerms\n    post {\n      ...PostsMinimumInfo\n    }\n  }\n": types.JargonTermsWithPostInfoDoc,
    "\n  fragment LlmConversationsFragment on LlmConversation {\n    _id\n    userId\n    title\n    createdAt\n    lastUpdatedAt\n    deleted\n  }\n": types.LlmConversationsFragmentDoc,
    "\n  fragment LlmConversationsViewingPageFragment on LlmConversation {\n    ...LlmConversationsFragment\n    totalCharacterCount\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": types.LlmConversationsViewingPageFragmentDoc,
    "\n  fragment LlmConversationsWithMessagesFragment on LlmConversation {\n    ...LlmConversationsFragment\n    messages {\n      ...LlmMessagesFragment\n    }\n  }\n": types.LlmConversationsWithMessagesFragmentDoc,
    "\n  fragment LlmMessagesFragment on LlmMessage {\n    _id\n    userId\n    conversationId\n    role\n    content\n    createdAt\n  }\n": types.LlmMessagesFragmentDoc,
    "\n  fragment localGroupsBase on Localgroup {\n    _id\n    createdAt\n    organizerIds\n    organizers {\n      ...UsersMinimumInfo\n    }\n    lastActivity\n    name\n    nameInAnotherLanguage\n    isOnline\n    location\n    googleLocation\n    mongoLocation\n    types\n    categories\n    contactInfo\n    facebookLink\n    facebookPageLink\n    meetupLink\n    slackLink\n    website\n    bannerImageId\n    inactive\n    deleted\n  }\n": types.localGroupsBaseDoc,
    "\n  fragment localGroupsHomeFragment on Localgroup {\n    ...localGroupsBase\n    contents {\n      ...RevisionDisplay\n    }\n  }\n": types.localGroupsHomeFragmentDoc,
    "\n  fragment localGroupsEdit on Localgroup {\n    ...localGroupsBase\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.localGroupsEditDoc,
    "\n  fragment localGroupsIsOnline on Localgroup {\n    _id\n    name\n    isOnline\n  }\n": types.localGroupsIsOnlineDoc,
    "\n  fragment newEventFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    name\n    important\n    properties\n    intercom\n  }\n": types.newEventFragmentDoc,
    "\n  fragment lastEventFragment on LWEvent {\n    _id\n    createdAt\n    documentId\n    userId\n    name\n    important\n    properties\n    intercom\n  }\n": types.lastEventFragmentDoc,
    "\n  fragment lwEventsAdminPageFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    name\n    documentId\n    important\n    properties\n    intercom\n  }\n": types.lwEventsAdminPageFragmentDoc,
    "\n  fragment emailHistoryFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    name\n    properties\n  }\n": types.emailHistoryFragmentDoc,
    "\n  fragment messageListFragment on Message {\n    _id\n    user {\n      ...UsersMinimumInfo\n      profileImageId\n    }\n    contents {\n      html\n      plaintextMainText\n    }\n    createdAt\n    conversationId\n  }\n": types.messageListFragmentDoc,
    "\n  fragment ModerationTemplateFragment on ModerationTemplate {\n    _id\n    name\n    collectionName\n    order\n    deleted\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.ModerationTemplateFragmentDoc,
    "\n  fragment ModeratorActionDisplay on ModeratorAction {\n    _id\n    user {\n      ...UsersMinimumInfo\n    }\n    userId\n    type\n    active\n    createdAt\n    endedAt\n  }\n": types.ModeratorActionDisplayDoc,
    "\n  fragment MultiDocumentMinimumInfo on MultiDocument {\n    _id\n    parentDocumentId\n    collectionName\n    fieldName\n    userId\n    slug\n    oldSlugs\n    title\n    tabTitle\n    tabSubtitle\n    preview\n    index\n    deleted\n    createdAt\n    legacyData\n\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.MultiDocumentMinimumInfoDoc,
    "\n  fragment MultiDocumentContentDisplay on MultiDocument {\n    ...MultiDocumentMinimumInfo\n    tableOfContents\n    textLastUpdatedAt\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.MultiDocumentContentDisplayDoc,
    "\n  fragment MultiDocumentEdit on MultiDocument {\n    ...MultiDocumentContentDisplay\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    summaries {\n      ...MultiDocumentContentDisplay\n    }\n    textLastUpdatedAt\n  }\n": types.MultiDocumentEditDoc,
    "\n  fragment MultiDocumentParentDocument on MultiDocument {\n    ...MultiDocumentEdit\n    parentTag {\n      ...TagHistoryFragment\n    }\n  }\n": types.MultiDocumentParentDocumentDoc,
    "\n  fragment MultiDocumentWithContributors on MultiDocument {\n    ...MultiDocumentEdit\n    contributors {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        currentAttributionCharCount\n      }\n    }\n  }\n": types.MultiDocumentWithContributorsDoc,
    "\n  fragment MultiDocumentRevision on MultiDocument {\n    ...MultiDocumentMinimumInfo\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n    tableOfContents(version: $version)\n  }\n": types.MultiDocumentRevisionDoc,
    "\n  fragment MultiDocumentWithContributorsRevision on MultiDocument {\n    ...MultiDocumentRevision\n    contributors(version: $version) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        currentAttributionCharCount\n        contributionScore\n      }\n    }\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    textLastUpdatedAt\n  }\n": types.MultiDocumentWithContributorsRevisionDoc,
    "\n  fragment WithVoteMultiDocument on MultiDocument {\n    ...MultiDocumentMinimumInfo\n  }\n": types.WithVoteMultiDocumentDoc,
    "\n  fragment NotificationsList on Notification {\n    _id\n    documentId\n    documentType\n    deleted\n    userId\n    createdAt\n    link\n    message\n    type\n    viewed\n    extraData\n  }\n": types.NotificationsListDoc,
    "\n  fragment PetrovDayActionInfo on PetrovDayAction {\n    _id\n    createdAt\n    userId\n    actionType\n    data\n  }\n": types.PetrovDayActionInfoDoc,
    "\n  fragment PetrovDayLaunchInfo on PetrovDayLaunch {\n    _id\n    createdAt\n    launchCode\n    userId\n  }\n": types.PetrovDayLaunchInfoDoc,
    "\n  fragment PodcastEpisodeFull on PodcastEpisode {\n    _id\n    podcastId\n    title\n    episodeLink\n    externalEpisodeId\n  }\n": types.PodcastEpisodeFullDoc,
    "\n  fragment PodcastSelect on Podcast {\n    _id\n    title\n  }\n": types.PodcastSelectDoc,
    "\n  fragment PostsMinimumInfo on Post {\n    _id\n    slug\n    title\n    draft\n    shortform\n    hideCommentKarma\n    af\n    currentUserReviewVote {\n      _id\n      qualitativeScore\n      quadraticScore\n    }\n    userId\n    coauthorStatuses {\n      userId\n      confirmed\n      requested\n    }\n    hasCoauthorPermission\n    rejected\n    debate\n    collabEditorDialogue\n  }\n": types.PostsMinimumInfoDoc,
    "\n  fragment PostsTopItemInfo on Post {\n    ...PostsMinimumInfo\n    ...PostsAuthors\n    isRead\n    contents {\n      _id\n      htmlHighlight\n      wordCount\n      version\n    }\n    customHighlight {\n      _id\n      html\n    }\n    tags {\n      ...TagPreviewFragment\n    }\n    reviewWinner {\n      ...ReviewWinnerTopPostsPage\n    }\n    spotlight {\n      ...SpotlightReviewWinner\n    }\n    reviews {\n      ...CommentsList\n    }\n    finalReviewVoteScoreHighKarma\n  }\n": types.PostsTopItemInfoDoc,
    "\n  fragment PostsBase on Post {\n    ...PostsMinimumInfo\n    \n    # Core fields\n    url\n    postedAt\n    createdAt\n    sticky\n    metaSticky\n    stickyPriority\n    status\n    frontpageDate\n    meta\n    deletedDraft\n    postCategory\n    tagRelevance\n\n    shareWithUsers\n    sharingSettings\n    linkSharingKey\n\n    contents_latest\n    commentCount\n    voteCount\n    baseScore\n    extendedScore\n    emojiReactors\n    unlisted\n    score\n    lastVisitedAt\n    isFuture\n    isRead\n    lastCommentedAt\n    lastCommentPromotedAt\n    canonicalCollectionSlug\n    curatedDate\n    commentsLocked\n    commentsLockedToAccountsCreatedAfter\n    debate\n\n    # questions\n    question\n    hiddenRelatedQuestion\n    originalPostRelationSourceId\n\n    userId\n    \n    # Local Event data\n    location\n    googleLocation\n    onlineEvent\n    globalEvent\n    startTime\n    endTime\n    localStartTime\n    localEndTime\n    eventRegistrationLink\n    joinEventLink\n    facebookLink\n    meetupLink\n    website\n    contactInfo\n    isEvent\n    eventImageId\n    eventType\n    types\n    groupId\n\n    # Review data \n    reviewedByUserId\n    suggestForCuratedUserIds\n    suggestForCuratedUsernames\n    reviewForCuratedUserId\n    authorIsUnreviewed\n\n    # Alignment Forum\n    afDate\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    afBaseScore\n    afExtendedScore\n    afCommentCount\n    afLastCommentedAt\n    afSticky\n    \n    hideAuthor\n    moderationStyle\n    ignoreRateLimits\n\n    submitToFrontpage\n    shortform\n    onlyVisibleToLoggedIn\n    onlyVisibleToEstablishedAccounts\n\n    reviewCount\n    reviewVoteCount\n    positiveReviewVoteCount\n    manifoldReviewMarketId\n\n    annualReviewMarketProbability\n    annualReviewMarketIsResolved\n    annualReviewMarketYear\n    annualReviewMarketUrl\n\n    group {\n      _id\n      name\n      organizerIds\n    }\n    rsvpCounts\n\n    podcastEpisodeId\n    forceAllowType3Audio\n\n    # deprecated\n    nominationCount2019\n    reviewCount2019\n\n    votingSystem\n    \n    disableRecommendation\n  }\n": types.PostsBaseDoc,
    "\n  fragment PostsWithVotes on Post {\n    ...PostsBase\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.PostsWithVotesDoc,
    "\n  fragment PostsListWithVotes on Post {\n    ...PostsList\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.PostsListWithVotesDoc,
    "\n  fragment PostsListWithVotesAndSequence on Post {\n    ...PostsListWithVotes\n    canonicalSequence {\n      ...SequencesPageFragment\n    }\n  }\n": types.PostsListWithVotesAndSequenceDoc,
    "\n  fragment UltraFeedPostFragment on Post {\n    ...PostsDetails\n    ...PostsListWithVotes\n    contents {\n      _id\n      html\n      htmlHighlight\n      wordCount\n      plaintextDescription\n      version\n    }\n    autoFrontpage\n    votingSystem\n  }\n": types.UltraFeedPostFragmentDoc,
    "\n  fragment PostsReviewVotingList on Post {\n    ...PostsListWithVotes\n    reviewVoteScoreAllKarma\n    reviewVotesAllKarma\n    reviewVoteScoreHighKarma\n    reviewVotesHighKarma\n    reviewVoteScoreAF\n    reviewVotesAF\n  }\n": types.PostsReviewVotingListDoc,
    "\n  fragment PostsModerationGuidelines on Post {\n    ...PostsMinimumInfo\n    frontpageDate\n    user {\n      _id\n      displayName\n      moderationStyle\n    }\n    moderationStyle\n    moderationGuidelines {\n      _id\n      html\n      originalContents {\n        type\n        data\n      }\n    }\n  }\n": types.PostsModerationGuidelinesDoc,
    "\n  fragment PostsAuthors on Post {\n    user {\n      ...UsersMinimumInfo\n      profileImageId\n      \n      # Author moderation info\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n      groups\n      banned\n      allCommentingDisabled\n    }\n    coauthors {\n      ...UsersMinimumInfo\n    }\n  }\n": types.PostsAuthorsDoc,
    "\n  fragment PostsListBase on Post {\n    ...PostsBase\n    ...PostsAuthors\n    readTimeMinutes\n    rejectedReason\n    customHighlight {\n      _id\n      html\n      plaintextDescription\n    }\n    lastPromotedComment {\n      _id\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n    bestAnswer {\n      ...CommentsList\n    }\n    tags {\n      ...TagBasicInfo\n    }\n    socialPreviewData {\n      _id\n      imageUrl\n    }\n\n    feedId\n    totalDialogueResponseCount\n    unreadDebateResponseCount\n    dialogTooltipPreview\n    disableSidenotes\n  }\n": types.PostsListBaseDoc,
    "\n  fragment PostsList on Post {\n    ...PostsListBase\n    deletedDraft\n    contents {\n      _id\n      htmlHighlight\n      plaintextDescription\n      wordCount\n      version\n    }\n    fmCrosspost {\n      isCrosspost\n      hostedHere\n      foreignPostId\n    }\n    bannedUserIds\n  }\n": types.PostsListDoc,
    "\n  fragment SunshineCurationPostsList on Post {\n    ...PostsList\n    curationNotices {\n      ...CurationNoticesFragment\n    }\n  }\n": types.SunshineCurationPostsListDoc,
    "\n  fragment PostsListTag on Post {\n    ...PostsList\n    tagRel(tagId: $tagId) {\n      ...WithVoteTagRel\n    }\n  }\n": types.PostsListTagDoc,
    "\n  fragment PostsListTagWithVotes on Post {\n    ...PostsListWithVotes\n    tagRel(tagId: $tagId) {\n      ...WithVoteTagRel\n    }\n  }\n": types.PostsListTagWithVotesDoc,
    "\n  fragment PostsDetails on Post {\n    ...PostsListBase\n\n    canonicalSource\n    noIndex\n    viewCount\n    tags {\n      ...TagPreviewFragment\n    }\n    socialPreviewData {\n      _id\n      text\n      imageUrl\n    }\n    \n    # Tags\n    tagRelevance\n    \n    # Posts-page display options\n    commentSortOrder\n    sideCommentVisibility\n    \n    # Sequence navigation\n    collectionTitle\n    canonicalPrevPostSlug\n    canonicalNextPostSlug\n    canonicalSequenceId\n    canonicalBookId\n    canonicalSequence {\n      _id\n      title\n    }\n    canonicalBook {\n      _id\n      title\n    }\n    canonicalCollection {\n      _id\n      title\n    }\n\n    # Podcast\n    podcastEpisode {\n      _id\n      title\n      podcast {\n        _id\n        title\n        applePodcastLink\n        spotifyPodcastLink\n      }\n      episodeLink\n      externalEpisodeId\n    }\n\n    # Moderation stuff\n    bannedUserIds\n    moderationStyle\n    \n    # Voting\n    currentUserVote\n    currentUserExtendedVote\n    \n    # RSS metadata\n    feedLink\n    feed {\n      ...RSSFeedMinimumInfo\n    }\n    \n    # Related Questions\n    sourcePostRelations {\n      _id\n      sourcePostId\n      sourcePost {\n        ...PostsListWithVotes\n      }\n      order\n    }\n    targetPostRelations {\n      _id\n      sourcePostId\n      targetPostId\n      targetPost {\n        ...PostsListWithVotes\n      }\n      order\n    }\n    \n    # Events\n    rsvps\n    activateRSVPs\n\n    # Crossposting\n    fmCrosspost {\n      isCrosspost\n      hostedHere\n      foreignPostId\n    }\n\n    # Jargon Terms\n    glossary {\n      ...JargonTermsPost\n    }\n  }\n": types.PostsDetailsDoc,
    "\n  fragment PostsExpandedHighlight on Post {\n    _id\n    contents {\n      _id\n      html\n      wordCount\n    }\n  }\n": types.PostsExpandedHighlightDoc,
    "\n  fragment PostsPlaintextDescription on Post {\n    _id\n    contents {\n      _id\n      plaintextDescription\n    }\n  }\n": types.PostsPlaintextDescriptionDoc,
    "\n  fragment PostsRevision on Post {\n    ...PostsDetails\n\n    # Content & Revisions\n    version\n    contents(version: $version) {\n      ...RevisionDisplay\n    }\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n": types.PostsRevisionDoc,
    "\n  fragment PostsRevisionEdit on Post {\n    ...PostsDetails\n\n    # Content & Revisions\n    version\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n": types.PostsRevisionEditDoc,
    "\n  fragment PostsWithNavigationAndRevision on Post {\n    ...PostsRevision\n    ...PostSequenceNavigation\n    customHighlight {\n      ...RevisionDisplay\n    }\n    \n    tableOfContentsRevision(version: $version)\n    reviewWinner {\n      ...ReviewWinnerAll\n    }\n  }\n": types.PostsWithNavigationAndRevisionDoc,
    "\n  fragment PostsWithNavigation on Post {\n    ...PostsPage\n    ...PostSequenceNavigation\n    \n    tableOfContents\n    reviewWinner {\n      ...ReviewWinnerAll\n    }\n  }\n": types.PostsWithNavigationDoc,
    "\n  fragment PostSequenceNavigation on Post {\n    # Prev/next sequence navigation\n    sequence(sequenceId: $sequenceId) {\n      ...SequencesPageFragment\n    }\n    prevPost(sequenceId: $sequenceId) {\n      ...PostsListWithVotes\n      sequence(sequenceId: $sequenceId, prevOrNext: \"prev\") {\n        _id\n      }\n    }\n    nextPost(sequenceId: $sequenceId) {\n      ...PostsListWithVotes\n      sequence(sequenceId: $sequenceId, prevOrNext: \"next\") {\n        _id\n      }\n    }\n  }\n": types.PostSequenceNavigationDoc,
    "\n  fragment PostsPage on Post {\n    ...PostsDetails\n    version\n    contents {\n      ...RevisionDisplay\n    }\n    customHighlight {\n      ...RevisionDisplay\n    }\n    myEditorAccess\n  }\n": types.PostsPageDoc,
    "\n  fragment PostsEdit on Post {\n    ...PostsDetails\n    ...PostSideComments\n    myEditorAccess\n    version\n    coauthorStatuses {\n      userId\n      confirmed\n      requested\n    }\n    readTimeMinutesOverride\n    fmCrosspost {\n      isCrosspost\n      hostedHere\n      foreignPostId\n    }\n    hideFromRecentDiscussions\n    hideFromPopularComments\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n    customHighlight {\n      ...RevisionEdit\n    }\n    tableOfContents\n    subforumTagId\n    socialPreviewImageId\n    socialPreview {\n      imageId\n      text\n    }\n    socialPreviewData {\n      _id\n      imageId\n      text\n    }\n    user {\n      ...UsersMinimumInfo\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n    }\n    usersSharedWith {\n      ...UsersMinimumInfo\n    }\n    coauthors {\n      ...UsersMinimumInfo\n    }\n    generateDraftJargon\n  }\n": types.PostsEditDoc,
    "\n  fragment PostsEditQueryFragment on Post {\n    ...PostsEdit\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n  }\n": types.PostsEditQueryFragmentDoc,
    "\n  fragment PostsEditMutationFragment on Post {\n    ...PostsEdit\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.PostsEditMutationFragmentDoc,
    "\n  fragment PostsRevisionsList on Post {\n    _id\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n": types.PostsRevisionsListDoc,
    "\n  fragment PostsRecentDiscussion on Post {\n    ...PostsListWithVotes\n    recentComments(commentsLimit: $commentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsList\n    }\n  }\n": types.PostsRecentDiscussionDoc,
    "\n  fragment ShortformRecentDiscussion on Post {\n    ...PostsListWithVotes\n    recentComments(commentsLimit: $commentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsListWithTopLevelComment\n    }\n  }\n": types.ShortformRecentDiscussionDoc,
    "\n  fragment UsersBannedFromPostsModerationLog on Post {\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    slug\n    _id\n    bannedUserIds\n  }\n": types.UsersBannedFromPostsModerationLogDoc,
    "\n  fragment SunshinePostsList on Post {\n    ...PostsListBase\n\n    currentUserVote\n    currentUserExtendedVote\n    fmCrosspost {\n      isCrosspost\n      hostedHere\n      foreignPostId\n    }\n    rejectedReason\n    autoFrontpage\n\n    contents {\n      _id\n      html\n      htmlHighlight\n      wordCount\n      version\n    }\n\n    automatedContentEvaluations {\n      ...AutomatedContentEvaluationsFragment\n    }\n\n    moderationGuidelines {\n      _id\n      html\n    }\n\n    user {\n      ...UsersMinimumInfo\n      biography {\n        ...RevisionDisplay\n      }\n      profileImageId\n      \n      # Author moderation info\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n      \n      moderationGuidelines {\n        _id\n        html\n      }\n\n      needsReview\n      moderatorActions {\n        ...ModeratorActionDisplay\n      }\n    }\n  }\n": types.SunshinePostsListDoc,
    "\n  fragment WithVotePost on Post {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n  }\n": types.WithVotePostDoc,
    "\n  fragment HighlightWithHash on Post {\n    _id\n    contents {\n      _id\n      htmlHighlightStartingAtHash(hash: $hash)\n    }\n  }\n": types.HighlightWithHashDoc,
    "\n  fragment PostWithDialogueMessage on Post {\n    _id\n    dialogueMessageContents(dialogueMessageId: $dialogueMessageId)\n  }\n": types.PostWithDialogueMessageDoc,
    "\n  fragment PostSideComments on Post {\n    _id\n    sideComments\n    sideCommentsCache {\n      ...SideCommentCacheMinimumInfo\n    }\n  }\n": types.PostSideCommentsDoc,
    "\n  fragment PostWithGeneratedSummary on Post {\n    _id\n    languageModelSummary\n  }\n": types.PostWithGeneratedSummaryDoc,
    "\n  fragment PostsBestOfList on Post {\n    ...PostsListWithVotes\n    podcastEpisode {\n      _id\n      title\n      podcast {\n        _id\n        title\n        applePodcastLink\n        spotifyPodcastLink\n      }\n      episodeLink\n      externalEpisodeId\n    }\n    socialPreviewData {\n      _id\n      text\n      imageUrl\n    }\n    firstVideoAttribsForPreview\n  }\n": types.PostsBestOfListDoc,
    "\n  fragment PostsRSSFeed on Post {\n    ...PostsPage\n    scoreExceeded2Date\n    scoreExceeded30Date\n    scoreExceeded45Date\n    scoreExceeded75Date\n    scoreExceeded125Date\n    scoreExceeded200Date\n    metaDate\n  }\n": types.PostsRSSFeedDoc,
    "\n  fragment PostsOriginalContents on Post {\n    _id\n    contents {\n      _id\n      originalContents {\n        type\n        data\n      }\n    }\n  }\n": types.PostsOriginalContentsDoc,
    "\n  fragment PostsHTML on Post {\n    _id\n    contents {\n      ...RevisionHTML\n    }\n  }\n": types.PostsHTMLDoc,
    "\n  fragment PostsForAutocomplete on Post {\n    _id\n    title\n    userId\n    baseScore\n    extendedScore\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      markdown\n    }\n  }\n": types.PostsForAutocompleteDoc,
    "\n  fragment PostForReviewWinnerItem on Post {\n    _id\n    spotlight {\n      _id\n    }\n    reviewWinner {\n      _id\n      category\n    }\n  }\n": types.PostForReviewWinnerItemDoc,
    "\n  fragment PostsTwitterAdmin on Post {\n    ...PostsListWithVotes\n    user {\n      ...UsersSocialMediaInfo\n    }\n    coauthors {\n      ...UsersSocialMediaInfo\n    }\n  }\n": types.PostsTwitterAdminDoc,
    "\n  fragment SuggestAlignmentPost on Post {\n    ...PostsList\n    suggestForAlignmentUsers {\n      _id\n      displayName\n    }\n  }\n": types.SuggestAlignmentPostDoc,
    "\n  fragment UnclaimedReportsList on Report {\n    _id\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    commentId\n    comment {\n      ...CommentsList\n      post {\n        ...PostsMinimumInfo\n      }\n      tag {\n        ...TagBasicInfo\n      }\n    }\n    postId\n    post {\n      ...PostsList\n    }\n    reportedUser {\n      ...SunshineUsersList\n    }\n    closedAt\n    createdAt\n    claimedUserId\n    claimedUser {\n      _id\n      displayName\n      username\n      slug\n    }\n    link\n    description\n    reportedAsSpam\n    markedAsSpam\n  }\n": types.UnclaimedReportsListDoc,
    "\n  fragment reviewVoteFragment on ReviewVote {\n    _id\n    createdAt\n    userId\n    postId\n    qualitativeScore\n    quadraticScore\n    comment\n    year\n    dummy\n    reactions\n  }\n": types.reviewVoteFragmentDoc,
    "\n  fragment reviewVoteWithUserAndPost on ReviewVote {\n    ...reviewVoteFragment\n    user {\n      ...UsersMinimumInfo\n      email\n      emails\n    }\n    post {\n      ...PostsMinimumInfo\n    }\n  }\n": types.reviewVoteWithUserAndPostDoc,
    "\n  fragment reviewAdminDashboard on ReviewVote {\n    _id\n    createdAt\n    userId\n    user {\n      _id\n      displayName\n      karma\n    }\n  }\n": types.reviewAdminDashboardDoc,
    "\n  fragment ReviewWinnerArtImages on ReviewWinnerArt {\n    _id\n    postId\n    splashArtImagePrompt\n    splashArtImageUrl\n    activeSplashArtCoordinates {\n      ...SplashArtCoordinatesEdit\n    }\n  }\n": types.ReviewWinnerArtImagesDoc,
    "\n  fragment ReviewWinnerEditDisplay on ReviewWinner {\n    _id\n    postId\n    reviewYear\n    curatedOrder\n    reviewRanking\n  }\n": types.ReviewWinnerEditDisplayDoc,
    "\n  fragment ReviewWinnerTopPostsDisplay on ReviewWinner {\n    _id\n    postId\n    post {\n      ...PostsTopItemInfo\n    }\n    reviewYear\n    curatedOrder\n    reviewRanking\n  }\n": types.ReviewWinnerTopPostsDisplayDoc,
    "\n  fragment ReviewWinnerAll on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    postId\n    reviewYear\n    reviewRanking\n    reviewWinnerArt {\n      ...ReviewWinnerArtImages\n    }\n    competitorCount\n  }\n": types.ReviewWinnerAllDoc,
    "\n  fragment ReviewWinnerTopPostsPage on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    reviewYear\n    reviewRanking\n    reviewWinnerArt {\n      splashArtImageUrl\n      activeSplashArtCoordinates {\n        ...SplashArtCoordinatesEdit\n      }\n    }\n  }\n": types.ReviewWinnerTopPostsPageDoc,
    "\n  fragment ReviewWinnerAnnouncement on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    reviewYear\n    reviewRanking\n    competitorCount\n    postId\n    post {\n      _id\n      title\n      slug\n    }\n  }\n": types.ReviewWinnerAnnouncementDoc,
    "\n  fragment RevisionDisplay on Revision {\n    _id\n    version\n    html\n    wordCount\n    htmlHighlight\n    plaintextDescription\n  }\n": types.RevisionDisplayDoc,
    "\n  fragment RevisionHTML on Revision {\n    _id\n    html\n  }\n": types.RevisionHTMLDoc,
    "\n  fragment RevisionEdit on Revision {\n    ...RevisionDisplay\n    updateType\n    editedAt\n    userId\n    commitMessage\n    originalContents {\n      type\n      data\n    }\n    markdown\n    ckEditorMarkup\n  }\n": types.RevisionEditDoc,
    "\n  fragment RevisionMetadata on Revision {\n    _id\n    version\n    editedAt\n    commitMessage\n    userId\n    \n    score\n    baseScore\n    extendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.RevisionMetadataDoc,
    "\n  fragment RevisionMetadataWithChangeMetrics on Revision {\n    ...RevisionMetadata\n    changeMetrics\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": types.RevisionMetadataWithChangeMetricsDoc,
    "\n  fragment RevisionHistoryEntry on Revision {\n    ...RevisionMetadata\n    documentId\n    collectionName\n    changeMetrics\n    legacyData\n    skipAttributions\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": types.RevisionHistoryEntryDoc,
    "\n  fragment RevisionHistorySummaryEdit on Revision {\n    ...RevisionHistoryEntry\n    summary {\n      ...MultiDocumentMinimumInfo\n      parentTag {\n        _id\n        name\n      }\n      parentLens {\n        _id\n        title\n        tabTitle\n        tabSubtitle\n      }\n    }\n  }\n": types.RevisionHistorySummaryEditDoc,
    "\n  fragment RevisionTagFragment on Revision {\n    ...RevisionHistoryEntry\n    tag {\n      ...TagHistoryFragment\n    }\n    lens {\n      ...MultiDocumentParentDocument\n    }\n  }\n": types.RevisionTagFragmentDoc,
    "\n  fragment RecentDiscussionRevisionTagFragment on Revision {\n    ...RevisionHistoryEntry\n    tag {\n      ...TagRecentDiscussion\n    }\n  }\n": types.RecentDiscussionRevisionTagFragmentDoc,
    "\n  fragment WithVoteRevision on Revision {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    voteCount\n  }\n": types.WithVoteRevisionDoc,
    "\n  fragment RSSFeedMinimumInfo on RSSFeed {\n    _id\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    createdAt\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    importAsDraft\n  }\n": types.RSSFeedMinimumInfoDoc,
    "\n  fragment newRSSFeedFragment on RSSFeed {\n    _id\n    userId\n    createdAt\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    status\n    importAsDraft\n  }\n": types.newRSSFeedFragmentDoc,
    "\n  fragment RSSFeedMutationFragment on RSSFeed {\n    _id\n    userId\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    importAsDraft\n  }\n": types.RSSFeedMutationFragmentDoc,
    "\n  fragment SequencesPageTitleFragment on Sequence {\n    _id\n    title\n    canonicalCollectionSlug\n    canonicalCollection {\n      _id\n      title\n    }\n  }\n": types.SequencesPageTitleFragmentDoc,
    "\n  fragment SequencesPageFragment on Sequence {\n    ...SequencesPageTitleFragment\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      ...RevisionDisplay\n    }\n    gridImageId\n    bannerImageId\n    canonicalCollectionSlug\n    draft\n    isDeleted\n    hidden\n    hideFromAuthorPage\n    noindex\n    curatedOrder\n    userProfileOrder\n    af\n    postsCount\n    readPostsCount\n  }\n": types.SequencesPageFragmentDoc,
    "\n  fragment SequenceContinueReadingFragment on Sequence {\n    _id\n    title\n    gridImageId\n    canonicalCollectionSlug\n  }\n": types.SequenceContinueReadingFragmentDoc,
    "\n  fragment SequencesPageWithChaptersFragment on Sequence {\n    ...SequencesPageFragment\n    chapters {\n      ...ChaptersFragment\n    }\n  }\n": types.SequencesPageWithChaptersFragmentDoc,
    "\n  fragment SequencesEdit on Sequence {\n    ...SequencesPageFragment\n    contents { \n      ...RevisionEdit\n    }\n  }\n": types.SequencesEditDoc,
    "\n  fragment SideCommentCacheMinimumInfo on SideCommentCache {\n    _id\n    postId\n    annotatedHtml\n    commentsByBlock\n    version\n    createdAt\n  }\n": types.SideCommentCacheMinimumInfoDoc,
    "\n  fragment SplashArtCoordinates on SplashArtCoordinate {\n    _id\n    reviewWinnerArtId\n    leftXPct\n    leftYPct\n    leftHeightPct\n    leftWidthPct\n    leftFlipped\n    middleXPct\n    middleYPct\n    middleHeightPct\n    middleWidthPct\n    middleFlipped\n    rightXPct\n    rightYPct\n    rightHeightPct\n    rightWidthPct\n    rightFlipped\n  }\n": types.SplashArtCoordinatesDoc,
    "\n  fragment SplashArtCoordinatesEdit on SplashArtCoordinate {\n    ...SplashArtCoordinates\n    createdAt\n  }\n": types.SplashArtCoordinatesEditDoc,
    "\n  fragment SpotlightMinimumInfo on Spotlight {\n    _id\n    documentId\n    documentType\n    spotlightImageId\n    spotlightDarkImageId\n    spotlightSplashImageUrl\n    draft\n    deletedDraft\n    position\n    lastPromotedAt\n    customTitle\n    customSubtitle\n    subtitleUrl\n    headerTitle\n    headerTitleLeftColor\n    headerTitleRightColor\n    duration\n    showAuthor\n    imageFade\n    imageFadeColor\n  }\n": types.SpotlightMinimumInfoDoc,
    "\n  fragment SpotlightReviewWinner on Spotlight {\n    ...SpotlightMinimumInfo\n    description {\n      html\n    }\n    sequenceChapters {\n      ...ChaptersFragment\n    }\n  }\n": types.SpotlightReviewWinnerDoc,
    "\n  fragment SpotlightHeaderEventSubtitle on Spotlight {\n    ...SpotlightMinimumInfo\n    post {\n      _id\n      slug\n    }\n    sequence {\n      _id\n    }\n    tag {\n      _id\n      slug\n    }\n  }\n": types.SpotlightHeaderEventSubtitleDoc,
    "\n  fragment SpotlightDisplay on Spotlight {\n    ...SpotlightMinimumInfo\n    post {\n      _id\n      slug\n      title\n\n      user {\n        ...UsersMinimumInfo\n      }\n      reviews {\n        _id\n      }\n    }\n    sequence {\n      _id\n      title\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n    tag {\n      _id\n      name\n      slug\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n    description {\n      html\n    }\n  }\n": types.SpotlightDisplayDoc,
    "\n  fragment SpotlightEditQueryFragment on Spotlight {\n    ...SpotlightMinimumInfo\n    description {\n      ...RevisionEdit\n    }\n  }\n": types.SpotlightEditQueryFragmentDoc,
    "\n  fragment SubscriptionState on Subscription {\n    _id\n    userId\n    createdAt\n    state\n    documentId\n    collectionName\n    deleted\n    type\n  }\n": types.SubscriptionStateDoc,
    "\n  fragment MembersOfGroupFragment on Subscription {\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": types.MembersOfGroupFragmentDoc,
    "\n  fragment SurveyQuestionMinimumInfo on SurveyQuestion {\n    _id\n    question\n    format\n    order\n  }\n": types.SurveyQuestionMinimumInfoDoc,
    "\n  fragment SurveyResponseMinimumInfo on SurveyResponse {\n    _id\n    surveyId\n    surveyScheduleId\n    userId\n    clientId\n    response\n  }\n": types.SurveyResponseMinimumInfoDoc,
    "\n  fragment SurveyScheduleMinimumInfo on SurveySchedule {\n    _id\n    survey {\n      ...SurveyMinimumInfo\n    }\n  }\n": types.SurveyScheduleMinimumInfoDoc,
    "\n  fragment SurveyScheduleEdit on SurveySchedule {\n    ...SurveyScheduleMinimumInfo\n    surveyId\n    name\n    impressionsLimit\n    maxVisitorPercentage\n    minKarma\n    maxKarma\n    target\n    startDate\n    endDate\n    deactivated\n    createdAt\n  }\n": types.SurveyScheduleEditDoc,
    "\n  fragment SurveyMinimumInfo on Survey {\n    _id\n    name\n    questions {\n      ...SurveyQuestionMinimumInfo\n    }\n    createdAt\n  }\n": types.SurveyMinimumInfoDoc,
    "\n  fragment TagFlagFragment on TagFlag {\n    _id\n    createdAt\n    name\n    slug\n    order\n    deleted\n    contents { \n      html\n      htmlHighlight\n      plaintextDescription\n    }\n  }\n": types.TagFlagFragmentDoc,
    "\n  fragment TagFlagEditFragment on TagFlag {\n    ...TagFlagFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.TagFlagEditFragmentDoc,
    "\n  fragment TagRelBasicInfo on TagRel {\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    tagId\n    postId\n    autoApplied\n  }\n": types.TagRelBasicInfoDoc,
    "\n  fragment TagRelFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    post {\n      ...PostsList\n    }\n    currentUserVote\n    currentUserExtendedVote\n    currentUserCanVote\n  }\n": types.TagRelFragmentDoc,
    "\n  fragment TagRelHistoryFragment on TagRel {\n    ...TagRelBasicInfo\n    createdAt\n    user {\n      ...UsersMinimumInfo\n    }\n    post {\n      ...PostsList\n    }\n  }\n": types.TagRelHistoryFragmentDoc,
    "\n  fragment TagRelCreationFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    post {\n      ...PostsList\n      tagRelevance\n      tagRel(tagId: $tagId) {\n        ...WithVoteTagRel\n      }\n    }\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.TagRelCreationFragmentDoc,
    "\n  fragment TagRelMinimumFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    currentUserVote\n    currentUserExtendedVote\n    currentUserCanVote\n  }\n": types.TagRelMinimumFragmentDoc,
    "\n  fragment WithVoteTagRel on TagRel {\n    __typename\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.WithVoteTagRelDoc,
    "\n  fragment TagBasicInfo on Tag {\n    _id\n    userId\n    name\n    shortName\n    slug\n    core\n    postCount\n    adminOnly\n    canEditUserIds\n    suggestedAsFilter\n    needsReview\n    descriptionTruncationCount\n    createdAt\n    wikiOnly\n    deleted\n    isSubforum\n    noindex\n    isArbitalImport\n    isPlaceholderPage\n\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.TagBasicInfoDoc,
    "\n  fragment TagDetailsFragment on Tag {\n    ...TagBasicInfo\n    subtitle\n    oldSlugs\n    isRead\n    defaultOrder\n    reviewedByUserId\n    wikiGrade\n    subforumModeratorIds\n    subforumModerators {\n      ...UsersMinimumInfo\n    }\n    moderationGuidelines {\n      _id\n      html\n    }\n    bannerImageId\n    squareImageId\n    lesswrongWikiImportSlug\n    lesswrongWikiImportRevision\n    sequence {\n      ...SequencesPageFragment\n    }\n  }\n": types.TagDetailsFragmentDoc,
    "\n  fragment TagFragment on Tag {\n    ...TagDetailsFragment\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      html\n      htmlHighlight\n      plaintextDescription\n      version\n      editedAt\n    }\n    canVoteOnRels\n  }\n": types.TagFragmentDoc,
    "\n  fragment TagHistoryFragment on Tag {\n    ...TagFragment\n    textLastUpdatedAt\n    tableOfContents\n    user {\n      ...UsersMinimumInfo\n    }\n    lensesIncludingDeleted {\n      ...MultiDocumentContentDisplay\n    }\n  }\n": types.TagHistoryFragmentDoc,
    "\n  fragment TagCreationHistoryFragment on Tag {\n    ...TagFragment\n    user {\n      ...UsersMinimumInfo\n    }\n    description {\n      html\n    }\n  }\n": types.TagCreationHistoryFragmentDoc,
    "\n  fragment TagRevisionFragment on Tag {\n    ...TagDetailsFragment\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    isRead\n    description(version: $version) {\n      _id\n      version\n      html\n      htmlHighlight\n      plaintextDescription\n      editedAt\n      \n      user {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": types.TagRevisionFragmentDoc,
    "\n  fragment TagPreviewFragment on Tag {\n    ...TagBasicInfo\n    isRead\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      htmlHighlight\n    }\n    canVoteOnRels\n    isArbitalImport\n  }\n": types.TagPreviewFragmentDoc,
    "\n  fragment TagSectionPreviewFragment on Tag {\n    ...TagBasicInfo\n    isRead\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      htmlHighlightStartingAtHash(hash: $hash)\n    }\n    canVoteOnRels\n  }\n": types.TagSectionPreviewFragmentDoc,
    "\n  fragment TagSubforumFragment on Tag {\n    ...TagPreviewFragment\n    subforumModeratorIds\n    tableOfContents\n    subforumWelcomeText {\n      _id\n      html\n    }\n  }\n": types.TagSubforumFragmentDoc,
    "\n  fragment TagSubtagFragment on Tag {\n    _id\n    subforumModeratorIds\n    subTags {\n      ...TagPreviewFragment\n    }\n  }\n": types.TagSubtagFragmentDoc,
    "\n  fragment TagSubforumSidebarFragment on Tag {\n    ...TagBasicInfo\n  }\n": types.TagSubforumSidebarFragmentDoc,
    "\n  fragment TagDetailedPreviewFragment on Tag {\n    ...TagDetailsFragment\n    description {\n      _id\n      htmlHighlight\n    }\n  }\n": types.TagDetailedPreviewFragmentDoc,
    "\n  fragment TagWithFlagsFragment on Tag {\n    ...TagFragment\n    tagFlagsIds\n    tagFlags {\n      ...TagFlagFragment\n    }\n  }\n": types.TagWithFlagsFragmentDoc,
    "\n  fragment TagWithFlagsAndRevisionFragment on Tag {\n    ...TagRevisionFragment\n    tagFlagsIds\n    tagFlags {\n      ...TagFlagFragment\n    }\n  }\n": types.TagWithFlagsAndRevisionFragmentDoc,
    "\n  fragment ArbitalLinkedPagesFragment on ArbitalLinkedPages {\n    faster {\n      _id\n      name\n      slug\n    }\n    slower {\n      _id\n      name\n      slug\n    }\n    moreTechnical {\n      _id\n      name\n      slug\n    }\n    lessTechnical {\n      _id\n      name\n      slug\n    }\n    requirements {\n      _id\n      name\n      slug\n    }\n    teaches {\n      _id\n      name\n      slug\n    }\n    parents {\n      _id\n      name\n      slug\n    }\n    children {\n      _id\n      name\n      slug\n    }\n  }\n": types.ArbitalLinkedPagesFragmentDoc,
    "\n  fragment TagPageArbitalContentFragment on Tag {\n    lenses {\n      ...MultiDocumentWithContributors\n    }\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n  }\n": types.TagPageArbitalContentFragmentDoc,
    "\n  fragment TagPageFragment on Tag {\n    ...TagWithFlagsFragment\n    tableOfContents\n    postsDefaultSortOrder\n    subforumIntroPost {\n      ...PostsListWithVotes\n    }\n    subforumWelcomeText {\n      _id\n      html\n    }\n    contributors(limit: $contributorsLimit) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    canVoteOnRels\n    forceAllowType3Audio\n    textLastUpdatedAt\n  }\n": types.TagPageFragmentDoc,
    "\n  fragment TagPageWithArbitalContentFragment on Tag {\n    ...TagPageFragment\n    ...TagPageArbitalContentFragment\n  }\n": types.TagPageWithArbitalContentFragmentDoc,
    "\n  fragment AllTagsPageFragment on Tag {\n    ...TagWithFlagsFragment\n    tableOfContents\n  }\n": types.AllTagsPageFragmentDoc,
    "\n  fragment TagPageWithRevisionFragment on Tag {\n    ...TagWithFlagsAndRevisionFragment\n    tableOfContents(version: $version)\n    textLastUpdatedAt\n    postsDefaultSortOrder\n    subforumIntroPost {\n      ...PostsListWithVotes\n    }\n    subforumWelcomeText {\n      _id\n      html\n    }\n    contributors(limit: $contributorsLimit, version: $version) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    canVoteOnRels\n    forceAllowType3Audio\n  }\n": types.TagPageWithRevisionFragmentDoc,
    "\n  fragment TagPageRevisionWithArbitalContentFragment on Tag {\n    ...TagPageWithRevisionFragment\n    ...TagPageArbitalContentFragment\n  }\n": types.TagPageRevisionWithArbitalContentFragmentDoc,
    "\n  fragment TagFullContributorsList on Tag {\n    contributors {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n  }\n": types.TagFullContributorsListDoc,
    "\n  fragment TagEditFragment on Tag {\n    ...TagDetailsFragment\n    isPostType\n    parentTagId\n    parentTag {\n      ...TagBasicInfo\n    }\n    subforumIntroPostId\n    tagFlagsIds\n    postsDefaultSortOrder\n    introSequenceId\n    canVoteOnRels\n    \n    autoTagModel\n    autoTagPrompt\n    \n    description {\n      ...RevisionEdit\n    }\n    subforumWelcomeText {\n      ...RevisionEdit\n    }\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n  }\n": types.TagEditFragmentDoc,
    "\n  fragment TagRecentDiscussion on Tag {\n    ...TagFragment\n    lastVisitedAt\n    recentComments(tagCommentsLimit: $tagCommentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsList\n    }\n  }\n": types.TagRecentDiscussionDoc,
    "\n  fragment SunshineTagFragment on Tag {\n    ...TagFragment\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": types.SunshineTagFragmentDoc,
    "\n  fragment UserOnboardingTag on Tag {\n    _id\n    name\n    slug\n    bannerImageId\n    squareImageId\n  }\n": types.UserOnboardingTagDoc,
    "\n  fragment TagName on Tag {\n    _id\n    name\n    slug\n  }\n": types.TagNameDoc,
    "\n  fragment ExplorePageTagFragment on Tag {\n    ...TagFragment\n    contributors(limit: $contributorsLimit) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    legacyData\n  }\n": types.ExplorePageTagFragmentDoc,
    "\n  fragment ConceptItemFragment on Tag {\n    _id\n    core\n    name\n    slug\n    oldSlugs\n    postCount\n    baseScore\n    description {\n      _id\n      wordCount\n    }\n    wikiOnly\n    isArbitalImport\n    coreTagId\n    maxScore\n    usersWhoLiked {\n      _id\n      displayName\n    }\n  }\n": types.ConceptItemFragmentDoc,
    "\n  fragment TagPageWithArbitalContentAndLensRevisionFragment on Tag {\n    ...TagPageFragment\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    lenses(lensSlug: $lensSlug, version: $version) {\n      ...MultiDocumentWithContributorsRevision\n    }\n  }\n": types.TagPageWithArbitalContentAndLensRevisionFragmentDoc,
    "\n  fragment WithVoteTag on Tag {\n    ...TagBasicInfo\n  }\n": types.WithVoteTagDoc,
    "\n  fragment TypingIndicatorInfo on TypingIndicator {\n    _id\n    userId\n    documentId\n    lastUpdated\n  }\n": types.TypingIndicatorInfoDoc,
    "\n  fragment UserEAGDetailsMinimumInfo on UserEAGDetail {\n    _id\n    userId\n    createdAt\n    lastUpdated\n    careerStage\n    countryOrRegion\n    nearestCity\n    willingnessToRelocate\n    experiencedIn\n    interestedIn\n  }\n": types.UserEAGDetailsMinimumInfoDoc,
    "\n  fragment UserJobAdsMinimumInfo on UserJobAd {\n    _id\n    userId\n    createdAt\n    lastUpdated\n    jobName\n    adState\n    reminderSetAt\n  }\n": types.UserJobAdsMinimumInfoDoc,
    "\n  fragment UserMostValuablePostInfo on UserMostValuablePost {\n    _id\n    userId\n    postId\n    deleted\n  }\n": types.UserMostValuablePostInfoDoc,
    "\n  fragment UserRateLimitDisplay on UserRateLimit {\n    _id\n    user {\n      ...UsersMinimumInfo\n    }\n    userId\n    type\n    actionsPerInterval\n    intervalUnit\n    intervalLength\n    createdAt\n    endedAt\n  }\n": types.UserRateLimitDisplayDoc,
    "\n  fragment UserTagRelDetails on UserTagRel {\n    _id\n    userId\n    tagId\n    subforumShowUnreadInSidebar\n    subforumEmailNotifications\n    subforumHideIntroPost\n  }\n": types.UserTagRelDetailsDoc,
    "\n  fragment UsersMinimumInfo on User {\n    _id\n    slug\n    createdAt\n    username\n    displayName\n    profileImageId\n    karma\n    afKarma\n    deleted\n    isAdmin\n    htmlBio\n    jobTitle\n    organization\n    postCount\n    commentCount\n    sequenceCount\n    afPostCount\n    afCommentCount\n    spamRiskScore\n    tagRevisionCount\n    reviewedByUserId\n  }\n": types.UsersMinimumInfoDoc,
    "\n  fragment UsersProfile on User {\n    ...UsersMinimumInfo\n    fullName\n    previousDisplayName\n    oldSlugs\n    groups\n    jobTitle\n    organization\n    careerStage\n    biography {\n      ...RevisionDisplay\n    }\n    howOthersCanHelpMe {\n      ...RevisionDisplay\n    }\n    howICanHelpOthers {\n      ...RevisionDisplay\n    }\n    profileTagIds\n    organizerOfGroupIds\n    programParticipation\n    website\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    githubProfileURL\n    afSequenceCount\n    afSequenceDraftCount\n    sequenceDraftCount\n    moderationStyle\n    moderationGuidelines {\n      ...RevisionDisplay\n    }\n    bannedUserIds\n    location\n    googleLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    mongoLocation\n    shortformFeedId\n    petrovPressedButtonDate\n    petrovOptOut\n    sortDraftsBy\n    email\n    emails\n    banned\n    noindex\n    paymentEmail\n    paymentInfo\n    goodHeartTokens\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n  }\n": types.UsersProfileDoc,
    "\n  fragment UsersCurrent on User {\n    ...UsersMinimumInfo\n    oldSlugs\n    groups\n    jobTitle\n    organization\n    careerStage\n    profileTagIds\n    organizerOfGroupIds\n    moderationStyle\n    moderationGuidelines {\n      ...RevisionDisplay\n    }\n    bannedUserIds\n    location\n    googleLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    mongoLocation\n    shortformFeedId\n    sortDraftsBy\n    email\n    emails\n    banned\n    paymentEmail\n    paymentInfo\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n\n    usernameUnset\n    taggingDashboardCollapsed\n\n    beta\n    acceptedTos\n    pageUrl\n    isReviewed\n    nullifyVotes\n    hideIntercom\n    hideNavigationSidebar\n    hideCommunitySection\n    hasContinueReading\n    expandedFrontpageSections {\n      community\n      recommendations\n      quickTakes\n      quickTakesCommunity\n      popularComments\n    }\n    hidePostsRecommendations\n    currentFrontpageFilter\n    frontpageSelectedTab\n    frontpageFilterSettings\n    hideFrontpageFilterSettingsDesktop\n    allPostsTimeframe\n    allPostsSorting\n    allPostsFilter\n    allPostsShowLowKarma\n    allPostsIncludeEvents\n    allPostsHideCommunity\n    allPostsOpenSettings\n    draftsListSorting\n    draftsListShowArchived\n    draftsListShowShared\n    lastNotificationsCheck\n    bannedUserIds\n    bannedPersonalUserIds\n    moderationStyle\n    noKibitz\n    showHideKarmaOption\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    commentSorting\n    location\n    googleLocation\n    mongoLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    nearbyEventsNotifications\n    nearbyEventsNotificationsLocation\n    nearbyEventsNotificationsRadius\n    nearbyPeopleNotificationThreshold\n    hideFrontpageMap\n    emailSubscribedToCurated\n    subscribedToDigest\n    subscribedToNewsletter\n    unsubscribeFromAll\n    whenConfirmationEmailSent\n    hideSubscribePoke\n    hideMeetupsPoke\n    hideHomeRHS\n    noCollapseCommentsFrontpage\n    noCollapseCommentsPosts\n    noSingleLineComments\n    showCommunityInRecentDiscussion\n    karmaChangeNotifierSettings\n    karmaChangeLastOpened\n    shortformFeedId\n    viewUnreviewedComments\n    recommendationSettings\n    theme\n\n    hasAnyBookmarks\n\n    hiddenPostsMetadata {\n      postId\n    }\n\n    auto_subscribe_to_my_posts\n    auto_subscribe_to_my_comments\n    autoSubscribeAsOrganizer\n    noExpandUnreadCommentsReview\n    hideFrontpageBookAd\n\n    abTestKey\n    abTestOverrides\n\n    sortDraftsBy\n    reactPaletteStyle\n\n    petrovPressedButtonDate\n    petrovLaunchCodeDate\n    petrovOptOut\n    lastUsedTimezone\n\n    acknowledgedNewUserGuidelines\n    notificationSubforumUnread\n    subforumPreferredLayout\n    \n    hideJobAdUntil\n    criticismTipsDismissed\n    \n    allowDatadogSessionReplay\n    hideFrontpageBook2020Ad\n\n    showDialoguesList\n    showMyDialogues\n    showMatches\n    showRecommendedPartners\n    hideActiveDialogueUsers\n\n    hideSunshineSidebar\n    optedOutOfSurveys\n    postGlossariesPinned\n    generateJargonForDrafts\n    generateJargonForPublishedPosts\n  }\n": types.UsersCurrentDoc,
    "\n  fragment UsersCurrentCommentRateLimit on User {\n    _id\n    rateLimitNextAbleToComment(postId: $postId)\n  }\n": types.UsersCurrentCommentRateLimitDoc,
    "\n  fragment UsersCurrentPostRateLimit on User {\n    _id\n    rateLimitNextAbleToPost(eventForm: $eventForm)\n  }\n": types.UsersCurrentPostRateLimitDoc,
    "\n  fragment UserBookmarkedPosts on User {\n    _id\n    bookmarkedPosts {\n      ...PostsList\n    }\n  }\n": types.UserBookmarkedPostsDoc,
    "\n  fragment UserKarmaChanges on User {\n    _id\n    karmaChanges {\n      totalChange\n      updateFrequency\n      startDate\n      endDate\n      nextBatchDate\n      posts {\n        _id\n        scoreChange\n        postId\n        title\n        slug\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n        collectionName\n      }\n      comments {\n        _id\n        scoreChange\n        commentId\n        description\n        postId\n        postTitle\n        postSlug\n        tagSlug\n        tagName\n        tagCommentType\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n        collectionName\n      }\n      tagRevisions {\n        _id\n        scoreChange\n        tagId\n        tagSlug\n        tagName\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n        collectionName\n      }\n      todaysKarmaChanges {\n        posts {\n          _id\n          scoreChange\n          postId\n          title\n          slug\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n        comments {\n          _id\n          scoreChange\n          commentId\n          description\n          postId\n          postTitle\n          postSlug\n          tagSlug\n          tagName\n          tagCommentType\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n        tagRevisions {\n          _id\n          scoreChange\n          tagId\n          tagSlug\n          tagName\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n      }\n      thisWeeksKarmaChanges {\n        posts {\n          _id\n          scoreChange\n          postId\n          title\n          slug\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n        comments {\n          _id\n          scoreChange\n          commentId\n          description\n          postId\n          postTitle\n          postSlug\n          tagSlug\n          tagName\n          tagCommentType\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n        tagRevisions {\n          _id\n          scoreChange\n          tagId\n          tagSlug\n          tagName\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n      }\n    }\n  }\n": types.UserKarmaChangesDoc,
    "\n  fragment UsersBannedFromUsersModerationLog on User {\n    _id\n    slug\n    displayName\n    bannedUserIds\n    bannedPersonalUserIds\n  }\n": types.UsersBannedFromUsersModerationLogDoc,
    "\n  fragment SunshineUsersList on User {\n    ...UsersMinimumInfo\n    karma\n    htmlBio\n    website\n    createdAt\n    email\n    emails\n    commentCount\n    maxCommentCount\n    postCount\n    maxPostCount\n    voteCount\n    smallUpvoteCount\n    bigUpvoteCount\n    smallDownvoteCount\n    bigDownvoteCount\n    banned\n    reviewedByUserId\n    reviewedAt\n    signUpReCaptchaRating\n    mapLocation\n    needsReview\n    sunshineNotes\n    sunshineFlagged\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n    snoozedUntilContentCount\n    nullifyVotes\n    deleteContent\n    \n    moderatorActions {\n      ...ModeratorActionDisplay\n    }\n    usersContactedBeforeReview\n    associatedClientIds {\n      clientId\n      firstSeenReferrer\n      firstSeenLandingPage\n      userIds\n    }\n    altAccountsDetected\n\n    voteReceivedCount\n    smallUpvoteReceivedCount\n    bigUpvoteReceivedCount\n    smallDownvoteReceivedCount\n    bigDownvoteReceivedCount\n\n    recentKarmaInfo\n    lastNotificationsCheck\n  }\n": types.SunshineUsersListDoc,
    "\n  fragment UserAltAccountsFragment on User {\n    ...SunshineUsersList\n    IPs\n  }\n": types.UserAltAccountsFragmentDoc,
    "\n  fragment UsersMapEntry on User {\n    _id\n    displayName\n    username\n    fullName\n    slug\n    mapLocationLatLng {\n      lat\n      lng\n    }\n    mapLocationSet\n    htmlMapMarkerText\n  }\n": types.UsersMapEntryDoc,
    "\n  fragment UsersEdit on User {\n    ...UsersProfile\n    ...UsersCurrent\n\n    biography {\n      ...RevisionEdit\n    }\n    # Moderation Guidelines editor information\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n\n    # UI Settings\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    hideIntercom\n    commentSorting\n    currentFrontpageFilter\n    noCollapseCommentsPosts\n    noCollapseCommentsFrontpage\n    noSingleLineComments\n    hideCommunitySection\n    showCommunityInRecentDiscussion\n    hidePostsRecommendations\n    beta\n    theme\n\n    # Emails\n    email\n    whenConfirmationEmailSent\n    emailSubscribedToCurated\n    subscribedToDigest\n    subscribedToNewsletter\n    unsubscribeFromAll\n    hasAuth0Id\n\n    # Moderation\n    moderatorAssistance\n    collapseModerationGuidelines\n    bannedUserIds\n    bannedPersonalUserIds\n    noKibitz\n    showHideKarmaOption\n\n    # Ban & Purge\n    nullifyVotes\n    deleteContent\n    banned\n\n    # Name\n    username\n    displayName\n    fullName\n\n    # Location\n    mongoLocation\n    googleLocation\n    location\n    \n    # Map Location (public)\n    mapLocation\n    \n    # Privacy settings\n    hideFromPeopleDirectory\n    allowDatadogSessionReplay\n\n    # Admin & Review\n    reviewedByUserId\n\n    # Alignment Forum\n    reviewForAlignmentForumUserId\n    groups\n    afApplicationText\n    afSubmittedApplication\n\n    # Karma Settings\n    karmaChangeLastOpened\n    karmaChangeNotifierSettings\n\n    notificationShortformContent\n    notificationCommentsOnSubscribedPost\n    notificationRepliesToMyComments\n    notificationRepliesToSubscribedComments\n    notificationSubscribedUserPost\n    notificationSubscribedUserComment\n    notificationSubscribedTagPost\n    notificationSubscribedSequencePost\n    notificationPostsInGroups\n    notificationPrivateMessage\n    notificationSharedWithMe\n    notificationAlignmentSubmissionApproved\n    notificationEventInRadius\n    notificationRSVPs\n    notificationCommentsOnDraft\n    notificationPostsNominatedReview\n    notificationGroupAdministration\n    notificationSubforumUnread\n    notificationNewMention\n    notificationNewDialogueChecks\n    notificationYourTurnMatchForm\n    notificationDialogueMessages\n    notificationPublishedDialogueMessages\n\n    hideFrontpageMap\n    hideTaggingProgressBar\n    hideFrontpageBookAd\n    hideFrontpageBook2020Ad\n\n    deleted\n    permanentDeletionRequestedAt\n\n    twitterProfileURLAdmin\n  }\n": types.UsersEditDoc,
    "\n  fragment UsersWithReviewInfo on User {\n    ...UsersMinimumInfo\n    reviewVoteCount\n    email\n  }\n": types.UsersWithReviewInfoDoc,
    "\n  fragment UsersProfileEdit on User {\n    _id\n    slug\n    displayName\n    jobTitle\n    organization\n    careerStage\n    profileImageId\n    biography {\n      ...RevisionEdit\n    }\n    howOthersCanHelpMe {\n      ...RevisionEdit\n    }\n    howICanHelpOthers {\n      ...RevisionEdit\n    }\n    profileTagIds\n    organizerOfGroupIds\n    organizerOfGroups {\n      ...localGroupsBase\n    }\n    programParticipation\n    mapLocation\n    website\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    githubProfileURL\n  }\n": types.UsersProfileEditDoc,
    "\n  fragment UsersCrosspostInfo on User {\n    _id\n    username\n    slug\n    fmCrosspostUserId\n  }\n": types.UsersCrosspostInfoDoc,
    "\n  fragment UsersOptedInToDialogueFacilitation on User {\n    _id\n    displayName\n  }\n": types.UsersOptedInToDialogueFacilitationDoc,
    "\n  fragment UserOnboardingAuthor on User {\n    _id\n    displayName\n    profileImageId\n    karma\n    jobTitle\n    organization\n  }\n": types.UserOnboardingAuthorDoc,
    "\n  fragment UsersSocialMediaInfo on User {\n    ...UsersProfile\n    twitterProfileURLAdmin\n  }\n": types.UsersSocialMediaInfoDoc,
    "\n  fragment SuggestAlignmentUser on User {\n    ...UsersMinimumInfo\n    afKarma\n    afPostCount\n    afCommentCount\n    reviewForAlignmentForumUserId\n    groups\n    afApplicationText\n    afSubmittedApplication\n  }\n": types.SuggestAlignmentUserDoc,
    "\n  fragment TagRelVotes on Vote {\n    _id\n    userId\n    voteType\n    power\n    documentId\n    votedAt\n    isUnvote\n    tagRel {\n      ...WithVoteTagRel\n    }\n  }\n": types.TagRelVotesDoc,
    "\n  fragment TagVotingActivity on Vote {\n    ...TagRelVotes\n    tagRel {\n      ...TagRelFragment\n    }\n  }\n": types.TagVotingActivityDoc,
    "\n  fragment UserVotes on Vote {\n    _id\n    userId\n    voteType\n    power\n    cancelled\n    documentId\n    votedAt\n    isUnvote\n    collectionName\n  }\n": types.UserVotesDoc,
    "\n  fragment UserVotesWithDocument on Vote {\n    ...UserVotes\n    comment {\n      ...CommentsListWithParentMetadata\n    }\n    post {\n      ...PostsListWithVotes\n    }\n  }\n": types.UserVotesWithDocumentDoc,
    "\n    query getCurrentUser {\n      currentUser {\n        ...UsersCurrent\n      }\n    }\n  ": types.getCurrentUserDocument,
    "\n  mutation createLWEventwithNewEvents($data: CreateLWEventDataInput!) {\n    createLWEvent(data: $data) {\n      data {\n        ...newEventFragment\n      }\n    }\n  }\n": types.createLWEventwithNewEventsDocument,
    "\n  query multiTagfilterSettingsQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagBasicInfo\n      }\n      totalCount\n    }\n  }\n": types.multiTagfilterSettingsQueryDocument,
    "\n  fragment AdvisorRequestsDefaultFragment on AdvisorRequest {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    interestedInMetaculus\n    jobAds\n  }\n": types.AdvisorRequestsDefaultFragmentDoc,
    "\n  fragment ArbitalCachesDefaultFragment on ArbitalCaches {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": types.ArbitalCachesDefaultFragmentDoc,
    "\n  fragment ArbitalTagContentRelsDefaultFragment on ArbitalTagContentRel {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    parentDocumentId\n    childDocumentId\n    parentCollectionName\n    childCollectionName\n    type\n    level\n    isStrong\n  }\n": types.ArbitalTagContentRelsDefaultFragmentDoc,
    "\n  fragment AutomatedContentEvaluationsDefaultFragment on AutomatedContentEvaluation {\n    _id\n    createdAt\n    revisionId\n    score\n    aiChoice\n    aiReasoning\n    aiCoT\n  }\n": types.AutomatedContentEvaluationsDefaultFragmentDoc,
    "\n  fragment BansDefaultFragment on Ban {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    expirationDate\n    userId\n    ip\n    reason\n    comment\n    properties\n  }\n": types.BansDefaultFragmentDoc,
    "\n  fragment BookmarksDefaultFragment on Bookmark {\n    _id\n    createdAt\n    documentId\n    collectionName\n    userId\n    lastUpdated\n    active\n  }\n": types.BookmarksDefaultFragmentDoc,
    "\n  fragment BooksDefaultFragment on Book {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    postedAt\n    title\n    subtitle\n    tocTitle\n    collectionId\n    number\n    postIds\n    sequenceIds\n    displaySequencesAsGrid\n    hideProgressBar\n    showChapters\n  }\n": types.BooksDefaultFragmentDoc,
    "\n  fragment ChaptersDefaultFragment on Chapter {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    title\n    subtitle\n    number\n    sequenceId\n    postIds\n  }\n": types.ChaptersDefaultFragmentDoc,
    "\n  fragment CkEditorUserSessionsDefaultFragment on CkEditorUserSession {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    documentId\n    userId\n    endedAt\n    endedBy\n  }\n": types.CkEditorUserSessionsDefaultFragmentDoc,
    "\n  fragment ClientIdsDefaultFragment on ClientId {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    clientId\n    firstSeenReferrer\n    firstSeenLandingPage\n    userIds\n    invalidated\n    lastSeenAt\n    timesSeen\n  }\n": types.ClientIdsDefaultFragmentDoc,
    "\n  fragment CollectionsDefaultFragment on Collection {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    userId\n    title\n    slug\n    gridImageId\n    firstPageLink\n    hideStartReadingButton\n    noindex\n  }\n": types.CollectionsDefaultFragmentDoc,
    "\n  fragment CommentModeratorActionsDefaultFragment on CommentModeratorAction {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    commentId\n    type\n    endedAt\n  }\n": types.CommentModeratorActionsDefaultFragmentDoc,
    "\n  fragment CommentsDefaultFragment on Comment {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    pingbacks\n    parentCommentId\n    topLevelCommentId\n    postedAt\n    lastEditedAt\n    author\n    postId\n    tagId\n    forumEventId\n    forumEventMetadata\n    tagCommentType\n    subforumStickyPriority\n    userId\n    userIP\n    userAgent\n    referrer\n    authorIsUnreviewed\n    answer\n    parentAnswerId\n    directChildrenCount\n    descendentCount\n    shortform\n    shortformFrontpage\n    nominatedForReview\n    reviewingForReview\n    lastSubthreadActivity\n    postVersion\n    promoted\n    promotedByUserId\n    promotedAt\n    hideKarma\n    legacy\n    legacyId\n    legacyPoll\n    legacyParentId\n    draft\n    retracted\n    deleted\n    deletedPublic\n    deletedReason\n    deletedDate\n    deletedByUserId\n    spam\n    repliesBlockedUntil\n    needsReview\n    reviewedByUserId\n    hideAuthor\n    moderatorHat\n    hideModeratorHat\n    isPinnedOnProfile\n    title\n    relevantTagIds\n    debateResponse\n    rejected\n    modGPTAnalysis\n    modGPTRecommendation\n    rejectedReason\n    rejectedByUserId\n    af\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    afDate\n    moveToAlignmentUserId\n    agentFoundationsId\n    originalDialogueId\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n": types.CommentsDefaultFragmentDoc,
    "\n  fragment ConversationsDefaultFragment on Conversation {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    title\n    participantIds\n    latestActivity\n    af\n    messageCount\n    moderator\n    archivedByIds\n  }\n": types.ConversationsDefaultFragmentDoc,
    "\n  fragment CronHistoriesDefaultFragment on CronHistory {\n    _id\n    intendedAt\n    name\n    startedAt\n    finishedAt\n    result\n  }\n": types.CronHistoriesDefaultFragmentDoc,
    "\n  fragment CurationEmailsDefaultFragment on CurationEmail {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    postId\n  }\n": types.CurationEmailsDefaultFragmentDoc,
    "\n  fragment CurationNoticesDefaultFragment on CurationNotice {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    userId\n    commentId\n    postId\n    deleted\n  }\n": types.CurationNoticesDefaultFragmentDoc,
    "\n  fragment DatabaseMetadataDefaultFragment on DatabaseMetadata {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": types.DatabaseMetadataDefaultFragmentDoc,
    "\n  fragment DebouncerEventsDefaultFragment on DebouncerEvents {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": types.DebouncerEventsDefaultFragmentDoc,
    "\n  fragment DialogueChecksDefaultFragment on DialogueCheck {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    targetUserId\n    checked\n    checkedAt\n    hideInRecommendations\n  }\n": types.DialogueChecksDefaultFragmentDoc,
    "\n  fragment DialogueMatchPreferencesDefaultFragment on DialogueMatchPreference {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    dialogueCheckId\n    topicPreferences\n    topicNotes\n    syncPreference\n    asyncPreference\n    formatNotes\n    calendlyLink\n    generatedDialogueId\n    deleted\n  }\n": types.DialogueMatchPreferencesDefaultFragmentDoc,
    "\n  fragment DigestPostsDefaultFragment on DigestPost {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    digestId\n    postId\n    emailDigestStatus\n    onsiteDigestStatus\n  }\n": types.DigestPostsDefaultFragmentDoc,
    "\n  fragment DigestsDefaultFragment on Digest {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    num\n    startDate\n    endDate\n    publishedDate\n    onsiteImageId\n    onsitePrimaryColor\n  }\n": types.DigestsDefaultFragmentDoc,
    "\n  fragment ElectionCandidatesDefaultFragment on ElectionCandidate {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    electionName\n    name\n    logoSrc\n    href\n    fundraiserLink\n    gwwcLink\n    gwwcId\n    description\n    userId\n    postCount\n    tagId\n    isElectionFundraiser\n    amountRaised\n    targetAmount\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n": types.ElectionCandidatesDefaultFragmentDoc,
    "\n  fragment ElectionVotesDefaultFragment on ElectionVote {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    electionName\n    userId\n    compareState\n    vote\n    submittedAt\n    submissionComments\n    userExplanation\n    userOtherComments\n  }\n": types.ElectionVotesDefaultFragmentDoc,
    "\n  fragment ElicitQuestionPredictionsDefaultFragment on ElicitQuestionPrediction {\n    _id\n    prediction\n    createdAt\n    notes\n    userId\n    sourceUrl\n    sourceId\n    binaryQuestionId\n    isDeleted\n  }\n": types.ElicitQuestionPredictionsDefaultFragmentDoc,
    "\n  fragment ElicitQuestionsDefaultFragment on ElicitQuestion {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    title\n    notes\n    resolution\n    resolvesBy\n  }\n": types.ElicitQuestionsDefaultFragmentDoc,
    "\n  fragment EmailTokensDefaultFragment on EmailTokens {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": types.EmailTokensDefaultFragmentDoc,
    "\n  fragment FeaturedResourcesDefaultFragment on FeaturedResource {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    title\n    body\n    ctaText\n    ctaUrl\n    expiresAt\n  }\n": types.FeaturedResourcesDefaultFragmentDoc,
    "\n  fragment FieldChangesDefaultFragment on FieldChange {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    changeGroup\n    documentId\n    fieldName\n    oldValue\n    newValue\n  }\n": types.FieldChangesDefaultFragmentDoc,
    "\n  fragment ForumEventsDefaultFragment on ForumEvent {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    frontpageDescription_latest\n    frontpageDescriptionMobile_latest\n    postPageDescription_latest\n    title\n    startDate\n    endDate\n    darkColor\n    lightColor\n    bannerTextColor\n    contrastColor\n    tagId\n    postId\n    commentId\n    bannerImageId\n    includesPoll\n    isGlobal\n    eventFormat\n    pollQuestion_latest\n    pollAgreeWording\n    pollDisagreeWording\n    maxStickersPerUser\n    customComponent\n    commentPrompt\n    publicData\n  }\n": types.ForumEventsDefaultFragmentDoc,
    "\n  fragment GardenCodesDefaultFragment on GardenCode {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    pingbacks\n    slug\n    code\n    title\n    userId\n    startTime\n    endTime\n    fbLink\n    type\n    hidden\n    deleted\n    afOnly\n  }\n": types.GardenCodesDefaultFragmentDoc,
    "\n  fragment GoogleServiceAccountSessionsDefaultFragment on GoogleServiceAccountSession {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    email\n    estimatedExpiry\n    active\n    revoked\n  }\n": types.GoogleServiceAccountSessionsDefaultFragmentDoc,
    "\n  fragment ImagesDefaultFragment on Images {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": types.ImagesDefaultFragmentDoc,
    "\n  fragment JargonTermsDefaultFragment on JargonTerm {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    postId\n    term\n    approved\n    deleted\n    altTerms\n  }\n": types.JargonTermsDefaultFragmentDoc,
    "\n  fragment LWEventsDefaultFragment on LWEvent {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    name\n    documentId\n    important\n    properties\n    intercom\n  }\n": types.LWEventsDefaultFragmentDoc,
    "\n  fragment LegacyDataDefaultFragment on LegacyData {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": types.LegacyDataDefaultFragmentDoc,
    "\n  fragment LlmConversationsDefaultFragment on LlmConversation {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    title\n    model\n    systemPrompt\n    deleted\n  }\n": types.LlmConversationsDefaultFragmentDoc,
    "\n  fragment LlmMessagesDefaultFragment on LlmMessage {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    conversationId\n    role\n    content\n  }\n": types.LlmMessagesDefaultFragmentDoc,
    "\n  fragment LocalgroupsDefaultFragment on Localgroup {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    name\n    nameInAnotherLanguage\n    organizerIds\n    lastActivity\n    types\n    categories\n    isOnline\n    mongoLocation\n    googleLocation\n    location\n    contactInfo\n    facebookLink\n    facebookPageLink\n    meetupLink\n    slackLink\n    website\n    bannerImageId\n    inactive\n    deleted\n  }\n": types.LocalgroupsDefaultFragmentDoc,
    "\n  fragment ManifoldProbabilitiesCachesDefaultFragment on ManifoldProbabilitiesCache {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    marketId\n    probability\n    isResolved\n    year\n    lastUpdated\n    url\n  }\n": types.ManifoldProbabilitiesCachesDefaultFragmentDoc,
    "\n  fragment MessagesDefaultFragment on Message {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    userId\n    conversationId\n    noEmail\n  }\n": types.MessagesDefaultFragmentDoc,
    "\n  fragment MigrationsDefaultFragment on Migration {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": types.MigrationsDefaultFragmentDoc,
    "\n  fragment ModerationTemplatesDefaultFragment on ModerationTemplate {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    name\n    collectionName\n    order\n    deleted\n  }\n": types.ModerationTemplatesDefaultFragmentDoc,
    "\n  fragment ModeratorActionsDefaultFragment on ModeratorAction {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    type\n    endedAt\n  }\n": types.ModeratorActionsDefaultFragmentDoc,
    "\n  fragment MultiDocumentsDefaultFragment on MultiDocument {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    pingbacks\n    slug\n    oldSlugs\n    title\n    preview\n    tabTitle\n    tabSubtitle\n    userId\n    parentDocumentId\n    collectionName\n    fieldName\n    index\n    contributionStats\n    htmlWithContributorAnnotations\n    deleted\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n": types.MultiDocumentsDefaultFragmentDoc,
    "\n  fragment NotificationsDefaultFragment on Notification {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    documentId\n    documentType\n    extraData\n    link\n    title\n    message\n    type\n    deleted\n    viewed\n    emailed\n    waitingForBatch\n  }\n": types.NotificationsDefaultFragmentDoc,
    "\n  fragment PageCacheDefaultFragment on PageCacheEntry {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": types.PageCacheDefaultFragmentDoc,
    "\n  fragment PetrovDayActionsDefaultFragment on PetrovDayAction {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    actionType\n    data\n    userId\n  }\n": types.PetrovDayActionsDefaultFragmentDoc,
    "\n  fragment PetrovDayLaunchsDefaultFragment on PetrovDayLaunch {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    launchCode\n    hashedLaunchCode\n    userId\n  }\n": types.PetrovDayLaunchsDefaultFragmentDoc,
    "\n  fragment PodcastEpisodesDefaultFragment on PodcastEpisode {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    podcastId\n    title\n    episodeLink\n    externalEpisodeId\n  }\n": types.PodcastEpisodesDefaultFragmentDoc,
    "\n  fragment PodcastsDefaultFragment on Podcast {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    title\n    applePodcastLink\n    spotifyPodcastLink\n  }\n": types.PodcastsDefaultFragmentDoc,
    "\n  fragment PostRecommendationsDefaultFragment on PostRecommendation {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    clientId\n    postId\n    strategyName\n    strategySettings\n    recommendationCount\n    lastRecommendedAt\n    clickedAt\n  }\n": types.PostRecommendationsDefaultFragmentDoc,
    "\n  fragment PostRelationsDefaultFragment on PostRelation {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    type\n    sourcePostId\n    targetPostId\n    order\n  }\n": types.PostRelationsDefaultFragmentDoc,
    "\n  fragment PostsDefaultFragment on Post {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    pingbacks\n    moderationGuidelines_latest\n    customHighlight_latest\n    slug\n    postedAt\n    modifiedAt\n    url\n    postCategory\n    title\n    viewCount\n    lastCommentedAt\n    clickCount\n    deletedDraft\n    status\n    isFuture\n    sticky\n    stickyPriority\n    userIP\n    userAgent\n    referrer\n    author\n    userId\n    question\n    authorIsUnreviewed\n    readTimeMinutesOverride\n    submitToFrontpage\n    hiddenRelatedQuestion\n    originalPostRelationSourceId\n    shortform\n    canonicalSource\n    nominationCount2018\n    nominationCount2019\n    reviewCount2018\n    reviewCount2019\n    reviewCount\n    reviewVoteCount\n    positiveReviewVoteCount\n    manifoldReviewMarketId\n    reviewVoteScoreAF\n    reviewVotesAF\n    reviewVoteScoreHighKarma\n    reviewVotesHighKarma\n    reviewVoteScoreAllKarma\n    reviewVotesAllKarma\n    finalReviewVoteScoreHighKarma\n    finalReviewVotesHighKarma\n    finalReviewVoteScoreAllKarma\n    finalReviewVotesAllKarma\n    finalReviewVoteScoreAF\n    finalReviewVotesAF\n    lastCommentPromotedAt\n    tagRelevance\n    noIndex\n    rsvps\n    activateRSVPs\n    nextDayReminderSent\n    onlyVisibleToLoggedIn\n    onlyVisibleToEstablishedAccounts\n    hideFromRecentDiscussions\n    votingSystem\n    podcastEpisodeId\n    forceAllowType3Audio\n    legacy\n    legacyId\n    legacySpam\n    feedId\n    feedLink\n    curatedDate\n    metaDate\n    suggestForCuratedUserIds\n    frontpageDate\n    autoFrontpage\n    collectionTitle\n    hasCoauthorPermission\n    socialPreviewImageId\n    socialPreviewImageAutoUrl\n    canonicalSequenceId\n    canonicalCollectionSlug\n    canonicalBookId\n    canonicalNextPostSlug\n    canonicalPrevPostSlug\n    unlisted\n    disableRecommendation\n    defaultRecommendation\n    hideFromPopularComments\n    draft\n    wasEverUndrafted\n    meta\n    hideFrontpageComments\n    maxBaseScore\n    scoreExceeded2Date\n    scoreExceeded30Date\n    scoreExceeded45Date\n    scoreExceeded75Date\n    scoreExceeded125Date\n    scoreExceeded200Date\n    bannedUserIds\n    commentsLocked\n    commentsLockedToAccountsCreatedAfter\n    organizerIds\n    groupId\n    eventType\n    isEvent\n    reviewedByUserId\n    reviewForCuratedUserId\n    startTime\n    localStartTime\n    endTime\n    localEndTime\n    eventRegistrationLink\n    joinEventLink\n    onlineEvent\n    globalEvent\n    mongoLocation\n    googleLocation\n    location\n    contactInfo\n    facebookLink\n    meetupLink\n    website\n    eventImageId\n    types\n    metaSticky\n    sharingSettings\n    shareWithUsers\n    linkSharingKey\n    linkSharingKeyUsedBy\n    commentSortOrder\n    hideAuthor\n    sideCommentVisibility\n    disableSidenotes\n    moderationStyle\n    ignoreRateLimits\n    hideCommentKarma\n    commentCount\n    topLevelCommentCount\n    debate\n    collabEditorDialogue\n    mostRecentPublishedDialogueResponseDate\n    rejected\n    rejectedReason\n    rejectedByUserId\n    subforumTagId\n    af\n    afDate\n    afCommentCount\n    afLastCommentedAt\n    afSticky\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    agentFoundationsId\n    swrCachingEnabled\n    generateDraftJargon\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n": types.PostsDefaultFragmentDoc,
    "\n  fragment RSSFeedsDefaultFragment on RSSFeed {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    status\n    rawFeed\n    setCanonicalUrl\n    importAsDraft\n  }\n": types.RSSFeedsDefaultFragmentDoc,
    "\n  fragment ReadStatusesDefaultFragment on ReadStatus {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": types.ReadStatusesDefaultFragmentDoc,
    "\n  fragment RecommendationsCachesDefaultFragment on RecommendationsCache {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    postId\n    source\n    scenario\n    attributionId\n    ttlMs\n  }\n": types.RecommendationsCachesDefaultFragmentDoc,
    "\n  fragment ReportsDefaultFragment on Report {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    reportedUserId\n    commentId\n    postId\n    link\n    claimedUserId\n    description\n    closedAt\n    markedAsSpam\n    reportedAsSpam\n  }\n": types.ReportsDefaultFragmentDoc,
    "\n  fragment ReviewVotesDefaultFragment on ReviewVote {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    postId\n    qualitativeScore\n    quadraticScore\n    comment\n    year\n    dummy\n    reactions\n  }\n": types.ReviewVotesDefaultFragmentDoc,
    "\n  fragment ReviewWinnerArtsDefaultFragment on ReviewWinnerArt {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    postId\n    splashArtImagePrompt\n    splashArtImageUrl\n  }\n": types.ReviewWinnerArtsDefaultFragmentDoc,
    "\n  fragment ReviewWinnersDefaultFragment on ReviewWinner {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    postId\n    reviewYear\n    category\n    curatedOrder\n    reviewRanking\n    isAI\n  }\n": types.ReviewWinnersDefaultFragmentDoc,
    "\n  fragment RevisionsDefaultFragment on Revision {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    documentId\n    collectionName\n    fieldName\n    editedAt\n    updateType\n    version\n    commitMessage\n    userId\n    draft\n    html\n    wordCount\n    changeMetrics\n    googleDocMetadata\n    skipAttributions\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n": types.RevisionsDefaultFragmentDoc,
    "\n  fragment SequencesDefaultFragment on Sequence {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    lastUpdated\n    userId\n    title\n    bannerImageId\n    gridImageId\n    hideFromAuthorPage\n    draft\n    isDeleted\n    curatedOrder\n    userProfileOrder\n    canonicalCollectionSlug\n    hidden\n    noindex\n    af\n  }\n": types.SequencesDefaultFragmentDoc,
    "\n  fragment SessionsDefaultFragment on Session {\n    _id\n    session\n    expires\n    lastModified\n  }\n": types.SessionsDefaultFragmentDoc,
    "\n  fragment SideCommentCachesDefaultFragment on SideCommentCache {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": types.SideCommentCachesDefaultFragmentDoc,
    "\n  fragment SplashArtCoordinatesDefaultFragment on SplashArtCoordinate {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    reviewWinnerArtId\n    leftXPct\n    leftYPct\n    leftHeightPct\n    leftWidthPct\n    leftFlipped\n    middleXPct\n    middleYPct\n    middleHeightPct\n    middleWidthPct\n    middleFlipped\n    rightXPct\n    rightYPct\n    rightHeightPct\n    rightWidthPct\n    rightFlipped\n  }\n": types.SplashArtCoordinatesDefaultFragmentDoc,
    "\n  fragment SpotlightsDefaultFragment on Spotlight {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    description_latest\n    documentId\n    documentType\n    position\n    duration\n    customTitle\n    customSubtitle\n    subtitleUrl\n    headerTitle\n    headerTitleLeftColor\n    headerTitleRightColor\n    lastPromotedAt\n    spotlightSplashImageUrl\n    draft\n    deletedDraft\n    showAuthor\n    imageFade\n    imageFadeColor\n    spotlightImageId\n    spotlightDarkImageId\n  }\n": types.SpotlightsDefaultFragmentDoc,
    "\n  fragment SubscriptionsDefaultFragment on Subscription {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    state\n    documentId\n    collectionName\n    deleted\n    type\n  }\n": types.SubscriptionsDefaultFragmentDoc,
    "\n  fragment SurveyQuestionsDefaultFragment on SurveyQuestion {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    surveyId\n    question\n    format\n    order\n  }\n": types.SurveyQuestionsDefaultFragmentDoc,
    "\n  fragment SurveyResponsesDefaultFragment on SurveyResponse {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    surveyId\n    surveyScheduleId\n    userId\n    clientId\n    response\n  }\n": types.SurveyResponsesDefaultFragmentDoc,
    "\n  fragment SurveySchedulesDefaultFragment on SurveySchedule {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    surveyId\n    name\n    impressionsLimit\n    maxVisitorPercentage\n    minKarma\n    maxKarma\n    target\n    startDate\n    endDate\n    deactivated\n    clientIds\n  }\n": types.SurveySchedulesDefaultFragmentDoc,
    "\n  fragment SurveysDefaultFragment on Survey {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    name\n  }\n": types.SurveysDefaultFragmentDoc,
    "\n  fragment TagFlagsDefaultFragment on TagFlag {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    slug\n    name\n    deleted\n    order\n  }\n": types.TagFlagsDefaultFragmentDoc,
    "\n  fragment TagRelsDefaultFragment on TagRel {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    tagId\n    postId\n    deleted\n    userId\n    backfilled\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n": types.TagRelsDefaultFragmentDoc,
    "\n  fragment TagsDefaultFragment on Tag {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    description_latest\n    pingbacks\n    subforumWelcomeText_latest\n    moderationGuidelines_latest\n    slug\n    oldSlugs\n    name\n    shortName\n    subtitle\n    core\n    isPostType\n    suggestedAsFilter\n    defaultOrder\n    descriptionTruncationCount\n    postCount\n    userId\n    adminOnly\n    canEditUserIds\n    charsAdded\n    charsRemoved\n    deleted\n    lastCommentedAt\n    lastSubforumCommentAt\n    needsReview\n    reviewedByUserId\n    wikiGrade\n    wikiOnly\n    bannerImageId\n    squareImageId\n    tagFlagsIds\n    lesswrongWikiImportRevision\n    lesswrongWikiImportSlug\n    lesswrongWikiImportCompleted\n    htmlWithContributorAnnotations\n    contributionStats\n    introSequenceId\n    postsDefaultSortOrder\n    canVoteOnRels\n    isSubforum\n    subforumModeratorIds\n    subforumIntroPostId\n    parentTagId\n    subTagIds\n    autoTagModel\n    autoTagPrompt\n    noindex\n    isPlaceholderPage\n    coreTagId\n    forceAllowType3Audio\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n": types.TagsDefaultFragmentDoc,
    "\n  fragment TweetsDefaultFragment on Tweet {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": types.TweetsDefaultFragmentDoc,
    "\n  fragment TypingIndicatorsDefaultFragment on TypingIndicator {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    documentId\n    lastUpdated\n  }\n": types.TypingIndicatorsDefaultFragmentDoc,
    "\n  fragment UltraFeedEventsDefaultFragment on UltraFeedEvent {\n    _id\n    createdAt\n    documentId\n    collectionName\n    eventType\n    userId\n    event\n    feedItemId\n  }\n": types.UltraFeedEventsDefaultFragmentDoc,
    "\n  fragment UserActivitiesDefaultFragment on UserActivity {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n": types.UserActivitiesDefaultFragmentDoc,
    "\n  fragment UserEAGDetailsDefaultFragment on UserEAGDetail {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    careerStage\n    countryOrRegion\n    nearestCity\n    willingnessToRelocate\n    experiencedIn\n    interestedIn\n    lastUpdated\n  }\n": types.UserEAGDetailsDefaultFragmentDoc,
    "\n  fragment UserJobAdsDefaultFragment on UserJobAd {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    jobName\n    adState\n    reminderSetAt\n    lastUpdated\n  }\n": types.UserJobAdsDefaultFragmentDoc,
    "\n  fragment UserMostValuablePostsDefaultFragment on UserMostValuablePost {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    postId\n    deleted\n  }\n": types.UserMostValuablePostsDefaultFragmentDoc,
    "\n  fragment UserRateLimitsDefaultFragment on UserRateLimit {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    type\n    intervalUnit\n    intervalLength\n    actionsPerInterval\n    endedAt\n  }\n": types.UserRateLimitsDefaultFragmentDoc,
    "\n  fragment UserTagRelsDefaultFragment on UserTagRel {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    tagId\n    userId\n    subforumShowUnreadInSidebar\n    subforumEmailNotifications\n    subforumHideIntroPost\n  }\n": types.UserTagRelsDefaultFragmentDoc,
    "\n  fragment UsersDefaultFragment on User {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    moderationGuidelines_latest\n    howOthersCanHelpMe_latest\n    howICanHelpOthers_latest\n    slug\n    oldSlugs\n    biography_latest\n    username\n    emails\n    isAdmin\n    profile\n    services\n    displayName\n    previousDisplayName\n    email\n    noindex\n    groups\n    lwWikiImport\n    theme\n    lastUsedTimezone\n    whenConfirmationEmailSent\n    legacy\n    commentSorting\n    sortDraftsBy\n    reactPaletteStyle\n    noKibitz\n    showHideKarmaOption\n    showPostAuthorCard\n    hideIntercom\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    noSingleLineComments\n    noCollapseCommentsPosts\n    noCollapseCommentsFrontpage\n    hideCommunitySection\n    showCommunityInRecentDiscussion\n    hidePostsRecommendations\n    petrovOptOut\n    optedOutOfSurveys\n    postGlossariesPinned\n    generateJargonForDrafts\n    generateJargonForPublishedPosts\n    acceptedTos\n    hideNavigationSidebar\n    currentFrontpageFilter\n    frontpageSelectedTab\n    frontpageFilterSettings\n    hideFrontpageFilterSettingsDesktop\n    allPostsTimeframe\n    allPostsFilter\n    allPostsSorting\n    allPostsShowLowKarma\n    allPostsIncludeEvents\n    allPostsHideCommunity\n    allPostsOpenSettings\n    draftsListSorting\n    draftsListShowArchived\n    draftsListShowShared\n    lastNotificationsCheck\n    karma\n    goodHeartTokens\n    moderationStyle\n    moderatorAssistance\n    collapseModerationGuidelines\n    bannedUserIds\n    bannedPersonalUserIds\n    bookmarksCount\n    legacyId\n    deleted\n    permanentDeletionRequestedAt\n    voteBanned\n    nullifyVotes\n    deleteContent\n    banned\n    auto_subscribe_to_my_posts\n    auto_subscribe_to_my_comments\n    autoSubscribeAsOrganizer\n    notificationCommentsOnSubscribedPost\n    notificationShortformContent\n    notificationRepliesToMyComments\n    notificationRepliesToSubscribedComments\n    notificationSubscribedUserPost\n    notificationSubscribedUserComment\n    notificationPostsInGroups\n    notificationSubscribedTagPost\n    notificationSubscribedSequencePost\n    notificationPrivateMessage\n    notificationSharedWithMe\n    notificationAlignmentSubmissionApproved\n    notificationEventInRadius\n    notificationKarmaPowersGained\n    notificationRSVPs\n    notificationGroupAdministration\n    notificationCommentsOnDraft\n    notificationPostsNominatedReview\n    notificationSubforumUnread\n    notificationNewMention\n    notificationDialogueMessages\n    notificationPublishedDialogueMessages\n    notificationAddedAsCoauthor\n    notificationDebateCommentsOnSubscribedPost\n    notificationDebateReplies\n    notificationDialogueMatch\n    notificationNewDialogueChecks\n    notificationYourTurnMatchForm\n    hideDialogueFacilitation\n    revealChecksToAdmins\n    optedInToDialogueFacilitation\n    showDialoguesList\n    showMyDialogues\n    showMatches\n    showRecommendedPartners\n    hideActiveDialogueUsers\n    karmaChangeNotifierSettings\n    karmaChangeLastOpened\n    karmaChangeBatchStart\n    emailSubscribedToCurated\n    subscribedToDigest\n    subscribedToNewsletter\n    unsubscribeFromAll\n    hideSubscribePoke\n    hideMeetupsPoke\n    hideHomeRHS\n    frontpagePostCount\n    sequenceCount\n    sequenceDraftCount\n    mongoLocation\n    googleLocation\n    location\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    nearbyEventsNotifications\n    nearbyEventsNotificationsLocation\n    nearbyEventsNotificationsMongoLocation\n    nearbyEventsNotificationsRadius\n    nearbyPeopleNotificationThreshold\n    hideFrontpageMap\n    hideTaggingProgressBar\n    hideFrontpageBookAd\n    hideFrontpageBook2019Ad\n    hideFrontpageBook2020Ad\n    sunshineNotes\n    sunshineFlagged\n    needsReview\n    sunshineSnoozed\n    snoozedUntilContentCount\n    reviewedByUserId\n    reviewedAt\n    afKarma\n    voteCount\n    smallUpvoteCount\n    smallDownvoteCount\n    bigUpvoteCount\n    bigDownvoteCount\n    voteReceivedCount\n    smallUpvoteReceivedCount\n    smallDownvoteReceivedCount\n    bigUpvoteReceivedCount\n    bigDownvoteReceivedCount\n    usersContactedBeforeReview\n    fullName\n    shortformFeedId\n    viewUnreviewedComments\n    beta\n    reviewVotesQuadratic\n    reviewVotesQuadratic2019\n    reviewVotesQuadratic2020\n    petrovPressedButtonDate\n    petrovLaunchCodeDate\n    defaultToCKEditor\n    signUpReCaptchaRating\n    noExpandUnreadCommentsReview\n    postCount\n    maxPostCount\n    commentCount\n    maxCommentCount\n    tagRevisionCount\n    abTestKey\n    abTestOverrides\n    walledGardenInvite\n    hideWalledGardenUI\n    walledGardenPortalOnboarded\n    taggingDashboardCollapsed\n    usernameUnset\n    paymentEmail\n    paymentInfo\n    profileUpdatedAt\n    profileImageId\n    jobTitle\n    organization\n    careerStage\n    website\n    fmCrosspostUserId\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    twitterProfileURLAdmin\n    githubProfileURL\n    profileTagIds\n    organizerOfGroupIds\n    programParticipation\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n    acknowledgedNewUserGuidelines\n    subforumPreferredLayout\n    hideJobAdUntil\n    criticismTipsDismissed\n    hideFromPeopleDirectory\n    allowDatadogSessionReplay\n    afPostCount\n    afCommentCount\n    afSequenceCount\n    afSequenceDraftCount\n    reviewForAlignmentForumUserId\n    afApplicationText\n    afSubmittedApplication\n    hideSunshineSidebar\n    inactiveSurveyEmailSentAt\n    userSurveyEmailSentAt\n    recommendationSettings\n  }\n": types.UsersDefaultFragmentDoc,
    "\n  fragment VotesDefaultFragment on Vote {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    documentId\n    collectionName\n    userId\n    authorIds\n    voteType\n    extendedVoteType\n    power\n    afPower\n    cancelled\n    isUnvote\n    votedAt\n    documentIsAf\n    silenceNotification\n  }\n": types.VotesDefaultFragmentDoc,
    "\n    query Lightcone2024FundraiserStripeAmounts {\n      Lightcone2024FundraiserStripeAmounts\n    }\n  ": types.Lightcone2024FundraiserStripeAmountsDocument,
    "\n  fragment SubscribedPostAndCommentsFeed on SubscribedPostAndComments {\n    _id\n    post {\n      ...PostsList\n    }\n    comments {\n      ...CommentsList\n    }\n    expandCommentIds\n    postIsFromSubscribedUser\n  }\n": types.SubscribedPostAndCommentsFeedDoc,
    "\n  fragment FeedPostFragment on FeedPost {\n    _id\n    postMetaInfo\n    post {\n      ...PostsListWithVotes\n    }\n  }\n": types.FeedPostFragmentDoc,
    "\n  fragment FeedCommentThreadFragment on FeedCommentThread {\n    _id\n    commentMetaInfos\n    isOnReadPost\n    postSources\n    post {\n      ...PostsListWithVotes\n    }\n    comments {\n      ...UltraFeedComment\n    }\n  }\n": types.FeedCommentThreadFragmentDoc,
    "\n  fragment FeedSpotlightFragment on FeedSpotlightItem {\n    _id\n    spotlight {\n      ...SpotlightDisplay\n    }\n    post {\n      ...PostsListWithVotes\n    }\n    spotlightMetaInfo {\n      sources\n      servedEventId\n    }\n  }\n": types.FeedSpotlightFragmentDoc,
    "\n  fragment FeedSubscriptionSuggestionsFragment on FeedSubscriptionSuggestions {\n    _id\n    suggestedUsers {\n      ...UsersMinimumInfo\n    }\n  }\n": types.FeedSubscriptionSuggestionsFragmentDoc,
    "\n  query multiPostsForAutocompleteQuery($input: MultiPostInput) {\n    posts(input: $input) {\n      results {\n        ...PostsForAutocomplete\n      }\n    }\n  }\n": types.multiPostsForAutocompleteQueryDocument,
    "\n  query multiCommentsForAutocompleteQuery($input: MultiCommentInput) {\n    comments(input: $input) {\n      results {\n        ...CommentsForAutocomplete\n      }\n    }\n  }\n": types.multiCommentsForAutocompleteQueryDocument,
    "\n  query multiCommentsForAutocompleteWithParentsQuery($input: MultiCommentInput) {\n    comments(input: $input) {\n      results {\n        ...CommentsForAutocompleteWithParents\n      }\n    }\n  }\n": types.multiCommentsForAutocompleteWithParentsQueryDocument,
    "\n  query EmailComment2($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n": types.EmailComment2Document,
    "\n  query EmailComment1($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagPreviewFragment\n      }\n    }\n  }\n": types.EmailComment1Document,
    "\n  query EmailComment($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": types.EmailCommentDocument,
    "\n  query EmailUsernameByID($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": types.EmailUsernameByIDDocument,
    "\n  query EventUpdatedEmail($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsBase\n      }\n    }\n  }\n": types.EventUpdatedEmailDocument,
    "\n  query NewDialogueMessagesEmail1($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": types.NewDialogueMessagesEmail1Document,
    "\n  query NewDialogueMessagesEmail($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsRevision\n      }\n    }\n  }\n": types.NewDialogueMessagesEmailDocument,
    "\n  query PostNominatedEmail($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsRevision\n      }\n    }\n  }\n": types.PostNominatedEmailDocument,
    "\n  query multiPostPostsEmailQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean, $version: String) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsRevision\n      }\n      totalCount\n    }\n  }\n": types.multiPostPostsEmailQueryDocument,
    "\n  query getCrosspostPostsWithNavigation($input: SinglePostInput, $sequenceId: String) {\n    post(input: $input) {\n      result {\n        ...PostsWithNavigation\n      }\n    }\n  }\n": types.getCrosspostPostsWithNavigationDocument,
    "\n  query getCrosspostPostsWithNavigationAndRevision($input: SinglePostInput, $version: String, $sequenceId: String) {\n    post(input: $input) {\n      result {\n        ...PostsWithNavigationAndRevision\n      }\n    }\n  }\n": types.getCrosspostPostsWithNavigationAndRevisionDocument,
    "\n  query getCrosspostPostsList($input: SinglePostInput) {\n    post(input: $input) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n": types.getCrosspostPostsListDocument,
    "\n  query getCrosspostSunshinePostsList($input: SinglePostInput) {\n    post(input: $input) {\n      result {\n        ...SunshinePostsList\n      }\n    }\n  }\n": types.getCrosspostSunshinePostsListDocument,
    "\n  query getCrosspostPostsPage($input: SinglePostInput) {\n    post(input: $input) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n": types.getCrosspostPostsPageDocument,
    "\n  query singleDraftPostForLLMQuery($input: SinglePostInput, $version: String) {\n    post(input: $input) {\n      result {\n        ...PostsEditQueryFragment\n      }\n    }\n  }\n": types.singleDraftPostForLLMQueryDocument,
    "\n  query singlePublishedPostForLLMQuery($input: SinglePostInput) {\n    post(input: $input) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n": types.singlePublishedPostForLLMQueryDocument,
    "\n  query multiPostsForLLMQuery($input: MultiPostInput) {\n    posts(input: $input) {\n      results {\n        ...PostsPage\n      }\n    }\n  }\n": types.multiPostsForLLMQueryDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserLayout($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserLayout($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiGoogleServiceAccountSessionAdminGoogleServiceAccountQuery($selector: GoogleServiceAccountSessionSelector, $limit: Int, $enableTotal: Boolean) {\n    googleServiceAccountSessions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...GoogleServiceAccountSessionAdminInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiGoogleServiceAccountSessionAdminGoogleServiceAccountQuery($selector: GoogleServiceAccountSessionSelector, $limit: Int, $enableTotal: Boolean) {\n    googleServiceAccountSessions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...GoogleServiceAccountSessionAdminInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation revokeGoogleServiceAccountTokens {\n      revokeGoogleServiceAccountTokens\n    }\n  "): (typeof documents)["\n    mutation revokeGoogleServiceAccountTokens {\n      revokeGoogleServiceAccountTokens\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query AdminMetadataQuery {\n      AdminMetadata\n    }\n  "): (typeof documents)["\n    query AdminMetadataQuery {\n      AdminMetadata\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query SearchSynonyms {\n      SearchSynonyms\n    }\n  "): (typeof documents)["\n    query SearchSynonyms {\n      SearchSynonyms\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateSearchSynonyms($synonyms: [String!]!) {\n      UpdateSearchSynonyms(synonyms: $synonyms)\n    }"): (typeof documents)["mutation UpdateSearchSynonyms($synonyms: [String!]!) {\n      UpdateSearchSynonyms(synonyms: $synonyms)\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateCurationNoticeCurationNoticesForm($selector: SelectorInput!, $data: UpdateCurationNoticeDataInput!) {\n    updateCurationNotice(selector: $selector, data: $data) {\n      data {\n        ...CurationNoticesFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCurationNoticeCurationNoticesForm($selector: SelectorInput!, $data: UpdateCurationNoticeDataInput!) {\n    updateCurationNotice(selector: $selector, data: $data) {\n      data {\n        ...CurationNoticesFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createCurationNoticeCurationNoticesForm($data: CreateCurationNoticeDataInput!) {\n    createCurationNotice(data: $data) {\n      data {\n        ...CurationNoticesFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createCurationNoticeCurationNoticesForm($data: CreateCurationNoticeDataInput!) {\n    createCurationNotice(data: $data) {\n      data {\n        ...CurationNoticesFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostCurationNoticesItem1($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostCurationNoticesItem1($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateCurationNoticeCurationNoticesItem($selector: SelectorInput!, $data: UpdateCurationNoticeDataInput!) {\n    updateCurationNotice(selector: $selector, data: $data) {\n      data {\n        ...CurationNoticesFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCurationNoticeCurationNoticesItem($selector: SelectorInput!, $data: UpdateCurationNoticeDataInput!) {\n    updateCurationNotice(selector: $selector, data: $data) {\n      data {\n        ...CurationNoticesFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createCommentCurationNoticesItem($data: CreateCommentDataInput!) {\n    createComment(data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createCommentCurationNoticesItem($data: CreateCommentDataInput!) {\n    createComment(data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCurationNoticeCurationPageQuery($selector: CurationNoticeSelector, $limit: Int, $enableTotal: Boolean) {\n    curationNotices(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CurationNoticesFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCurationNoticeCurationPageQuery($selector: CurationNoticeSelector, $limit: Int, $enableTotal: Boolean) {\n    curationNotices(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CurationNoticesFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query randomUser($userIsAuthor: String!) {\n      GetRandomUser(userIsAuthor: $userIsAuthor) {\n        ...UsersMinimumInfo\n      }\n    }\n  "): (typeof documents)["\n    query randomUser($userIsAuthor: String!) {\n      GetRandomUser(userIsAuthor: $userIsAuthor) {\n        ...UsersMinimumInfo\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query CrossedKarmaThreshold($limit: Int!) {\n      CrossedKarmaThreshold(limit: $limit) {\n        results {\n          ...PostsTwitterAdmin\n        }\n      }\n    }\n  "): (typeof documents)["\n    query CrossedKarmaThreshold($limit: Int!) {\n      CrossedKarmaThreshold(limit: $limit) {\n        results {\n          ...PostsTwitterAdmin\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query MigrationsDashboardQuery {\n      MigrationsDashboard {\n        migrations {\n          name\n          dateWritten\n          runs { name started finished succeeded }\n          lastRun\n        }\n      }\n    }\n  "): (typeof documents)["\n    query MigrationsDashboardQuery {\n      MigrationsDashboard {\n        migrations {\n          name\n          dateWritten\n          runs { name started finished succeeded }\n          lastRun\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentAFUnreviewedCommentCountQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SuggestAlignmentComment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentAFUnreviewedCommentCountQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SuggestAlignmentComment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation alignmentPost($postId: String, $af: Boolean) {\n      alignmentPost(postId: $postId, af: $af) {\n        ...PostsList\n      }\n    }\n  "): (typeof documents)["\n    mutation alignmentPost($postId: String, $af: Boolean) {\n      alignmentPost(postId: $postId, af: $af) {\n        ...PostsList\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserAuthorAnalyticsPageQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserAuthorAnalyticsPageQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsAnalyticsPage($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsAnalyticsPage($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiBookmarkBookmarksFeedQuery($selector: BookmarkSelector, $limit: Int, $enableTotal: Boolean) {\n    bookmarks(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...BookmarksFeedItemFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiBookmarkBookmarksFeedQuery($selector: BookmarkSelector, $limit: Int, $enableTotal: Boolean) {\n    bookmarks(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...BookmarksFeedItemFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiBookmarkBookmarksListQuery($selector: BookmarkSelector, $limit: Int, $enableTotal: Boolean) {\n    bookmarks(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...BookmarksWithDocumentFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiBookmarkBookmarksListQuery($selector: BookmarkSelector, $limit: Int, $enableTotal: Boolean) {\n    bookmarks(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...BookmarksWithDocumentFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query getReadHistory($limit: Int, $filter: PostReviewFilter, $sort: PostReviewSort) {\n        UserReadHistory(limit: $limit, filter: $filter, sort: $sort) {\n          posts {\n            ...PostsListWithVotes\n            lastVisitedAt\n          }\n        }\n      }\n    "): (typeof documents)["\n      query getReadHistory($limit: Int, $filter: PostReviewFilter, $sort: PostReviewSort) {\n        UserReadHistory(limit: $limit, filter: $filter, sort: $sort) {\n          posts {\n            ...PostsListWithVotes\n            lastVisitedAt\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiVoteVoteHistoryTabQuery($selector: VoteSelector, $limit: Int, $enableTotal: Boolean) {\n    votes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserVotesWithDocument\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiVoteVoteHistoryTabQuery($selector: VoteSelector, $limit: Int, $enableTotal: Boolean) {\n    votes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserVotesWithDocument\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserBook2020FrontpageWidget($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserBook2020FrontpageWidget($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserBookFrontpageWidget($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserBookFrontpageWidget($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CommentById($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query CommentById($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateCommentCommentForm($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCommentCommentForm($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createCommentCommentForm($data: CreateCommentDataInput!) {\n    createComment(data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createCommentCommentForm($data: CreateCommentDataInput!) {\n    createComment(data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CommentPermalink($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentWithRepliesFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query CommentPermalink($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentWithRepliesFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query LinkedDraftCommentQuery($documentId: String!) {\n    comment(selector: { _id: $documentId }) {\n      result {\n        ...DraftComments\n      }\n    }\n  }\n"): (typeof documents)["\n  query LinkedDraftCommentQuery($documentId: String!) {\n    comment(selector: { _id: $documentId }) {\n      result {\n        ...DraftComments\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DraftCommentsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DraftComments\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query DraftCommentsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DraftComments\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CommentEdit($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  query CommentEdit($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CommentDeletedMetadata($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...DeletedCommentsMetaData\n      }\n    }\n  }\n"): (typeof documents)["\n  query CommentDeletedMetadata($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...DeletedCommentsMetaData\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CommentPollVote($documentId: String) {\n    forumEvent(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ForumEventsDisplay\n      }\n    }\n  }\n"): (typeof documents)["\n  query CommentPollVote($documentId: String) {\n    forumEvent(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ForumEventsDisplay\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CommentsNewForm($documentId: String, $postId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersCurrentCommentRateLimit\n      }\n    }\n  }\n"): (typeof documents)["\n  query CommentsNewForm($documentId: String, $postId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersCurrentCommentRateLimit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation upsertUserTypingIndicator($documentId: String!) {\n      upsertUserTypingIndicator(documentId: $documentId) {\n        ...TypingIndicatorInfo\n      }\n    }\n  "): (typeof documents)["\n    mutation upsertUserTypingIndicator($documentId: String!) {\n      upsertUserTypingIndicator(documentId: $documentId) {\n        ...TypingIndicatorInfo\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiLWEventLastVisitListQuery($selector: LWEventSelector, $limit: Int, $enableTotal: Boolean) {\n    lWEvents(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...lastEventFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiLWEventLastVisitListQuery($selector: LWEventSelector, $limit: Int, $enableTotal: Boolean) {\n    lWEvents(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...lastEventFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsModerationGuidelines($documentId: String) {\n    PostsModerationGuidelines: post(selector: { documentId: $documentId }) {\n      result {\n        ...PostsModerationGuidelines\n      }\n      __typename\n    }\n  }\n"): (typeof documents)["\n  query PostsModerationGuidelines($documentId: String) {\n    PostsModerationGuidelines: post(selector: { documentId: $documentId }) {\n      result {\n        ...PostsModerationGuidelines\n      }\n      __typename\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TagModerationGuidelines($documentId: String) {\n    TagModerationGuidelines: tag(selector: { documentId: $documentId }) {\n      result {\n        ...TagFragment\n      }\n      __typename\n    }\n  }\n"): (typeof documents)["\n  query TagModerationGuidelines($documentId: String) {\n    TagModerationGuidelines: tag(selector: { documentId: $documentId }) {\n      result {\n        ...TagFragment\n      }\n      __typename\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostModerationGuidelinesEditForm($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsPage\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostModerationGuidelinesEditForm($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateTagModerationGuidelinesEditForm($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...TagWithFlagsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateTagModerationGuidelinesEditForm($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...TagWithFlagsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsEditQuery($documentId: String!, $version: String) {\n    post(selector:  { documentId: $documentId }) {\n      result {\n        ...PostsEditQueryFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsEditQuery($documentId: String!, $version: String) {\n    post(selector:  { documentId: $documentId }) {\n      result {\n        ...PostsEditQueryFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TagEditQuery($documentId: String!) {\n    tag(selector: { documentId: $documentId }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query TagEditQuery($documentId: String!) {\n    tag(selector: { documentId: $documentId }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentModeratorCommentsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentModeratorCommentsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query NewUserGuidelinesDialog($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query NewUserGuidelinesDialog($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ParentCommentSingle($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n"): (typeof documents)["\n  query ParentCommentSingle($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query PopularComments($limit: Int) {\n      PopularComments(limit: $limit) {\n        results {\n          ...CommentsListWithParentMetadata\n        }\n      }\n    }\n  "): (typeof documents)["\n    query PopularComments($limit: Int) {\n      PopularComments(limit: $limit) {\n        results {\n          ...CommentsListWithParentMetadata\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentRecentCommentsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentRecentCommentsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SideCommentSingle($commentId: String!) {\n    comment(input: { selector: { _id: $commentId } }) {\n      result {\n        ...CommentWithRepliesFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query SideCommentSingle($commentId: String!) {\n    comment(input: { selector: { _id: $commentId } }) {\n      result {\n        ...CommentWithRepliesFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentUserCommentsRepliesQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentUserCommentsRepliesQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserUserCommentsRepliesQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserUserCommentsRepliesQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentuseCommentQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentuseCommentQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation sendVertexMediaCompleteEventMutation($postId: String!, $attributionId: String) {\n      sendVertexMediaCompleteEvent(postId: $postId, attributionId: $attributionId)\n    }\n  "): (typeof documents)["\n    mutation sendVertexMediaCompleteEventMutation($postId: String!, $attributionId: String) {\n      sendVertexMediaCompleteEvent(postId: $postId, attributionId: $attributionId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentCommentsListCondensedQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentCommentsListCondensedQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HeaderEventSubtitleSpotlightQuery {\n    currentSpotlight {\n      ...SpotlightHeaderEventSubtitle\n    }\n  }\n"): (typeof documents)["\n  query HeaderEventSubtitleSpotlightQuery {\n    currentSpotlight {\n      ...SpotlightHeaderEventSubtitle\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagHomeTagBarQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagHomeTagBarQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation sendVertexViewHomePageEventMutation {\n      sendVertexViewHomePageEvent\n    }\n  "): (typeof documents)["\n    mutation sendVertexViewHomePageEventMutation {\n      sendVertexViewHomePageEvent\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiFeaturedResourceFeaturedResourceBannerQuery($selector: FeaturedResourceSelector, $limit: Int, $enableTotal: Boolean) {\n    featuredResources(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...FeaturedResourcesFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiFeaturedResourceFeaturedResourceBannerQuery($selector: FeaturedResourceSelector, $limit: Int, $enableTotal: Boolean) {\n    featuredResources(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...FeaturedResourcesFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagSubforumsListQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagSubforumSidebarFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagSubforumsListQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagSubforumSidebarFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostExcerpt($documentId: String, $hash: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...HighlightWithHash\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostExcerpt($documentId: String, $hash: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...HighlightWithHash\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AllTagsActivityFeed($limit: Int, $cutoff: Date, $offset: Int) {\n    AllTagsActivityFeed(limit: $limit, cutoff: $cutoff, offset: $offset) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagCreated {\n          ...TagCreationHistoryFragment\n        }\n        tagRevision {\n          ...RevisionTagFragment\n        }\n        tagDiscussionComment {\n          ...CommentsListWithParentMetadata\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AllTagsActivityFeed($limit: Int, $cutoff: Date, $offset: Int) {\n    AllTagsActivityFeed(limit: $limit, cutoff: $cutoff, offset: $offset) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagCreated {\n          ...TagCreationHistoryFragment\n        }\n        tagRevision {\n          ...RevisionTagFragment\n        }\n        tagDiscussionComment {\n          ...CommentsListWithParentMetadata\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TagHistoryFeed($limit: Int, $cutoff: Date, $offset: Int, $tagId: String!, $options: JSON) {\n    TagHistoryFeed(limit: $limit, cutoff: $cutoff, offset: $offset, tagId: $tagId, options: $options) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagCreated {\n          ...TagHistoryFragment\n        }\n        tagRevision {\n          ...RevisionHistoryEntry\n        }\n        lensRevision {\n          ...RevisionHistoryEntry\n        }\n        summaryRevision {\n          ...RevisionHistorySummaryEdit\n        }\n        tagApplied {\n          ...TagRelHistoryFragment\n        }\n        tagDiscussionComment {\n          ...CommentsList\n        }\n        wikiMetadataChanged {\n          ...FieldChangeFragment\n        }\n        lensOrSummaryMetadataChanged {\n          ...FieldChangeFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query TagHistoryFeed($limit: Int, $cutoff: Date, $offset: Int, $tagId: String!, $options: JSON) {\n    TagHistoryFeed(limit: $limit, cutoff: $cutoff, offset: $offset, tagId: $tagId, options: $options) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagCreated {\n          ...TagHistoryFragment\n        }\n        tagRevision {\n          ...RevisionHistoryEntry\n        }\n        lensRevision {\n          ...RevisionHistoryEntry\n        }\n        summaryRevision {\n          ...RevisionHistorySummaryEdit\n        }\n        tagApplied {\n          ...TagRelHistoryFragment\n        }\n        tagDiscussionComment {\n          ...CommentsList\n        }\n        wikiMetadataChanged {\n          ...FieldChangeFragment\n        }\n        lensOrSummaryMetadataChanged {\n          ...FieldChangeFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query RecentDiscussionFeed($limit: Int, $cutoff: Date, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int, $tagCommentsLimit: Int) {\n    RecentDiscussionFeed(limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        postCommented {\n          ...PostsRecentDiscussion\n        }\n        shortformCommented {\n          ...ShortformRecentDiscussion\n        }\n        tagDiscussed {\n          ...TagRecentDiscussion\n        }\n        tagRevised {\n          ...RecentDiscussionRevisionTagFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query RecentDiscussionFeed($limit: Int, $cutoff: Date, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int, $tagCommentsLimit: Int) {\n    RecentDiscussionFeed(limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        postCommented {\n          ...PostsRecentDiscussion\n        }\n        shortformCommented {\n          ...ShortformRecentDiscussion\n        }\n        tagDiscussed {\n          ...TagRecentDiscussion\n        }\n        tagRevised {\n          ...RecentDiscussionRevisionTagFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SubscribedFeed($limit: Int, $cutoff: Date, $offset: Int, $af: Boolean) {\n    SubscribedFeed(limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        postCommented {\n          ...SubscribedPostAndCommentsFeed\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SubscribedFeed($limit: Int, $cutoff: Date, $offset: Int, $af: Boolean) {\n    SubscribedFeed(limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        postCommented {\n          ...SubscribedPostAndCommentsFeed\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SubforumMagicFeed($tagId: String!, $limit: Int, $cutoff: Float, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumMagicFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SubforumMagicFeed($tagId: String!, $limit: Int, $cutoff: Float, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumMagicFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SubforumNewFeed($tagId: String!, $limit: Int, $cutoff: Date, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumNewFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SubforumNewFeed($tagId: String!, $limit: Int, $cutoff: Date, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumNewFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SubforumOldFeed($tagId: String!, $limit: Int, $cutoff: Date, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumOldFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SubforumOldFeed($tagId: String!, $limit: Int, $cutoff: Date, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumOldFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SubforumRecentCommentsFeed($tagId: String!, $limit: Int, $cutoff: Date, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumRecentCommentsFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SubforumRecentCommentsFeed($tagId: String!, $limit: Int, $cutoff: Date, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumRecentCommentsFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SubforumTopFeed($tagId: String!, $limit: Int, $cutoff: Int, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumTopFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SubforumTopFeed($tagId: String!, $limit: Int, $cutoff: Int, $offset: Int, $af: Boolean, $commentsLimit: Int, $maxAgeHours: Int) {\n    SubforumTopFeed(tagId: $tagId, limit: $limit, cutoff: $cutoff, offset: $offset, af: $af) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        tagSubforumPosts {\n          ...PostsRecentDiscussion\n        }\n        tagSubforumComments {\n          ...CommentWithRepliesFragment\n        }\n        tagSubforumStickyComments {\n          ...StickySubforumCommentFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UltraFeed($limit: Int, $cutoff: Date, $offset: Int, $sessionId: String, $settings: JSON) {\n    UltraFeed(limit: $limit, cutoff: $cutoff, offset: $offset, sessionId: $sessionId, settings: $settings) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        feedCommentThread {\n          ...FeedCommentThreadFragment\n        }\n        feedPost {\n          ...FeedPostFragment\n        }\n        feedSpotlight {\n          ...FeedSpotlightFragment\n        }\n        feedSubscriptionSuggestions {\n          ...FeedSubscriptionSuggestionsFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UltraFeed($limit: Int, $cutoff: Date, $offset: Int, $sessionId: String, $settings: JSON) {\n    UltraFeed(limit: $limit, cutoff: $cutoff, offset: $offset, sessionId: $sessionId, settings: $settings) {\n      __typename\n      cutoff\n      endOffset\n      results {\n        type\n        feedCommentThread {\n          ...FeedCommentThreadFragment\n        }\n        feedPost {\n          ...FeedPostFragment\n        }\n        feedSpotlight {\n          ...FeedSpotlightFragment\n        }\n        feedSubscriptionSuggestions {\n          ...FeedSubscriptionSuggestionsFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserCommunity($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersProfile\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserCommunity($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersProfile\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiLocalgroupLocalGroupsQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiLocalgroupLocalGroupsQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiLocalgroupOnlineGroupsQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiLocalgroupOnlineGroupsQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ElicitBlockData($questionId: String) {\n    ElicitBlockData(questionId: $questionId) {\n      _id\n      title\n      notes\n      resolvesBy\n      resolution\n      predictions {\n        _id,\n        predictionId,\n        prediction,\n        createdAt,\n        notes,\n        sourceUrl,\n        sourceId,\n        binaryQuestionId\n        creator {\n          _id,\n          displayName,\n          sourceUserId\n          lwUser {\n            ...UsersMinimumInfo\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ElicitBlockData($questionId: String) {\n    ElicitBlockData(questionId: $questionId) {\n      _id\n      title\n      notes\n      resolvesBy\n      resolution\n      predictions {\n        _id,\n        predictionId,\n        prediction,\n        createdAt,\n        notes,\n        sourceUrl,\n        sourceId,\n        binaryQuestionId\n        creator {\n          _id,\n          displayName,\n          sourceUserId\n          lwUser {\n            ...UsersMinimumInfo\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ElicitPrediction($questionId:String, $prediction: Int) {\n    MakeElicitPrediction(questionId:$questionId, prediction: $prediction) {\n      _id\n      title\n      notes\n      resolvesBy\n      resolution\n      predictions {\n        _id,\n        predictionId,\n        prediction,\n        createdAt,\n        notes,\n        sourceUrl,\n        sourceId,\n        binaryQuestionId\n        creator {\n          _id,\n          displayName,\n          sourceUserId\n          lwUser {\n            ...UsersMinimumInfo\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ElicitPrediction($questionId:String, $prediction: Int) {\n    MakeElicitPrediction(questionId:$questionId, prediction: $prediction) {\n      _id\n      title\n      notes\n      resolvesBy\n      resolution\n      predictions {\n        _id,\n        predictionId,\n        prediction,\n        createdAt,\n        notes,\n        sourceUrl,\n        sourceId,\n        binaryQuestionId\n        creator {\n          _id,\n          displayName,\n          sourceUserId\n          lwUser {\n            ...UsersMinimumInfo\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query RecentlyActiveDialogues($limit: Int) {\n      RecentlyActiveDialogues(limit: $limit) {\n        results {\n          ...PostsListWithVotes\n        }\n      }\n    }\n  "): (typeof documents)["\n    query RecentlyActiveDialogues($limit: Int) {\n      RecentlyActiveDialogues(limit: $limit) {\n        results {\n          ...PostsListWithVotes\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query MyDialogues($limit: Int) {\n      MyDialogues(limit: $limit) {\n        results {\n          ...PostsListWithVotes\n        }\n      }\n    }\n  "): (typeof documents)["\n    query MyDialogues($limit: Int) {\n      MyDialogues(limit: $limit) {\n        results {\n          ...PostsListWithVotes\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DialoguesPage($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n"): (typeof documents)["\n  query DialoguesPage($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostBanUserFromPostDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsPage\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostBanUserFromPostDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CommentActions($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  query CommentActions($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsDetails\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation lockThread($commentId: String!, $until: String) {\n      lockThread(commentId: $commentId, until: $until)\n    }\n  "): (typeof documents)["\n    mutation lockThread($commentId: String!, $until: String) {\n      lockThread(commentId: $commentId, until: $until)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation unlockThread($commentId: String!) {\n      unlockThread(commentId: $commentId)\n    }\n  "): (typeof documents)["\n    mutation unlockThread($commentId: String!) {\n      unlockThread(commentId: $commentId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateCommentMoveToAlignmentCommentDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCommentMoveToAlignmentCommentDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateCommentMoveToAnswersDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCommentMoveToAnswersDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateCommentPinToProfileDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCommentPinToProfileDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateCommentRetractCommentDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCommentRetractCommentDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateCommentShortformFrontpageDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCommentShortformFrontpageDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateCommentSuggestAlignmentCommentDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentComment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCommentSuggestAlignmentCommentDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentComment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateCommentToggleIsModeratorCommentDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCommentToggleIsModeratorCommentDropdownItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation moderateComment($commentId: String, $deleted: Boolean, $deletedReason: String, $deletedPublic: Boolean) {\n      moderateComment(commentId: $commentId, deleted: $deleted, deletedReason: $deletedReason, deletedPublic: $deletedPublic) {\n        ...CommentsList\n      }\n    }\n  "): (typeof documents)["\n    mutation moderateComment($commentId: String, $deleted: Boolean, $deletedReason: String, $deletedPublic: Boolean) {\n      moderateComment(commentId: $commentId, deleted: $deleted, deletedReason: $deletedReason, deletedPublic: $deletedPublic) {\n        ...CommentsList\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserApproveNewUserDropdownItem($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserApproveNewUserDropdownItem($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostDeleteDraftDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostDeleteDraftDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostExcludeFromRecommendationsDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostExcludeFromRecommendationsDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation markAsReadOrUnread($postId: String, $isRead: Boolean) {\n      markAsReadOrUnread(postId: $postId, isRead: $isRead)\n    }\n  "): (typeof documents)["\n    mutation markAsReadOrUnread($postId: String, $isRead: Boolean) {\n      markAsReadOrUnread(postId: $postId, isRead: $isRead)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostMoveToDraftDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostMoveToDraftDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostMoveToFrontpageDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostMoveToFrontpageDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostResyncRssDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostResyncRssDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getRssPostChanges($postId: String!) {\n      RssPostChanges(postId: $postId) {\n        isChanged\n        newHtml\n        htmlDiff\n      }\n    }\n  "): (typeof documents)["\n    query getRssPostChanges($postId: String!) {\n      RssPostChanges(postId: $postId) {\n        isChanged\n        newHtml\n        htmlDiff\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserShortformDropdownItem($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserShortformDropdownItem($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostSuggestAlignmentPostDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostSuggestAlignmentPostDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostSuggestCuratedDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostSuggestCuratedDropdownItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation setIsHidden($postId: String!, $isHidden: Boolean!) {\n      setIsHidden(postId: $postId, isHidden: $isHidden) {\n        ...UsersCurrent\n      }\n    }\n  "): (typeof documents)["\n    mutation setIsHidden($postId: String!, $isHidden: Boolean!) {\n      setIsHidden(postId: $postId, isHidden: $isHidden) {\n        ...UsersCurrent\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostsListWithVotesQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostsListWithVotesQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCollectionEABestOfPageQuery($selector: CollectionSelector, $limit: Int, $enableTotal: Boolean) {\n    collections(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CollectionsBestOfFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCollectionEABestOfPageQuery($selector: CollectionSelector, $limit: Int, $enableTotal: Boolean) {\n    collections(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CollectionsBestOfFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiSequenceEABestOfPageQuery($selector: SequenceSelector, $limit: Int, $enableTotal: Boolean) {\n    sequences(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SequencesPageFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiSequenceEABestOfPageQuery($selector: SequenceSelector, $limit: Int, $enableTotal: Boolean) {\n    sequences(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SequencesPageFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostsBestOfListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsBestOfList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostsBestOfListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsBestOfList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiDigestEADigestPageQuery($selector: DigestSelector, $limit: Int, $enableTotal: Boolean) {\n    digests(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DigestsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiDigestEADigestPageQuery($selector: DigestSelector, $limit: Int, $enableTotal: Boolean) {\n    digests(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DigestsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getDigestPosts($num: Int) {\n      DigestPosts(num: $num) {\n        ...PostsListWithVotes\n      }\n    }\n  "): (typeof documents)["\n    query getDigestPosts($num: Int) {\n      DigestPosts(num: $num) {\n        ...PostsListWithVotes\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EAHomeHandbook($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesPageFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query EAHomeHandbook($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesPageFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostEAHomeRightHandSideQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostEAHomeRightHandSideQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostInstagramLandingPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostInstagramLandingPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiChapterInstagramLandingPageQuery($selector: ChapterSelector, $limit: Int, $enableTotal: Boolean) {\n    chapters(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ChaptersFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiChapterInstagramLandingPageQuery($selector: ChapterSelector, $limit: Int, $enableTotal: Boolean) {\n    chapters(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ChaptersFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserEAGDetailTargetedJobAdSectionQuery($selector: UserEAGDetailSelector, $limit: Int, $enableTotal: Boolean) {\n    userEAGDetails(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserEAGDetailsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserEAGDetailTargetedJobAdSectionQuery($selector: UserEAGDetailSelector, $limit: Int, $enableTotal: Boolean) {\n    userEAGDetails(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserEAGDetailsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserJobAdTargetedJobAdSectionQuery($selector: UserJobAdSelector, $limit: Int, $enableTotal: Boolean) {\n    userJobAds(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserJobAdsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserJobAdTargetedJobAdSectionQuery($selector: UserJobAdSelector, $limit: Int, $enableTotal: Boolean) {\n    userJobAds(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserJobAdsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserJobAdTargetedJobAdSection($selector: SelectorInput!, $data: UpdateUserJobAdDataInput!) {\n    updateUserJobAd(selector: $selector, data: $data) {\n      data {\n        ...UserJobAdsMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserJobAdTargetedJobAdSection($selector: SelectorInput!, $data: UpdateUserJobAdDataInput!) {\n    updateUserJobAd(selector: $selector, data: $data) {\n      data {\n        ...UserJobAdsMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createUserJobAdTargetedJobAdSection($data: CreateUserJobAdDataInput!) {\n    createUserJobAd(data: $data) {\n      data {\n        ...UserJobAdsMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createUserJobAdTargetedJobAdSection($data: CreateUserJobAdDataInput!) {\n    createUserJobAd(data: $data) {\n      data {\n        ...UserJobAdsMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query getUserReadsPerCoreTag($userId: String!) {\n        UserReadsPerCoreTag(userId: $userId) {\n          tagId\n          userReadCount\n        }\n      }\n    "): (typeof documents)["\n      query getUserReadsPerCoreTag($userId: String!) {\n        UserReadsPerCoreTag(userId: $userId) {\n          tagId\n          userReadCount\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateDigestConfirmPublishDialog($selector: SelectorInput!, $data: UpdateDigestDataInput!) {\n    updateDigest(selector: $selector, data: $data) {\n      data {\n        ...DigestsMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateDigestConfirmPublishDialog($selector: SelectorInput!, $data: UpdateDigestDataInput!) {\n    updateDigest(selector: $selector, data: $data) {\n      data {\n        ...DigestsMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiDigestDigestsQuery($selector: DigestSelector, $limit: Int, $enableTotal: Boolean) {\n    digests(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DigestsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiDigestDigestsQuery($selector: DigestSelector, $limit: Int, $enableTotal: Boolean) {\n    digests(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DigestsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiDigestEditDigestQuery($selector: DigestSelector, $limit: Int, $enableTotal: Boolean) {\n    digests(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DigestsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiDigestEditDigestQuery($selector: DigestSelector, $limit: Int, $enableTotal: Boolean) {\n    digests(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DigestsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateDigestPostEditDigest($selector: SelectorInput!, $data: UpdateDigestPostDataInput!) {\n    updateDigestPost(selector: $selector, data: $data) {\n      data {\n        ...DigestPostsMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateDigestPostEditDigest($selector: SelectorInput!, $data: UpdateDigestPostDataInput!) {\n    updateDigestPost(selector: $selector, data: $data) {\n      data {\n        ...DigestPostsMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createDigestPostEditDigest($data: CreateDigestPostDataInput!) {\n    createDigestPost(data: $data) {\n      data {\n        ...DigestPostsMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createDigestPostEditDigest($data: CreateDigestPostDataInput!) {\n    createDigestPost(data: $data) {\n      data {\n        ...DigestPostsMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getDigestPlannerData($digestId: String, $startDate: Date, $endDate: Date) {\n      DigestPlannerData(digestId: $digestId, startDate: $startDate, endDate: $endDate) {\n        post {\n          ...PostsListWithVotes\n        }\n        digestPost {\n          _id\n          emailDigestStatus\n          onsiteDigestStatus\n        }\n        rating\n      }\n    }\n  "): (typeof documents)["\n    query getDigestPlannerData($digestId: String, $startDate: Date, $endDate: Date) {\n      DigestPlannerData(digestId: $digestId, startDate: $startDate, endDate: $endDate) {\n        post {\n          ...PostsListWithVotes\n        }\n        digestPost {\n          _id\n          emailDigestStatus\n          onsiteDigestStatus\n        }\n        rating\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateDigestEditDigestActionButtons($selector: SelectorInput!, $data: UpdateDigestDataInput!) {\n    updateDigest(selector: $selector, data: $data) {\n      data {\n        ...DigestsMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateDigestEditDigestActionButtons($selector: SelectorInput!, $data: UpdateDigestDataInput!) {\n    updateDigest(selector: $selector, data: $data) {\n      data {\n        ...DigestsMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateDigestEditDigestHeader($selector: SelectorInput!, $data: UpdateDigestDataInput!) {\n    updateDigest(selector: $selector, data: $data) {\n      data {\n        ...DigestsMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateDigestEditDigestHeader($selector: SelectorInput!, $data: UpdateDigestDataInput!) {\n    updateDigest(selector: $selector, data: $data) {\n      data {\n        ...DigestsMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation NewUserCompleteProfile(\n      $username: String!,\n      $subscribeToDigest: Boolean!,\n      $email: String,\n      $acceptedTos: Boolean\n    ) {\n      NewUserCompleteProfile(\n        username: $username,\n        subscribeToDigest: $subscribeToDigest,\n        email: $email,\n        acceptedTos: $acceptedTos\n      ) {\n        username\n        slug\n        displayName\n      }\n    }\n  "): (typeof documents)["\n    mutation NewUserCompleteProfile(\n      $username: String!,\n      $subscribeToDigest: Boolean!,\n      $email: String,\n      $acceptedTos: Boolean\n    ) {\n      NewUserCompleteProfile(\n        username: $username,\n        subscribeToDigest: $subscribeToDigest,\n        email: $email,\n        acceptedTos: $acceptedTos\n      ) {\n        username\n        slug\n        displayName\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query isDisplayNameTaken($displayName: String!) {\n      IsDisplayNameTaken(displayName: $displayName)\n    }\n  "): (typeof documents)["\n    query isDisplayNameTaken($displayName: String!) {\n      IsDisplayNameTaken(displayName: $displayName)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUseruseSuggestedSubscriptionsQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserOnboardingAuthor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUseruseSuggestedSubscriptionsQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserOnboardingAuthor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTaguseSuggestedSubscriptionsQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserOnboardingTag\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTaguseSuggestedSubscriptionsQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserOnboardingTag\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EAGApplicationImportForm($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  query EAGApplicationImportForm($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPosthooksQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPosthooksQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiVotehooksQuery($selector: VoteSelector, $limit: Int, $enableTotal: Boolean) {\n    votes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserVotes\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiVotehooksQuery($selector: VoteSelector, $limit: Int, $enableTotal: Boolean) {\n    votes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserVotes\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getWrappedData($userId: String!, $year: Int!) {\n      UserWrappedDataByYear(userId: $userId, year: $year) {\n        engagementPercentile\n        postsReadCount\n        totalSeconds\n        daysVisited\n        mostReadTopics {\n          name\n          shortName\n          slug\n          count\n        }\n        relativeMostReadCoreTopics {\n          tagId\n          tagName\n          tagShortName\n          userReadCount\n          readLikelihoodRatio\n        }\n        mostReadAuthors {\n          _id\n          displayName\n          slug\n          profileImageId\n          count\n          engagementPercentile\n        }\n        topPosts {\n          _id\n          title\n          slug\n          baseScore\n        }\n        postCount\n        authorPercentile\n        topComment {\n          _id\n          postedAt\n          postId\n          postTitle\n          postSlug\n          baseScore\n          extendedScore\n          contents {\n            html\n          }\n        }\n        commentCount\n        commenterPercentile\n        topShortform {\n          _id\n          postedAt\n          postId\n          baseScore\n          extendedScore\n          contents {\n            html\n          }\n        }\n        shortformCount\n        shortformPercentile\n        karmaChange\n        combinedKarmaVals {\n          date\n          postKarma\n          commentKarma\n        }\n        mostReceivedReacts {\n          name\n          count\n        }\n        personality\n      }\n    }\n  "): (typeof documents)["\n    query getWrappedData($userId: String!, $year: Int!) {\n      UserWrappedDataByYear(userId: $userId, year: $year) {\n        engagementPercentile\n        postsReadCount\n        totalSeconds\n        daysVisited\n        mostReadTopics {\n          name\n          shortName\n          slug\n          count\n        }\n        relativeMostReadCoreTopics {\n          tagId\n          tagName\n          tagShortName\n          userReadCount\n          readLikelihoodRatio\n        }\n        mostReadAuthors {\n          _id\n          displayName\n          slug\n          profileImageId\n          count\n          engagementPercentile\n        }\n        topPosts {\n          _id\n          title\n          slug\n          baseScore\n        }\n        postCount\n        authorPercentile\n        topComment {\n          _id\n          postedAt\n          postId\n          postTitle\n          postSlug\n          baseScore\n          extendedScore\n          contents {\n            html\n          }\n        }\n        commentCount\n        commenterPercentile\n        topShortform {\n          _id\n          postedAt\n          postId\n          baseScore\n          extendedScore\n          contents {\n            html\n          }\n        }\n        shortformCount\n        shortformPercentile\n        karmaChange\n        combinedKarmaVals {\n          date\n          postKarma\n          commentKarma\n        }\n        mostReceivedReacts {\n          name\n          count\n        }\n        personality\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostCKPostEditorQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostCKPostEditorQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation sendNewDialogueMessageNotification($postId: String!, $dialogueHtml: String!) {\n      sendNewDialogueMessageNotification(postId: $postId, dialogueHtml: $dialogueHtml)\n    }\n  "): (typeof documents)["\n    mutation sendNewDialogueMessageNotification($postId: String!, $dialogueHtml: String!) {\n      sendNewDialogueMessageNotification(postId: $postId, dialogueHtml: $dialogueHtml)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostEditTitle($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostEditTitle($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getPostIsCriticism($args: JSON) {\n      PostIsCriticism(args: $args)\n    }\n    "): (typeof documents)["\n    query getPostIsCriticism($args: JSON) {\n      PostIsCriticism(args: $args)\n    }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation autosaveRevision($postId: String!, $contents: AutosaveContentType!) {\n      autosaveRevision(postId: $postId, contents: $contents) {\n        ...RevisionEdit\n      }\n    }\n  "): (typeof documents)["\n    mutation autosaveRevision($postId: String!, $contents: AutosaveContentType!) {\n      autosaveRevision(postId: $postId, contents: $contents) {\n        ...RevisionEdit\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query LinkSharingQuery($postId: String!, $linkSharingKey: String!) {\n      getLinkSharedPost(postId: $postId, linkSharingKey: $linkSharingKey) {\n        ...PostsEdit\n      }\n    }\n  "): (typeof documents)["\n    query LinkSharingQuery($postId: String!, $linkSharingKey: String!) {\n      getLinkSharedPost(postId: $postId, linkSharingKey: $linkSharingKey) {\n        ...PostsEdit\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiRevisionPostVersionHistoryQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionMetadataWithChangeMetrics\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiRevisionPostVersionHistoryQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionMetadataWithChangeMetrics\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostVersionHistory($documentId: String) {\n    revision(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...RevisionDisplay\n        ...RevisionMetadata\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostVersionHistory($documentId: String) {\n    revision(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...RevisionDisplay\n        ...RevisionMetadata\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation revertPostToRevision($postId: String!, $revisionId: String!) {\n      revertPostToRevision(postId: $postId, revisionId: $revisionId) {\n        ...PostsEdit\n      }\n    }\n  "): (typeof documents)["\n    mutation revertPostToRevision($postId: String!, $revisionId: String!) {\n      revertPostToRevision(postId: $postId, revisionId: $revisionId) {\n        ...PostsEdit\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PresenceList($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query PresenceList($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiRevisionTagVersionHistoryQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionMetadataWithChangeMetrics\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiRevisionTagVersionHistoryQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionMetadataWithChangeMetrics\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TagVersionHistory($documentId: String) {\n    revision(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...RevisionDisplay\n      }\n    }\n  }\n"): (typeof documents)["\n  query TagVersionHistory($documentId: String) {\n    revision(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...RevisionDisplay\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation revertToRevision($tagId: String!, $revertToRevisionId: String!, $contributorsLimit: Int) {\n      revertTagToRevision(tagId: $tagId, revertToRevisionId: $revertToRevisionId) {\n        ...TagPageFragment\n      }\n    }\n  "): (typeof documents)["\n    mutation revertToRevision($tagId: String!, $revertToRevisionId: String!, $contributorsLimit: Int) {\n      revertTagToRevision(tagId: $tagId, revertToRevisionId: $revertToRevisionId) {\n        ...TagPageFragment\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createElicitQuestionCreateClaimDialog($data: CreateElicitQuestionDataInput!) {\n    createElicitQuestion(data: $data) {\n      data {\n        ...ElicitQuestionFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createElicitQuestionCreateClaimDialog($data: CreateElicitQuestionDataInput!) {\n    createElicitQuestion(data: $data) {\n      data {\n        ...ElicitQuestionFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ConvertDocument($document: JSON, $targetFormat: String) {\n      convertDocument(document: $document, targetFormat: $targetFormat)\n    }\n  "): (typeof documents)["\n    query ConvertDocument($document: JSON, $targetFormat: String) {\n      convertDocument(document: $document, targetFormat: $targetFormat)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostEventsHomeQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostEventsHomeQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserEventsHome($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersProfile\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserEventsHome($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersProfile\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FMCrosspostControl($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersCrosspostInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query FMCrosspostControl($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersCrosspostInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation unlinkCrossposter {\n      unlinkCrossposter\n    }\n  "): (typeof documents)["\n    mutation unlinkCrossposter {\n      unlinkCrossposter\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagFormComponentPostEditorTaggingQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagFormComponentPostEditorTaggingQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ImageUpload($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query ImageUpload($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPodcastEpisodePodcastEpisodeInputQuery($selector: PodcastEpisodeSelector, $limit: Int, $enableTotal: Boolean) {\n    podcastEpisodes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PodcastEpisodeFull\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPodcastEpisodePodcastEpisodeInputQuery($selector: PodcastEpisodeSelector, $limit: Int, $enableTotal: Boolean) {\n    podcastEpisodes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PodcastEpisodeFull\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPodcastPodcastEpisodeInputQuery($selector: PodcastSelector, $limit: Int, $enableTotal: Boolean) {\n    podcasts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PodcastSelect\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPodcastPodcastEpisodeInputQuery($selector: PodcastSelector, $limit: Int, $enableTotal: Boolean) {\n    podcasts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PodcastSelect\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createPodcastEpisodePodcastEpisodeInput($data: CreatePodcastEpisodeDataInput!) {\n    createPodcastEpisode(data: $data) {\n      data {\n        ...PodcastEpisodesDefaultFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createPodcastEpisodePodcastEpisodeInput($data: CreatePodcastEpisodeDataInput!) {\n    createPodcastEpisode(data: $data) {\n      data {\n        ...PodcastEpisodesDefaultFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiLocalgroupSelectLocalgroupQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsBase\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiLocalgroupSelectLocalgroupQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsBase\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SequencesListEditorItem($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesPageFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query SequencesListEditorItem($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesPageFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SingleTagItem($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagBasicInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SingleTagItem($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagBasicInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SingleUsersItem($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersProfile\n      }\n    }\n  }\n"): (typeof documents)["\n  query SingleUsersItem($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersProfile\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagFlagTagFlagToggleListQuery($selector: TagFlagSelector, $limit: Int, $enableTotal: Boolean) {\n    tagFlags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFlagFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagFlagTagFlagToggleListQuery($selector: TagFlagSelector, $limit: Int, $enableTotal: Boolean) {\n    tagFlags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFlagFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TagSelect($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagBasicInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query TagSelect($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagBasicInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateForumEventForumEventForm($selector: SelectorInput!, $data: UpdateForumEventDataInput!) {\n    updateForumEvent(selector: $selector, data: $data) {\n      data {\n        ...ForumEventsEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateForumEventForumEventForm($selector: SelectorInput!, $data: UpdateForumEventDataInput!) {\n    updateForumEvent(selector: $selector, data: $data) {\n      data {\n        ...ForumEventsEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createForumEventForumEventForm($data: CreateForumEventDataInput!) {\n    createForumEvent(data: $data) {\n      data {\n        ...ForumEventsEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createForumEventForumEventForm($data: CreateForumEventDataInput!) {\n    createForumEvent(data: $data) {\n      data {\n        ...ForumEventsEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ForumEventForm($documentId: String) {\n    forumEvent(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ForumEventsEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  query ForumEventForm($documentId: String) {\n    forumEvent(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ForumEventsEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentForumEventPollQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentForumEventPollQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserForumEventPollQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserForumEventPollQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ForumEventPoll($documentId: String) {\n    forumEvent(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ForumEventsDisplay\n      }\n    }\n  }\n"): (typeof documents)["\n  query ForumEventPoll($documentId: String) {\n    forumEvent(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ForumEventsDisplay\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation AddForumEventVote($forumEventId: String!, $x: Float!, $delta: Float, $postIds: [String]) {\n      AddForumEventVote(forumEventId: $forumEventId, x: $x, delta: $delta, postIds: $postIds)\n    }\n  "): (typeof documents)["\n    mutation AddForumEventVote($forumEventId: String!, $x: Float!, $delta: Float, $postIds: [String]) {\n      AddForumEventVote(forumEventId: $forumEventId, x: $x, delta: $delta, postIds: $postIds)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation RemoveForumEventVote($forumEventId: String!) {\n      RemoveForumEventVote(forumEventId: $forumEventId)\n    }\n  "): (typeof documents)["\n    mutation RemoveForumEventVote($forumEventId: String!) {\n      RemoveForumEventVote(forumEventId: $forumEventId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ForumEventPostPageBanner($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  query ForumEventPostPageBanner($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsDetails\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ForumEventPostPagePollSection2($documentId: String) {\n    forumEvent(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ForumEventsDisplay\n      }\n    }\n  }\n"): (typeof documents)["\n  query ForumEventPostPagePollSection2($documentId: String) {\n    forumEvent(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ForumEventsDisplay\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ForumEventPostPagePollSection($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  query ForumEventPostPagePollSection($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsDetails\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentForumEventStickersQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentForumEventStickersQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserForumEventStickersQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserForumEventStickersQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation RemoveForumEventSticker($forumEventId: String!, $stickerId: String!) {\n      RemoveForumEventSticker(forumEventId: $forumEventId, stickerId: $stickerId)\n    }\n  "): (typeof documents)["\n    mutation RemoveForumEventSticker($forumEventId: String!, $stickerId: String!) {\n      RemoveForumEventSticker(forumEventId: $forumEventId, stickerId: $stickerId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiForumEventForumEventsListQuery($selector: ForumEventSelector, $limit: Int, $enableTotal: Boolean) {\n    forumEvents(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ForumEventsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiForumEventForumEventsListQuery($selector: ForumEventSelector, $limit: Int, $enableTotal: Boolean) {\n    forumEvents(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ForumEventsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query MultiPostAnalyticsQuery($userId: String, $postIds: [String], $sortBy: String, $desc: Boolean, $limit: Int) {\n      MultiPostAnalytics(userId: $userId, postIds: $postIds, sortBy: $sortBy, desc: $desc, limit: $limit) {\n        posts {\n          _id\n          title\n          slug\n          postedAt\n          views\n          uniqueViews\n          reads\n          meanReadingTime\n          karma\n          comments\n        }\n        totalCount\n      }\n    }\n  "): (typeof documents)["\n    query MultiPostAnalyticsQuery($userId: String, $postIds: [String], $sortBy: String, $desc: Boolean, $limit: Int) {\n      MultiPostAnalytics(userId: $userId, postIds: $postIds, sortBy: $sortBy, desc: $desc, limit: $limit) {\n        posts {\n          _id\n          title\n          slug\n          postedAt\n          views\n          uniqueViews\n          reads\n          meanReadingTime\n          karma\n          comments\n        }\n        totalCount\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query AnalyticsSeriesQuery($userId: String, $postIds: [String], $startDate: Date, $endDate: Date) {\n      AnalyticsSeries(userId: $userId, postIds: $postIds, startDate: $startDate, endDate: $endDate) {\n        date\n        views\n        reads\n        karma\n        comments\n      }\n    }\n  "): (typeof documents)["\n    query AnalyticsSeriesQuery($userId: String, $postIds: [String], $startDate: Date, $endDate: Date) {\n      AnalyticsSeries(userId: $userId, postIds: $postIds, startDate: $startDate, endDate: $endDate) {\n        date\n        views\n        reads\n        karma\n        comments\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiBookmarkuseBookmarkQuery($selector: BookmarkSelector, $limit: Int, $enableTotal: Boolean) {\n    bookmarks(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...BookmarksDefaultFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiBookmarkuseBookmarkQuery($selector: BookmarkSelector, $limit: Int, $enableTotal: Boolean) {\n    bookmarks(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...BookmarksDefaultFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation ToggleBookmarkMutation($input: ToggleBookmarkInput!) {\n      toggleBookmark(input: $input) {\n        data {\n          ...BookmarksDefaultFragment\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation ToggleBookmarkMutation($input: ToggleBookmarkInput!) {\n      toggleBookmark(input: $input) {\n        data {\n          ...BookmarksDefaultFragment\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiForumEventuseCurrentForumEventQuery($selector: ForumEventSelector, $limit: Int, $enableTotal: Boolean) {\n    forumEvents(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ForumEventsDisplay\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiForumEventuseCurrentForumEventQuery($selector: ForumEventSelector, $limit: Int, $enableTotal: Boolean) {\n    forumEvents(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ForumEventsDisplay\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query CurrentFrontpageSurvey {\n      CurrentFrontpageSurvey {\n        ...SurveyScheduleMinimumInfo\n      }\n    }\n  "): (typeof documents)["\n    query CurrentFrontpageSurvey {\n      CurrentFrontpageSurvey {\n        ...SurveyScheduleMinimumInfo\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation UserExpandFrontpageSection($section: String!, $expanded: Boolean!) {\n        UserExpandFrontpageSection(section: $section, expanded: $expanded)\n      }\n    "): (typeof documents)["\n      mutation UserExpandFrontpageSection($section: String!, $expanded: Boolean!) {\n        UserExpandFrontpageSection(section: $section, expanded: $expanded)\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCrosspostQuery($args: JSON) {\n    getCrosspost(args: $args)\n  }\n"): (typeof documents)["\n  query GetCrosspostQuery($args: JSON) {\n    getCrosspost(args: $args)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation initiateConversation($participantIds: [String!]!, $af: Boolean, $moderator: Boolean) {\n      initiateConversation(participantIds: $participantIds, af: $af, moderator: $moderator) {\n        ...ConversationsMinimumInfo\n      }\n    }\n  "): (typeof documents)["\n    mutation initiateConversation($participantIds: [String!]!, $af: Boolean, $moderator: Boolean) {\n      initiateConversation(participantIds: $participantIds, af: $af, moderator: $moderator) {\n        ...ConversationsMinimumInfo\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation markConversationRead($conversationId: String!) {\n        markConversationRead(conversationId: $conversationId)\n      }\n    "): (typeof documents)["\n      mutation markConversationRead($conversationId: String!) {\n        markConversationRead(conversationId: $conversationId)\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiSubscriptionuseNotifyMeQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SubscriptionState\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiSubscriptionuseNotifyMeQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SubscriptionState\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createSubscriptionuseNotifyMe($data: CreateSubscriptionDataInput!) {\n    createSubscription(data: $data) {\n      data {\n        ...SubscriptionState\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createSubscriptionuseNotifyMe($data: CreateSubscriptionDataInput!) {\n    createSubscription(data: $data) {\n      data {\n        ...SubscriptionState\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query PostAnalyticsQuery($postId: String!) {\n      PostAnalytics(postId: $postId) {\n        allViews\n        uniqueClientViews\n        uniqueClientViews10Sec\n        medianReadingTime\n        uniqueClientViews5Min\n        uniqueClientViewsSeries {\n          date\n          uniqueClientViews\n        }\n      }\n    }\n  "): (typeof documents)["\n    query PostAnalyticsQuery($postId: String!) {\n      PostAnalytics(postId: $postId) {\n        allViews\n        uniqueClientViews\n        uniqueClientViews10Sec\n        medianReadingTime\n        uniqueClientViews5Min\n        uniqueClientViewsSeries {\n          date\n          uniqueClientViews\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostusePublishedPostsQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshinePostsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostusePublishedPostsQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshinePostsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query RecentOpportunitiesQuery($selector: PostSelector, $limit: Int) {\n    posts(selector: $selector, limit: $limit) {\n      results {\n        ...PostsListWithVotes\n      }\n    }\n  }\n"): (typeof documents)["\n  query RecentOpportunitiesQuery($selector: PostSelector, $limit: Int) {\n    posts(selector: $selector, limit: $limit) {\n      results {\n        ...PostsListWithVotes\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query RecentOpportunitiesWithSequenceQuery($selector: PostSelector, $limit: Int) {\n    posts(selector: $selector, limit: $limit) {\n      results {\n        ...PostsListWithVotesAndSequence\n      }\n    }\n  }\n"): (typeof documents)["\n  query RecentOpportunitiesWithSequenceQuery($selector: PostSelector, $limit: Int) {\n    posts(selector: $selector, limit: $limit) {\n      results {\n        ...PostsListWithVotesAndSequence\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation increasePostViewCountMutation($postId: String) {\n      increasePostViewCount(postId: $postId)\n    }\n  "): (typeof documents)["\n    mutation increasePostViewCountMutation($postId: String) {\n      increasePostViewCount(postId: $postId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation sendVertexViewItemEventMutation($postId: String!, $attributionId: String) {\n      sendVertexViewItemEvent(postId: $postId, attributionId: $attributionId)\n    }\n  "): (typeof documents)["\n    mutation sendVertexViewItemEventMutation($postId: String!, $attributionId: String) {\n      sendVertexViewItemEvent(postId: $postId, attributionId: $attributionId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation markPostCommentsRead($postId: String!) {\n      markPostCommentsRead(postId: $postId)\n    }\n  "): (typeof documents)["\n    mutation markPostCommentsRead($postId: String!) {\n      markPostCommentsRead(postId: $postId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation RefreshDbSettings {\n      RefreshDbSettings\n    }\n  "): (typeof documents)["\n    mutation RefreshDbSettings {\n      RefreshDbSettings\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation rejectPostMutation($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...SunshinePostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation rejectPostMutation($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...SunshinePostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation rejectCommentMutation($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation rejectCommentMutation($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiMultiDocumentuseTagOrLensQuery($selector: MultiDocumentSelector, $limit: Int, $enableTotal: Boolean) {\n    multiDocuments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...MultiDocumentParentDocument\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiMultiDocumentuseTagOrLensQuery($selector: MultiDocumentSelector, $limit: Int, $enableTotal: Boolean) {\n    multiDocuments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...MultiDocumentParentDocument\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query UnreadNotificationCountQuery {\n      unreadNotificationCounts {\n        unreadNotifications\n        unreadPrivateMessages\n        faviconBadgeNumber\n        checkedAt\n      }\n    }\n  "): (typeof documents)["\n    query UnreadNotificationCountQuery {\n      unreadNotificationCounts {\n        unreadNotifications\n        unreadPrivateMessages\n        faviconBadgeNumber\n        checkedAt\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUseruseUpdateCurrentUser($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUseruseUpdateCurrentUser($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUseruseUpdateGlossaryPinnedState($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUseruseUpdateGlossaryPinnedState($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiJargonTermGlossaryEditFormQuery($selector: JargonTermSelector, $limit: Int, $enableTotal: Boolean) {\n    jargonTerms(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...JargonTerms\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiJargonTermGlossaryEditFormQuery($selector: JargonTermSelector, $limit: Int, $enableTotal: Boolean) {\n    jargonTerms(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...JargonTerms\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateJargonTermGlossaryEditForm1($selector: SelectorInput!, $data: UpdateJargonTermDataInput!) {\n    updateJargonTerm(selector: $selector, data: $data) {\n      data {\n        ...JargonTerms\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateJargonTermGlossaryEditForm1($selector: SelectorInput!, $data: UpdateJargonTermDataInput!) {\n    updateJargonTerm(selector: $selector, data: $data) {\n      data {\n        ...JargonTerms\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostGlossaryEditForm($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostGlossaryEditForm($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation getNewJargonTerms($postId: String!, $glossaryPrompt: String, $examplePost: String, $exampleTerm: String, $exampleAltTerm: String, $exampleDefinition: String) {\n      getNewJargonTerms(postId: $postId, glossaryPrompt: $glossaryPrompt, examplePost: $examplePost, exampleTerm: $exampleTerm, exampleAltTerm: $exampleAltTerm, exampleDefinition: $exampleDefinition) {\n        ...JargonTerms\n      }\n    }\n  "): (typeof documents)["\n    mutation getNewJargonTerms($postId: String!, $glossaryPrompt: String, $examplePost: String, $exampleTerm: String, $exampleAltTerm: String, $exampleDefinition: String) {\n      getNewJargonTerms(postId: $postId, glossaryPrompt: $glossaryPrompt, examplePost: $examplePost, exampleTerm: $exampleTerm, exampleAltTerm: $exampleAltTerm, exampleDefinition: $exampleDefinition) {\n        ...JargonTerms\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostGlossaryEditorPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean, $version: String) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsEditQueryFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostGlossaryEditorPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean, $version: String) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsEditQueryFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateJargonTermJargonEditorRow($selector: SelectorInput!, $data: UpdateJargonTermDataInput!) {\n    updateJargonTerm(selector: $selector, data: $data) {\n      data {\n        ...JargonTerms\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateJargonTermJargonEditorRow($selector: SelectorInput!, $data: UpdateJargonTermDataInput!) {\n    updateJargonTerm(selector: $selector, data: $data) {\n      data {\n        ...JargonTerms\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateJargonTermJargonTermForm($selector: SelectorInput!, $data: UpdateJargonTermDataInput!) {\n    updateJargonTerm(selector: $selector, data: $data) {\n      data {\n        ...JargonTerms\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateJargonTermJargonTermForm($selector: SelectorInput!, $data: UpdateJargonTermDataInput!) {\n    updateJargonTerm(selector: $selector, data: $data) {\n      data {\n        ...JargonTerms\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createJargonTermJargonTermForm($data: CreateJargonTermDataInput!) {\n    createJargonTerm(data: $data) {\n      data {\n        ...JargonTerms\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createJargonTermJargonTermForm($data: CreateJargonTermDataInput!) {\n    createJargonTerm(data: $data) {\n      data {\n        ...JargonTerms\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getPostsWithApprovedJargon($limit: Int!) {\n      PostsWithApprovedJargon(limit: $limit) {\n        results {\n          post {\n            ...PostsListWithVotes\n          }\n          jargonTerms {\n            ...JargonTerms\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query getPostsWithApprovedJargon($limit: Int!) {\n      PostsWithApprovedJargon(limit: $limit) {\n        results {\n          post {\n            ...PostsListWithVotes\n          }\n          jargonTerms {\n            ...JargonTerms\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentAutocompleteModelSettingsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentAutocompleteModelSettingsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostAutocompleteModelSettingsQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostAutocompleteModelSettingsQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiLlmConversationLlmChatWrapperQuery($selector: LlmConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    llmConversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...LlmConversationsFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiLlmConversationLlmChatWrapperQuery($selector: LlmConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    llmConversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...LlmConversationsFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateLlmConversationLlmChatWrapper($selector: SelectorInput!, $data: UpdateLlmConversationDataInput!) {\n    updateLlmConversation(selector: $selector, data: $data) {\n      data {\n        ...LlmConversationsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateLlmConversationLlmChatWrapper($selector: SelectorInput!, $data: UpdateLlmConversationDataInput!) {\n    updateLlmConversation(selector: $selector, data: $data) {\n      data {\n        ...LlmConversationsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query LlmChatWrapper($documentId: String) {\n    llmConversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...LlmConversationsWithMessagesFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query LlmChatWrapper($documentId: String) {\n    llmConversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...LlmConversationsWithMessagesFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiLlmConversationLlmConversationsViewingPageQuery($selector: LlmConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    llmConversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...LlmConversationsViewingPageFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiLlmConversationLlmConversationsViewingPageQuery($selector: LlmConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    llmConversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...LlmConversationsViewingPageFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query LlmConversationsViewingPage($documentId: String) {\n    llmConversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...LlmConversationsWithMessagesFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query LlmConversationsViewingPage($documentId: String) {\n    llmConversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...LlmConversationsWithMessagesFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostSummaryDialog($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostWithGeneratedSummary\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostSummaryDialog($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostWithGeneratedSummary\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostLinkPreviewSequence($documentId: String, $allowNull: Boolean) {\n    sequence(input: { selector: { documentId: $documentId }, allowNull: $allowNull }) {\n      result {\n        ...SequencesPageFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostLinkPreviewSequence($documentId: String, $allowNull: Boolean) {\n    sequence(input: { selector: { documentId: $documentId }, allowNull: $allowNull }) {\n      result {\n        ...SequencesPageFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostLinkPreviewComment($documentId: String, $allowNull: Boolean) {\n    comment(input: { selector: { documentId: $documentId }, allowNull: $allowNull }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostLinkPreviewComment($documentId: String, $allowNull: Boolean) {\n    comment(input: { selector: { documentId: $documentId }, allowNull: $allowNull }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostLinkPreviewPost($documentId: String, $allowNull: Boolean) {\n    post(input: { selector: { documentId: $documentId }, allowNull: $allowNull }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostLinkPreviewPost($documentId: String, $allowNull: Boolean) {\n    post(input: { selector: { documentId: $documentId }, allowNull: $allowNull }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ArbitalPageRequest($arbitalSlug: String!) {\n      ArbitalPageData(pageAlias: $arbitalSlug) {\n        title\n        html\n      }\n    }\n  "): (typeof documents)["\n    query ArbitalPageRequest($arbitalSlug: String!) {\n      ArbitalPageData(pageAlias: $arbitalSlug) {\n        title\n        html\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserCommunityHome($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersProfile\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserCommunityHome($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersProfile\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserCommunityMapQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMapEntry\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserCommunityMapQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMapEntry\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiLocalgroupCommunityMapQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiLocalgroupCommunityMapQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostCommunityMapQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostCommunityMapQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateLocalgroupGroupFormDialog($selector: SelectorInput!, $data: UpdateLocalgroupDataInput!) {\n    updateLocalgroup(selector: $selector, data: $data) {\n      data {\n        ...localGroupsHomeFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateLocalgroupGroupFormDialog($selector: SelectorInput!, $data: UpdateLocalgroupDataInput!) {\n    updateLocalgroup(selector: $selector, data: $data) {\n      data {\n        ...localGroupsHomeFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createLocalgroupGroupFormDialog($data: CreateLocalgroupDataInput!) {\n    createLocalgroup(data: $data) {\n      data {\n        ...localGroupsHomeFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createLocalgroupGroupFormDialog($data: CreateLocalgroupDataInput!) {\n    createLocalgroup(data: $data) {\n      data {\n        ...localGroupsHomeFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GroupFormDialog($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  query GroupFormDialog($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostLocalGroupPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostLocalGroupPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query LocalGroupPage($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsHomeFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query LocalGroupPage($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsHomeFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiSubscriptionLocalGroupSubscribersQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...MembersOfGroupFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiSubscriptionLocalGroupSubscribersQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...MembersOfGroupFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiLocalgroupLocalGroupsListQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiLocalgroupLocalGroupsListQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SetPersonalMapLocationDialog($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  query SetPersonalMapLocationDialog($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostTabNavigationEventsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostTabNavigationEventsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiMessageConversationContentsQuery($selector: MessageSelector, $limit: Int, $enableTotal: Boolean) {\n    messages(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...messageListFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiMessageConversationContentsQuery($selector: MessageSelector, $limit: Int, $enableTotal: Boolean) {\n    messages(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...messageListFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateConversationInboxNavigation($selector: SelectorInput!, $data: UpdateConversationDataInput!) {\n    updateConversation(selector: $selector, data: $data) {\n      data {\n        ...ConversationsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateConversationInboxNavigation($selector: SelectorInput!, $data: UpdateConversationDataInput!) {\n    updateConversation(selector: $selector, data: $data) {\n      data {\n        ...ConversationsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ConversationPage($documentId: String) {\n    conversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ConversationsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query ConversationPage($documentId: String) {\n    conversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ConversationsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiMessageConversationPreviewQuery($selector: MessageSelector, $limit: Int, $enableTotal: Boolean) {\n    messages(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...messageListFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiMessageConversationPreviewQuery($selector: MessageSelector, $limit: Int, $enableTotal: Boolean) {\n    messages(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...messageListFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ConversationPreview($documentId: String) {\n    conversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ConversationsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query ConversationPreview($documentId: String) {\n    conversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ConversationsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateConversationConversationTitleEditForm($selector: SelectorInput!, $data: UpdateConversationDataInput!) {\n    updateConversation(selector: $selector, data: $data) {\n      data {\n        ...ConversationsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateConversationConversationTitleEditForm($selector: SelectorInput!, $data: UpdateConversationDataInput!) {\n    updateConversation(selector: $selector, data: $data) {\n      data {\n        ...ConversationsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiConversationFriendlyInboxQuery($selector: ConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    conversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ConversationsListWithReadStatus\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiConversationFriendlyInboxQuery($selector: ConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    conversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ConversationsListWithReadStatus\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FriendlyInbox($documentId: String) {\n    conversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ConversationsListWithReadStatus\n      }\n    }\n  }\n"): (typeof documents)["\n  query FriendlyInbox($documentId: String) {\n    conversation(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ConversationsListWithReadStatus\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiConversationInboxNavigationQuery($selector: ConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    conversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ConversationsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiConversationInboxNavigationQuery($selector: ConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    conversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ConversationsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MessageUserGetUserBySlug($slug: String!) {\n    GetUserBySlug(slug: $slug) {\n      ...UsersMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  query MessageUserGetUserBySlug($slug: String!) {\n    GetUserBySlug(slug: $slug) {\n      ...UsersMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createMessageMessagesNewForm($data: CreateMessageDataInput!) {\n    createMessage(data: $data) {\n      data {\n        ...messageListFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createMessageMessagesNewForm($data: CreateMessageDataInput!) {\n    createMessage(data: $data) {\n      data {\n        ...messageListFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MessagesNewForm($documentId: String) {\n    moderationTemplate(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ModerationTemplateFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query MessagesNewForm($documentId: String) {\n    moderationTemplate(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ModerationTemplateFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateModerationTemplateModerationTemplateForm($selector: SelectorInput!, $data: UpdateModerationTemplateDataInput!) {\n    updateModerationTemplate(selector: $selector, data: $data) {\n      data {\n        ...ModerationTemplateFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateModerationTemplateModerationTemplateForm($selector: SelectorInput!, $data: UpdateModerationTemplateDataInput!) {\n    updateModerationTemplate(selector: $selector, data: $data) {\n      data {\n        ...ModerationTemplateFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createModerationTemplateModerationTemplateForm($data: CreateModerationTemplateDataInput!) {\n    createModerationTemplate(data: $data) {\n      data {\n        ...ModerationTemplateFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createModerationTemplateModerationTemplateForm($data: CreateModerationTemplateDataInput!) {\n    createModerationTemplate(data: $data) {\n      data {\n        ...ModerationTemplateFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiModerationTemplateModerationTemplatesPageQuery($selector: ModerationTemplateSelector, $limit: Int, $enableTotal: Boolean) {\n    moderationTemplates(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModerationTemplateFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiModerationTemplateModerationTemplatesPageQuery($selector: ModerationTemplateSelector, $limit: Int, $enableTotal: Boolean) {\n    moderationTemplates(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModerationTemplateFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CommentOnYourDraftNotificationHover($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query CommentOnYourDraftNotificationHover($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query EmailPreviewQuery($notificationIds: [String], $postId: String) {\n        EmailPreview(notificationIds: $notificationIds, postId: $postId) { to subject html text }\n      }\n  "): (typeof documents)["\n      query EmailPreviewQuery($notificationIds: [String], $postId: String) {\n        EmailPreview(notificationIds: $notificationIds, postId: $postId) { to subject html text }\n      }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiNotificationNotificationsListQuery($selector: NotificationSelector, $limit: Int, $enableTotal: Boolean) {\n    notifications(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...NotificationsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiNotificationNotificationsListQuery($selector: NotificationSelector, $limit: Int, $enableTotal: Boolean) {\n    notifications(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...NotificationsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query NotificationsMenuButton($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UserKarmaChanges\n      }\n    }\n  }\n"): (typeof documents)["\n  query NotificationsMenuButton($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UserKarmaChanges\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query NotificationsPage($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UserKarmaChanges\n      }\n    }\n  }\n"): (typeof documents)["\n  query NotificationsPage($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UserKarmaChanges\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query NotificationsPageItem($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n"): (typeof documents)["\n  query NotificationsPageItem($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getNotificationDisplays($limit: Int, $type: String) {\n      NotificationDisplays(limit: $limit, type: $type) {\n        results\n      }\n    }\n  "): (typeof documents)["\n    query getNotificationDisplays($limit: Int, $type: String) {\n      NotificationDisplays(limit: $limit, type: $type) {\n        results\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation MarkAllNotificationsAsRead {\n      MarkAllNotificationsAsRead\n    }\n  "): (typeof documents)["\n    mutation MarkAllNotificationsAsRead {\n      MarkAllNotificationsAsRead\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateNotificationNotificationsPopoverNotification($selector: SelectorInput!, $data: UpdateNotificationDataInput!) {\n    updateNotification(selector: $selector, data: $data) {\n      data {\n        ...NotificationsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateNotificationNotificationsPopoverNotification($selector: SelectorInput!, $data: UpdateNotificationDataInput!) {\n    updateNotification(selector: $selector, data: $data) {\n      data {\n        ...NotificationsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TagRelNotificationItem($documentId: String) {\n    tagRel(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagRelFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query TagRelNotificationItem($documentId: String) {\n    tagRel(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagRelFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserAdminPaymentsPageQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserAdminPaymentsPageQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserEditPaymentInfoPage($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserEditPaymentInfoPage($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagusePeopleDirectoryQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagName\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagusePeopleDirectoryQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagName\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ActiveTagCount {\n      ActiveTagCount\n    }\n  "): (typeof documents)["\n    query ActiveTagCount {\n      ActiveTagCount\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AddToCalendarButton($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsPlaintextDescription\n      }\n    }\n  }\n"): (typeof documents)["\n  query AddToCalendarButton($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsPlaintextDescription\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostCurrentOpenThreadPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostCurrentOpenThreadPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostDraftsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostDraftsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostDraftsList($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostDraftsList($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostExternalPostImporter($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostExternalPostImporter($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createCommentExternalPostImporter($data: CreateCommentDataInput!) {\n    createComment(data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createCommentExternalPostImporter($data: CreateCommentDataInput!) {\n    createComment(data: $data) {\n      data {\n        ...CommentsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation importUrlAsDraftPost($url: String!) {\n      importUrlAsDraftPost(url: $url) {\n        alreadyExists\n        post {\n          _id\n          slug\n          title\n          content\n          url\n          postedAt\n          createdAt\n          modifiedAt\n          userId\n          draft\n          coauthorStatuses {\n            userId\n            confirmed\n            requested\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation importUrlAsDraftPost($url: String!) {\n      importUrlAsDraftPost(url: $url) {\n        alreadyExists\n        post {\n          _id\n          slug\n          title\n          content\n          url\n          postedAt\n          createdAt\n          modifiedAt\n          userId\n          draft\n          coauthorStatuses {\n            userId\n            confirmed\n            requested\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FeedPostsHighlight($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsExpandedHighlight\n      }\n    }\n  }\n"): (typeof documents)["\n  query FeedPostsHighlight($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsExpandedHighlight\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiGoogleServiceAccountSessionGoogleDocImportButtonQuery($selector: GoogleServiceAccountSessionSelector, $limit: Int, $enableTotal: Boolean) {\n    googleServiceAccountSessions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...GoogleServiceAccountSessionInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiGoogleServiceAccountSessionGoogleDocImportButtonQuery($selector: GoogleServiceAccountSessionSelector, $limit: Int, $enableTotal: Boolean) {\n    googleServiceAccountSessions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...GoogleServiceAccountSessionInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query latestGoogleDocMetadata($postId: String!, $version: String) {\n        latestGoogleDocMetadata(postId: $postId, version: $version)\n      }\n    "): (typeof documents)["\n      query latestGoogleDocMetadata($postId: String!, $version: String) {\n        latestGoogleDocMetadata(postId: $postId, version: $version)\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query CanAccessGoogleDoc($fileUrl: String!) {\n        CanAccessGoogleDoc(fileUrl: $fileUrl)\n      }\n    "): (typeof documents)["\n      query CanAccessGoogleDoc($fileUrl: String!) {\n        CanAccessGoogleDoc(fileUrl: $fileUrl)\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation ImportGoogleDoc($fileUrl: String!, $postId: String) {\n        ImportGoogleDoc(fileUrl: $fileUrl, postId: $postId) {\n          ...PostsBase\n        }\n      }\n    "): (typeof documents)["\n      mutation ImportGoogleDoc($fileUrl: String!, $postId: String) {\n        ImportGoogleDoc(fileUrl: $fileUrl, postId: $postId) {\n          ...PostsBase\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostLWPostsByVoteQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostLWPostsByVoteQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createPostNewDialogueDialog($data: CreatePostDataInput!) {\n    createPost(data: $data) {\n      data {\n        ...PostsEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createPostNewDialogueDialog($data: CreatePostDataInput!) {\n    createPost(data: $data) {\n      data {\n        ...PostsEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostPingbacksListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostPingbacksListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostPostForm($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsEditMutationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostPostForm($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsEditMutationFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createPostPostForm($data: CreatePostDataInput!) {\n    createPost(data: $data) {\n      data {\n        ...PostsEditMutationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createPostPostForm($data: CreatePostDataInput!) {\n    createPost(data: $data) {\n      data {\n        ...PostsEditMutationFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserMostValuablePostPostMostValuableCheckboxQuery($selector: UserMostValuablePostSelector, $limit: Int, $enableTotal: Boolean) {\n    userMostValuablePosts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserMostValuablePostInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserMostValuablePostPostMostValuableCheckboxQuery($selector: UserMostValuablePostSelector, $limit: Int, $enableTotal: Boolean) {\n    userMostValuablePosts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserMostValuablePostInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserMostValuablePostPostMostValuableCheckbox($selector: SelectorInput!, $data: UpdateUserMostValuablePostDataInput!) {\n    updateUserMostValuablePost(selector: $selector, data: $data) {\n      data {\n        ...UserMostValuablePostInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserMostValuablePostPostMostValuableCheckbox($selector: SelectorInput!, $data: UpdateUserMostValuablePostDataInput!) {\n    updateUserMostValuablePost(selector: $selector, data: $data) {\n      data {\n        ...UserMostValuablePostInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createUserMostValuablePostPostMostValuableCheckbox($data: CreateUserMostValuablePostDataInput!) {\n    createUserMostValuablePost(data: $data) {\n      data {\n        ...UserMostValuablePostInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createUserMostValuablePostPostMostValuableCheckbox($data: CreateUserMostValuablePostDataInput!) {\n    createUserMostValuablePost(data: $data) {\n      data {\n        ...UserMostValuablePostInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostPostsByVoteQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostPostsByVoteQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiVotePostsByVoteWrapperQuery($selector: VoteSelector, $limit: Int, $enableTotal: Boolean) {\n    votes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserVotes\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiVotePostsByVoteWrapperQuery($selector: VoteSelector, $limit: Int, $enableTotal: Boolean) {\n    votes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserVotes\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiRevisionPostsCompareRevisionsQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionHistoryEntry\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiRevisionPostsCompareRevisionsQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionHistoryEntry\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsCompareRevisions($documentId: String, $sequenceId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsWithNavigation\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsCompareRevisions($documentId: String, $sequenceId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsWithNavigation\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentPostsDialogItemNewCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentPostsDialogItemNewCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsEditFormUser($documentId: String, $eventForm: Boolean) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersCurrentPostRateLimit\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsEditFormUser($documentId: String, $eventForm: Boolean) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersCurrentPostRateLimit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsEditFormPost($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsEditQueryFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsEditFormPost($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsEditQueryFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsGroupDetails($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsHomeFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsGroupDetails($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsHomeFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsHighlight($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsExpandedHighlight\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsHighlight($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsExpandedHighlight\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentPostsItemNewCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentPostsItemNewCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query LatestDialogueMessages($dialogueId: String!, $unreadCount: Int!) {\n      latestDialogueMessages(dialogueId: $dialogueId, numMessages: $unreadCount)\n    }\n  "): (typeof documents)["\n    query LatestDialogueMessages($dialogueId: String!, $unreadCount: Int!) {\n      latestDialogueMessages(dialogueId: $dialogueId, numMessages: $unreadCount)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsItemWrapper($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsItemWrapper($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createPostPostsNewForm($data: CreatePostDataInput!) {\n    createPost(data: $data) {\n      data {\n        ...PostsEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createPostPostsNewForm($data: CreatePostDataInput!) {\n    createPost(data: $data) {\n      data {\n        ...PostsEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsNewForm4($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsNewForm4($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsNewForm3($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsEditMutationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsNewForm3($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsEditMutationFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsNewForm2($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsIsOnline\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsNewForm2($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsIsOnline\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsNewForm1($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsEditQueryFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsNewForm1($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsEditQueryFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsNewForm($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsNewForm($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiReviewWinnerBestOfLessWrongAnnouncementQuery($selector: ReviewWinnerSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewWinners(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ReviewWinnerAnnouncement\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiReviewWinnerBestOfLessWrongAnnouncementQuery($selector: ReviewWinnerSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewWinners(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ReviewWinnerAnnouncement\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createSplashArtCoordinateImageCropPreview($data: CreateSplashArtCoordinateDataInput!) {\n    createSplashArtCoordinate(data: $data) {\n      data {\n        ...SplashArtCoordinates\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createSplashArtCoordinateImageCropPreview($data: CreateSplashArtCoordinateDataInput!) {\n    createSplashArtCoordinate(data: $data) {\n      data {\n        ...SplashArtCoordinates\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createSplashArtCoordinatePostWithArtGrid($data: CreateSplashArtCoordinateDataInput!) {\n    createSplashArtCoordinate(data: $data) {\n      data {\n        ...SplashArtCoordinatesEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createSplashArtCoordinatePostWithArtGrid($data: CreateSplashArtCoordinateDataInput!) {\n    createSplashArtCoordinate(data: $data) {\n      data {\n        ...SplashArtCoordinatesEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentReviewPillContainerQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentWithRepliesFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentReviewPillContainerQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentWithRepliesFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation flipSplashArtImage($reviewWinnerArtId: String!) {\n      flipSplashArtImage(reviewWinnerArtId: $reviewWinnerArtId)\n    }\n  "): (typeof documents)["\n    mutation flipSplashArtImage($reviewWinnerArtId: String!) {\n      flipSplashArtImage(reviewWinnerArtId: $reviewWinnerArtId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiReviewWinnerArtSplashImageEditingOptionsQuery($selector: ReviewWinnerArtSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewWinnerArts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ReviewWinnerArtImages\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiReviewWinnerArtSplashImageEditingOptionsQuery($selector: ReviewWinnerArtSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewWinnerArts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ReviewWinnerArtImages\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostBody($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostSideComments\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostBody($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostSideComments\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation AcceptCoauthorRequest($postId: String, $userId: String, $accept: Boolean) {\n        acceptCoauthorRequest(postId: $postId, userId: $userId, accept: $accept) {\n          ...PostsDetails\n        }\n    }\n  "): (typeof documents)["\n    mutation AcceptCoauthorRequest($postId: String, $userId: String, $accept: Boolean) {\n        acceptCoauthorRequest(postId: $postId, userId: $userId, accept: $accept) {\n          ...PostsDetails\n        }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentPostsPageQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentPostsPageQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query postCommentsThreadQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query postCommentsThreadQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsPageWrapper1($documentId: String, $sequenceId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsWithNavigationAndRevision\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsPageWrapper1($documentId: String, $sequenceId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsWithNavigationAndRevision\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsPageWrapper($documentId: String, $sequenceId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsWithNavigation\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsPageWrapper($documentId: String, $sequenceId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsWithNavigation\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsRevisionsList($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsRevisionsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsRevisionsList($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsRevisionsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation RegisterRSVP($postId: String, $name: String, $email: String, $private: Boolean, $response: String) {\n        RSVPToEvent(postId: $postId, name: $name, email: $email, private: $private, response: $response) {\n        ...PostsDetails\n        }\n    }\n  "): (typeof documents)["\n    mutation RegisterRSVP($postId: String, $name: String, $email: String, $private: Boolean, $response: String) {\n        RSVPToEvent(postId: $postId, name: $name, email: $email, private: $private, response: $response) {\n        ...PostsDetails\n        }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation CancelRSVPToEvent($postId: String, $name: String, $userId: String) {\n        CancelRSVPToEvent(postId: $postId, name: $name, userId: $userId) {\n        ...PostsDetails\n        }\n    }\n  "): (typeof documents)["\n    mutation CancelRSVPToEvent($postId: String, $name: String, $userId: String) {\n        CancelRSVPToEvent(postId: $postId, name: $name, userId: $userId) {\n        ...PostsDetails\n        }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query LWPostsPreviewTooltip1($documentId: String, $dialogueMessageId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostWithDialogueMessage\n      }\n    }\n  }\n"): (typeof documents)["\n  query LWPostsPreviewTooltip1($documentId: String, $dialogueMessageId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostWithDialogueMessage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query LWPostsPreviewTooltip($documentId: String, $hash: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...HighlightWithHash\n      }\n    }\n  }\n"): (typeof documents)["\n  query LWPostsPreviewTooltip($documentId: String, $hash: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...HighlightWithHash\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsPreviewTooltipSingle4($documentId: String) {\n    tagRel(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagRelFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsPreviewTooltipSingle4($documentId: String) {\n    tagRel(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagRelFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsPreviewTooltipSingle3($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsPreviewTooltipSingle3($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsPreviewTooltipSingle($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsPreviewTooltipSingle($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostPostsTimeBlockQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostPostsTimeBlockQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getRecombeeLatestPosts($limit: Int, $settings: JSON) {\n    RecombeeLatestPosts(limit: $limit, settings: $settings) {\n      results {\n        post {\n          ...PostsListWithVotes\n        }\n        scenario\n        recommId\n        generatedAt\n        curated\n        stickied\n      }\n    }\n  }\n"): (typeof documents)["\n  query getRecombeeLatestPosts($limit: Int, $settings: JSON) {\n    RecombeeLatestPosts(limit: $limit, settings: $settings) {\n      results {\n        post {\n          ...PostsListWithVotes\n        }\n        scenario\n        recommId\n        generatedAt\n        curated\n        stickied\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getRecombeeHybridPosts($limit: Int, $settings: JSON) {\n    RecombeeHybridPosts(limit: $limit, settings: $settings) {\n      results {\n        post {\n          ...PostsListWithVotes\n        }\n        scenario\n        recommId\n        generatedAt\n        curated\n        stickied\n      }\n    }\n  }\n"): (typeof documents)["\n  query getRecombeeHybridPosts($limit: Int, $settings: JSON) {\n    RecombeeHybridPosts(limit: $limit, settings: $settings) {\n      results {\n        post {\n          ...PostsListWithVotes\n        }\n        scenario\n        recommId\n        generatedAt\n        curated\n        stickied\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createCommentDialogueSubmit($data: CreateCommentDataInput!) {\n    createComment(data: $data) {\n      data {\n        ...CommentEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createCommentDialogueSubmit($data: CreateCommentDataInput!) {\n    createComment(data: $data) {\n      data {\n        ...CommentEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostusePostQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsPage\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostusePostQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsPage\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query postsListWithVotes($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query postsListWithVotes($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query postsListTagWithVotes($selector: PostSelector, $limit: Int, $enableTotal: Boolean, $tagId: String) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListTagWithVotes\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query postsListTagWithVotes($selector: PostSelector, $limit: Int, $enableTotal: Boolean, $tagId: String) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListTagWithVotes\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentQuickTakesSectionQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentQuickTakesSectionQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTaguseQuickTakesTagsQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagPreviewFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTaguseQuickTakesTagsQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagPreviewFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostRecentDiscussionThreadsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean, $commentsLimit: Int, $maxAgeHours: Int, $af: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsRecentDiscussion\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostRecentDiscussionThreadsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean, $commentsLimit: Int, $maxAgeHours: Int, $af: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsRecentDiscussion\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query CuratedAndPopularThisWeek($limit: Int) {\n      CuratedAndPopularThisWeek(limit: $limit) {\n        results {\n          ...PostsListWithVotes\n        }\n      }\n    }\n  "): (typeof documents)["\n    query CuratedAndPopularThisWeek($limit: Int) {\n      CuratedAndPopularThisWeek(limit: $limit) {\n        results {\n          ...PostsListWithVotes\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostRecommendationsSamplePageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostRecommendationsSamplePageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query WelcomePostItem($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n"): (typeof documents)["\n  query WelcomePostItem($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation observeRecommendation($postId: String!) {\n        observeRecommendation(postId: $postId)\n      }\n    "): (typeof documents)["\n      mutation observeRecommendation($postId: String!) {\n        observeRecommendation(postId: $postId)\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation clickRecommendation($postId: String!) {\n        clickRecommendation(postId: $postId)\n      }\n    "): (typeof documents)["\n      mutation clickRecommendation($postId: String!) {\n        clickRecommendation(postId: $postId)\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ContinueReadingQuery {\n      ContinueReading {\n        sequence {\n          ...SequenceContinueReadingFragment\n        }\n        collection {\n          ...CollectionContinueReadingFragment\n        }\n        nextPost {\n          ...PostsListWithVotes\n        }\n        numRead\n        numTotal\n        lastReadTime\n      }\n    }\n  "): (typeof documents)["\n    query ContinueReadingQuery {\n      ContinueReading {\n        sequence {\n          ...SequenceContinueReadingFragment\n        }\n        collection {\n          ...CollectionContinueReadingFragment\n        }\n        nextPost {\n          ...PostsListWithVotes\n        }\n        numRead\n        numTotal\n        lastReadTime\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation dismissRecommendation($postId: String) {\n      dismissRecommendation(postId: $postId)\n    }\n  "): (typeof documents)["\n    mutation dismissRecommendation($postId: String) {\n      dismissRecommendation(postId: $postId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query RecommendationsQuery($count: Int, $algorithm: JSON) {\n        Recommendations(count: $count, algorithm: $algorithm) {\n          ...PostsListWithVotesAndSequence\n        }\n      }\n    "): (typeof documents)["\n      query RecommendationsQuery($count: Int, $algorithm: JSON) {\n        Recommendations(count: $count, algorithm: $algorithm) {\n          ...PostsListWithVotesAndSequence\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiReviewWinnerArtBestOfLessWrongAdminQuery($selector: ReviewWinnerArtSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewWinnerArts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ReviewWinnerArtImages\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiReviewWinnerArtBestOfLessWrongAdminQuery($selector: ReviewWinnerArtSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewWinnerArts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ReviewWinnerArtImages\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query BestOfLessWrongAdmin {\n      GetAllReviewWinners {\n        ...PostsTopItemInfo\n      }\n    }\n  "): (typeof documents)["\n    query BestOfLessWrongAdmin {\n      GetAllReviewWinners {\n        ...PostsTopItemInfo\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FrontpageBestOfLWWidget($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n"): (typeof documents)["\n  query FrontpageBestOfLWWidget($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation GenerateCoverImagesForPost($postId: String!, $prompt: String) {\n      generateCoverImagesForPost(postId: $postId, prompt: $prompt) { \n        _id\n      }\n    }\n  "): (typeof documents)["\n    mutation GenerateCoverImagesForPost($postId: String!, $prompt: String) {\n      generateCoverImagesForPost(postId: $postId, prompt: $prompt) { \n        _id\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentLatestReviewQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentLatestReviewQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostNominatedNotification($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostNominatedNotification($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query getPostsUserCommentedOn($limit: Int, $filter: PostReviewFilter, $sort: PostReviewSort) {\n        PostsUserCommentedOn(limit: $limit, filter: $filter, sort: $sort) {\n          posts {\n            ...PostsListWithVotes\n          }\n        }\n      }\n    "): (typeof documents)["\n      query getPostsUserCommentedOn($limit: Int, $filter: PostReviewFilter, $sort: PostReviewSort) {\n        PostsUserCommentedOn(limit: $limit, filter: $filter, sort: $sort) {\n          posts {\n            ...PostsListWithVotes\n          }\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostQuickReviewPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsReviewVotingList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostQuickReviewPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsReviewVotingList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostQuickReviewPage2022Query($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsReviewVotingList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostQuickReviewPage2022Query($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsReviewVotingList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiReviewVoteReviewAdminDashboardQuery($selector: ReviewVoteSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewVotes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...reviewAdminDashboard\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiReviewVoteReviewAdminDashboardQuery($selector: ReviewVoteSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewVotes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...reviewAdminDashboard\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentReviewPostCommentsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentWithRepliesFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentReviewPostCommentsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentWithRepliesFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentReviewProgressNominationsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentReviewProgressNominationsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentReviewProgressReviewsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentReviewProgressReviewsQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiReviewVoteReviewProgressVotingQuery($selector: ReviewVoteSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewVotes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...reviewVoteFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiReviewVoteReviewProgressVotingQuery($selector: ReviewVoteSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewVotes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...reviewVoteFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiReviewVoteReviewVotingCanvasQuery($selector: ReviewVoteSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewVotes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...reviewVoteFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiReviewVoteReviewVotingCanvasQuery($selector: ReviewVoteSelector, $limit: Int, $enableTotal: Boolean) {\n    reviewVotes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...reviewVoteFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GivingSeasonHeartsQuery($electionName: String!) {\n      GivingSeasonHearts(electionName: $electionName) {\n        userId\n        displayName\n        x\n        y\n        theta\n      }\n    }\n  "): (typeof documents)["\n    query GivingSeasonHeartsQuery($electionName: String!) {\n      GivingSeasonHearts(electionName: $electionName) {\n        userId\n        displayName\n        x\n        y\n        theta\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation AddGivingSeasonHeart(\n        $electionName: String!,\n        $x: Float!,\n        $y: Float!,\n        $theta: Float!\n      ) {\n        AddGivingSeasonHeart(\n          electionName: $electionName,\n          x: $x,\n          y: $y,\n          theta: $theta\n        ) {\n          userId\n          displayName\n          x\n          y\n          theta\n        }\n      }\n    "): (typeof documents)["\n      mutation AddGivingSeasonHeart(\n        $electionName: String!,\n        $x: Float!,\n        $y: Float!,\n        $theta: Float!\n      ) {\n        AddGivingSeasonHeart(\n          electionName: $electionName,\n          x: $x,\n          y: $y,\n          theta: $theta\n        ) {\n          userId\n          displayName\n          x\n          y\n          theta\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation RemoveGivingSeasonHeart($electionName: String!) {\n        RemoveGivingSeasonHeart(electionName: $electionName) {\n          userId\n          displayName\n          x\n          y\n          theta\n        }\n      }\n    "): (typeof documents)["\n      mutation RemoveGivingSeasonHeart($electionName: String!) {\n        RemoveGivingSeasonHeart(electionName: $electionName) {\n          userId\n          displayName\n          x\n          y\n          theta\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ReviewVotingExpandedPost($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query ReviewVotingExpandedPost($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostReviewVotingPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsReviewVotingList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostReviewVotingPageQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsReviewVotingList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation submitReviewVote($postId: String, $qualitativeScore: Int, $quadraticChange: Int, $newQuadraticScore: Int, $comment: String, $year: String, $dummy: Boolean) {\n      submitReviewVote(postId: $postId, qualitativeScore: $qualitativeScore, quadraticChange: $quadraticChange, comment: $comment, newQuadraticScore: $newQuadraticScore, year: $year, dummy: $dummy) {\n        ...PostsReviewVotingList\n      }\n    }\n  "): (typeof documents)["\n    mutation submitReviewVote($postId: String, $qualitativeScore: Int, $quadraticChange: Int, $newQuadraticScore: Int, $comment: String, $year: String, $dummy: Boolean) {\n      submitReviewVote(postId: $postId, qualitativeScore: $qualitativeScore, quadraticChange: $quadraticChange, comment: $comment, newQuadraticScore: $newQuadraticScore, year: $year, dummy: $dummy) {\n        ...PostsReviewVotingList\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserReviews2019($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserReviews2019($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentReviewsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentReviewsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query RotatingReviewWinnerSpotlightDisplay($documentId: String) {\n    spotlight(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SpotlightDisplay\n      }\n    }\n  }\n"): (typeof documents)["\n  query RotatingReviewWinnerSpotlightDisplay($documentId: String) {\n    spotlight(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SpotlightDisplay\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query RotatingReviewWinnerSpotlight {\n    GetAllReviewWinners {\n      ...PostForReviewWinnerItem\n    }\n  }\n"): (typeof documents)["\n  query RotatingReviewWinnerSpotlight {\n    GetAllReviewWinners {\n      ...PostForReviewWinnerItem\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentSingleLineReviewsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentSingleLineReviewsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserUserReviewsQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserUserReviewsQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateRevisionCompareRevisions($selector: SelectorInput!, $data: UpdateRevisionDataInput!) {\n    updateRevision(selector: $selector, data: $data) {\n      data {\n        ...RevisionEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateRevisionCompareRevisions($selector: SelectorInput!, $data: UpdateRevisionDataInput!) {\n    updateRevision(selector: $selector, data: $data) {\n      data {\n        ...RevisionEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query RevisionsDiff($collectionName: String!, $fieldName: String!, $id: String!, $beforeRev: String, $afterRev: String!, $trim: Boolean) {\n      RevisionsDiff(collectionName: $collectionName, fieldName: $fieldName, id: $id, beforeRev: $beforeRev, afterRev: $afterRev, trim: $trim)\n    }\n  "): (typeof documents)["\n    query RevisionsDiff($collectionName: String!, $fieldName: String!, $id: String!, $beforeRev: String, $afterRev: String!, $trim: Boolean) {\n      RevisionsDiff(collectionName: $collectionName, fieldName: $fieldName, id: $id, beforeRev: $beforeRev, afterRev: $afterRev, trim: $trim)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiRevisionPostsRevisionSelectQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionMetadataWithChangeMetrics\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiRevisionPostsRevisionSelectQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionMetadataWithChangeMetrics\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsRevisionSelect($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsRevisionSelect($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsDetails\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiRevisionTagPageRevisionSelectQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionHistoryEntry\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiRevisionTagPageRevisionSelectQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionHistoryEntry\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiRSSFeedNewFeedButtonQuery($selector: RSSFeedSelector, $limit: Int, $enableTotal: Boolean) {\n    rSSFeeds(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RSSFeedMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiRSSFeedNewFeedButtonQuery($selector: RSSFeedSelector, $limit: Int, $enableTotal: Boolean) {\n    rSSFeeds(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RSSFeedMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createRSSFeedNewFeedButton($data: CreateRSSFeedDataInput!) {\n    createRSSFeed(data: $data) {\n      data {\n        ...newRSSFeedFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createRSSFeedNewFeedButton($data: CreateRSSFeedDataInput!) {\n    createRSSFeed(data: $data) {\n      data {\n        ...newRSSFeedFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserAprilFools2022Query($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserAprilFools2022Query($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HomepageCommunityMap($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query HomepageCommunityMap($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation launchPetrovMissile($launchCode: String) {\n      PetrovDayLaunchMissile(launchCode: $launchCode) {\n        launchCode\n      }\n    }\n  "): (typeof documents)["\n    mutation launchPetrovMissile($launchCode: String) {\n      PetrovDayLaunchMissile(launchCode: $launchCode) {\n        launchCode\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query petrovDayLaunchResolvers {\n      PetrovDayCheckIfIncoming {\n        launched\n        createdAt\n      }\n    }\n  "): (typeof documents)["\n    query petrovDayLaunchResolvers {\n      PetrovDayCheckIfIncoming {\n        launched\n        createdAt\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPetrovDayActionOptIntoPetrovButtonQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPetrovDayActionOptIntoPetrovButtonQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createPetrovDayActionOptIntoPetrovButton($data: CreatePetrovDayActionDataInput!) {\n    createPetrovDayAction(data: $data) {\n      data {\n        ...PetrovDayActionInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createPetrovDayActionOptIntoPetrovButton($data: CreatePetrovDayActionDataInput!) {\n    createPetrovDayAction(data: $data) {\n      data {\n        ...PetrovDayActionInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPetrovDayActionPetrovAdminConsoleQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPetrovDayActionPetrovAdminConsoleQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPetrovDayActionPetrovGameWrapperQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPetrovDayActionPetrovGameWrapperQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query petrov2024checkIfNuked {\n      petrov2024checkIfNuked\n    }\n  "): (typeof documents)["\n    query petrov2024checkIfNuked {\n      petrov2024checkIfNuked\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPetrovDayActionPetrovLaunchConsoleQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPetrovDayActionPetrovLaunchConsoleQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createPetrovDayActionPetrovLaunchConsole($data: CreatePetrovDayActionDataInput!) {\n    createPetrovDayAction(data: $data) {\n      data {\n        ...PetrovDayActionInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createPetrovDayActionPetrovLaunchConsole($data: CreatePetrovDayActionDataInput!) {\n    createPetrovDayAction(data: $data) {\n      data {\n        ...PetrovDayActionInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPetrovDayActionPetrovWarningConsoleQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPetrovDayActionPetrovWarningConsoleQuery($selector: PetrovDayActionSelector, $limit: Int, $enableTotal: Boolean) {\n    petrovDayActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PetrovDayActionInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createPetrovDayActionPetrovWarningConsole($data: CreatePetrovDayActionDataInput!) {\n    createPetrovDayAction(data: $data) {\n      data {\n        ...PetrovDayActionInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createPetrovDayActionPetrovWarningConsole($data: CreatePetrovDayActionDataInput!) {\n    createPetrovDayAction(data: $data) {\n      data {\n        ...PetrovDayActionInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query petrovDay2024Resolvers {\n      PetrovDay2024CheckNumberOfIncoming {\n        count\n      }\n    }\n  "): (typeof documents)["\n    query petrovDay2024Resolvers {\n      PetrovDay2024CheckNumberOfIncoming {\n        count\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateChapterAddDraftPostDialog($selector: SelectorInput!, $data: UpdateChapterDataInput!) {\n    updateChapter(selector: $selector, data: $data) {\n      data {\n        ...ChaptersFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateChapterAddDraftPostDialog($selector: SelectorInput!, $data: UpdateChapterDataInput!) {\n    updateChapter(selector: $selector, data: $data) {\n      data {\n        ...ChaptersFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateBookBooksForm($selector: SelectorInput!, $data: UpdateBookDataInput!) {\n    updateBook(selector: $selector, data: $data) {\n      data {\n        ...BookPageFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateBookBooksForm($selector: SelectorInput!, $data: UpdateBookDataInput!) {\n    updateBook(selector: $selector, data: $data) {\n      data {\n        ...BookPageFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createBookBooksForm($data: CreateBookDataInput!) {\n    createBook(data: $data) {\n      data {\n        ...BookPageFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createBookBooksForm($data: CreateBookDataInput!) {\n    createBook(data: $data) {\n      data {\n        ...BookPageFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query BooksItem($documentId: String) {\n    book(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...BookEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  query BooksItem($documentId: String) {\n    book(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...BookEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateChapterChaptersForm($selector: SelectorInput!, $data: UpdateChapterDataInput!) {\n    updateChapter(selector: $selector, data: $data) {\n      data {\n        ...ChaptersEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateChapterChaptersForm($selector: SelectorInput!, $data: UpdateChapterDataInput!) {\n    updateChapter(selector: $selector, data: $data) {\n      data {\n        ...ChaptersEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createChapterChaptersForm($data: CreateChapterDataInput!) {\n    createChapter(data: $data) {\n      data {\n        ...ChaptersEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createChapterChaptersForm($data: CreateChapterDataInput!) {\n    createChapter(data: $data) {\n      data {\n        ...ChaptersEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ChaptersItem($documentId: String) {\n    chapter(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ChaptersEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  query ChaptersItem($documentId: String) {\n    chapter(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...ChaptersEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiChapterChaptersListQuery($selector: ChapterSelector, $limit: Int, $enableTotal: Boolean) {\n    chapters(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ChaptersFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiChapterChaptersListQuery($selector: ChapterSelector, $limit: Int, $enableTotal: Boolean) {\n    chapters(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ChaptersFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateCollectionCollectionsEditForm($selector: SelectorInput!, $data: UpdateCollectionDataInput!) {\n    updateCollection(selector: $selector, data: $data) {\n      data {\n        ...CollectionsPageFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCollectionCollectionsEditForm($selector: SelectorInput!, $data: UpdateCollectionDataInput!) {\n    updateCollection(selector: $selector, data: $data) {\n      data {\n        ...CollectionsPageFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CollectionsPage($documentId: String) {\n    collection(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CollectionsPageFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query CollectionsPage($documentId: String) {\n    collection(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CollectionsPageFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CollectionsEdit($documentId: String) {\n    collection(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CollectionsEditFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query CollectionsEdit($documentId: String) {\n    collection(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CollectionsEditFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostSequenceDraftsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostSequenceDraftsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateSequenceSequencesForm($selector: SelectorInput!, $data: UpdateSequenceDataInput!) {\n    updateSequence(selector: $selector, data: $data) {\n      data {\n        ...SequencesEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateSequenceSequencesForm($selector: SelectorInput!, $data: UpdateSequenceDataInput!) {\n    updateSequence(selector: $selector, data: $data) {\n      data {\n        ...SequencesEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createSequenceSequencesForm($data: CreateSequenceDataInput!) {\n    createSequence(data: $data) {\n      data {\n        ...SequencesEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createSequenceSequencesForm($data: CreateSequenceDataInput!) {\n    createSequence(data: $data) {\n      data {\n        ...SequencesEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiSequenceSequencesGridWrapperQuery($selector: SequenceSelector, $limit: Int, $enableTotal: Boolean) {\n    sequences(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SequencesPageFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiSequenceSequencesGridWrapperQuery($selector: SequenceSelector, $limit: Int, $enableTotal: Boolean) {\n    sequences(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SequencesPageFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SequencesPage($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesPageFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query SequencesPage($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesPageFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SequencesEdit($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  query SequencesEdit($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiChapterSequencesSummaryQuery($selector: ChapterSelector, $limit: Int, $enableTotal: Boolean) {\n    chapters(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ChaptersFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiChapterSequencesSummaryQuery($selector: ChapterSelector, $limit: Int, $enableTotal: Boolean) {\n    chapters(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ChaptersFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAllReviewWinners {\n      GetAllReviewWinners {\n        ...PostsTopItemInfo\n      }\n    }\n  "): (typeof documents)["\n    query GetAllReviewWinners {\n      GetAllReviewWinners {\n        ...PostsTopItemInfo\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation updateContinueReading($sequenceId: String!, $postId: String!) {\n      updateContinueReading(sequenceId: $sequenceId, postId: $postId)\n    }\n  "): (typeof documents)["\n    mutation updateContinueReading($sequenceId: String!, $postId: String!) {\n      updateContinueReading(sequenceId: $sequenceId, postId: $postId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProfileShortform($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProfileShortform($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentRepliesToCommentListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentRepliesToCommentListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentShortformThreadListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentWithRepliesFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentShortformThreadListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentWithRepliesFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentShortformTimeBlockQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentShortformTimeBlockQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ShortformComments\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DisplaySpotlightQuery {\n    currentSpotlight {\n      ...SpotlightDisplay\n    }\n  }\n"): (typeof documents)["\n  query DisplaySpotlightQuery {\n    currentSpotlight {\n      ...SpotlightDisplay\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateSpotlightSpotlightForm($selector: SelectorInput!, $data: UpdateSpotlightDataInput!) {\n    updateSpotlight(selector: $selector, data: $data) {\n      data {\n        ...SpotlightEditQueryFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateSpotlightSpotlightForm($selector: SelectorInput!, $data: UpdateSpotlightDataInput!) {\n    updateSpotlight(selector: $selector, data: $data) {\n      data {\n        ...SpotlightEditQueryFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createSpotlightSpotlightForm($data: CreateSpotlightDataInput!) {\n    createSpotlight(data: $data) {\n      data {\n        ...SpotlightEditQueryFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createSpotlightSpotlightForm($data: CreateSpotlightDataInput!) {\n    createSpotlight(data: $data) {\n      data {\n        ...SpotlightEditQueryFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiSpotlightSpotlightHistoryQuery($selector: SpotlightSelector, $limit: Int, $enableTotal: Boolean) {\n    spotlights(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SpotlightDisplay\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiSpotlightSpotlightHistoryQuery($selector: SpotlightSelector, $limit: Int, $enableTotal: Boolean) {\n    spotlights(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SpotlightDisplay\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateSpotlightSpotlightItem($selector: SelectorInput!, $data: UpdateSpotlightDataInput!) {\n    updateSpotlight(selector: $selector, data: $data) {\n      data {\n        ...SpotlightDisplay\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateSpotlightSpotlightItem($selector: SelectorInput!, $data: UpdateSpotlightDataInput!) {\n    updateSpotlight(selector: $selector, data: $data) {\n      data {\n        ...SpotlightDisplay\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SpotlightItem($documentId: String) {\n    spotlight(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SpotlightEditQueryFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query SpotlightItem($documentId: String) {\n    spotlight(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SpotlightEditQueryFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SpotlightStartOrContinueReadingQuery($spotlightId: String) {\n    spotlight(input: {selector: {documentId: $spotlightId}}) {\n      result {\n        _id\n        sequenceChapters {\n          ...ChaptersFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SpotlightStartOrContinueReadingQuery($spotlightId: String) {\n    spotlight(input: {selector: {documentId: $spotlightId}}) {\n      result {\n        _id\n        sequenceChapters {\n          ...ChaptersFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiSpotlightSpotlightsPageQuery($selector: SpotlightSelector, $limit: Int, $enableTotal: Boolean) {\n    spotlights(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SpotlightDisplay\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiSpotlightSpotlightsPageQuery($selector: SpotlightSelector, $limit: Int, $enableTotal: Boolean) {\n    spotlights(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SpotlightDisplay\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation publishAndDeDuplicateSpotlight($spotlightId: String) {\n      publishAndDeDuplicateSpotlight(spotlightId: $spotlightId) {\n        ...SpotlightDisplay\n      }\n    }\n  "): (typeof documents)["\n    mutation publishAndDeDuplicateSpotlight($spotlightId: String) {\n      publishAndDeDuplicateSpotlight(spotlightId: $spotlightId) {\n        ...SpotlightDisplay\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiSubscriptionFollowUserSearchQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SubscriptionState\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiSubscriptionFollowUserSearchQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SubscriptionState\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserFollowingCount($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UserFollowingCount($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query SuggestedFeedSubscriptionUsers($limit: Int) {\n      SuggestedFeedSubscriptionUsers(limit: $limit) {\n        results {\n          ...UsersMinimumInfo\n        }\n      }\n    }\n  "): (typeof documents)["\n    query SuggestedFeedSubscriptionUsers($limit: Int) {\n      SuggestedFeedSubscriptionUsers(limit: $limit) {\n        results {\n          ...UsersMinimumInfo\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateCommentAFSuggestCommentsItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentComment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCommentAFSuggestCommentsItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentComment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentAFSuggestCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SuggestAlignmentComment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentAFSuggestCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SuggestAlignmentComment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostAFSuggestPostsItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentPost\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostAFSuggestPostsItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentPost\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostAFSuggestPostsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SuggestAlignmentPost\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostAFSuggestPostsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SuggestAlignmentPost\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserAFSuggestUsersItem($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...SunshineUsersList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserAFSuggestUsersItem($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...SunshineUsersList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserAFSuggestUsersListQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SuggestAlignmentUser\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserAFSuggestUsersListQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SuggestAlignmentUser\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query AllReactedComments($limit: Int) {\n      CommentsWithReacts(limit: $limit) {\n        results {\n          ...CommentsListWithParentMetadata\n        }\n      }\n    }\n  "): (typeof documents)["\n    query AllReactedComments($limit: Int) {\n      CommentsWithReacts(limit: $limit) {\n        results {\n          ...CommentsListWithParentMetadata\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiLWEventEmailHistoryQuery($selector: LWEventSelector, $limit: Int, $enableTotal: Boolean) {\n    lWEvents(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...emailHistoryFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiLWEventEmailHistoryQuery($selector: LWEventSelector, $limit: Int, $enableTotal: Boolean) {\n    lWEvents(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...emailHistoryFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ModGPTDashboardQuery($selector: CommentSelector, $limit: Int) {\n    comments(selector: $selector, limit: $limit) {\n      results {\n        ...CommentsListWithModGPTAnalysis\n      }\n    }\n  }\n"): (typeof documents)["\n  query ModGPTDashboardQuery($selector: CommentSelector, $limit: Int) {\n    comments(selector: $selector, limit: $limit) {\n      results {\n        ...CommentsListWithModGPTAnalysis\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiClientIdModerationAltAccountsQuery($selector: ClientIdSelector, $limit: Int, $enableTotal: Boolean) {\n    clientIds(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModeratorClientIDInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiClientIdModerationAltAccountsQuery($selector: ClientIdSelector, $limit: Int, $enableTotal: Boolean) {\n    clientIds(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModeratorClientIDInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserModerationAltAccountsQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserAltAccountsFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserModerationAltAccountsQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserAltAccountsFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ModerationAltAccounts($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UserAltAccountsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query ModerationAltAccounts($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UserAltAccountsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ModeratorIPAddressInfo($ipAddress: String!) {\n      moderatorViewIPAddress(ipAddress: $ipAddress) {\n        ip\n        userIds\n      }\n    }\n  "): (typeof documents)["\n    query ModeratorIPAddressInfo($ipAddress: String!) {\n      moderatorViewIPAddress(ipAddress: $ipAddress) {\n        ip\n        userIds\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserModerationDashboardQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineUsersList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserModerationDashboardQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineUsersList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserModeratorActions($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...SunshineUsersList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserModeratorActions($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...SunshineUsersList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiConversationModeratorMessageCountQuery($selector: ConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    conversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ConversationsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiConversationModeratorMessageCountQuery($selector: ConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    conversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ConversationsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserAltAccountInfoQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineUsersList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserAltAccountInfoQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineUsersList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateModeratorActionModeratorActionItem($selector: SelectorInput!, $data: UpdateModeratorActionDataInput!) {\n    updateModeratorAction(selector: $selector, data: $data) {\n      data {\n        ...ModeratorActionDisplay\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateModeratorActionModeratorActionItem($selector: SelectorInput!, $data: UpdateModeratorActionDataInput!) {\n    updateModeratorAction(selector: $selector, data: $data) {\n      data {\n        ...ModeratorActionDisplay\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserRecentlyActiveUsersQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineUsersList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserRecentlyActiveUsersQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineUsersList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query NewCommentModerationWarning($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query NewCommentModerationWarning($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createModeratorActionNewModeratorActionDialog($data: CreateModeratorActionDataInput!) {\n    createModeratorAction(data: $data) {\n      data {\n        ...ModeratorActionDisplay\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createModeratorActionNewModeratorActionDialog($data: CreateModeratorActionDataInput!) {\n    createModeratorAction(data: $data) {\n      data {\n        ...ModeratorActionDisplay\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query NewPostModerationWarning($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query NewPostModerationWarning($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiModerationTemplateRejectContentDialogQuery($selector: ModerationTemplateSelector, $limit: Int, $enableTotal: Boolean) {\n    moderationTemplates(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModerationTemplateFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiModerationTemplateRejectContentDialogQuery($selector: ModerationTemplateSelector, $limit: Int, $enableTotal: Boolean) {\n    moderationTemplates(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModerationTemplateFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createReportReportForm($data: CreateReportDataInput!) {\n    createReport(data: $data) {\n      data {\n        ...UnclaimedReportsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createReportReportForm($data: CreateReportDataInput!) {\n    createReport(data: $data) {\n      data {\n        ...UnclaimedReportsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostSunshineCuratedSuggestionsItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...SunshineCurationPostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostSunshineCuratedSuggestionsItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...SunshineCurationPostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiSunshineCurationPostsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineCurationPostsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiSunshineCurationPostsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineCurationPostsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiGoogleServiceAccountSessionSunshineGoogleServiceAccountQuery($selector: GoogleServiceAccountSessionSelector, $limit: Int, $enableTotal: Boolean) {\n    googleServiceAccountSessions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...GoogleServiceAccountSessionAdminInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiGoogleServiceAccountSessionSunshineGoogleServiceAccountQuery($selector: GoogleServiceAccountSessionSelector, $limit: Int, $enableTotal: Boolean) {\n    googleServiceAccountSessions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...GoogleServiceAccountSessionAdminInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateCommentSunshineNewCommentsItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCommentSunshineNewCommentsItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentSunshineNewCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentSunshineNewCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostSunshineNewPostsItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostSunshineNewPostsItem($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createModeratorActionSunshineNewPostsItem($data: CreateModeratorActionDataInput!) {\n    createModeratorAction(data: $data) {\n      data {\n        ...ModeratorActionsDefaultFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createModeratorActionSunshineNewPostsItem($data: CreateModeratorActionDataInput!) {\n    createModeratorAction(data: $data) {\n      data {\n        ...ModeratorActionsDefaultFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostSunshineNewPostsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshinePostsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostSunshineNewPostsListQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshinePostsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagRelSunshineNewTagsItemQuery($selector: TagRelSelector, $limit: Int, $enableTotal: Boolean) {\n    tagRels(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagRelFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagRelSunshineNewTagsItemQuery($selector: TagRelSelector, $limit: Int, $enableTotal: Boolean) {\n    tagRels(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagRelFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateTagSunshineNewTagsItem($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...SunshineTagFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateTagSunshineNewTagsItem($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...SunshineTagFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagSunshineNewTagsListQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineTagFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagSunshineNewTagsListQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineTagFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentSunshineNewUsersInfoQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentSunshineNewUsersInfoQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserSunshineNewUsersListQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineUsersList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserSunshineNewUsersListQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineUsersList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SunshineNewUsersProfileInfo($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SunshineUsersList\n      }\n    }\n  }\n"): (typeof documents)["\n  query SunshineNewUsersProfileInfo($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SunshineUsersList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiReportSunshineReportedContentListQuery($selector: ReportSelector, $limit: Int, $enableTotal: Boolean) {\n    reports(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UnclaimedReportsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiReportSunshineReportedContentListQuery($selector: ReportSelector, $limit: Int, $enableTotal: Boolean) {\n    reports(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UnclaimedReportsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostSunshineReportedItem1($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostSunshineReportedItem1($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateCommentSunshineReportedItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCommentSunshineReportedItem($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateReportSunshineReportedContentList($selector: SelectorInput!, $data: UpdateReportDataInput!) {\n    updateReport(selector: $selector, data: $data) {\n      data {\n        ...UnclaimedReportsList\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateReportSunshineReportedContentList($selector: SelectorInput!, $data: UpdateReportDataInput!) {\n    updateReport(selector: $selector, data: $data) {\n      data {\n        ...UnclaimedReportsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiModerationTemplateSunshineSendMessageWithDefaultsQuery($selector: ModerationTemplateSelector, $limit: Int, $enableTotal: Boolean) {\n    moderationTemplates(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModerationTemplateFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiModerationTemplateSunshineSendMessageWithDefaultsQuery($selector: ModerationTemplateSelector, $limit: Int, $enableTotal: Boolean) {\n    moderationTemplates(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModerationTemplateFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiConversationSunshineUserMessagesQuery($selector: ConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    conversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ConversationsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiConversationSunshineUserMessagesQuery($selector: ConversationSelector, $limit: Int, $enableTotal: Boolean) {\n    conversations(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ConversationsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserRateLimitUserRateLimitItemQuery($selector: UserRateLimitSelector, $limit: Int, $enableTotal: Boolean) {\n    userRateLimits(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserRateLimitDisplay\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserRateLimitUserRateLimitItemQuery($selector: UserRateLimitSelector, $limit: Int, $enableTotal: Boolean) {\n    userRateLimits(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserRateLimitDisplay\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserRateLimitUserRateLimitItem1($selector: SelectorInput!, $data: UpdateUserRateLimitDataInput!) {\n    updateUserRateLimit(selector: $selector, data: $data) {\n      data {\n        ...UserRateLimitsDefaultFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserRateLimitUserRateLimitItem1($selector: SelectorInput!, $data: UpdateUserRateLimitDataInput!) {\n    updateUserRateLimit(selector: $selector, data: $data) {\n      data {\n        ...UserRateLimitsDefaultFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserRateLimitUserRateLimitItem($selector: SelectorInput!, $data: UpdateUserRateLimitDataInput!) {\n    updateUserRateLimit(selector: $selector, data: $data) {\n      data {\n        ...UserRateLimitDisplay\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserRateLimitUserRateLimitItem($selector: SelectorInput!, $data: UpdateUserRateLimitDataInput!) {\n    updateUserRateLimit(selector: $selector, data: $data) {\n      data {\n        ...UserRateLimitDisplay\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createUserRateLimitUserRateLimitItem1($data: CreateUserRateLimitDataInput!) {\n    createUserRateLimit(data: $data) {\n      data {\n        ...UserRateLimitsDefaultFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createUserRateLimitUserRateLimitItem1($data: CreateUserRateLimitDataInput!) {\n    createUserRateLimit(data: $data) {\n      data {\n        ...UserRateLimitsDefaultFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createUserRateLimitUserRateLimitItem($data: CreateUserRateLimitDataInput!) {\n    createUserRateLimit(data: $data) {\n      data {\n        ...UserRateLimitDisplay\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createUserRateLimitUserRateLimitItem($data: CreateUserRateLimitDataInput!) {\n    createUserRateLimit(data: $data) {\n      data {\n        ...UserRateLimitDisplay\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentUsersReviewInfoCardQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentUsersReviewInfoCardQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DeletedCommentsModerationLogQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DeletedCommentsModerationLog\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query DeletedCommentsModerationLogQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...DeletedCommentsModerationLog\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UsersBannedFromPostsModerationLogQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersBannedFromPostsModerationLog\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UsersBannedFromPostsModerationLogQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersBannedFromPostsModerationLog\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UsersBannedFromUsersModerationLogQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersBannedFromUsersModerationLog\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UsersBannedFromUsersModerationLogQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersBannedFromUsersModerationLog\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ModeratorActionModerationLogQuery($selector: ModeratorActionSelector, $limit: Int, $enableTotal: Boolean) {\n    moderatorActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModeratorActionDisplay\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query ModeratorActionModerationLogQuery($selector: ModeratorActionSelector, $limit: Int, $enableTotal: Boolean) {\n    moderatorActions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ModeratorActionDisplay\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserRateLimitModerationLogQuery($selector: UserRateLimitSelector, $limit: Int, $enableTotal: Boolean) {\n    userRateLimits(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserRateLimitDisplay\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UserRateLimitModerationLogQuery($selector: UserRateLimitSelector, $limit: Int, $enableTotal: Boolean) {\n    userRateLimits(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserRateLimitDisplay\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentRejectedCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentRejectedCommentsListQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsListWithParentMetadata\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiSurveyScheduleSurveyAdminPageQuery($selector: SurveyScheduleSelector, $limit: Int, $enableTotal: Boolean) {\n    surveySchedules(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SurveyScheduleEdit\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiSurveyScheduleSurveyAdminPageQuery($selector: SurveyScheduleSelector, $limit: Int, $enableTotal: Boolean) {\n    surveySchedules(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SurveyScheduleEdit\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiSurveySurveyAdminPageQuery($selector: SurveySelector, $limit: Int, $enableTotal: Boolean) {\n    surveys(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SurveyMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiSurveySurveyAdminPageQuery($selector: SurveySelector, $limit: Int, $enableTotal: Boolean) {\n    surveys(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SurveyMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createSurveySurveyAdminPage($data: CreateSurveyDataInput!) {\n    createSurvey(data: $data) {\n      data {\n        ...SurveyMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createSurveySurveyAdminPage($data: CreateSurveyDataInput!) {\n    createSurvey(data: $data) {\n      data {\n        ...SurveyMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SurveyEditPage($documentId: String) {\n    survey(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SurveyMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SurveyEditPage($documentId: String) {\n    survey(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SurveyMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation editSurvey($surveyId: String!, $name: String!, $questions: [SurveyQuestionInfo!]!) {\n      editSurvey(surveyId: $surveyId, name: $name, questions: $questions) {\n        ...SurveyMinimumInfo\n      }\n    }\n  "): (typeof documents)["\n    mutation editSurvey($surveyId: String!, $name: String!, $questions: [SurveyQuestionInfo!]!) {\n      editSurvey(surveyId: $surveyId, name: $name, questions: $questions) {\n        ...SurveyMinimumInfo\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createSurveyResponseSurveyPostsItem($data: CreateSurveyResponseDataInput!) {\n    createSurveyResponse(data: $data) {\n      data {\n        ...SurveyResponseMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createSurveyResponseSurveyPostsItem($data: CreateSurveyResponseDataInput!) {\n    createSurveyResponse(data: $data) {\n      data {\n        ...SurveyResponseMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateSurveyScheduleSurveyScheduleEditPage($selector: SelectorInput!, $data: UpdateSurveyScheduleDataInput!) {\n    updateSurveySchedule(selector: $selector, data: $data) {\n      data {\n        ...SurveyScheduleEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateSurveyScheduleSurveyScheduleEditPage($selector: SelectorInput!, $data: UpdateSurveyScheduleDataInput!) {\n    updateSurveySchedule(selector: $selector, data: $data) {\n      data {\n        ...SurveyScheduleEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createSurveyScheduleSurveyScheduleEditPage($data: CreateSurveyScheduleDataInput!) {\n    createSurveySchedule(data: $data) {\n      data {\n        ...SurveyScheduleEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createSurveyScheduleSurveyScheduleEditPage($data: CreateSurveyScheduleDataInput!) {\n    createSurveySchedule(data: $data) {\n      data {\n        ...SurveyScheduleEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SurveyScheduleEditPage($documentId: String) {\n    surveySchedule(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SurveyScheduleEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  query SurveyScheduleEditPage($documentId: String) {\n    surveySchedule(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SurveyScheduleEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation addPostsToTag($tagId: String, $postId: String) {\n      addOrUpvoteTag(tagId: $tagId, postId: $postId) {\n        ...TagRelCreationFragment\n      }\n    }\n  "): (typeof documents)["\n    mutation addPostsToTag($tagId: String, $postId: String) {\n      addOrUpvoteTag(tagId: $tagId, postId: $postId) {\n        ...TagRelCreationFragment\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AllPostsPageTagRevisionItem($documentId: String) {\n    revision(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...RevisionHistoryEntry\n      }\n    }\n  }\n"): (typeof documents)["\n  query AllPostsPageTagRevisionItem($documentId: String) {\n    revision(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...RevisionHistoryEntry\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagAllTagsAlphabeticalQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagPreviewFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagAllTagsAlphabeticalQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagPreviewFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AllWikiTagsPageQuery($slugs: [String!]!) {\n    tags(selector: { tagsBySlugs: { slugs: $slugs } }) {\n      results {\n        ...ConceptItemFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query AllWikiTagsPageQuery($slugs: [String!]!) {\n    tags(selector: { tagsBySlugs: { slugs: $slugs } }) {\n      results {\n        ...ConceptItemFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagArbitalExplorePageQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ExplorePageTagFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagArbitalExplorePageQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ExplorePageTagFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagCoreTagsChecklistQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagCoreTagsChecklistQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagCoreTagsSectionQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagDetailsFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagCoreTagsSectionQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagDetailsFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EAAllTagsPage($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query EAAllTagsPage($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagEATagPageQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagEATagPageQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EATagPage($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query EATagPage($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FilterMode($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagPreviewFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query FilterMode($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagPreviewFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query multiTagRelFooterTagListQuery($selector: TagRelSelector, $limit: Int, $enableTotal: Boolean) {\n      tagRels(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n        results {\n          ...TagRelMinimumFragment\n        }\n        totalCount\n      }\n    }\n  "): (typeof documents)["\n    query multiTagRelFooterTagListQuery($selector: TagRelSelector, $limit: Int, $enableTotal: Boolean) {\n      tagRels(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n        results {\n          ...TagRelMinimumFragment\n        }\n        totalCount\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation addOrUpvoteTag($tagId: String, $postId: String) {\n      addOrUpvoteTag(tagId: $tagId, postId: $postId) {\n        ...TagRelMinimumFragment\n      }\n    }\n  "): (typeof documents)["\n    mutation addOrUpvoteTag($tagId: String, $postId: String) {\n      addOrUpvoteTag(tagId: $tagId, postId: $postId) {\n        ...TagRelMinimumFragment\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagLWTagPageQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagLWTagPageQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query LWTagPage($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query LWTagPage($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateTagNewTagPage($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...TagEditFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateTagNewTagPage($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...TagEditFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagNewTagsListQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineTagFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagNewTagsListQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SunshineTagFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getRandomTag {\n      RandomTag {slug}\n    }\n  "): (typeof documents)["\n    query getRandomTag {\n      RandomTag {slug}\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiMultiDocumentRedlinkTagPageQuery($selector: MultiDocumentSelector, $limit: Int, $enableTotal: Boolean) {\n    multiDocuments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...MultiDocumentMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiMultiDocumentRedlinkTagPageQuery($selector: MultiDocumentSelector, $limit: Int, $enableTotal: Boolean) {\n    multiDocuments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...MultiDocumentMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagRedlinkTagPageQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagBasicInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagRedlinkTagPageQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagBasicInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiSubscriptionSubscribeButtonQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SubscriptionState\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiSubscriptionSubscribeButtonQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SubscriptionState\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createSubscriptionSubscribeButton($data: CreateSubscriptionDataInput!) {\n    createSubscription(data: $data) {\n      data {\n        ...SubscriptionState\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createSubscriptionSubscribeButton($data: CreateSubscriptionDataInput!) {\n    createSubscription(data: $data) {\n      data {\n        ...SubscriptionState\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiMultiDocumentSummariesEditFormQuery($selector: MultiDocumentSelector, $limit: Int, $enableTotal: Boolean) {\n    multiDocuments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...MultiDocumentContentDisplay\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiMultiDocumentSummariesEditFormQuery($selector: MultiDocumentSelector, $limit: Int, $enableTotal: Boolean) {\n    multiDocuments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...MultiDocumentContentDisplay\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation reorderSummaries($parentDocumentId: String!, $parentDocumentCollectionName: String!, $summaryIds: [String!]!) {\n      reorderSummaries(parentDocumentId: $parentDocumentId, parentDocumentCollectionName: $parentDocumentCollectionName, summaryIds: $summaryIds)\n    }\n  "): (typeof documents)["\n    mutation reorderSummaries($parentDocumentId: String!, $parentDocumentCollectionName: String!, $summaryIds: [String!]!) {\n      reorderSummaries(parentDocumentId: $parentDocumentId, parentDocumentCollectionName: $parentDocumentCollectionName, summaryIds: $summaryIds)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateMultiDocumentSummaryForm($selector: SelectorInput!, $data: UpdateMultiDocumentDataInput!) {\n    updateMultiDocument(selector: $selector, data: $data) {\n      data {\n        ...MultiDocumentContentDisplay\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateMultiDocumentSummaryForm($selector: SelectorInput!, $data: UpdateMultiDocumentDataInput!) {\n    updateMultiDocument(selector: $selector, data: $data) {\n      data {\n        ...MultiDocumentContentDisplay\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createMultiDocumentSummaryForm($data: CreateMultiDocumentDataInput!) {\n    createMultiDocument(data: $data) {\n      data {\n        ...MultiDocumentContentDisplay\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createMultiDocumentSummaryForm($data: CreateMultiDocumentDataInput!) {\n    createMultiDocument(data: $data) {\n      data {\n        ...MultiDocumentContentDisplay\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiRevisionTagCompareRevisionsQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionHistoryEntry\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiRevisionTagCompareRevisionsQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionHistoryEntry\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TagContributorsList($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagFullContributorsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query TagContributorsList($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagFullContributorsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentTagDiscussionQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentTagDiscussionQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentTagDiscussionButtonQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentTagDiscussionButtonQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentTagDiscussionSectionQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentTagDiscussionSectionQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiRevisionTagEditsByUserQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionTagFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiRevisionTagEditsByUserQuery($selector: RevisionSelector, $limit: Int, $enableTotal: Boolean) {\n    revisions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...RevisionTagFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getTagUpdates($before: Date!, $after: Date!) {\n      TagUpdatesInTimeBlock(before: $before, after: $after) {\n        tag {\n          ...TagHistoryFragment\n        }\n        revisionIds\n        commentCount\n        commentIds\n        lastRevisedAt\n        lastCommentedAt\n        added\n        removed\n        users {\n          ...UsersMinimumInfo\n        }\n        documentDeletions {\n          userId\n          documentId\n          netChange\n          type\n          docFields {\n            _id\n            slug\n            tabTitle\n            tabSubtitle\n          }\n          createdAt\n        }\n      }\n    }\n  "): (typeof documents)["\n    query getTagUpdates($before: Date!, $after: Date!) {\n      TagUpdatesInTimeBlock(before: $before, after: $after) {\n        tag {\n          ...TagHistoryFragment\n        }\n        revisionIds\n        commentCount\n        commentIds\n        lastRevisedAt\n        lastCommentedAt\n        added\n        removed\n        users {\n          ...UsersMinimumInfo\n        }\n        documentDeletions {\n          userId\n          documentId\n          netChange\n          type\n          docFields {\n            _id\n            slug\n            tabTitle\n            tabSubtitle\n          }\n          createdAt\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateTagFlagTagFlagEditAndNewForm($selector: SelectorInput!, $data: UpdateTagFlagDataInput!) {\n    updateTagFlag(selector: $selector, data: $data) {\n      data {\n        ...TagFlagFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateTagFlagTagFlagEditAndNewForm($selector: SelectorInput!, $data: UpdateTagFlagDataInput!) {\n    updateTagFlag(selector: $selector, data: $data) {\n      data {\n        ...TagFlagFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createTagFlagTagFlagEditAndNewForm($data: CreateTagFlagDataInput!) {\n    createTagFlag(data: $data) {\n      data {\n        ...TagFlagFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createTagFlagTagFlagEditAndNewForm($data: CreateTagFlagDataInput!) {\n    createTagFlag(data: $data) {\n      data {\n        ...TagFlagFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagTagFlagItemQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagTagFlagItemQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TagFlagItem($documentId: String) {\n    tagFlag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagFlagFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query TagFlagItem($documentId: String) {\n    tagFlag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagFlagFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateTagTagForm($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...TagWithFlagsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateTagTagForm($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...TagWithFlagsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createTagTagForm($data: CreateTagDataInput!) {\n    createTag(data: $data) {\n      data {\n        ...TagWithFlagsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createTagTagForm($data: CreateTagDataInput!) {\n    createTag(data: $data) {\n      data {\n        ...TagWithFlagsFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiChapterTagIntroSequenceQuery($selector: ChapterSelector, $limit: Int, $enableTotal: Boolean) {\n    chapters(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ChaptersFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiChapterTagIntroSequenceQuery($selector: ChapterSelector, $limit: Int, $enableTotal: Boolean) {\n    chapters(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...ChaptersFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TagMergePage($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query TagMergePage($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation mergeTags(\n      $sourceTagId: String!\n      $targetTagId: String!\n      $transferSubtags: Boolean!\n      $redirectSource: Boolean!\n    ) {\n      mergeTags(\n        sourceTagId: $sourceTagId\n        targetTagId: $targetTagId\n        transferSubtags: $transferSubtags\n        redirectSource: $redirectSource\n      )\n    }\n  "): (typeof documents)["\n    mutation mergeTags(\n      $sourceTagId: String!\n      $targetTagId: String!\n      $transferSubtags: Boolean!\n      $redirectSource: Boolean!\n    ) {\n      mergeTags(\n        sourceTagId: $sourceTagId\n        targetTagId: $targetTagId\n        transferSubtags: $transferSubtags\n        redirectSource: $redirectSource\n      )\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation promoteLensToMain($lensId: String!) {\n      promoteLensToMain(lensId: $lensId)\n    }\n  "): (typeof documents)["\n    mutation promoteLensToMain($lensId: String!) {\n      promoteLensToMain(lensId: $lensId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostTagPreviewQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostTagPreviewQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TagSearchHit($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagPreviewFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query TagSearchHit($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagPreviewFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiVoteTagVoteActivityQuery($selector: VoteSelector, $limit: Int, $enableTotal: Boolean) {\n    votes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagVotingActivity\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiVoteTagVoteActivityQuery($selector: VoteSelector, $limit: Int, $enableTotal: Boolean) {\n    votes(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagVotingActivity\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagFlagTaggingDashboardQuery($selector: TagFlagSelector, $limit: Int, $enableTotal: Boolean) {\n    tagFlags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFlagFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagFlagTaggingDashboardQuery($selector: TagFlagSelector, $limit: Int, $enableTotal: Boolean) {\n    tagFlags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagFlagFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagTaggingDashboardQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagTaggingDashboardQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TaggingDashboard($documentId: String) {\n    tagFlag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagFlagEditFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query TaggingDashboard($documentId: String) {\n    tagFlag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagFlagEditFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagRelTagsDetailsItemQuery($selector: TagRelSelector, $limit: Int, $enableTotal: Boolean) {\n    tagRels(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagRelFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagRelTagsDetailsItemQuery($selector: TagRelSelector, $limit: Int, $enableTotal: Boolean) {\n    tagRels(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagRelFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TagsDetailsItem($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query TagsDetailsItem($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetTagsByCoreTagId(\n      $coreTagId: String,\n      $limit: Int,\n      $searchTagIds: [String]\n    ) {\n      TagsByCoreTagId(\n        coreTagId: $coreTagId,\n        limit: $limit,\n        searchTagIds: $searchTagIds\n      ) {\n        tags {\n          ...ConceptItemFragment\n        }\n        totalCount\n      }\n    }\n  "): (typeof documents)["\n    query GetTagsByCoreTagId(\n      $coreTagId: String,\n      $limit: Int,\n      $searchTagIds: [String]\n    ) {\n      TagsByCoreTagId(\n        coreTagId: $coreTagId,\n        limit: $limit,\n        searchTagIds: $searchTagIds\n      ) {\n        tags {\n          ...ConceptItemFragment\n        }\n        totalCount\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateMultiDocumentLensForm($selector: SelectorInput!, $data: UpdateMultiDocumentDataInput!) {\n    updateMultiDocument(selector: $selector, data: $data) {\n      data {\n        ...MultiDocumentEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateMultiDocumentLensForm($selector: SelectorInput!, $data: UpdateMultiDocumentDataInput!) {\n    updateMultiDocument(selector: $selector, data: $data) {\n      data {\n        ...MultiDocumentEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createMultiDocumentLensForm($data: CreateMultiDocumentDataInput!) {\n    createMultiDocument(data: $data) {\n      data {\n        ...MultiDocumentEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createMultiDocumentLensForm($data: CreateMultiDocumentDataInput!) {\n    createMultiDocument(data: $data) {\n      data {\n        ...MultiDocumentEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserSidebarMembersBoxQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserSidebarMembersBoxQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateTagSidebarSubtagsBox($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...TagBasicInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateTagSidebarSubtagsBox($selector: SelectorInput!, $data: UpdateTagDataInput!) {\n    updateTag(selector: $selector, data: $data) {\n      data {\n        ...TagBasicInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SidebarSubtagsBox($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagSubtagFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query SidebarSubtagsBox($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagSubtagFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserSubforumMembersDialogQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserSubforumMembersDialogQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserTagRelSubforumSubforumTab($selector: SelectorInput!, $data: UpdateUserTagRelDataInput!) {\n    updateUserTagRel(selector: $selector, data: $data) {\n      data {\n        ...UserTagRelDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserTagRelSubforumSubforumTab($selector: SelectorInput!, $data: UpdateUserTagRelDataInput!) {\n    updateUserTagRel(selector: $selector, data: $data) {\n      data {\n        ...UserTagRelDetails\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UserUpdateSubforumMembership($tagId: String!, $member: Boolean!) {\n      UserUpdateSubforumMembership(tagId: $tagId, member: $member) {\n        ...UsersCurrent\n      }\n    }\n  "): (typeof documents)["\n    mutation UserUpdateSubforumMembership($tagId: String!, $member: Boolean!) {\n      UserUpdateSubforumMembership(tagId: $tagId, member: $member) {\n        ...UsersCurrent\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SubforumWikiTab($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query SubforumWikiTab($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagEditFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserTagRelTagSubforumPage2Query($selector: UserTagRelSelector, $limit: Int, $enableTotal: Boolean) {\n    userTagRels(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserTagRelDetails\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserTagRelTagSubforumPage2Query($selector: UserTagRelSelector, $limit: Int, $enableTotal: Boolean) {\n    userTagRels(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UserTagRelDetails\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagTagSubforumPage2Query($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagTagSubforumPage2Query($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagWithFlagsFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createUserTagRelTagSubforumPage2($data: CreateUserTagRelDataInput!) {\n    createUserTagRel(data: $data) {\n      data {\n        ...UserTagRelDetails\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createUserTagRelTagSubforumPage2($data: CreateUserTagRelDataInput!) {\n    createUserTagRel(data: $data) {\n      data {\n        ...UserTagRelDetails\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query tagFragmentBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query tagFragmentBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query tagBasicInfoBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagBasicInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query tagBasicInfoBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagBasicInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query allTagsPageFragmentBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...AllTagsPageFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query allTagsPageFragmentBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...AllTagsPageFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query tagPageFragmentBySlug($selector: TagSelector, $limit: Int, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query tagPageFragmentBySlug($selector: TagSelector, $limit: Int, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query tagPageWithRevisionFragmentBySlug($selector: TagSelector, $limit: Int, $version: String, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageWithRevisionFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query tagPageWithRevisionFragmentBySlug($selector: TagSelector, $limit: Int, $version: String, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageWithRevisionFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query tagEditFragmentBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagEditFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query tagEditFragmentBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagEditFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query tagHistoryFragmentBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagHistoryFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query tagHistoryFragmentBySlug($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagHistoryFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query tagPageWithArbitalContentFragmentBySlug($selector: TagSelector, $limit: Int, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageWithArbitalContentFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query tagPageWithArbitalContentFragmentBySlug($selector: TagSelector, $limit: Int, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageWithArbitalContentFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query tagPageRevisionWithArbitalContentFragmentBySlug($selector: TagSelector, $limit: Int, $version: String, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageRevisionWithArbitalContentFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query tagPageRevisionWithArbitalContentFragmentBySlug($selector: TagSelector, $limit: Int, $version: String, $contributorsLimit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageRevisionWithArbitalContentFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query tagPageWithArbitalContentAndLensRevisionFragmentBySlug($selector: TagSelector, $limit: Int, $version: String, $contributorsLimit: Int, $lensSlug: String) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageWithArbitalContentAndLensRevisionFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query tagPageWithArbitalContentAndLensRevisionFragmentBySlug($selector: TagSelector, $limit: Int, $version: String, $contributorsLimit: Int, $lensSlug: String) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPageWithArbitalContentAndLensRevisionFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getTagOrLensPreview($slug: String!, $hash: String) {\n    TagPreview(slug: $slug, hash: $hash) {\n      tag {\n        ...TagPreviewFragment\n      }\n      lens {\n        ...MultiDocumentContentDisplay\n      }\n      summaries {\n        ...MultiDocumentContentDisplay\n      }\n    }\n  }\n"): (typeof documents)["\n  query getTagOrLensPreview($slug: String!, $hash: String) {\n    TagPreview(slug: $slug, hash: $hash) {\n      tag {\n        ...TagPreviewFragment\n      }\n      lens {\n        ...MultiDocumentContentDisplay\n      }\n      summaries {\n        ...MultiDocumentContentDisplay\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getTagOrLensSectionPreview($slug: String!, $hash: String) {\n    TagPreview(slug: $slug, hash: $hash) {\n      tag {\n        ...TagSectionPreviewFragment\n      }\n      lens {\n        ...MultiDocumentContentDisplay\n      }\n      summaries {\n        ...MultiDocumentContentDisplay\n      }\n    }\n  }\n"): (typeof documents)["\n  query getTagOrLensSectionPreview($slug: String!, $hash: String) {\n    TagPreview(slug: $slug, hash: $hash) {\n      tag {\n        ...TagSectionPreviewFragment\n      }\n      lens {\n        ...MultiDocumentContentDisplay\n      }\n      summaries {\n        ...MultiDocumentContentDisplay\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getTagPreview($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPreviewFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query getTagPreview($selector: TagSelector, $limit: Int) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagPreviewFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getTagSectionPreview($selector: TagSelector, $limit: Int, $hash: String) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagSectionPreviewFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query getTagSectionPreview($selector: TagSelector, $limit: Int, $hash: String) {\n    tags(selector: $selector, limit: $limit) {\n      results {\n        ...TagSectionPreviewFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query LocalgroupPageTitle($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsBase\n      }\n    }\n  }\n"): (typeof documents)["\n  query LocalgroupPageTitle($documentId: String) {\n    localgroup(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...localGroupsBase\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostsPageHeaderTitle($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsBase\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostsPageHeaderTitle($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsBase\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SequencesPageTitle($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesPageTitleFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query SequencesPageTitle($documentId: String) {\n    sequence(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...SequencesPageTitleFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserUserPageTitleQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserUserPageTitleQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SingleCommentForFeedback($documentId: String!) {\n    comment(input: { selector: { _id: $documentId } }) {\n      result {\n        ...UltraFeedComment\n      }\n    }\n  }\n"): (typeof documents)["\n  query SingleCommentForFeedback($documentId: String!) {\n    comment(input: { selector: { _id: $documentId } }) {\n      result {\n        ...UltraFeedComment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createUltraFeedEventUltraFeedItemFooter($data: CreateUltraFeedEventDataInput!) {\n    createUltraFeedEvent(data: $data) {\n      data {\n        ...UltraFeedEventsDefaultFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createUltraFeedEventUltraFeedItemFooter($data: CreateUltraFeedEventDataInput!) {\n    createUltraFeedEvent(data: $data) {\n      data {\n        ...UltraFeedEventsDefaultFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createUltraFeedEventUltraFeedObserver($data: CreateUltraFeedEventDataInput!) {\n    createUltraFeedEvent(data: $data) {\n      data {\n        ...UltraFeedEventsDefaultFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createUltraFeedEventUltraFeedObserver($data: CreateUltraFeedEventDataInput!) {\n    createUltraFeedEvent(data: $data) {\n      data {\n        ...UltraFeedEventsDefaultFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentUltraFeedPostDialogQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiCommentUltraFeedPostDialogQuery($selector: CommentSelector, $limit: Int, $enableTotal: Boolean) {\n    comments(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...CommentsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UltraFeedPostDialog($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UltraFeedPostFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query UltraFeedPostDialog($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UltraFeedPostFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UltraFeedTargetComment($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentWithRepliesFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query UltraFeedTargetComment($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentWithRepliesFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query LocalPostQuery($documentId: String!) {\n    post(selector: { _id: $documentId }) {\n      result {\n        ...UltraFeedPostFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query LocalPostQuery($documentId: String!) {\n    post(selector: { _id: $documentId }) {\n      result {\n        ...UltraFeedPostFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ForeignPostQuery($documentId: String!) {\n    post(selector: { _id: $documentId }) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query ForeignPostQuery($documentId: String!) {\n    post(selector: { _id: $documentId }) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserRecentPostsForCompactCard($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserRecentPostsForCompactCard($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UltraFeedThreadItem($documentId: String) {\n    post(selector: { _id: $documentId }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n"): (typeof documents)["\n  query UltraFeedThreadItem($documentId: String) {\n    post(selector: { _id: $documentId }) {\n      result {\n        ...PostsListWithVotes\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createUltraFeedEventSeeLess($data: CreateUltraFeedEventDataInput!) {\n    createUltraFeedEvent(data: $data) {\n      data {\n        ...UltraFeedEventsDefaultFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createUltraFeedEventSeeLess($data: CreateUltraFeedEventDataInput!) {\n    createUltraFeedEvent(data: $data) {\n      data {\n        ...UltraFeedEventsDefaultFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUltraFeedEvent($selector: String!, $data: UpdateUltraFeedEventDataInput!) {\n    updateUltraFeedEvent(selector: $selector, data: $data) {\n      data {\n        _id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUltraFeedEvent($selector: String!, $data: UpdateUltraFeedEventDataInput!) {\n    updateUltraFeedEvent(selector: $selector, data: $data) {\n      data {\n        _id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation connectCrossposter($token: String) {\n      connectCrossposter(token: $token)\n    }\n  "): (typeof documents)["\n    mutation connectCrossposter($token: String) {\n      connectCrossposter(token: $token)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserEditProfileForm($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserEditProfileForm($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EditProfileForm($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersProfileEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  query EditProfileForm($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersProfileEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EditProfileFormGetUserBySlug($slug: String!) {\n    GetUserBySlug(slug: $slug) {\n      ...UsersProfileEdit\n    }\n  }\n"): (typeof documents)["\n  query EditProfileFormGetUserBySlug($slug: String!) {\n    GetUserBySlug(slug: $slug) {\n      ...UsersProfileEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation useEmailToken($token: String) {\n      useEmailToken(token: $token)\n    }\n  "): (typeof documents)["\n    mutation useEmailToken($token: String) {\n      useEmailToken(token: $token)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation sendEventTriggeredDM($eventType: String!) {\n      sendEventTriggeredDM(eventType: $eventType)\n    }\n  "): (typeof documents)["\n    mutation sendEventTriggeredDM($eventType: String!) {\n      sendEventTriggeredDM(eventType: $eventType)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostFriendlyUsersProfileQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostFriendlyUsersProfileQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiLocalgroupFriendlyUsersProfileQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiLocalgroupFriendlyUsersProfileQuery($selector: LocalgroupSelector, $limit: Int, $enableTotal: Boolean) {\n    localgroups(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...localGroupsHomeFragment\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserFriendlyUsersProfileQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n        profileTags {\n          ...TagPreviewFragment\n        }\n        organizerOfGroups {\n          ...localGroupsBase\n        }\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserFriendlyUsersProfileQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n        profileTags {\n          ...TagPreviewFragment\n        }\n        organizerOfGroups {\n          ...localGroupsBase\n        }\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query KarmaChangeNotifier($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UserKarmaChanges\n      }\n    }\n  }\n"): (typeof documents)["\n  query KarmaChangeNotifier($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UserKarmaChanges\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostLWUserTooltipContentQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostLWUserTooltipContentQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsList\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TopKarmaUsers($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query TopKarmaUsers($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersMinimumInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AirtableLeaderboards {\n    AirtableLeaderboards {\n      name\n      leaderboardAmount\n    }\n  }\n"): (typeof documents)["\n  query AirtableLeaderboards {\n    AirtableLeaderboards {\n      name\n      leaderboardAmount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n        query getNetKarmaChangesForAuthorsOverPeriod($days: Int!, $limit: Int!) {\n          NetKarmaChangesForAuthorsOverPeriod(days: $days, limit: $limit) {\n            userId\n            netKarma\n          }\n        }\n      "): (typeof documents)["\n        query getNetKarmaChangesForAuthorsOverPeriod($days: Int!, $limit: Int!) {\n          NetKarmaChangesForAuthorsOverPeriod(days: $days, limit: $limit) {\n            userId\n            netKarma\n          }\n        }\n      "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation login($username: String, $password: String) {\n      login(username: $username, password: $password) {\n        token\n      }\n    }\n  "): (typeof documents)["\n    mutation login($username: String, $password: String) {\n      login(username: $username, password: $password) {\n        token\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation signup($email: String, $username: String, $password: String, $subscribeToCurated: Boolean, $reCaptchaToken: String, $abTestKey: String) {\n      signup(email: $email, username: $username, password: $password, subscribeToCurated: $subscribeToCurated, reCaptchaToken: $reCaptchaToken, abTestKey: $abTestKey) {\n        token\n      }\n    }\n  "): (typeof documents)["\n    mutation signup($email: String, $username: String, $password: String, $subscribeToCurated: Boolean, $reCaptchaToken: String, $abTestKey: String) {\n      signup(email: $email, username: $username, password: $password, subscribeToCurated: $subscribeToCurated, reCaptchaToken: $reCaptchaToken, abTestKey: $abTestKey) {\n        token\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation resetPassword($email: String) {\n      resetPassword(email: $email)\n    }\n  "): (typeof documents)["\n    mutation resetPassword($email: String) {\n      resetPassword(email: $email)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation usePasswordResetEmailToken($token: String, $args: JSON) {\n      useEmailToken(token: $token, args: $args)\n    }\n  "): (typeof documents)["\n    mutation usePasswordResetEmailToken($token: String, $args: JSON) {\n      useEmailToken(token: $token, args: $args)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiSubscriptionSubscriptionsListQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SubscriptionState\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiSubscriptionSubscriptionsListQuery($selector: SubscriptionSelector, $limit: Int, $enableTotal: Boolean) {\n    subscriptions(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...SubscriptionState\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserContentFeedPosts($userId: String!, $limit: Int!, $sortedBy: String!) {\n    posts(selector: { userPosts: { userId: $userId, sortedBy: $sortedBy } }, limit: $limit, enableTotal: true) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UserContentFeedPosts($userId: String!, $limit: Int!, $sortedBy: String!) {\n    posts(selector: { userPosts: { userId: $userId, sortedBy: $sortedBy } }, limit: $limit, enableTotal: true) {\n      results {\n        ...PostsListWithVotes\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserContentFeedComments($userId: String!, $limit: Int!, $sortBy: String!) {\n    comments(selector: { profileComments: { userId: $userId, sortBy: $sortBy } }, limit: $limit, enableTotal: true) {\n      results {\n        ...CommentsList\n        post {\n          ...PostsListWithVotes\n        }\n        topLevelComment {\n          ...CommentsListWithTopLevelComment\n        }\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query UserContentFeedComments($userId: String!, $limit: Int!, $sortBy: String!) {\n    comments(selector: { profileComments: { userId: $userId, sortBy: $sortBy } }, limit: $limit, enableTotal: true) {\n      results {\n        ...CommentsList\n        post {\n          ...PostsListWithVotes\n        }\n        topLevelComment {\n          ...CommentsListWithTopLevelComment\n        }\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserContentFeedThread($topLevelCommentId: String!, $limit: Int) {\n    comments(selector: { repliesToCommentThreadIncludingRoot: { topLevelCommentId: $topLevelCommentId } }, limit: $limit) {\n      results {\n        ...UltraFeedComment\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserContentFeedThread($topLevelCommentId: String!, $limit: Int) {\n    comments(selector: { repliesToCommentThreadIncludingRoot: { topLevelCommentId: $topLevelCommentId } }, limit: $limit) {\n      results {\n        ...UltraFeedComment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UsersNameWrapper($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query UsersNameWrapper($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiUserUsersProfileQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiUserUsersProfileQuery($selector: UserSelector, $limit: Int, $enableTotal: Boolean) {\n    users(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...UsersProfile\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserDeactivateAccountSection($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserDeactivateAccountSection($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserDeleteAccountSection($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserDeleteAccountSection($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UsersAccountManagementGetUserBySlug($slug: String!) {\n    GetUserBySlug(slug: $slug) {\n      ...UsersEdit\n    }\n  }\n"): (typeof documents)["\n  query UsersAccountManagementGetUserBySlug($slug: String!) {\n    GetUserBySlug(slug: $slug) {\n      ...UsersEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserUsersEditForm($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserUsersEditForm($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UsersEditFormGetUserBySlug($slug: String!) {\n    GetUserBySlug(slug: $slug) {\n      ...UsersEdit\n    }\n  }\n"): (typeof documents)["\n  query UsersEditFormGetUserBySlug($slug: String!) {\n    GetUserBySlug(slug: $slug) {\n      ...UsersEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SubscribedUser($documentId: String!) {\n    user(input: { selector: { _id: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SubscribedUser($documentId: String!) {\n    user(input: { selector: { _id: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SubscribedPost($documentId: String!) {\n    post(input: { selector: { _id: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query SubscribedPost($documentId: String!) {\n    post(input: { selector: { _id: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SubscribedComment($documentId: String!) {\n    comment(input: { selector: { _id: $documentId } }) {\n      result {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n"): (typeof documents)["\n  query SubscribedComment($documentId: String!) {\n    comment(input: { selector: { _id: $documentId } }) {\n      result {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SubscribedLocalgroup($documentId: String!) {\n    localgroup(input: { selector: { _id: $documentId } }) {\n      result {\n        ...localGroupsBase\n      }\n    }\n  }\n"): (typeof documents)["\n  query SubscribedLocalgroup($documentId: String!) {\n    localgroup(input: { selector: { _id: $documentId } }) {\n      result {\n        ...localGroupsBase\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SubscribedTag($documentId: String!) {\n    tag(input: { selector: { _id: $documentId } }) {\n      result {\n        ...TagPreviewFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query SubscribedTag($documentId: String!) {\n    tag(input: { selector: { _id: $documentId } }) {\n      result {\n        ...TagPreviewFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SubscribedSequence($documentId: String!) {\n    sequence(input: { selector: { _id: $documentId } }) {\n      result {\n        ...SequencesPageTitleFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query SubscribedSequence($documentId: String!) {\n    sequence(input: { selector: { _id: $documentId } }) {\n      result {\n        ...SequencesPageTitleFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateUserReactionsPalette($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateUserReactionsPalette($selector: SelectorInput!, $data: UpdateUserDataInput!) {\n    updateUser(selector: $selector, data: $data) {\n      data {\n        ...UsersCurrent\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation performVoteComment($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteComment(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteComment\n      }\n      showVotingPatternWarning\n    }\n  }\n"): (typeof documents)["\n  mutation performVoteComment($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteComment(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteComment\n      }\n      showVotingPatternWarning\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation performVotePost($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVotePost(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVotePost\n      }\n      showVotingPatternWarning\n    }\n  }\n"): (typeof documents)["\n  mutation performVotePost($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVotePost(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVotePost\n      }\n      showVotingPatternWarning\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation performVoteTagRel($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteTagRel(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteTagRel\n      }\n      showVotingPatternWarning\n    }\n  }\n"): (typeof documents)["\n  mutation performVoteTagRel($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteTagRel(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteTagRel\n      }\n      showVotingPatternWarning\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation performVoteRevision($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteRevision(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteRevision\n      }\n      showVotingPatternWarning\n    }\n  }\n"): (typeof documents)["\n  mutation performVoteRevision($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteRevision(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteRevision\n      }\n      showVotingPatternWarning\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation performVoteElectionCandidate($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteElectionCandidate(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteElectionCandidate\n      }\n      showVotingPatternWarning\n    }\n  }\n"): (typeof documents)["\n  mutation performVoteElectionCandidate($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteElectionCandidate(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteElectionCandidate\n      }\n      showVotingPatternWarning\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation performVoteTag($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteTag(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteTag\n      }\n      showVotingPatternWarning\n    }\n  }\n"): (typeof documents)["\n  mutation performVoteTag($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteTag(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteTag\n      }\n      showVotingPatternWarning\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation performVoteMultiDocument($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteMultiDocument(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteMultiDocument\n      }\n      showVotingPatternWarning\n    }\n  }\n"): (typeof documents)["\n  mutation performVoteMultiDocument($documentId: String, $voteType: String, $extendedVote: JSON) {\n    performVoteMultiDocument(documentId: $documentId, voteType: $voteType, extendedVote: $extendedVote) {\n      document {\n        ...WithVoteMultiDocument\n      }\n      showVotingPatternWarning\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query emailstests($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsRevision\n      }\n    }\n  }\n"): (typeof documents)["\n  query emailstests($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsRevision\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateCommentCommentsNewForm($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentComment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateCommentCommentsNewForm($selector: SelectorInput!, $data: UpdateCommentDataInput!) {\n    updateComment(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentComment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePostPostsEditForm($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentPost\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updatePostPostsEditForm($selector: SelectorInput!, $data: UpdatePostDataInput!) {\n    updatePost(selector: $selector, data: $data) {\n      data {\n        ...SuggestAlignmentPost\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AdvisorRequestsMinimumInfo on AdvisorRequest {\n    _id\n    userId\n    createdAt\n    interestedInMetaculus\n    jobAds\n  }\n"): (typeof documents)["\n  fragment AdvisorRequestsMinimumInfo on AdvisorRequest {\n    _id\n    userId\n    createdAt\n    interestedInMetaculus\n    jobAds\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AutomatedContentEvaluationsFragment on AutomatedContentEvaluation {\n    _id\n    score\n    sentenceScores {\n      sentence\n      score\n    }\n    aiChoice\n    aiReasoning\n    aiCoT\n  }\n"): (typeof documents)["\n  fragment AutomatedContentEvaluationsFragment on AutomatedContentEvaluation {\n    _id\n    score\n    sentenceScores {\n      sentence\n      score\n    }\n    aiChoice\n    aiReasoning\n    aiCoT\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment BansAdminPageFragment on Ban {\n    _id\n    createdAt\n    expirationDate\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    reason\n    comment\n    ip\n    properties\n  }\n"): (typeof documents)["\n  fragment BansAdminPageFragment on Ban {\n    _id\n    createdAt\n    expirationDate\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    reason\n    comment\n    ip\n    properties\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment BookmarksWithDocumentFragment on Bookmark {\n    ...BookmarksDefaultFragment\n    post {\n      ...PostsListWithVotes\n    }\n  }\n"): (typeof documents)["\n  fragment BookmarksWithDocumentFragment on Bookmark {\n    ...BookmarksDefaultFragment\n    post {\n      ...PostsListWithVotes\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment BookmarksFeedItemFragment on Bookmark {\n    ...BookmarksDefaultFragment\n    post {\n      ...PostsListWithVotes\n    }\n    comment {\n      ...UltraFeedComment\n    }\n  }\n"): (typeof documents)["\n  fragment BookmarksFeedItemFragment on Bookmark {\n    ...BookmarksDefaultFragment\n    post {\n      ...PostsListWithVotes\n    }\n    comment {\n      ...UltraFeedComment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment BookPageFragment on Book {\n    _id\n    createdAt\n    title\n    number\n    subtitle\n    tocTitle\n    contents {\n      ...RevisionDisplay\n    }\n    sequenceIds\n    sequences {\n      ...SequencesPageWithChaptersFragment\n    }\n    postIds\n    posts {\n      ...PostsListWithVotes\n    }\n    collectionId\n    displaySequencesAsGrid\n    hideProgressBar\n    showChapters\n  }\n"): (typeof documents)["\n  fragment BookPageFragment on Book {\n    _id\n    createdAt\n    title\n    number\n    subtitle\n    tocTitle\n    contents {\n      ...RevisionDisplay\n    }\n    sequenceIds\n    sequences {\n      ...SequencesPageWithChaptersFragment\n    }\n    postIds\n    posts {\n      ...PostsListWithVotes\n    }\n    collectionId\n    displaySequencesAsGrid\n    hideProgressBar\n    showChapters\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment BookEdit on Book {\n    ...BookPageFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment BookEdit on Book {\n    ...BookPageFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ChaptersFragment on Chapter {\n    _id\n    createdAt\n    title\n    subtitle\n    contents {\n      ...RevisionDisplay\n    }\n    number\n    sequenceId\n    postIds\n    posts {\n      ...PostsListWithVotes\n    }\n  }\n"): (typeof documents)["\n  fragment ChaptersFragment on Chapter {\n    _id\n    createdAt\n    title\n    subtitle\n    contents {\n      ...RevisionDisplay\n    }\n    number\n    sequenceId\n    postIds\n    posts {\n      ...PostsListWithVotes\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ChaptersEdit on Chapter {\n    ...ChaptersFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment ChaptersEdit on Chapter {\n    ...ChaptersFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CkEditorUserSessionInfo on CkEditorUserSession {\n    _id\n    userId\n    documentId\n    endedAt\n    endedBy\n  }\n"): (typeof documents)["\n  fragment CkEditorUserSessionInfo on CkEditorUserSession {\n    _id\n    userId\n    documentId\n    endedAt\n    endedBy\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ModeratorClientIDInfo on ClientId {\n    _id\n    clientId\n    createdAt\n    firstSeenReferrer\n    firstSeenLandingPage\n    users {\n      ...UsersMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment ModeratorClientIDInfo on ClientId {\n    _id\n    clientId\n    createdAt\n    firstSeenReferrer\n    firstSeenLandingPage\n    users {\n      ...UsersMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CollectionContinueReadingFragment on Collection {\n    _id\n    title\n    slug\n    gridImageId\n  }\n"): (typeof documents)["\n  fragment CollectionContinueReadingFragment on Collection {\n    _id\n    title\n    slug\n    gridImageId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CollectionsPageFragment on Collection {\n    _id\n    createdAt\n    slug\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    contents {\n      ...RevisionDisplay\n    }\n    firstPageLink\n    gridImageId\n    books {\n      ...BookPageFragment\n    }\n    hideStartReadingButton\n    noindex\n  }\n"): (typeof documents)["\n  fragment CollectionsPageFragment on Collection {\n    _id\n    createdAt\n    slug\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    contents {\n      ...RevisionDisplay\n    }\n    firstPageLink\n    gridImageId\n    books {\n      ...BookPageFragment\n    }\n    hideStartReadingButton\n    noindex\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CollectionsEditFragment on Collection {\n    ...CollectionsPageFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment CollectionsEditFragment on Collection {\n    ...CollectionsPageFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CollectionsBestOfFragment on Collection {\n    _id\n    createdAt\n    slug\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    gridImageId\n    noindex\n    postsCount\n    readPostsCount\n    contents {\n      ...RevisionDisplay\n    }\n  }\n"): (typeof documents)["\n  fragment CollectionsBestOfFragment on Collection {\n    _id\n    createdAt\n    slug\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    gridImageId\n    noindex\n    postsCount\n    readPostsCount\n    contents {\n      ...RevisionDisplay\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentModeratorActionDisplay on CommentModeratorAction {\n    _id\n    comment {\n      ...CommentsListWithModerationMetadata\n    }\n    commentId\n    type\n    active\n    createdAt\n    endedAt\n  }\n"): (typeof documents)["\n  fragment CommentModeratorActionDisplay on CommentModeratorAction {\n    _id\n    comment {\n      ...CommentsListWithModerationMetadata\n    }\n    commentId\n    type\n    active\n    createdAt\n    endedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentsList on Comment {\n    _id\n    postId\n    tagId\n    tag {\n      _id\n      slug\n    }\n    relevantTagIds\n    relevantTags {\n      ...TagPreviewFragment\n    }\n    tagCommentType\n    parentCommentId\n    topLevelCommentId\n    descendentCount\n    title\n    contents {\n      _id\n      html\n      plaintextMainText\n      wordCount\n    }\n    postedAt\n    lastEditedAt\n    repliesBlockedUntil\n    userId\n    draft\n    deleted\n    deletedPublic\n    deletedByUserId\n    deletedReason\n    hideAuthor\n    authorIsUnreviewed\n    user {\n      ...UsersMinimumInfo\n    }\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    voteCount\n    emojiReactors\n    af\n    afDate\n    moveToAlignmentUserId\n    afBaseScore\n    afExtendedScore\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    needsReview\n    answer\n    parentAnswerId\n    retracted\n    postVersion\n    reviewedByUserId\n    shortform\n    shortformFrontpage\n    lastSubthreadActivity\n    moderatorHat\n    hideModeratorHat\n    nominatedForReview\n    reviewingForReview\n    promoted\n    promotedByUser {\n      ...UsersMinimumInfo\n    }\n    directChildrenCount\n    votingSystem\n    isPinnedOnProfile\n    debateResponse\n    rejected\n    rejectedReason\n    originalDialogueId\n\n    forumEventId\n    forumEventMetadata\n  }\n"): (typeof documents)["\n  fragment CommentsList on Comment {\n    _id\n    postId\n    tagId\n    tag {\n      _id\n      slug\n    }\n    relevantTagIds\n    relevantTags {\n      ...TagPreviewFragment\n    }\n    tagCommentType\n    parentCommentId\n    topLevelCommentId\n    descendentCount\n    title\n    contents {\n      _id\n      html\n      plaintextMainText\n      wordCount\n    }\n    postedAt\n    lastEditedAt\n    repliesBlockedUntil\n    userId\n    draft\n    deleted\n    deletedPublic\n    deletedByUserId\n    deletedReason\n    hideAuthor\n    authorIsUnreviewed\n    user {\n      ...UsersMinimumInfo\n    }\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    voteCount\n    emojiReactors\n    af\n    afDate\n    moveToAlignmentUserId\n    afBaseScore\n    afExtendedScore\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    needsReview\n    answer\n    parentAnswerId\n    retracted\n    postVersion\n    reviewedByUserId\n    shortform\n    shortformFrontpage\n    lastSubthreadActivity\n    moderatorHat\n    hideModeratorHat\n    nominatedForReview\n    reviewingForReview\n    promoted\n    promotedByUser {\n      ...UsersMinimumInfo\n    }\n    directChildrenCount\n    votingSystem\n    isPinnedOnProfile\n    debateResponse\n    rejected\n    rejectedReason\n    originalDialogueId\n\n    forumEventId\n    forumEventMetadata\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentsListWithTopLevelComment on Comment {\n    ...CommentsList\n    topLevelComment {\n      ...CommentsList\n    }\n  }\n"): (typeof documents)["\n  fragment CommentsListWithTopLevelComment on Comment {\n    ...CommentsList\n    topLevelComment {\n      ...CommentsList\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UltraFeedComment on Comment {\n    ...CommentsList\n    post {\n      ...PostsListWithVotes\n    }\n  }\n"): (typeof documents)["\n  fragment UltraFeedComment on Comment {\n    ...CommentsList\n    post {\n      ...PostsListWithVotes\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ShortformComments on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    relevantTags {\n      ...TagPreviewFragment\n    }\n  }\n"): (typeof documents)["\n  fragment ShortformComments on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    relevantTags {\n      ...TagPreviewFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DraftComments on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    parentComment {\n      _id\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment DraftComments on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    parentComment {\n      _id\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentWithRepliesFragment on Comment {\n    ...CommentsList\n    lastSubthreadActivity\n    latestChildren {\n      ...CommentsList\n    }\n    tag {\n      ...TagBasicInfo\n    }\n    post {\n      ...PostsBase\n    }\n  }\n"): (typeof documents)["\n  fragment CommentWithRepliesFragment on Comment {\n    ...CommentsList\n    lastSubthreadActivity\n    latestChildren {\n      ...CommentsList\n    }\n    tag {\n      ...TagBasicInfo\n    }\n    post {\n      ...PostsBase\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentEdit on Comment {\n    ...CommentsList\n    relevantTagIds\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment CommentEdit on Comment {\n    ...CommentsList\n    relevantTagIds\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DeletedCommentsMetaData on Comment {\n    _id\n    deleted\n    deletedDate\n    deletedByUser {\n      _id\n      displayName\n    }\n    deletedReason\n    deletedPublic\n  }\n"): (typeof documents)["\n  fragment DeletedCommentsMetaData on Comment {\n    _id\n    deleted\n    deletedDate\n    deletedByUser {\n      _id\n      displayName\n    }\n    deletedReason\n    deletedPublic\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DeletedCommentsModerationLog on Comment {\n    ...DeletedCommentsMetaData\n    user {\n      ...UsersMinimumInfo\n    }\n    post {\n      title\n      slug\n      _id\n    }\n  }\n"): (typeof documents)["\n  fragment DeletedCommentsModerationLog on Comment {\n    ...DeletedCommentsMetaData\n    user {\n      ...UsersMinimumInfo\n    }\n    post {\n      title\n      slug\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentsListWithParentMetadata on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n      isRead\n    }\n    tag {\n      ...TagBasicInfo\n    }\n  }\n"): (typeof documents)["\n  fragment CommentsListWithParentMetadata on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n      isRead\n    }\n    tag {\n      ...TagBasicInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment StickySubforumCommentFragment on Comment {\n    ...CommentWithRepliesFragment\n    tag {\n      ...TagBasicInfo\n    }\n  }\n"): (typeof documents)["\n  fragment StickySubforumCommentFragment on Comment {\n    ...CommentWithRepliesFragment\n    tag {\n      ...TagBasicInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment WithVoteComment on Comment {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n  }\n"): (typeof documents)["\n  fragment WithVoteComment on Comment {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentsListWithModerationMetadata on Comment {\n    ...CommentWithRepliesFragment\n    allVotes {\n      voteType\n    }\n  }\n"): (typeof documents)["\n  fragment CommentsListWithModerationMetadata on Comment {\n    ...CommentWithRepliesFragment\n    allVotes {\n      voteType\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentsListWithModGPTAnalysis on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    modGPTAnalysis\n  }\n"): (typeof documents)["\n  fragment CommentsListWithModGPTAnalysis on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    modGPTAnalysis\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentsForAutocomplete on Comment {\n    _id\n    postId\n    baseScore\n    extendedScore\n    createdAt\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      markdown\n    }\n    post {\n      ...PostsForAutocomplete\n    }\n  }\n"): (typeof documents)["\n  fragment CommentsForAutocomplete on Comment {\n    _id\n    postId\n    baseScore\n    extendedScore\n    createdAt\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      markdown\n    }\n    post {\n      ...PostsForAutocomplete\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentsForAutocompleteWithParents on Comment {\n    ...CommentsForAutocomplete\n    parentComment {\n      ...CommentsForAutocomplete\n      parentComment {\n        ...CommentsForAutocomplete\n        parentComment {\n          ...CommentsForAutocomplete\n          parentComment {\n            ...CommentsForAutocomplete\n            parentComment {\n              ...CommentsForAutocomplete\n              parentComment {\n                ...CommentsForAutocomplete\n                parentComment {\n                  ...CommentsForAutocomplete\n                  parentComment {\n                    ...CommentsForAutocomplete\n                    parentComment {\n                      ...CommentsForAutocomplete\n                      parentComment {\n                        ...CommentsForAutocomplete\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CommentsForAutocompleteWithParents on Comment {\n    ...CommentsForAutocomplete\n    parentComment {\n      ...CommentsForAutocomplete\n      parentComment {\n        ...CommentsForAutocomplete\n        parentComment {\n          ...CommentsForAutocomplete\n          parentComment {\n            ...CommentsForAutocomplete\n            parentComment {\n              ...CommentsForAutocomplete\n              parentComment {\n                ...CommentsForAutocomplete\n                parentComment {\n                  ...CommentsForAutocomplete\n                  parentComment {\n                    ...CommentsForAutocomplete\n                    parentComment {\n                      ...CommentsForAutocomplete\n                      parentComment {\n                        ...CommentsForAutocomplete\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SuggestAlignmentComment on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    suggestForAlignmentUserIds\n    suggestForAlignmentUsers {\n      _id\n      displayName\n    }\n  }\n"): (typeof documents)["\n  fragment SuggestAlignmentComment on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    suggestForAlignmentUserIds\n    suggestForAlignmentUsers {\n      _id\n      displayName\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ConversationsMinimumInfo on Conversation {\n    _id\n    createdAt\n    latestActivity\n    title\n    participantIds\n    archivedByIds\n    messageCount\n    moderator\n  }\n"): (typeof documents)["\n  fragment ConversationsMinimumInfo on Conversation {\n    _id\n    createdAt\n    latestActivity\n    title\n    participantIds\n    archivedByIds\n    messageCount\n    moderator\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ConversationsList on Conversation {\n    ...ConversationsMinimumInfo\n    participants {\n      ...UsersMinimumInfo\n    }\n    latestMessage {\n      ...messageListFragment\n    }\n  }\n"): (typeof documents)["\n  fragment ConversationsList on Conversation {\n    ...ConversationsMinimumInfo\n    participants {\n      ...UsersMinimumInfo\n    }\n    latestMessage {\n      ...messageListFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ConversationsListWithReadStatus on Conversation {\n    ...ConversationsList\n    hasUnreadMessages\n  }\n"): (typeof documents)["\n  fragment ConversationsListWithReadStatus on Conversation {\n    ...ConversationsList\n    hasUnreadMessages\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CurationNoticesFragment on CurationNotice {\n    _id\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    commentId\n    comment {\n      ...CommentsList\n    }\n    postId\n    post {\n      ...PostsMinimumInfo\n    }\n    deleted\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment CurationNoticesFragment on CurationNotice {\n    _id\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    commentId\n    comment {\n      ...CommentsList\n    }\n    postId\n    post {\n      ...PostsMinimumInfo\n    }\n    deleted\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DialogueCheckInfo on DialogueCheck {\n    _id\n    userId\n    targetUserId\n    checked\n    checkedAt\n    hideInRecommendations\n    matchPreference {\n      ...DialogueMatchPreferenceInfo\n    }\n    reciprocalMatchPreference {\n      ...DialogueMatchPreferenceInfo\n    }\n  }\n"): (typeof documents)["\n  fragment DialogueCheckInfo on DialogueCheck {\n    _id\n    userId\n    targetUserId\n    checked\n    checkedAt\n    hideInRecommendations\n    matchPreference {\n      ...DialogueMatchPreferenceInfo\n    }\n    reciprocalMatchPreference {\n      ...DialogueMatchPreferenceInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DialogueMatchPreferenceInfo on DialogueMatchPreference {\n    _id\n    dialogueCheckId\n    topicNotes\n    topicPreferences\n    syncPreference\n    asyncPreference\n    formatNotes\n    generatedDialogueId\n    deleted\n  }\n"): (typeof documents)["\n  fragment DialogueMatchPreferenceInfo on DialogueMatchPreference {\n    _id\n    dialogueCheckId\n    topicNotes\n    topicPreferences\n    syncPreference\n    asyncPreference\n    formatNotes\n    generatedDialogueId\n    deleted\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DigestPostsMinimumInfo on DigestPost {\n    _id\n    digestId\n    postId\n    emailDigestStatus\n    onsiteDigestStatus\n  }\n"): (typeof documents)["\n  fragment DigestPostsMinimumInfo on DigestPost {\n    _id\n    digestId\n    postId\n    emailDigestStatus\n    onsiteDigestStatus\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DigestsMinimumInfo on Digest {\n    _id\n    num\n    startDate\n    endDate\n    publishedDate\n    onsiteImageId\n    onsitePrimaryColor\n  }\n"): (typeof documents)["\n  fragment DigestsMinimumInfo on Digest {\n    _id\n    num\n    startDate\n    endDate\n    publishedDate\n    onsiteImageId\n    onsitePrimaryColor\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ElectionCandidateBasicInfo on ElectionCandidate {\n    _id\n    electionName\n    name\n    logoSrc\n    href\n    fundraiserLink\n    gwwcLink\n    gwwcId\n    description\n    tagId\n    tag {\n      ...TagBasicInfo\n    }\n    postCount\n    baseScore\n    score\n    extendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment ElectionCandidateBasicInfo on ElectionCandidate {\n    _id\n    electionName\n    name\n    logoSrc\n    href\n    fundraiserLink\n    gwwcLink\n    gwwcId\n    description\n    tagId\n    tag {\n      ...TagBasicInfo\n    }\n    postCount\n    baseScore\n    score\n    extendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ElectionCandidateSimple on ElectionCandidate {\n    _id\n    name\n    logoSrc\n    href\n    fundraiserLink\n    description\n  }\n"): (typeof documents)["\n  fragment ElectionCandidateSimple on ElectionCandidate {\n    _id\n    name\n    logoSrc\n    href\n    fundraiserLink\n    description\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment WithVoteElectionCandidate on ElectionCandidate {\n    __typename\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment WithVoteElectionCandidate on ElectionCandidate {\n    __typename\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ElectionVoteInfo on ElectionVote {\n    _id\n    electionName\n    userId\n    compareState\n    vote\n    submittedAt\n    submissionComments\n    userExplanation\n    userOtherComments\n  }\n"): (typeof documents)["\n  fragment ElectionVoteInfo on ElectionVote {\n    _id\n    electionName\n    userId\n    compareState\n    vote\n    submittedAt\n    submissionComments\n    userExplanation\n    userOtherComments\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ElectionVoteRecentDiscussion on ElectionVote {\n    _id\n    electionName\n    submittedAt\n  }\n"): (typeof documents)["\n  fragment ElectionVoteRecentDiscussion on ElectionVote {\n    _id\n    electionName\n    submittedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ElicitQuestionFragment on ElicitQuestion {\n    _id\n    title\n    notes\n    resolution\n    resolvesBy\n  }\n"): (typeof documents)["\n  fragment ElicitQuestionFragment on ElicitQuestion {\n    _id\n    title\n    notes\n    resolution\n    resolvesBy\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FeaturedResourcesFragment on FeaturedResource {\n    _id\n    title\n    body\n    ctaText\n    ctaUrl\n    expiresAt\n  }\n"): (typeof documents)["\n  fragment FeaturedResourcesFragment on FeaturedResource {\n    _id\n    title\n    body\n    ctaText\n    ctaUrl\n    expiresAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FieldChangeFragment on FieldChange {\n    _id\n    createdAt\n    userId\n    changeGroup\n    documentId\n    fieldName\n    oldValue\n    newValue\n  }\n"): (typeof documents)["\n  fragment FieldChangeFragment on FieldChange {\n    _id\n    createdAt\n    userId\n    changeGroup\n    documentId\n    fieldName\n    oldValue\n    newValue\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ForumEventsMinimumInfo on ForumEvent {\n    _id\n    title\n    startDate\n    endDate\n    darkColor\n    lightColor\n    bannerTextColor\n    contrastColor\n    tagId\n    postId\n    commentId\n    bannerImageId\n    eventFormat\n    customComponent\n    commentPrompt\n    isGlobal\n\n    pollAgreeWording\n    pollDisagreeWording\n\n    maxStickersPerUser\n  }\n"): (typeof documents)["\n  fragment ForumEventsMinimumInfo on ForumEvent {\n    _id\n    title\n    startDate\n    endDate\n    darkColor\n    lightColor\n    bannerTextColor\n    contrastColor\n    tagId\n    postId\n    commentId\n    bannerImageId\n    eventFormat\n    customComponent\n    commentPrompt\n    isGlobal\n\n    pollAgreeWording\n    pollDisagreeWording\n\n    maxStickersPerUser\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ForumEventsDisplay on ForumEvent {\n    ...ForumEventsMinimumInfo\n    publicData\n    voteCount\n\n    post {\n      ...PostsMinimumInfo\n    }\n    tag {\n      ...TagBasicInfo\n    }\n    frontpageDescription {\n      _id\n      html\n    }\n    frontpageDescriptionMobile {\n      _id\n      html\n    }\n    postPageDescription {\n      _id\n      html\n    }\n    pollQuestion {\n      _id\n      html\n      plaintextMainText\n    }\n  }\n"): (typeof documents)["\n  fragment ForumEventsDisplay on ForumEvent {\n    ...ForumEventsMinimumInfo\n    publicData\n    voteCount\n\n    post {\n      ...PostsMinimumInfo\n    }\n    tag {\n      ...TagBasicInfo\n    }\n    frontpageDescription {\n      _id\n      html\n    }\n    frontpageDescriptionMobile {\n      _id\n      html\n    }\n    postPageDescription {\n      _id\n      html\n    }\n    pollQuestion {\n      _id\n      html\n      plaintextMainText\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ForumEventsEdit on ForumEvent {\n    ...ForumEventsMinimumInfo\n    frontpageDescription {\n      ...RevisionEdit\n    }\n    frontpageDescriptionMobile {\n      ...RevisionEdit\n    }\n    postPageDescription {\n      ...RevisionEdit\n    }\n    pollQuestion {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment ForumEventsEdit on ForumEvent {\n    ...ForumEventsMinimumInfo\n    frontpageDescription {\n      ...RevisionEdit\n    }\n    frontpageDescriptionMobile {\n      ...RevisionEdit\n    }\n    postPageDescription {\n      ...RevisionEdit\n    }\n    pollQuestion {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment GardenCodeFragment on GardenCode {\n    _id\n    code\n    title\n    userId\n    deleted\n    slug\n    startTime\n    endTime\n    fbLink\n    type\n    afOnly\n    contents {\n      ...RevisionDisplay\n    }\n  }\n"): (typeof documents)["\n  fragment GardenCodeFragment on GardenCode {\n    _id\n    code\n    title\n    userId\n    deleted\n    slug\n    startTime\n    endTime\n    fbLink\n    type\n    afOnly\n    contents {\n      ...RevisionDisplay\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment GardenCodeFragmentEdit on GardenCode {\n    _id\n    code\n    title\n    userId\n    deleted\n    slug\n    startTime\n    endTime\n    fbLink\n    type\n    afOnly\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment GardenCodeFragmentEdit on GardenCode {\n    _id\n    code\n    title\n    userId\n    deleted\n    slug\n    startTime\n    endTime\n    fbLink\n    type\n    afOnly\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment GoogleServiceAccountSessionInfo on GoogleServiceAccountSession {\n    _id\n    email\n  }\n"): (typeof documents)["\n  fragment GoogleServiceAccountSessionInfo on GoogleServiceAccountSession {\n    _id\n    email\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment GoogleServiceAccountSessionAdminInfo on GoogleServiceAccountSession {\n    _id\n    email\n    estimatedExpiry\n  }\n"): (typeof documents)["\n  fragment GoogleServiceAccountSessionAdminInfo on GoogleServiceAccountSession {\n    _id\n    email\n    estimatedExpiry\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment JargonTerms on JargonTerm {\n    _id\n    postId\n    term\n    contents {\n      ...RevisionEdit\n    }\n    humansAndOrAIEdited\n    approved\n    deleted\n    altTerms\n  }\n"): (typeof documents)["\n  fragment JargonTerms on JargonTerm {\n    _id\n    postId\n    term\n    contents {\n      ...RevisionEdit\n    }\n    humansAndOrAIEdited\n    approved\n    deleted\n    altTerms\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment JargonTermsPost on JargonTerm {\n    _id\n    term\n    humansAndOrAIEdited\n    approved\n    deleted\n    altTerms\n    contents {\n      ...RevisionDisplay\n    }\n  }\n"): (typeof documents)["\n  fragment JargonTermsPost on JargonTerm {\n    _id\n    term\n    humansAndOrAIEdited\n    approved\n    deleted\n    altTerms\n    contents {\n      ...RevisionDisplay\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment JargonTermsWithPostInfo on JargonTerm {\n    ...JargonTerms\n    post {\n      ...PostsMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment JargonTermsWithPostInfo on JargonTerm {\n    ...JargonTerms\n    post {\n      ...PostsMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LlmConversationsFragment on LlmConversation {\n    _id\n    userId\n    title\n    createdAt\n    lastUpdatedAt\n    deleted\n  }\n"): (typeof documents)["\n  fragment LlmConversationsFragment on LlmConversation {\n    _id\n    userId\n    title\n    createdAt\n    lastUpdatedAt\n    deleted\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LlmConversationsViewingPageFragment on LlmConversation {\n    ...LlmConversationsFragment\n    totalCharacterCount\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment LlmConversationsViewingPageFragment on LlmConversation {\n    ...LlmConversationsFragment\n    totalCharacterCount\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LlmConversationsWithMessagesFragment on LlmConversation {\n    ...LlmConversationsFragment\n    messages {\n      ...LlmMessagesFragment\n    }\n  }\n"): (typeof documents)["\n  fragment LlmConversationsWithMessagesFragment on LlmConversation {\n    ...LlmConversationsFragment\n    messages {\n      ...LlmMessagesFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LlmMessagesFragment on LlmMessage {\n    _id\n    userId\n    conversationId\n    role\n    content\n    createdAt\n  }\n"): (typeof documents)["\n  fragment LlmMessagesFragment on LlmMessage {\n    _id\n    userId\n    conversationId\n    role\n    content\n    createdAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment localGroupsBase on Localgroup {\n    _id\n    createdAt\n    organizerIds\n    organizers {\n      ...UsersMinimumInfo\n    }\n    lastActivity\n    name\n    nameInAnotherLanguage\n    isOnline\n    location\n    googleLocation\n    mongoLocation\n    types\n    categories\n    contactInfo\n    facebookLink\n    facebookPageLink\n    meetupLink\n    slackLink\n    website\n    bannerImageId\n    inactive\n    deleted\n  }\n"): (typeof documents)["\n  fragment localGroupsBase on Localgroup {\n    _id\n    createdAt\n    organizerIds\n    organizers {\n      ...UsersMinimumInfo\n    }\n    lastActivity\n    name\n    nameInAnotherLanguage\n    isOnline\n    location\n    googleLocation\n    mongoLocation\n    types\n    categories\n    contactInfo\n    facebookLink\n    facebookPageLink\n    meetupLink\n    slackLink\n    website\n    bannerImageId\n    inactive\n    deleted\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment localGroupsHomeFragment on Localgroup {\n    ...localGroupsBase\n    contents {\n      ...RevisionDisplay\n    }\n  }\n"): (typeof documents)["\n  fragment localGroupsHomeFragment on Localgroup {\n    ...localGroupsBase\n    contents {\n      ...RevisionDisplay\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment localGroupsEdit on Localgroup {\n    ...localGroupsBase\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment localGroupsEdit on Localgroup {\n    ...localGroupsBase\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment localGroupsIsOnline on Localgroup {\n    _id\n    name\n    isOnline\n  }\n"): (typeof documents)["\n  fragment localGroupsIsOnline on Localgroup {\n    _id\n    name\n    isOnline\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment newEventFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    name\n    important\n    properties\n    intercom\n  }\n"): (typeof documents)["\n  fragment newEventFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    name\n    important\n    properties\n    intercom\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment lastEventFragment on LWEvent {\n    _id\n    createdAt\n    documentId\n    userId\n    name\n    important\n    properties\n    intercom\n  }\n"): (typeof documents)["\n  fragment lastEventFragment on LWEvent {\n    _id\n    createdAt\n    documentId\n    userId\n    name\n    important\n    properties\n    intercom\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment lwEventsAdminPageFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    name\n    documentId\n    important\n    properties\n    intercom\n  }\n"): (typeof documents)["\n  fragment lwEventsAdminPageFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    name\n    documentId\n    important\n    properties\n    intercom\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment emailHistoryFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    name\n    properties\n  }\n"): (typeof documents)["\n  fragment emailHistoryFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    name\n    properties\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment messageListFragment on Message {\n    _id\n    user {\n      ...UsersMinimumInfo\n      profileImageId\n    }\n    contents {\n      html\n      plaintextMainText\n    }\n    createdAt\n    conversationId\n  }\n"): (typeof documents)["\n  fragment messageListFragment on Message {\n    _id\n    user {\n      ...UsersMinimumInfo\n      profileImageId\n    }\n    contents {\n      html\n      plaintextMainText\n    }\n    createdAt\n    conversationId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ModerationTemplateFragment on ModerationTemplate {\n    _id\n    name\n    collectionName\n    order\n    deleted\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment ModerationTemplateFragment on ModerationTemplate {\n    _id\n    name\n    collectionName\n    order\n    deleted\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ModeratorActionDisplay on ModeratorAction {\n    _id\n    user {\n      ...UsersMinimumInfo\n    }\n    userId\n    type\n    active\n    createdAt\n    endedAt\n  }\n"): (typeof documents)["\n  fragment ModeratorActionDisplay on ModeratorAction {\n    _id\n    user {\n      ...UsersMinimumInfo\n    }\n    userId\n    type\n    active\n    createdAt\n    endedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MultiDocumentMinimumInfo on MultiDocument {\n    _id\n    parentDocumentId\n    collectionName\n    fieldName\n    userId\n    slug\n    oldSlugs\n    title\n    tabTitle\n    tabSubtitle\n    preview\n    index\n    deleted\n    createdAt\n    legacyData\n\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment MultiDocumentMinimumInfo on MultiDocument {\n    _id\n    parentDocumentId\n    collectionName\n    fieldName\n    userId\n    slug\n    oldSlugs\n    title\n    tabTitle\n    tabSubtitle\n    preview\n    index\n    deleted\n    createdAt\n    legacyData\n\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MultiDocumentContentDisplay on MultiDocument {\n    ...MultiDocumentMinimumInfo\n    tableOfContents\n    textLastUpdatedAt\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment MultiDocumentContentDisplay on MultiDocument {\n    ...MultiDocumentMinimumInfo\n    tableOfContents\n    textLastUpdatedAt\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MultiDocumentEdit on MultiDocument {\n    ...MultiDocumentContentDisplay\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    summaries {\n      ...MultiDocumentContentDisplay\n    }\n    textLastUpdatedAt\n  }\n"): (typeof documents)["\n  fragment MultiDocumentEdit on MultiDocument {\n    ...MultiDocumentContentDisplay\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    summaries {\n      ...MultiDocumentContentDisplay\n    }\n    textLastUpdatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MultiDocumentParentDocument on MultiDocument {\n    ...MultiDocumentEdit\n    parentTag {\n      ...TagHistoryFragment\n    }\n  }\n"): (typeof documents)["\n  fragment MultiDocumentParentDocument on MultiDocument {\n    ...MultiDocumentEdit\n    parentTag {\n      ...TagHistoryFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MultiDocumentWithContributors on MultiDocument {\n    ...MultiDocumentEdit\n    contributors {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        currentAttributionCharCount\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment MultiDocumentWithContributors on MultiDocument {\n    ...MultiDocumentEdit\n    contributors {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        currentAttributionCharCount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MultiDocumentRevision on MultiDocument {\n    ...MultiDocumentMinimumInfo\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n    tableOfContents(version: $version)\n  }\n"): (typeof documents)["\n  fragment MultiDocumentRevision on MultiDocument {\n    ...MultiDocumentMinimumInfo\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n    tableOfContents(version: $version)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MultiDocumentWithContributorsRevision on MultiDocument {\n    ...MultiDocumentRevision\n    contributors(version: $version) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        currentAttributionCharCount\n        contributionScore\n      }\n    }\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    textLastUpdatedAt\n  }\n"): (typeof documents)["\n  fragment MultiDocumentWithContributorsRevision on MultiDocument {\n    ...MultiDocumentRevision\n    contributors(version: $version) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        currentAttributionCharCount\n        contributionScore\n      }\n    }\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    textLastUpdatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment WithVoteMultiDocument on MultiDocument {\n    ...MultiDocumentMinimumInfo\n  }\n"): (typeof documents)["\n  fragment WithVoteMultiDocument on MultiDocument {\n    ...MultiDocumentMinimumInfo\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NotificationsList on Notification {\n    _id\n    documentId\n    documentType\n    deleted\n    userId\n    createdAt\n    link\n    message\n    type\n    viewed\n    extraData\n  }\n"): (typeof documents)["\n  fragment NotificationsList on Notification {\n    _id\n    documentId\n    documentType\n    deleted\n    userId\n    createdAt\n    link\n    message\n    type\n    viewed\n    extraData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PetrovDayActionInfo on PetrovDayAction {\n    _id\n    createdAt\n    userId\n    actionType\n    data\n  }\n"): (typeof documents)["\n  fragment PetrovDayActionInfo on PetrovDayAction {\n    _id\n    createdAt\n    userId\n    actionType\n    data\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PetrovDayLaunchInfo on PetrovDayLaunch {\n    _id\n    createdAt\n    launchCode\n    userId\n  }\n"): (typeof documents)["\n  fragment PetrovDayLaunchInfo on PetrovDayLaunch {\n    _id\n    createdAt\n    launchCode\n    userId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PodcastEpisodeFull on PodcastEpisode {\n    _id\n    podcastId\n    title\n    episodeLink\n    externalEpisodeId\n  }\n"): (typeof documents)["\n  fragment PodcastEpisodeFull on PodcastEpisode {\n    _id\n    podcastId\n    title\n    episodeLink\n    externalEpisodeId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PodcastSelect on Podcast {\n    _id\n    title\n  }\n"): (typeof documents)["\n  fragment PodcastSelect on Podcast {\n    _id\n    title\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsMinimumInfo on Post {\n    _id\n    slug\n    title\n    draft\n    shortform\n    hideCommentKarma\n    af\n    currentUserReviewVote {\n      _id\n      qualitativeScore\n      quadraticScore\n    }\n    userId\n    coauthorStatuses {\n      userId\n      confirmed\n      requested\n    }\n    hasCoauthorPermission\n    rejected\n    debate\n    collabEditorDialogue\n  }\n"): (typeof documents)["\n  fragment PostsMinimumInfo on Post {\n    _id\n    slug\n    title\n    draft\n    shortform\n    hideCommentKarma\n    af\n    currentUserReviewVote {\n      _id\n      qualitativeScore\n      quadraticScore\n    }\n    userId\n    coauthorStatuses {\n      userId\n      confirmed\n      requested\n    }\n    hasCoauthorPermission\n    rejected\n    debate\n    collabEditorDialogue\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsTopItemInfo on Post {\n    ...PostsMinimumInfo\n    ...PostsAuthors\n    isRead\n    contents {\n      _id\n      htmlHighlight\n      wordCount\n      version\n    }\n    customHighlight {\n      _id\n      html\n    }\n    tags {\n      ...TagPreviewFragment\n    }\n    reviewWinner {\n      ...ReviewWinnerTopPostsPage\n    }\n    spotlight {\n      ...SpotlightReviewWinner\n    }\n    reviews {\n      ...CommentsList\n    }\n    finalReviewVoteScoreHighKarma\n  }\n"): (typeof documents)["\n  fragment PostsTopItemInfo on Post {\n    ...PostsMinimumInfo\n    ...PostsAuthors\n    isRead\n    contents {\n      _id\n      htmlHighlight\n      wordCount\n      version\n    }\n    customHighlight {\n      _id\n      html\n    }\n    tags {\n      ...TagPreviewFragment\n    }\n    reviewWinner {\n      ...ReviewWinnerTopPostsPage\n    }\n    spotlight {\n      ...SpotlightReviewWinner\n    }\n    reviews {\n      ...CommentsList\n    }\n    finalReviewVoteScoreHighKarma\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsBase on Post {\n    ...PostsMinimumInfo\n    \n    # Core fields\n    url\n    postedAt\n    createdAt\n    sticky\n    metaSticky\n    stickyPriority\n    status\n    frontpageDate\n    meta\n    deletedDraft\n    postCategory\n    tagRelevance\n\n    shareWithUsers\n    sharingSettings\n    linkSharingKey\n\n    contents_latest\n    commentCount\n    voteCount\n    baseScore\n    extendedScore\n    emojiReactors\n    unlisted\n    score\n    lastVisitedAt\n    isFuture\n    isRead\n    lastCommentedAt\n    lastCommentPromotedAt\n    canonicalCollectionSlug\n    curatedDate\n    commentsLocked\n    commentsLockedToAccountsCreatedAfter\n    debate\n\n    # questions\n    question\n    hiddenRelatedQuestion\n    originalPostRelationSourceId\n\n    userId\n    \n    # Local Event data\n    location\n    googleLocation\n    onlineEvent\n    globalEvent\n    startTime\n    endTime\n    localStartTime\n    localEndTime\n    eventRegistrationLink\n    joinEventLink\n    facebookLink\n    meetupLink\n    website\n    contactInfo\n    isEvent\n    eventImageId\n    eventType\n    types\n    groupId\n\n    # Review data \n    reviewedByUserId\n    suggestForCuratedUserIds\n    suggestForCuratedUsernames\n    reviewForCuratedUserId\n    authorIsUnreviewed\n\n    # Alignment Forum\n    afDate\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    afBaseScore\n    afExtendedScore\n    afCommentCount\n    afLastCommentedAt\n    afSticky\n    \n    hideAuthor\n    moderationStyle\n    ignoreRateLimits\n\n    submitToFrontpage\n    shortform\n    onlyVisibleToLoggedIn\n    onlyVisibleToEstablishedAccounts\n\n    reviewCount\n    reviewVoteCount\n    positiveReviewVoteCount\n    manifoldReviewMarketId\n\n    annualReviewMarketProbability\n    annualReviewMarketIsResolved\n    annualReviewMarketYear\n    annualReviewMarketUrl\n\n    group {\n      _id\n      name\n      organizerIds\n    }\n    rsvpCounts\n\n    podcastEpisodeId\n    forceAllowType3Audio\n\n    # deprecated\n    nominationCount2019\n    reviewCount2019\n\n    votingSystem\n    \n    disableRecommendation\n  }\n"): (typeof documents)["\n  fragment PostsBase on Post {\n    ...PostsMinimumInfo\n    \n    # Core fields\n    url\n    postedAt\n    createdAt\n    sticky\n    metaSticky\n    stickyPriority\n    status\n    frontpageDate\n    meta\n    deletedDraft\n    postCategory\n    tagRelevance\n\n    shareWithUsers\n    sharingSettings\n    linkSharingKey\n\n    contents_latest\n    commentCount\n    voteCount\n    baseScore\n    extendedScore\n    emojiReactors\n    unlisted\n    score\n    lastVisitedAt\n    isFuture\n    isRead\n    lastCommentedAt\n    lastCommentPromotedAt\n    canonicalCollectionSlug\n    curatedDate\n    commentsLocked\n    commentsLockedToAccountsCreatedAfter\n    debate\n\n    # questions\n    question\n    hiddenRelatedQuestion\n    originalPostRelationSourceId\n\n    userId\n    \n    # Local Event data\n    location\n    googleLocation\n    onlineEvent\n    globalEvent\n    startTime\n    endTime\n    localStartTime\n    localEndTime\n    eventRegistrationLink\n    joinEventLink\n    facebookLink\n    meetupLink\n    website\n    contactInfo\n    isEvent\n    eventImageId\n    eventType\n    types\n    groupId\n\n    # Review data \n    reviewedByUserId\n    suggestForCuratedUserIds\n    suggestForCuratedUsernames\n    reviewForCuratedUserId\n    authorIsUnreviewed\n\n    # Alignment Forum\n    afDate\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    afBaseScore\n    afExtendedScore\n    afCommentCount\n    afLastCommentedAt\n    afSticky\n    \n    hideAuthor\n    moderationStyle\n    ignoreRateLimits\n\n    submitToFrontpage\n    shortform\n    onlyVisibleToLoggedIn\n    onlyVisibleToEstablishedAccounts\n\n    reviewCount\n    reviewVoteCount\n    positiveReviewVoteCount\n    manifoldReviewMarketId\n\n    annualReviewMarketProbability\n    annualReviewMarketIsResolved\n    annualReviewMarketYear\n    annualReviewMarketUrl\n\n    group {\n      _id\n      name\n      organizerIds\n    }\n    rsvpCounts\n\n    podcastEpisodeId\n    forceAllowType3Audio\n\n    # deprecated\n    nominationCount2019\n    reviewCount2019\n\n    votingSystem\n    \n    disableRecommendation\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsWithVotes on Post {\n    ...PostsBase\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment PostsWithVotes on Post {\n    ...PostsBase\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsListWithVotes on Post {\n    ...PostsList\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment PostsListWithVotes on Post {\n    ...PostsList\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsListWithVotesAndSequence on Post {\n    ...PostsListWithVotes\n    canonicalSequence {\n      ...SequencesPageFragment\n    }\n  }\n"): (typeof documents)["\n  fragment PostsListWithVotesAndSequence on Post {\n    ...PostsListWithVotes\n    canonicalSequence {\n      ...SequencesPageFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UltraFeedPostFragment on Post {\n    ...PostsDetails\n    ...PostsListWithVotes\n    contents {\n      _id\n      html\n      htmlHighlight\n      wordCount\n      plaintextDescription\n      version\n    }\n    autoFrontpage\n    votingSystem\n  }\n"): (typeof documents)["\n  fragment UltraFeedPostFragment on Post {\n    ...PostsDetails\n    ...PostsListWithVotes\n    contents {\n      _id\n      html\n      htmlHighlight\n      wordCount\n      plaintextDescription\n      version\n    }\n    autoFrontpage\n    votingSystem\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsReviewVotingList on Post {\n    ...PostsListWithVotes\n    reviewVoteScoreAllKarma\n    reviewVotesAllKarma\n    reviewVoteScoreHighKarma\n    reviewVotesHighKarma\n    reviewVoteScoreAF\n    reviewVotesAF\n  }\n"): (typeof documents)["\n  fragment PostsReviewVotingList on Post {\n    ...PostsListWithVotes\n    reviewVoteScoreAllKarma\n    reviewVotesAllKarma\n    reviewVoteScoreHighKarma\n    reviewVotesHighKarma\n    reviewVoteScoreAF\n    reviewVotesAF\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsModerationGuidelines on Post {\n    ...PostsMinimumInfo\n    frontpageDate\n    user {\n      _id\n      displayName\n      moderationStyle\n    }\n    moderationStyle\n    moderationGuidelines {\n      _id\n      html\n      originalContents {\n        type\n        data\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment PostsModerationGuidelines on Post {\n    ...PostsMinimumInfo\n    frontpageDate\n    user {\n      _id\n      displayName\n      moderationStyle\n    }\n    moderationStyle\n    moderationGuidelines {\n      _id\n      html\n      originalContents {\n        type\n        data\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsAuthors on Post {\n    user {\n      ...UsersMinimumInfo\n      profileImageId\n      \n      # Author moderation info\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n      groups\n      banned\n      allCommentingDisabled\n    }\n    coauthors {\n      ...UsersMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment PostsAuthors on Post {\n    user {\n      ...UsersMinimumInfo\n      profileImageId\n      \n      # Author moderation info\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n      groups\n      banned\n      allCommentingDisabled\n    }\n    coauthors {\n      ...UsersMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsListBase on Post {\n    ...PostsBase\n    ...PostsAuthors\n    readTimeMinutes\n    rejectedReason\n    customHighlight {\n      _id\n      html\n      plaintextDescription\n    }\n    lastPromotedComment {\n      _id\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n    bestAnswer {\n      ...CommentsList\n    }\n    tags {\n      ...TagBasicInfo\n    }\n    socialPreviewData {\n      _id\n      imageUrl\n    }\n\n    feedId\n    totalDialogueResponseCount\n    unreadDebateResponseCount\n    dialogTooltipPreview\n    disableSidenotes\n  }\n"): (typeof documents)["\n  fragment PostsListBase on Post {\n    ...PostsBase\n    ...PostsAuthors\n    readTimeMinutes\n    rejectedReason\n    customHighlight {\n      _id\n      html\n      plaintextDescription\n    }\n    lastPromotedComment {\n      _id\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n    bestAnswer {\n      ...CommentsList\n    }\n    tags {\n      ...TagBasicInfo\n    }\n    socialPreviewData {\n      _id\n      imageUrl\n    }\n\n    feedId\n    totalDialogueResponseCount\n    unreadDebateResponseCount\n    dialogTooltipPreview\n    disableSidenotes\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsList on Post {\n    ...PostsListBase\n    deletedDraft\n    contents {\n      _id\n      htmlHighlight\n      plaintextDescription\n      wordCount\n      version\n    }\n    fmCrosspost {\n      isCrosspost\n      hostedHere\n      foreignPostId\n    }\n    bannedUserIds\n  }\n"): (typeof documents)["\n  fragment PostsList on Post {\n    ...PostsListBase\n    deletedDraft\n    contents {\n      _id\n      htmlHighlight\n      plaintextDescription\n      wordCount\n      version\n    }\n    fmCrosspost {\n      isCrosspost\n      hostedHere\n      foreignPostId\n    }\n    bannedUserIds\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SunshineCurationPostsList on Post {\n    ...PostsList\n    curationNotices {\n      ...CurationNoticesFragment\n    }\n  }\n"): (typeof documents)["\n  fragment SunshineCurationPostsList on Post {\n    ...PostsList\n    curationNotices {\n      ...CurationNoticesFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsListTag on Post {\n    ...PostsList\n    tagRel(tagId: $tagId) {\n      ...WithVoteTagRel\n    }\n  }\n"): (typeof documents)["\n  fragment PostsListTag on Post {\n    ...PostsList\n    tagRel(tagId: $tagId) {\n      ...WithVoteTagRel\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsListTagWithVotes on Post {\n    ...PostsListWithVotes\n    tagRel(tagId: $tagId) {\n      ...WithVoteTagRel\n    }\n  }\n"): (typeof documents)["\n  fragment PostsListTagWithVotes on Post {\n    ...PostsListWithVotes\n    tagRel(tagId: $tagId) {\n      ...WithVoteTagRel\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsDetails on Post {\n    ...PostsListBase\n\n    canonicalSource\n    noIndex\n    viewCount\n    tags {\n      ...TagPreviewFragment\n    }\n    socialPreviewData {\n      _id\n      text\n      imageUrl\n    }\n    \n    # Tags\n    tagRelevance\n    \n    # Posts-page display options\n    commentSortOrder\n    sideCommentVisibility\n    \n    # Sequence navigation\n    collectionTitle\n    canonicalPrevPostSlug\n    canonicalNextPostSlug\n    canonicalSequenceId\n    canonicalBookId\n    canonicalSequence {\n      _id\n      title\n    }\n    canonicalBook {\n      _id\n      title\n    }\n    canonicalCollection {\n      _id\n      title\n    }\n\n    # Podcast\n    podcastEpisode {\n      _id\n      title\n      podcast {\n        _id\n        title\n        applePodcastLink\n        spotifyPodcastLink\n      }\n      episodeLink\n      externalEpisodeId\n    }\n\n    # Moderation stuff\n    bannedUserIds\n    moderationStyle\n    \n    # Voting\n    currentUserVote\n    currentUserExtendedVote\n    \n    # RSS metadata\n    feedLink\n    feed {\n      ...RSSFeedMinimumInfo\n    }\n    \n    # Related Questions\n    sourcePostRelations {\n      _id\n      sourcePostId\n      sourcePost {\n        ...PostsListWithVotes\n      }\n      order\n    }\n    targetPostRelations {\n      _id\n      sourcePostId\n      targetPostId\n      targetPost {\n        ...PostsListWithVotes\n      }\n      order\n    }\n    \n    # Events\n    rsvps\n    activateRSVPs\n\n    # Crossposting\n    fmCrosspost {\n      isCrosspost\n      hostedHere\n      foreignPostId\n    }\n\n    # Jargon Terms\n    glossary {\n      ...JargonTermsPost\n    }\n  }\n"): (typeof documents)["\n  fragment PostsDetails on Post {\n    ...PostsListBase\n\n    canonicalSource\n    noIndex\n    viewCount\n    tags {\n      ...TagPreviewFragment\n    }\n    socialPreviewData {\n      _id\n      text\n      imageUrl\n    }\n    \n    # Tags\n    tagRelevance\n    \n    # Posts-page display options\n    commentSortOrder\n    sideCommentVisibility\n    \n    # Sequence navigation\n    collectionTitle\n    canonicalPrevPostSlug\n    canonicalNextPostSlug\n    canonicalSequenceId\n    canonicalBookId\n    canonicalSequence {\n      _id\n      title\n    }\n    canonicalBook {\n      _id\n      title\n    }\n    canonicalCollection {\n      _id\n      title\n    }\n\n    # Podcast\n    podcastEpisode {\n      _id\n      title\n      podcast {\n        _id\n        title\n        applePodcastLink\n        spotifyPodcastLink\n      }\n      episodeLink\n      externalEpisodeId\n    }\n\n    # Moderation stuff\n    bannedUserIds\n    moderationStyle\n    \n    # Voting\n    currentUserVote\n    currentUserExtendedVote\n    \n    # RSS metadata\n    feedLink\n    feed {\n      ...RSSFeedMinimumInfo\n    }\n    \n    # Related Questions\n    sourcePostRelations {\n      _id\n      sourcePostId\n      sourcePost {\n        ...PostsListWithVotes\n      }\n      order\n    }\n    targetPostRelations {\n      _id\n      sourcePostId\n      targetPostId\n      targetPost {\n        ...PostsListWithVotes\n      }\n      order\n    }\n    \n    # Events\n    rsvps\n    activateRSVPs\n\n    # Crossposting\n    fmCrosspost {\n      isCrosspost\n      hostedHere\n      foreignPostId\n    }\n\n    # Jargon Terms\n    glossary {\n      ...JargonTermsPost\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsExpandedHighlight on Post {\n    _id\n    contents {\n      _id\n      html\n      wordCount\n    }\n  }\n"): (typeof documents)["\n  fragment PostsExpandedHighlight on Post {\n    _id\n    contents {\n      _id\n      html\n      wordCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsPlaintextDescription on Post {\n    _id\n    contents {\n      _id\n      plaintextDescription\n    }\n  }\n"): (typeof documents)["\n  fragment PostsPlaintextDescription on Post {\n    _id\n    contents {\n      _id\n      plaintextDescription\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsRevision on Post {\n    ...PostsDetails\n\n    # Content & Revisions\n    version\n    contents(version: $version) {\n      ...RevisionDisplay\n    }\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n"): (typeof documents)["\n  fragment PostsRevision on Post {\n    ...PostsDetails\n\n    # Content & Revisions\n    version\n    contents(version: $version) {\n      ...RevisionDisplay\n    }\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsRevisionEdit on Post {\n    ...PostsDetails\n\n    # Content & Revisions\n    version\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n"): (typeof documents)["\n  fragment PostsRevisionEdit on Post {\n    ...PostsDetails\n\n    # Content & Revisions\n    version\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsWithNavigationAndRevision on Post {\n    ...PostsRevision\n    ...PostSequenceNavigation\n    customHighlight {\n      ...RevisionDisplay\n    }\n    \n    tableOfContentsRevision(version: $version)\n    reviewWinner {\n      ...ReviewWinnerAll\n    }\n  }\n"): (typeof documents)["\n  fragment PostsWithNavigationAndRevision on Post {\n    ...PostsRevision\n    ...PostSequenceNavigation\n    customHighlight {\n      ...RevisionDisplay\n    }\n    \n    tableOfContentsRevision(version: $version)\n    reviewWinner {\n      ...ReviewWinnerAll\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsWithNavigation on Post {\n    ...PostsPage\n    ...PostSequenceNavigation\n    \n    tableOfContents\n    reviewWinner {\n      ...ReviewWinnerAll\n    }\n  }\n"): (typeof documents)["\n  fragment PostsWithNavigation on Post {\n    ...PostsPage\n    ...PostSequenceNavigation\n    \n    tableOfContents\n    reviewWinner {\n      ...ReviewWinnerAll\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostSequenceNavigation on Post {\n    # Prev/next sequence navigation\n    sequence(sequenceId: $sequenceId) {\n      ...SequencesPageFragment\n    }\n    prevPost(sequenceId: $sequenceId) {\n      ...PostsListWithVotes\n      sequence(sequenceId: $sequenceId, prevOrNext: \"prev\") {\n        _id\n      }\n    }\n    nextPost(sequenceId: $sequenceId) {\n      ...PostsListWithVotes\n      sequence(sequenceId: $sequenceId, prevOrNext: \"next\") {\n        _id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment PostSequenceNavigation on Post {\n    # Prev/next sequence navigation\n    sequence(sequenceId: $sequenceId) {\n      ...SequencesPageFragment\n    }\n    prevPost(sequenceId: $sequenceId) {\n      ...PostsListWithVotes\n      sequence(sequenceId: $sequenceId, prevOrNext: \"prev\") {\n        _id\n      }\n    }\n    nextPost(sequenceId: $sequenceId) {\n      ...PostsListWithVotes\n      sequence(sequenceId: $sequenceId, prevOrNext: \"next\") {\n        _id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsPage on Post {\n    ...PostsDetails\n    version\n    contents {\n      ...RevisionDisplay\n    }\n    customHighlight {\n      ...RevisionDisplay\n    }\n    myEditorAccess\n  }\n"): (typeof documents)["\n  fragment PostsPage on Post {\n    ...PostsDetails\n    version\n    contents {\n      ...RevisionDisplay\n    }\n    customHighlight {\n      ...RevisionDisplay\n    }\n    myEditorAccess\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsEdit on Post {\n    ...PostsDetails\n    ...PostSideComments\n    myEditorAccess\n    version\n    coauthorStatuses {\n      userId\n      confirmed\n      requested\n    }\n    readTimeMinutesOverride\n    fmCrosspost {\n      isCrosspost\n      hostedHere\n      foreignPostId\n    }\n    hideFromRecentDiscussions\n    hideFromPopularComments\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n    customHighlight {\n      ...RevisionEdit\n    }\n    tableOfContents\n    subforumTagId\n    socialPreviewImageId\n    socialPreview {\n      imageId\n      text\n    }\n    socialPreviewData {\n      _id\n      imageId\n      text\n    }\n    user {\n      ...UsersMinimumInfo\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n    }\n    usersSharedWith {\n      ...UsersMinimumInfo\n    }\n    coauthors {\n      ...UsersMinimumInfo\n    }\n    generateDraftJargon\n  }\n"): (typeof documents)["\n  fragment PostsEdit on Post {\n    ...PostsDetails\n    ...PostSideComments\n    myEditorAccess\n    version\n    coauthorStatuses {\n      userId\n      confirmed\n      requested\n    }\n    readTimeMinutesOverride\n    fmCrosspost {\n      isCrosspost\n      hostedHere\n      foreignPostId\n    }\n    hideFromRecentDiscussions\n    hideFromPopularComments\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n    customHighlight {\n      ...RevisionEdit\n    }\n    tableOfContents\n    subforumTagId\n    socialPreviewImageId\n    socialPreview {\n      imageId\n      text\n    }\n    socialPreviewData {\n      _id\n      imageId\n      text\n    }\n    user {\n      ...UsersMinimumInfo\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n    }\n    usersSharedWith {\n      ...UsersMinimumInfo\n    }\n    coauthors {\n      ...UsersMinimumInfo\n    }\n    generateDraftJargon\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsEditQueryFragment on Post {\n    ...PostsEdit\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment PostsEditQueryFragment on Post {\n    ...PostsEdit\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsEditMutationFragment on Post {\n    ...PostsEdit\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment PostsEditMutationFragment on Post {\n    ...PostsEdit\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsRevisionsList on Post {\n    _id\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n"): (typeof documents)["\n  fragment PostsRevisionsList on Post {\n    _id\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsRecentDiscussion on Post {\n    ...PostsListWithVotes\n    recentComments(commentsLimit: $commentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsList\n    }\n  }\n"): (typeof documents)["\n  fragment PostsRecentDiscussion on Post {\n    ...PostsListWithVotes\n    recentComments(commentsLimit: $commentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsList\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ShortformRecentDiscussion on Post {\n    ...PostsListWithVotes\n    recentComments(commentsLimit: $commentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsListWithTopLevelComment\n    }\n  }\n"): (typeof documents)["\n  fragment ShortformRecentDiscussion on Post {\n    ...PostsListWithVotes\n    recentComments(commentsLimit: $commentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsListWithTopLevelComment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersBannedFromPostsModerationLog on Post {\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    slug\n    _id\n    bannedUserIds\n  }\n"): (typeof documents)["\n  fragment UsersBannedFromPostsModerationLog on Post {\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    slug\n    _id\n    bannedUserIds\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SunshinePostsList on Post {\n    ...PostsListBase\n\n    currentUserVote\n    currentUserExtendedVote\n    fmCrosspost {\n      isCrosspost\n      hostedHere\n      foreignPostId\n    }\n    rejectedReason\n    autoFrontpage\n\n    contents {\n      _id\n      html\n      htmlHighlight\n      wordCount\n      version\n    }\n\n    automatedContentEvaluations {\n      ...AutomatedContentEvaluationsFragment\n    }\n\n    moderationGuidelines {\n      _id\n      html\n    }\n\n    user {\n      ...UsersMinimumInfo\n      biography {\n        ...RevisionDisplay\n      }\n      profileImageId\n      \n      # Author moderation info\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n      \n      moderationGuidelines {\n        _id\n        html\n      }\n\n      needsReview\n      moderatorActions {\n        ...ModeratorActionDisplay\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment SunshinePostsList on Post {\n    ...PostsListBase\n\n    currentUserVote\n    currentUserExtendedVote\n    fmCrosspost {\n      isCrosspost\n      hostedHere\n      foreignPostId\n    }\n    rejectedReason\n    autoFrontpage\n\n    contents {\n      _id\n      html\n      htmlHighlight\n      wordCount\n      version\n    }\n\n    automatedContentEvaluations {\n      ...AutomatedContentEvaluationsFragment\n    }\n\n    moderationGuidelines {\n      _id\n      html\n    }\n\n    user {\n      ...UsersMinimumInfo\n      biography {\n        ...RevisionDisplay\n      }\n      profileImageId\n      \n      # Author moderation info\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n      \n      moderationGuidelines {\n        _id\n        html\n      }\n\n      needsReview\n      moderatorActions {\n        ...ModeratorActionDisplay\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment WithVotePost on Post {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n  }\n"): (typeof documents)["\n  fragment WithVotePost on Post {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment HighlightWithHash on Post {\n    _id\n    contents {\n      _id\n      htmlHighlightStartingAtHash(hash: $hash)\n    }\n  }\n"): (typeof documents)["\n  fragment HighlightWithHash on Post {\n    _id\n    contents {\n      _id\n      htmlHighlightStartingAtHash(hash: $hash)\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostWithDialogueMessage on Post {\n    _id\n    dialogueMessageContents(dialogueMessageId: $dialogueMessageId)\n  }\n"): (typeof documents)["\n  fragment PostWithDialogueMessage on Post {\n    _id\n    dialogueMessageContents(dialogueMessageId: $dialogueMessageId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostSideComments on Post {\n    _id\n    sideComments\n    sideCommentsCache {\n      ...SideCommentCacheMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment PostSideComments on Post {\n    _id\n    sideComments\n    sideCommentsCache {\n      ...SideCommentCacheMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostWithGeneratedSummary on Post {\n    _id\n    languageModelSummary\n  }\n"): (typeof documents)["\n  fragment PostWithGeneratedSummary on Post {\n    _id\n    languageModelSummary\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsBestOfList on Post {\n    ...PostsListWithVotes\n    podcastEpisode {\n      _id\n      title\n      podcast {\n        _id\n        title\n        applePodcastLink\n        spotifyPodcastLink\n      }\n      episodeLink\n      externalEpisodeId\n    }\n    socialPreviewData {\n      _id\n      text\n      imageUrl\n    }\n    firstVideoAttribsForPreview\n  }\n"): (typeof documents)["\n  fragment PostsBestOfList on Post {\n    ...PostsListWithVotes\n    podcastEpisode {\n      _id\n      title\n      podcast {\n        _id\n        title\n        applePodcastLink\n        spotifyPodcastLink\n      }\n      episodeLink\n      externalEpisodeId\n    }\n    socialPreviewData {\n      _id\n      text\n      imageUrl\n    }\n    firstVideoAttribsForPreview\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsRSSFeed on Post {\n    ...PostsPage\n    scoreExceeded2Date\n    scoreExceeded30Date\n    scoreExceeded45Date\n    scoreExceeded75Date\n    scoreExceeded125Date\n    scoreExceeded200Date\n    metaDate\n  }\n"): (typeof documents)["\n  fragment PostsRSSFeed on Post {\n    ...PostsPage\n    scoreExceeded2Date\n    scoreExceeded30Date\n    scoreExceeded45Date\n    scoreExceeded75Date\n    scoreExceeded125Date\n    scoreExceeded200Date\n    metaDate\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsOriginalContents on Post {\n    _id\n    contents {\n      _id\n      originalContents {\n        type\n        data\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment PostsOriginalContents on Post {\n    _id\n    contents {\n      _id\n      originalContents {\n        type\n        data\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsHTML on Post {\n    _id\n    contents {\n      ...RevisionHTML\n    }\n  }\n"): (typeof documents)["\n  fragment PostsHTML on Post {\n    _id\n    contents {\n      ...RevisionHTML\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsForAutocomplete on Post {\n    _id\n    title\n    userId\n    baseScore\n    extendedScore\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      markdown\n    }\n  }\n"): (typeof documents)["\n  fragment PostsForAutocomplete on Post {\n    _id\n    title\n    userId\n    baseScore\n    extendedScore\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      markdown\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostForReviewWinnerItem on Post {\n    _id\n    spotlight {\n      _id\n    }\n    reviewWinner {\n      _id\n      category\n    }\n  }\n"): (typeof documents)["\n  fragment PostForReviewWinnerItem on Post {\n    _id\n    spotlight {\n      _id\n    }\n    reviewWinner {\n      _id\n      category\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsTwitterAdmin on Post {\n    ...PostsListWithVotes\n    user {\n      ...UsersSocialMediaInfo\n    }\n    coauthors {\n      ...UsersSocialMediaInfo\n    }\n  }\n"): (typeof documents)["\n  fragment PostsTwitterAdmin on Post {\n    ...PostsListWithVotes\n    user {\n      ...UsersSocialMediaInfo\n    }\n    coauthors {\n      ...UsersSocialMediaInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SuggestAlignmentPost on Post {\n    ...PostsList\n    suggestForAlignmentUsers {\n      _id\n      displayName\n    }\n  }\n"): (typeof documents)["\n  fragment SuggestAlignmentPost on Post {\n    ...PostsList\n    suggestForAlignmentUsers {\n      _id\n      displayName\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UnclaimedReportsList on Report {\n    _id\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    commentId\n    comment {\n      ...CommentsList\n      post {\n        ...PostsMinimumInfo\n      }\n      tag {\n        ...TagBasicInfo\n      }\n    }\n    postId\n    post {\n      ...PostsList\n    }\n    reportedUser {\n      ...SunshineUsersList\n    }\n    closedAt\n    createdAt\n    claimedUserId\n    claimedUser {\n      _id\n      displayName\n      username\n      slug\n    }\n    link\n    description\n    reportedAsSpam\n    markedAsSpam\n  }\n"): (typeof documents)["\n  fragment UnclaimedReportsList on Report {\n    _id\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    commentId\n    comment {\n      ...CommentsList\n      post {\n        ...PostsMinimumInfo\n      }\n      tag {\n        ...TagBasicInfo\n      }\n    }\n    postId\n    post {\n      ...PostsList\n    }\n    reportedUser {\n      ...SunshineUsersList\n    }\n    closedAt\n    createdAt\n    claimedUserId\n    claimedUser {\n      _id\n      displayName\n      username\n      slug\n    }\n    link\n    description\n    reportedAsSpam\n    markedAsSpam\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment reviewVoteFragment on ReviewVote {\n    _id\n    createdAt\n    userId\n    postId\n    qualitativeScore\n    quadraticScore\n    comment\n    year\n    dummy\n    reactions\n  }\n"): (typeof documents)["\n  fragment reviewVoteFragment on ReviewVote {\n    _id\n    createdAt\n    userId\n    postId\n    qualitativeScore\n    quadraticScore\n    comment\n    year\n    dummy\n    reactions\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment reviewVoteWithUserAndPost on ReviewVote {\n    ...reviewVoteFragment\n    user {\n      ...UsersMinimumInfo\n      email\n      emails\n    }\n    post {\n      ...PostsMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment reviewVoteWithUserAndPost on ReviewVote {\n    ...reviewVoteFragment\n    user {\n      ...UsersMinimumInfo\n      email\n      emails\n    }\n    post {\n      ...PostsMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment reviewAdminDashboard on ReviewVote {\n    _id\n    createdAt\n    userId\n    user {\n      _id\n      displayName\n      karma\n    }\n  }\n"): (typeof documents)["\n  fragment reviewAdminDashboard on ReviewVote {\n    _id\n    createdAt\n    userId\n    user {\n      _id\n      displayName\n      karma\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReviewWinnerArtImages on ReviewWinnerArt {\n    _id\n    postId\n    splashArtImagePrompt\n    splashArtImageUrl\n    activeSplashArtCoordinates {\n      ...SplashArtCoordinatesEdit\n    }\n  }\n"): (typeof documents)["\n  fragment ReviewWinnerArtImages on ReviewWinnerArt {\n    _id\n    postId\n    splashArtImagePrompt\n    splashArtImageUrl\n    activeSplashArtCoordinates {\n      ...SplashArtCoordinatesEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReviewWinnerEditDisplay on ReviewWinner {\n    _id\n    postId\n    reviewYear\n    curatedOrder\n    reviewRanking\n  }\n"): (typeof documents)["\n  fragment ReviewWinnerEditDisplay on ReviewWinner {\n    _id\n    postId\n    reviewYear\n    curatedOrder\n    reviewRanking\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReviewWinnerTopPostsDisplay on ReviewWinner {\n    _id\n    postId\n    post {\n      ...PostsTopItemInfo\n    }\n    reviewYear\n    curatedOrder\n    reviewRanking\n  }\n"): (typeof documents)["\n  fragment ReviewWinnerTopPostsDisplay on ReviewWinner {\n    _id\n    postId\n    post {\n      ...PostsTopItemInfo\n    }\n    reviewYear\n    curatedOrder\n    reviewRanking\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReviewWinnerAll on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    postId\n    reviewYear\n    reviewRanking\n    reviewWinnerArt {\n      ...ReviewWinnerArtImages\n    }\n    competitorCount\n  }\n"): (typeof documents)["\n  fragment ReviewWinnerAll on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    postId\n    reviewYear\n    reviewRanking\n    reviewWinnerArt {\n      ...ReviewWinnerArtImages\n    }\n    competitorCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReviewWinnerTopPostsPage on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    reviewYear\n    reviewRanking\n    reviewWinnerArt {\n      splashArtImageUrl\n      activeSplashArtCoordinates {\n        ...SplashArtCoordinatesEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ReviewWinnerTopPostsPage on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    reviewYear\n    reviewRanking\n    reviewWinnerArt {\n      splashArtImageUrl\n      activeSplashArtCoordinates {\n        ...SplashArtCoordinatesEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReviewWinnerAnnouncement on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    reviewYear\n    reviewRanking\n    competitorCount\n    postId\n    post {\n      _id\n      title\n      slug\n    }\n  }\n"): (typeof documents)["\n  fragment ReviewWinnerAnnouncement on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    reviewYear\n    reviewRanking\n    competitorCount\n    postId\n    post {\n      _id\n      title\n      slug\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionDisplay on Revision {\n    _id\n    version\n    html\n    wordCount\n    htmlHighlight\n    plaintextDescription\n  }\n"): (typeof documents)["\n  fragment RevisionDisplay on Revision {\n    _id\n    version\n    html\n    wordCount\n    htmlHighlight\n    plaintextDescription\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionHTML on Revision {\n    _id\n    html\n  }\n"): (typeof documents)["\n  fragment RevisionHTML on Revision {\n    _id\n    html\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionEdit on Revision {\n    ...RevisionDisplay\n    updateType\n    editedAt\n    userId\n    commitMessage\n    originalContents {\n      type\n      data\n    }\n    markdown\n    ckEditorMarkup\n  }\n"): (typeof documents)["\n  fragment RevisionEdit on Revision {\n    ...RevisionDisplay\n    updateType\n    editedAt\n    userId\n    commitMessage\n    originalContents {\n      type\n      data\n    }\n    markdown\n    ckEditorMarkup\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionMetadata on Revision {\n    _id\n    version\n    editedAt\n    commitMessage\n    userId\n    \n    score\n    baseScore\n    extendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment RevisionMetadata on Revision {\n    _id\n    version\n    editedAt\n    commitMessage\n    userId\n    \n    score\n    baseScore\n    extendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionMetadataWithChangeMetrics on Revision {\n    ...RevisionMetadata\n    changeMetrics\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment RevisionMetadataWithChangeMetrics on Revision {\n    ...RevisionMetadata\n    changeMetrics\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionHistoryEntry on Revision {\n    ...RevisionMetadata\n    documentId\n    collectionName\n    changeMetrics\n    legacyData\n    skipAttributions\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment RevisionHistoryEntry on Revision {\n    ...RevisionMetadata\n    documentId\n    collectionName\n    changeMetrics\n    legacyData\n    skipAttributions\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionHistorySummaryEdit on Revision {\n    ...RevisionHistoryEntry\n    summary {\n      ...MultiDocumentMinimumInfo\n      parentTag {\n        _id\n        name\n      }\n      parentLens {\n        _id\n        title\n        tabTitle\n        tabSubtitle\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment RevisionHistorySummaryEdit on Revision {\n    ...RevisionHistoryEntry\n    summary {\n      ...MultiDocumentMinimumInfo\n      parentTag {\n        _id\n        name\n      }\n      parentLens {\n        _id\n        title\n        tabTitle\n        tabSubtitle\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionTagFragment on Revision {\n    ...RevisionHistoryEntry\n    tag {\n      ...TagHistoryFragment\n    }\n    lens {\n      ...MultiDocumentParentDocument\n    }\n  }\n"): (typeof documents)["\n  fragment RevisionTagFragment on Revision {\n    ...RevisionHistoryEntry\n    tag {\n      ...TagHistoryFragment\n    }\n    lens {\n      ...MultiDocumentParentDocument\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RecentDiscussionRevisionTagFragment on Revision {\n    ...RevisionHistoryEntry\n    tag {\n      ...TagRecentDiscussion\n    }\n  }\n"): (typeof documents)["\n  fragment RecentDiscussionRevisionTagFragment on Revision {\n    ...RevisionHistoryEntry\n    tag {\n      ...TagRecentDiscussion\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment WithVoteRevision on Revision {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    voteCount\n  }\n"): (typeof documents)["\n  fragment WithVoteRevision on Revision {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    voteCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RSSFeedMinimumInfo on RSSFeed {\n    _id\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    createdAt\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    importAsDraft\n  }\n"): (typeof documents)["\n  fragment RSSFeedMinimumInfo on RSSFeed {\n    _id\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    createdAt\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    importAsDraft\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment newRSSFeedFragment on RSSFeed {\n    _id\n    userId\n    createdAt\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    status\n    importAsDraft\n  }\n"): (typeof documents)["\n  fragment newRSSFeedFragment on RSSFeed {\n    _id\n    userId\n    createdAt\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    status\n    importAsDraft\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RSSFeedMutationFragment on RSSFeed {\n    _id\n    userId\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    importAsDraft\n  }\n"): (typeof documents)["\n  fragment RSSFeedMutationFragment on RSSFeed {\n    _id\n    userId\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    importAsDraft\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SequencesPageTitleFragment on Sequence {\n    _id\n    title\n    canonicalCollectionSlug\n    canonicalCollection {\n      _id\n      title\n    }\n  }\n"): (typeof documents)["\n  fragment SequencesPageTitleFragment on Sequence {\n    _id\n    title\n    canonicalCollectionSlug\n    canonicalCollection {\n      _id\n      title\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SequencesPageFragment on Sequence {\n    ...SequencesPageTitleFragment\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      ...RevisionDisplay\n    }\n    gridImageId\n    bannerImageId\n    canonicalCollectionSlug\n    draft\n    isDeleted\n    hidden\n    hideFromAuthorPage\n    noindex\n    curatedOrder\n    userProfileOrder\n    af\n    postsCount\n    readPostsCount\n  }\n"): (typeof documents)["\n  fragment SequencesPageFragment on Sequence {\n    ...SequencesPageTitleFragment\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      ...RevisionDisplay\n    }\n    gridImageId\n    bannerImageId\n    canonicalCollectionSlug\n    draft\n    isDeleted\n    hidden\n    hideFromAuthorPage\n    noindex\n    curatedOrder\n    userProfileOrder\n    af\n    postsCount\n    readPostsCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SequenceContinueReadingFragment on Sequence {\n    _id\n    title\n    gridImageId\n    canonicalCollectionSlug\n  }\n"): (typeof documents)["\n  fragment SequenceContinueReadingFragment on Sequence {\n    _id\n    title\n    gridImageId\n    canonicalCollectionSlug\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SequencesPageWithChaptersFragment on Sequence {\n    ...SequencesPageFragment\n    chapters {\n      ...ChaptersFragment\n    }\n  }\n"): (typeof documents)["\n  fragment SequencesPageWithChaptersFragment on Sequence {\n    ...SequencesPageFragment\n    chapters {\n      ...ChaptersFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SequencesEdit on Sequence {\n    ...SequencesPageFragment\n    contents { \n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment SequencesEdit on Sequence {\n    ...SequencesPageFragment\n    contents { \n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SideCommentCacheMinimumInfo on SideCommentCache {\n    _id\n    postId\n    annotatedHtml\n    commentsByBlock\n    version\n    createdAt\n  }\n"): (typeof documents)["\n  fragment SideCommentCacheMinimumInfo on SideCommentCache {\n    _id\n    postId\n    annotatedHtml\n    commentsByBlock\n    version\n    createdAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SplashArtCoordinates on SplashArtCoordinate {\n    _id\n    reviewWinnerArtId\n    leftXPct\n    leftYPct\n    leftHeightPct\n    leftWidthPct\n    leftFlipped\n    middleXPct\n    middleYPct\n    middleHeightPct\n    middleWidthPct\n    middleFlipped\n    rightXPct\n    rightYPct\n    rightHeightPct\n    rightWidthPct\n    rightFlipped\n  }\n"): (typeof documents)["\n  fragment SplashArtCoordinates on SplashArtCoordinate {\n    _id\n    reviewWinnerArtId\n    leftXPct\n    leftYPct\n    leftHeightPct\n    leftWidthPct\n    leftFlipped\n    middleXPct\n    middleYPct\n    middleHeightPct\n    middleWidthPct\n    middleFlipped\n    rightXPct\n    rightYPct\n    rightHeightPct\n    rightWidthPct\n    rightFlipped\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SplashArtCoordinatesEdit on SplashArtCoordinate {\n    ...SplashArtCoordinates\n    createdAt\n  }\n"): (typeof documents)["\n  fragment SplashArtCoordinatesEdit on SplashArtCoordinate {\n    ...SplashArtCoordinates\n    createdAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SpotlightMinimumInfo on Spotlight {\n    _id\n    documentId\n    documentType\n    spotlightImageId\n    spotlightDarkImageId\n    spotlightSplashImageUrl\n    draft\n    deletedDraft\n    position\n    lastPromotedAt\n    customTitle\n    customSubtitle\n    subtitleUrl\n    headerTitle\n    headerTitleLeftColor\n    headerTitleRightColor\n    duration\n    showAuthor\n    imageFade\n    imageFadeColor\n  }\n"): (typeof documents)["\n  fragment SpotlightMinimumInfo on Spotlight {\n    _id\n    documentId\n    documentType\n    spotlightImageId\n    spotlightDarkImageId\n    spotlightSplashImageUrl\n    draft\n    deletedDraft\n    position\n    lastPromotedAt\n    customTitle\n    customSubtitle\n    subtitleUrl\n    headerTitle\n    headerTitleLeftColor\n    headerTitleRightColor\n    duration\n    showAuthor\n    imageFade\n    imageFadeColor\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SpotlightReviewWinner on Spotlight {\n    ...SpotlightMinimumInfo\n    description {\n      html\n    }\n    sequenceChapters {\n      ...ChaptersFragment\n    }\n  }\n"): (typeof documents)["\n  fragment SpotlightReviewWinner on Spotlight {\n    ...SpotlightMinimumInfo\n    description {\n      html\n    }\n    sequenceChapters {\n      ...ChaptersFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SpotlightHeaderEventSubtitle on Spotlight {\n    ...SpotlightMinimumInfo\n    post {\n      _id\n      slug\n    }\n    sequence {\n      _id\n    }\n    tag {\n      _id\n      slug\n    }\n  }\n"): (typeof documents)["\n  fragment SpotlightHeaderEventSubtitle on Spotlight {\n    ...SpotlightMinimumInfo\n    post {\n      _id\n      slug\n    }\n    sequence {\n      _id\n    }\n    tag {\n      _id\n      slug\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SpotlightDisplay on Spotlight {\n    ...SpotlightMinimumInfo\n    post {\n      _id\n      slug\n      title\n\n      user {\n        ...UsersMinimumInfo\n      }\n      reviews {\n        _id\n      }\n    }\n    sequence {\n      _id\n      title\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n    tag {\n      _id\n      name\n      slug\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n    description {\n      html\n    }\n  }\n"): (typeof documents)["\n  fragment SpotlightDisplay on Spotlight {\n    ...SpotlightMinimumInfo\n    post {\n      _id\n      slug\n      title\n\n      user {\n        ...UsersMinimumInfo\n      }\n      reviews {\n        _id\n      }\n    }\n    sequence {\n      _id\n      title\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n    tag {\n      _id\n      name\n      slug\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n    description {\n      html\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SpotlightEditQueryFragment on Spotlight {\n    ...SpotlightMinimumInfo\n    description {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment SpotlightEditQueryFragment on Spotlight {\n    ...SpotlightMinimumInfo\n    description {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SubscriptionState on Subscription {\n    _id\n    userId\n    createdAt\n    state\n    documentId\n    collectionName\n    deleted\n    type\n  }\n"): (typeof documents)["\n  fragment SubscriptionState on Subscription {\n    _id\n    userId\n    createdAt\n    state\n    documentId\n    collectionName\n    deleted\n    type\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MembersOfGroupFragment on Subscription {\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment MembersOfGroupFragment on Subscription {\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SurveyQuestionMinimumInfo on SurveyQuestion {\n    _id\n    question\n    format\n    order\n  }\n"): (typeof documents)["\n  fragment SurveyQuestionMinimumInfo on SurveyQuestion {\n    _id\n    question\n    format\n    order\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SurveyResponseMinimumInfo on SurveyResponse {\n    _id\n    surveyId\n    surveyScheduleId\n    userId\n    clientId\n    response\n  }\n"): (typeof documents)["\n  fragment SurveyResponseMinimumInfo on SurveyResponse {\n    _id\n    surveyId\n    surveyScheduleId\n    userId\n    clientId\n    response\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SurveyScheduleMinimumInfo on SurveySchedule {\n    _id\n    survey {\n      ...SurveyMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment SurveyScheduleMinimumInfo on SurveySchedule {\n    _id\n    survey {\n      ...SurveyMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SurveyScheduleEdit on SurveySchedule {\n    ...SurveyScheduleMinimumInfo\n    surveyId\n    name\n    impressionsLimit\n    maxVisitorPercentage\n    minKarma\n    maxKarma\n    target\n    startDate\n    endDate\n    deactivated\n    createdAt\n  }\n"): (typeof documents)["\n  fragment SurveyScheduleEdit on SurveySchedule {\n    ...SurveyScheduleMinimumInfo\n    surveyId\n    name\n    impressionsLimit\n    maxVisitorPercentage\n    minKarma\n    maxKarma\n    target\n    startDate\n    endDate\n    deactivated\n    createdAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SurveyMinimumInfo on Survey {\n    _id\n    name\n    questions {\n      ...SurveyQuestionMinimumInfo\n    }\n    createdAt\n  }\n"): (typeof documents)["\n  fragment SurveyMinimumInfo on Survey {\n    _id\n    name\n    questions {\n      ...SurveyQuestionMinimumInfo\n    }\n    createdAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagFlagFragment on TagFlag {\n    _id\n    createdAt\n    name\n    slug\n    order\n    deleted\n    contents { \n      html\n      htmlHighlight\n      plaintextDescription\n    }\n  }\n"): (typeof documents)["\n  fragment TagFlagFragment on TagFlag {\n    _id\n    createdAt\n    name\n    slug\n    order\n    deleted\n    contents { \n      html\n      htmlHighlight\n      plaintextDescription\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagFlagEditFragment on TagFlag {\n    ...TagFlagFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment TagFlagEditFragment on TagFlag {\n    ...TagFlagFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRelBasicInfo on TagRel {\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    tagId\n    postId\n    autoApplied\n  }\n"): (typeof documents)["\n  fragment TagRelBasicInfo on TagRel {\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    tagId\n    postId\n    autoApplied\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRelFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    post {\n      ...PostsList\n    }\n    currentUserVote\n    currentUserExtendedVote\n    currentUserCanVote\n  }\n"): (typeof documents)["\n  fragment TagRelFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    post {\n      ...PostsList\n    }\n    currentUserVote\n    currentUserExtendedVote\n    currentUserCanVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRelHistoryFragment on TagRel {\n    ...TagRelBasicInfo\n    createdAt\n    user {\n      ...UsersMinimumInfo\n    }\n    post {\n      ...PostsList\n    }\n  }\n"): (typeof documents)["\n  fragment TagRelHistoryFragment on TagRel {\n    ...TagRelBasicInfo\n    createdAt\n    user {\n      ...UsersMinimumInfo\n    }\n    post {\n      ...PostsList\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRelCreationFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    post {\n      ...PostsList\n      tagRelevance\n      tagRel(tagId: $tagId) {\n        ...WithVoteTagRel\n      }\n    }\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment TagRelCreationFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    post {\n      ...PostsList\n      tagRelevance\n      tagRel(tagId: $tagId) {\n        ...WithVoteTagRel\n      }\n    }\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRelMinimumFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    currentUserVote\n    currentUserExtendedVote\n    currentUserCanVote\n  }\n"): (typeof documents)["\n  fragment TagRelMinimumFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    currentUserVote\n    currentUserExtendedVote\n    currentUserCanVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment WithVoteTagRel on TagRel {\n    __typename\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment WithVoteTagRel on TagRel {\n    __typename\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagBasicInfo on Tag {\n    _id\n    userId\n    name\n    shortName\n    slug\n    core\n    postCount\n    adminOnly\n    canEditUserIds\n    suggestedAsFilter\n    needsReview\n    descriptionTruncationCount\n    createdAt\n    wikiOnly\n    deleted\n    isSubforum\n    noindex\n    isArbitalImport\n    isPlaceholderPage\n\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment TagBasicInfo on Tag {\n    _id\n    userId\n    name\n    shortName\n    slug\n    core\n    postCount\n    adminOnly\n    canEditUserIds\n    suggestedAsFilter\n    needsReview\n    descriptionTruncationCount\n    createdAt\n    wikiOnly\n    deleted\n    isSubforum\n    noindex\n    isArbitalImport\n    isPlaceholderPage\n\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagDetailsFragment on Tag {\n    ...TagBasicInfo\n    subtitle\n    oldSlugs\n    isRead\n    defaultOrder\n    reviewedByUserId\n    wikiGrade\n    subforumModeratorIds\n    subforumModerators {\n      ...UsersMinimumInfo\n    }\n    moderationGuidelines {\n      _id\n      html\n    }\n    bannerImageId\n    squareImageId\n    lesswrongWikiImportSlug\n    lesswrongWikiImportRevision\n    sequence {\n      ...SequencesPageFragment\n    }\n  }\n"): (typeof documents)["\n  fragment TagDetailsFragment on Tag {\n    ...TagBasicInfo\n    subtitle\n    oldSlugs\n    isRead\n    defaultOrder\n    reviewedByUserId\n    wikiGrade\n    subforumModeratorIds\n    subforumModerators {\n      ...UsersMinimumInfo\n    }\n    moderationGuidelines {\n      _id\n      html\n    }\n    bannerImageId\n    squareImageId\n    lesswrongWikiImportSlug\n    lesswrongWikiImportRevision\n    sequence {\n      ...SequencesPageFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagFragment on Tag {\n    ...TagDetailsFragment\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      html\n      htmlHighlight\n      plaintextDescription\n      version\n      editedAt\n    }\n    canVoteOnRels\n  }\n"): (typeof documents)["\n  fragment TagFragment on Tag {\n    ...TagDetailsFragment\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      html\n      htmlHighlight\n      plaintextDescription\n      version\n      editedAt\n    }\n    canVoteOnRels\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagHistoryFragment on Tag {\n    ...TagFragment\n    textLastUpdatedAt\n    tableOfContents\n    user {\n      ...UsersMinimumInfo\n    }\n    lensesIncludingDeleted {\n      ...MultiDocumentContentDisplay\n    }\n  }\n"): (typeof documents)["\n  fragment TagHistoryFragment on Tag {\n    ...TagFragment\n    textLastUpdatedAt\n    tableOfContents\n    user {\n      ...UsersMinimumInfo\n    }\n    lensesIncludingDeleted {\n      ...MultiDocumentContentDisplay\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagCreationHistoryFragment on Tag {\n    ...TagFragment\n    user {\n      ...UsersMinimumInfo\n    }\n    description {\n      html\n    }\n  }\n"): (typeof documents)["\n  fragment TagCreationHistoryFragment on Tag {\n    ...TagFragment\n    user {\n      ...UsersMinimumInfo\n    }\n    description {\n      html\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRevisionFragment on Tag {\n    ...TagDetailsFragment\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    isRead\n    description(version: $version) {\n      _id\n      version\n      html\n      htmlHighlight\n      plaintextDescription\n      editedAt\n      \n      user {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment TagRevisionFragment on Tag {\n    ...TagDetailsFragment\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    isRead\n    description(version: $version) {\n      _id\n      version\n      html\n      htmlHighlight\n      plaintextDescription\n      editedAt\n      \n      user {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagPreviewFragment on Tag {\n    ...TagBasicInfo\n    isRead\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      htmlHighlight\n    }\n    canVoteOnRels\n    isArbitalImport\n  }\n"): (typeof documents)["\n  fragment TagPreviewFragment on Tag {\n    ...TagBasicInfo\n    isRead\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      htmlHighlight\n    }\n    canVoteOnRels\n    isArbitalImport\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagSectionPreviewFragment on Tag {\n    ...TagBasicInfo\n    isRead\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      htmlHighlightStartingAtHash(hash: $hash)\n    }\n    canVoteOnRels\n  }\n"): (typeof documents)["\n  fragment TagSectionPreviewFragment on Tag {\n    ...TagBasicInfo\n    isRead\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      htmlHighlightStartingAtHash(hash: $hash)\n    }\n    canVoteOnRels\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagSubforumFragment on Tag {\n    ...TagPreviewFragment\n    subforumModeratorIds\n    tableOfContents\n    subforumWelcomeText {\n      _id\n      html\n    }\n  }\n"): (typeof documents)["\n  fragment TagSubforumFragment on Tag {\n    ...TagPreviewFragment\n    subforumModeratorIds\n    tableOfContents\n    subforumWelcomeText {\n      _id\n      html\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagSubtagFragment on Tag {\n    _id\n    subforumModeratorIds\n    subTags {\n      ...TagPreviewFragment\n    }\n  }\n"): (typeof documents)["\n  fragment TagSubtagFragment on Tag {\n    _id\n    subforumModeratorIds\n    subTags {\n      ...TagPreviewFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagSubforumSidebarFragment on Tag {\n    ...TagBasicInfo\n  }\n"): (typeof documents)["\n  fragment TagSubforumSidebarFragment on Tag {\n    ...TagBasicInfo\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagDetailedPreviewFragment on Tag {\n    ...TagDetailsFragment\n    description {\n      _id\n      htmlHighlight\n    }\n  }\n"): (typeof documents)["\n  fragment TagDetailedPreviewFragment on Tag {\n    ...TagDetailsFragment\n    description {\n      _id\n      htmlHighlight\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagWithFlagsFragment on Tag {\n    ...TagFragment\n    tagFlagsIds\n    tagFlags {\n      ...TagFlagFragment\n    }\n  }\n"): (typeof documents)["\n  fragment TagWithFlagsFragment on Tag {\n    ...TagFragment\n    tagFlagsIds\n    tagFlags {\n      ...TagFlagFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagWithFlagsAndRevisionFragment on Tag {\n    ...TagRevisionFragment\n    tagFlagsIds\n    tagFlags {\n      ...TagFlagFragment\n    }\n  }\n"): (typeof documents)["\n  fragment TagWithFlagsAndRevisionFragment on Tag {\n    ...TagRevisionFragment\n    tagFlagsIds\n    tagFlags {\n      ...TagFlagFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ArbitalLinkedPagesFragment on ArbitalLinkedPages {\n    faster {\n      _id\n      name\n      slug\n    }\n    slower {\n      _id\n      name\n      slug\n    }\n    moreTechnical {\n      _id\n      name\n      slug\n    }\n    lessTechnical {\n      _id\n      name\n      slug\n    }\n    requirements {\n      _id\n      name\n      slug\n    }\n    teaches {\n      _id\n      name\n      slug\n    }\n    parents {\n      _id\n      name\n      slug\n    }\n    children {\n      _id\n      name\n      slug\n    }\n  }\n"): (typeof documents)["\n  fragment ArbitalLinkedPagesFragment on ArbitalLinkedPages {\n    faster {\n      _id\n      name\n      slug\n    }\n    slower {\n      _id\n      name\n      slug\n    }\n    moreTechnical {\n      _id\n      name\n      slug\n    }\n    lessTechnical {\n      _id\n      name\n      slug\n    }\n    requirements {\n      _id\n      name\n      slug\n    }\n    teaches {\n      _id\n      name\n      slug\n    }\n    parents {\n      _id\n      name\n      slug\n    }\n    children {\n      _id\n      name\n      slug\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagPageArbitalContentFragment on Tag {\n    lenses {\n      ...MultiDocumentWithContributors\n    }\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n  }\n"): (typeof documents)["\n  fragment TagPageArbitalContentFragment on Tag {\n    lenses {\n      ...MultiDocumentWithContributors\n    }\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagPageFragment on Tag {\n    ...TagWithFlagsFragment\n    tableOfContents\n    postsDefaultSortOrder\n    subforumIntroPost {\n      ...PostsListWithVotes\n    }\n    subforumWelcomeText {\n      _id\n      html\n    }\n    contributors(limit: $contributorsLimit) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    canVoteOnRels\n    forceAllowType3Audio\n    textLastUpdatedAt\n  }\n"): (typeof documents)["\n  fragment TagPageFragment on Tag {\n    ...TagWithFlagsFragment\n    tableOfContents\n    postsDefaultSortOrder\n    subforumIntroPost {\n      ...PostsListWithVotes\n    }\n    subforumWelcomeText {\n      _id\n      html\n    }\n    contributors(limit: $contributorsLimit) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    canVoteOnRels\n    forceAllowType3Audio\n    textLastUpdatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagPageWithArbitalContentFragment on Tag {\n    ...TagPageFragment\n    ...TagPageArbitalContentFragment\n  }\n"): (typeof documents)["\n  fragment TagPageWithArbitalContentFragment on Tag {\n    ...TagPageFragment\n    ...TagPageArbitalContentFragment\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AllTagsPageFragment on Tag {\n    ...TagWithFlagsFragment\n    tableOfContents\n  }\n"): (typeof documents)["\n  fragment AllTagsPageFragment on Tag {\n    ...TagWithFlagsFragment\n    tableOfContents\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagPageWithRevisionFragment on Tag {\n    ...TagWithFlagsAndRevisionFragment\n    tableOfContents(version: $version)\n    textLastUpdatedAt\n    postsDefaultSortOrder\n    subforumIntroPost {\n      ...PostsListWithVotes\n    }\n    subforumWelcomeText {\n      _id\n      html\n    }\n    contributors(limit: $contributorsLimit, version: $version) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    canVoteOnRels\n    forceAllowType3Audio\n  }\n"): (typeof documents)["\n  fragment TagPageWithRevisionFragment on Tag {\n    ...TagWithFlagsAndRevisionFragment\n    tableOfContents(version: $version)\n    textLastUpdatedAt\n    postsDefaultSortOrder\n    subforumIntroPost {\n      ...PostsListWithVotes\n    }\n    subforumWelcomeText {\n      _id\n      html\n    }\n    contributors(limit: $contributorsLimit, version: $version) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    canVoteOnRels\n    forceAllowType3Audio\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagPageRevisionWithArbitalContentFragment on Tag {\n    ...TagPageWithRevisionFragment\n    ...TagPageArbitalContentFragment\n  }\n"): (typeof documents)["\n  fragment TagPageRevisionWithArbitalContentFragment on Tag {\n    ...TagPageWithRevisionFragment\n    ...TagPageArbitalContentFragment\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagFullContributorsList on Tag {\n    contributors {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment TagFullContributorsList on Tag {\n    contributors {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagEditFragment on Tag {\n    ...TagDetailsFragment\n    isPostType\n    parentTagId\n    parentTag {\n      ...TagBasicInfo\n    }\n    subforumIntroPostId\n    tagFlagsIds\n    postsDefaultSortOrder\n    introSequenceId\n    canVoteOnRels\n    \n    autoTagModel\n    autoTagPrompt\n    \n    description {\n      ...RevisionEdit\n    }\n    subforumWelcomeText {\n      ...RevisionEdit\n    }\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment TagEditFragment on Tag {\n    ...TagDetailsFragment\n    isPostType\n    parentTagId\n    parentTag {\n      ...TagBasicInfo\n    }\n    subforumIntroPostId\n    tagFlagsIds\n    postsDefaultSortOrder\n    introSequenceId\n    canVoteOnRels\n    \n    autoTagModel\n    autoTagPrompt\n    \n    description {\n      ...RevisionEdit\n    }\n    subforumWelcomeText {\n      ...RevisionEdit\n    }\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRecentDiscussion on Tag {\n    ...TagFragment\n    lastVisitedAt\n    recentComments(tagCommentsLimit: $tagCommentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsList\n    }\n  }\n"): (typeof documents)["\n  fragment TagRecentDiscussion on Tag {\n    ...TagFragment\n    lastVisitedAt\n    recentComments(tagCommentsLimit: $tagCommentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsList\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SunshineTagFragment on Tag {\n    ...TagFragment\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment SunshineTagFragment on Tag {\n    ...TagFragment\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserOnboardingTag on Tag {\n    _id\n    name\n    slug\n    bannerImageId\n    squareImageId\n  }\n"): (typeof documents)["\n  fragment UserOnboardingTag on Tag {\n    _id\n    name\n    slug\n    bannerImageId\n    squareImageId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagName on Tag {\n    _id\n    name\n    slug\n  }\n"): (typeof documents)["\n  fragment TagName on Tag {\n    _id\n    name\n    slug\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ExplorePageTagFragment on Tag {\n    ...TagFragment\n    contributors(limit: $contributorsLimit) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    legacyData\n  }\n"): (typeof documents)["\n  fragment ExplorePageTagFragment on Tag {\n    ...TagFragment\n    contributors(limit: $contributorsLimit) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    legacyData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ConceptItemFragment on Tag {\n    _id\n    core\n    name\n    slug\n    oldSlugs\n    postCount\n    baseScore\n    description {\n      _id\n      wordCount\n    }\n    wikiOnly\n    isArbitalImport\n    coreTagId\n    maxScore\n    usersWhoLiked {\n      _id\n      displayName\n    }\n  }\n"): (typeof documents)["\n  fragment ConceptItemFragment on Tag {\n    _id\n    core\n    name\n    slug\n    oldSlugs\n    postCount\n    baseScore\n    description {\n      _id\n      wordCount\n    }\n    wikiOnly\n    isArbitalImport\n    coreTagId\n    maxScore\n    usersWhoLiked {\n      _id\n      displayName\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagPageWithArbitalContentAndLensRevisionFragment on Tag {\n    ...TagPageFragment\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    lenses(lensSlug: $lensSlug, version: $version) {\n      ...MultiDocumentWithContributorsRevision\n    }\n  }\n"): (typeof documents)["\n  fragment TagPageWithArbitalContentAndLensRevisionFragment on Tag {\n    ...TagPageFragment\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    lenses(lensSlug: $lensSlug, version: $version) {\n      ...MultiDocumentWithContributorsRevision\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment WithVoteTag on Tag {\n    ...TagBasicInfo\n  }\n"): (typeof documents)["\n  fragment WithVoteTag on Tag {\n    ...TagBasicInfo\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TypingIndicatorInfo on TypingIndicator {\n    _id\n    userId\n    documentId\n    lastUpdated\n  }\n"): (typeof documents)["\n  fragment TypingIndicatorInfo on TypingIndicator {\n    _id\n    userId\n    documentId\n    lastUpdated\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserEAGDetailsMinimumInfo on UserEAGDetail {\n    _id\n    userId\n    createdAt\n    lastUpdated\n    careerStage\n    countryOrRegion\n    nearestCity\n    willingnessToRelocate\n    experiencedIn\n    interestedIn\n  }\n"): (typeof documents)["\n  fragment UserEAGDetailsMinimumInfo on UserEAGDetail {\n    _id\n    userId\n    createdAt\n    lastUpdated\n    careerStage\n    countryOrRegion\n    nearestCity\n    willingnessToRelocate\n    experiencedIn\n    interestedIn\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserJobAdsMinimumInfo on UserJobAd {\n    _id\n    userId\n    createdAt\n    lastUpdated\n    jobName\n    adState\n    reminderSetAt\n  }\n"): (typeof documents)["\n  fragment UserJobAdsMinimumInfo on UserJobAd {\n    _id\n    userId\n    createdAt\n    lastUpdated\n    jobName\n    adState\n    reminderSetAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserMostValuablePostInfo on UserMostValuablePost {\n    _id\n    userId\n    postId\n    deleted\n  }\n"): (typeof documents)["\n  fragment UserMostValuablePostInfo on UserMostValuablePost {\n    _id\n    userId\n    postId\n    deleted\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserRateLimitDisplay on UserRateLimit {\n    _id\n    user {\n      ...UsersMinimumInfo\n    }\n    userId\n    type\n    actionsPerInterval\n    intervalUnit\n    intervalLength\n    createdAt\n    endedAt\n  }\n"): (typeof documents)["\n  fragment UserRateLimitDisplay on UserRateLimit {\n    _id\n    user {\n      ...UsersMinimumInfo\n    }\n    userId\n    type\n    actionsPerInterval\n    intervalUnit\n    intervalLength\n    createdAt\n    endedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserTagRelDetails on UserTagRel {\n    _id\n    userId\n    tagId\n    subforumShowUnreadInSidebar\n    subforumEmailNotifications\n    subforumHideIntroPost\n  }\n"): (typeof documents)["\n  fragment UserTagRelDetails on UserTagRel {\n    _id\n    userId\n    tagId\n    subforumShowUnreadInSidebar\n    subforumEmailNotifications\n    subforumHideIntroPost\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersMinimumInfo on User {\n    _id\n    slug\n    createdAt\n    username\n    displayName\n    profileImageId\n    karma\n    afKarma\n    deleted\n    isAdmin\n    htmlBio\n    jobTitle\n    organization\n    postCount\n    commentCount\n    sequenceCount\n    afPostCount\n    afCommentCount\n    spamRiskScore\n    tagRevisionCount\n    reviewedByUserId\n  }\n"): (typeof documents)["\n  fragment UsersMinimumInfo on User {\n    _id\n    slug\n    createdAt\n    username\n    displayName\n    profileImageId\n    karma\n    afKarma\n    deleted\n    isAdmin\n    htmlBio\n    jobTitle\n    organization\n    postCount\n    commentCount\n    sequenceCount\n    afPostCount\n    afCommentCount\n    spamRiskScore\n    tagRevisionCount\n    reviewedByUserId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersProfile on User {\n    ...UsersMinimumInfo\n    fullName\n    previousDisplayName\n    oldSlugs\n    groups\n    jobTitle\n    organization\n    careerStage\n    biography {\n      ...RevisionDisplay\n    }\n    howOthersCanHelpMe {\n      ...RevisionDisplay\n    }\n    howICanHelpOthers {\n      ...RevisionDisplay\n    }\n    profileTagIds\n    organizerOfGroupIds\n    programParticipation\n    website\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    githubProfileURL\n    afSequenceCount\n    afSequenceDraftCount\n    sequenceDraftCount\n    moderationStyle\n    moderationGuidelines {\n      ...RevisionDisplay\n    }\n    bannedUserIds\n    location\n    googleLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    mongoLocation\n    shortformFeedId\n    petrovPressedButtonDate\n    petrovOptOut\n    sortDraftsBy\n    email\n    emails\n    banned\n    noindex\n    paymentEmail\n    paymentInfo\n    goodHeartTokens\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n  }\n"): (typeof documents)["\n  fragment UsersProfile on User {\n    ...UsersMinimumInfo\n    fullName\n    previousDisplayName\n    oldSlugs\n    groups\n    jobTitle\n    organization\n    careerStage\n    biography {\n      ...RevisionDisplay\n    }\n    howOthersCanHelpMe {\n      ...RevisionDisplay\n    }\n    howICanHelpOthers {\n      ...RevisionDisplay\n    }\n    profileTagIds\n    organizerOfGroupIds\n    programParticipation\n    website\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    githubProfileURL\n    afSequenceCount\n    afSequenceDraftCount\n    sequenceDraftCount\n    moderationStyle\n    moderationGuidelines {\n      ...RevisionDisplay\n    }\n    bannedUserIds\n    location\n    googleLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    mongoLocation\n    shortformFeedId\n    petrovPressedButtonDate\n    petrovOptOut\n    sortDraftsBy\n    email\n    emails\n    banned\n    noindex\n    paymentEmail\n    paymentInfo\n    goodHeartTokens\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersCurrent on User {\n    ...UsersMinimumInfo\n    oldSlugs\n    groups\n    jobTitle\n    organization\n    careerStage\n    profileTagIds\n    organizerOfGroupIds\n    moderationStyle\n    moderationGuidelines {\n      ...RevisionDisplay\n    }\n    bannedUserIds\n    location\n    googleLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    mongoLocation\n    shortformFeedId\n    sortDraftsBy\n    email\n    emails\n    banned\n    paymentEmail\n    paymentInfo\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n\n    usernameUnset\n    taggingDashboardCollapsed\n\n    beta\n    acceptedTos\n    pageUrl\n    isReviewed\n    nullifyVotes\n    hideIntercom\n    hideNavigationSidebar\n    hideCommunitySection\n    hasContinueReading\n    expandedFrontpageSections {\n      community\n      recommendations\n      quickTakes\n      quickTakesCommunity\n      popularComments\n    }\n    hidePostsRecommendations\n    currentFrontpageFilter\n    frontpageSelectedTab\n    frontpageFilterSettings\n    hideFrontpageFilterSettingsDesktop\n    allPostsTimeframe\n    allPostsSorting\n    allPostsFilter\n    allPostsShowLowKarma\n    allPostsIncludeEvents\n    allPostsHideCommunity\n    allPostsOpenSettings\n    draftsListSorting\n    draftsListShowArchived\n    draftsListShowShared\n    lastNotificationsCheck\n    bannedUserIds\n    bannedPersonalUserIds\n    moderationStyle\n    noKibitz\n    showHideKarmaOption\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    commentSorting\n    location\n    googleLocation\n    mongoLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    nearbyEventsNotifications\n    nearbyEventsNotificationsLocation\n    nearbyEventsNotificationsRadius\n    nearbyPeopleNotificationThreshold\n    hideFrontpageMap\n    emailSubscribedToCurated\n    subscribedToDigest\n    subscribedToNewsletter\n    unsubscribeFromAll\n    whenConfirmationEmailSent\n    hideSubscribePoke\n    hideMeetupsPoke\n    hideHomeRHS\n    noCollapseCommentsFrontpage\n    noCollapseCommentsPosts\n    noSingleLineComments\n    showCommunityInRecentDiscussion\n    karmaChangeNotifierSettings\n    karmaChangeLastOpened\n    shortformFeedId\n    viewUnreviewedComments\n    recommendationSettings\n    theme\n\n    hasAnyBookmarks\n\n    hiddenPostsMetadata {\n      postId\n    }\n\n    auto_subscribe_to_my_posts\n    auto_subscribe_to_my_comments\n    autoSubscribeAsOrganizer\n    noExpandUnreadCommentsReview\n    hideFrontpageBookAd\n\n    abTestKey\n    abTestOverrides\n\n    sortDraftsBy\n    reactPaletteStyle\n\n    petrovPressedButtonDate\n    petrovLaunchCodeDate\n    petrovOptOut\n    lastUsedTimezone\n\n    acknowledgedNewUserGuidelines\n    notificationSubforumUnread\n    subforumPreferredLayout\n    \n    hideJobAdUntil\n    criticismTipsDismissed\n    \n    allowDatadogSessionReplay\n    hideFrontpageBook2020Ad\n\n    showDialoguesList\n    showMyDialogues\n    showMatches\n    showRecommendedPartners\n    hideActiveDialogueUsers\n\n    hideSunshineSidebar\n    optedOutOfSurveys\n    postGlossariesPinned\n    generateJargonForDrafts\n    generateJargonForPublishedPosts\n  }\n"): (typeof documents)["\n  fragment UsersCurrent on User {\n    ...UsersMinimumInfo\n    oldSlugs\n    groups\n    jobTitle\n    organization\n    careerStage\n    profileTagIds\n    organizerOfGroupIds\n    moderationStyle\n    moderationGuidelines {\n      ...RevisionDisplay\n    }\n    bannedUserIds\n    location\n    googleLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    mongoLocation\n    shortformFeedId\n    sortDraftsBy\n    email\n    emails\n    banned\n    paymentEmail\n    paymentInfo\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n\n    usernameUnset\n    taggingDashboardCollapsed\n\n    beta\n    acceptedTos\n    pageUrl\n    isReviewed\n    nullifyVotes\n    hideIntercom\n    hideNavigationSidebar\n    hideCommunitySection\n    hasContinueReading\n    expandedFrontpageSections {\n      community\n      recommendations\n      quickTakes\n      quickTakesCommunity\n      popularComments\n    }\n    hidePostsRecommendations\n    currentFrontpageFilter\n    frontpageSelectedTab\n    frontpageFilterSettings\n    hideFrontpageFilterSettingsDesktop\n    allPostsTimeframe\n    allPostsSorting\n    allPostsFilter\n    allPostsShowLowKarma\n    allPostsIncludeEvents\n    allPostsHideCommunity\n    allPostsOpenSettings\n    draftsListSorting\n    draftsListShowArchived\n    draftsListShowShared\n    lastNotificationsCheck\n    bannedUserIds\n    bannedPersonalUserIds\n    moderationStyle\n    noKibitz\n    showHideKarmaOption\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    commentSorting\n    location\n    googleLocation\n    mongoLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    nearbyEventsNotifications\n    nearbyEventsNotificationsLocation\n    nearbyEventsNotificationsRadius\n    nearbyPeopleNotificationThreshold\n    hideFrontpageMap\n    emailSubscribedToCurated\n    subscribedToDigest\n    subscribedToNewsletter\n    unsubscribeFromAll\n    whenConfirmationEmailSent\n    hideSubscribePoke\n    hideMeetupsPoke\n    hideHomeRHS\n    noCollapseCommentsFrontpage\n    noCollapseCommentsPosts\n    noSingleLineComments\n    showCommunityInRecentDiscussion\n    karmaChangeNotifierSettings\n    karmaChangeLastOpened\n    shortformFeedId\n    viewUnreviewedComments\n    recommendationSettings\n    theme\n\n    hasAnyBookmarks\n\n    hiddenPostsMetadata {\n      postId\n    }\n\n    auto_subscribe_to_my_posts\n    auto_subscribe_to_my_comments\n    autoSubscribeAsOrganizer\n    noExpandUnreadCommentsReview\n    hideFrontpageBookAd\n\n    abTestKey\n    abTestOverrides\n\n    sortDraftsBy\n    reactPaletteStyle\n\n    petrovPressedButtonDate\n    petrovLaunchCodeDate\n    petrovOptOut\n    lastUsedTimezone\n\n    acknowledgedNewUserGuidelines\n    notificationSubforumUnread\n    subforumPreferredLayout\n    \n    hideJobAdUntil\n    criticismTipsDismissed\n    \n    allowDatadogSessionReplay\n    hideFrontpageBook2020Ad\n\n    showDialoguesList\n    showMyDialogues\n    showMatches\n    showRecommendedPartners\n    hideActiveDialogueUsers\n\n    hideSunshineSidebar\n    optedOutOfSurveys\n    postGlossariesPinned\n    generateJargonForDrafts\n    generateJargonForPublishedPosts\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersCurrentCommentRateLimit on User {\n    _id\n    rateLimitNextAbleToComment(postId: $postId)\n  }\n"): (typeof documents)["\n  fragment UsersCurrentCommentRateLimit on User {\n    _id\n    rateLimitNextAbleToComment(postId: $postId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersCurrentPostRateLimit on User {\n    _id\n    rateLimitNextAbleToPost(eventForm: $eventForm)\n  }\n"): (typeof documents)["\n  fragment UsersCurrentPostRateLimit on User {\n    _id\n    rateLimitNextAbleToPost(eventForm: $eventForm)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserBookmarkedPosts on User {\n    _id\n    bookmarkedPosts {\n      ...PostsList\n    }\n  }\n"): (typeof documents)["\n  fragment UserBookmarkedPosts on User {\n    _id\n    bookmarkedPosts {\n      ...PostsList\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserKarmaChanges on User {\n    _id\n    karmaChanges {\n      totalChange\n      updateFrequency\n      startDate\n      endDate\n      nextBatchDate\n      posts {\n        _id\n        scoreChange\n        postId\n        title\n        slug\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n        collectionName\n      }\n      comments {\n        _id\n        scoreChange\n        commentId\n        description\n        postId\n        postTitle\n        postSlug\n        tagSlug\n        tagName\n        tagCommentType\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n        collectionName\n      }\n      tagRevisions {\n        _id\n        scoreChange\n        tagId\n        tagSlug\n        tagName\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n        collectionName\n      }\n      todaysKarmaChanges {\n        posts {\n          _id\n          scoreChange\n          postId\n          title\n          slug\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n        comments {\n          _id\n          scoreChange\n          commentId\n          description\n          postId\n          postTitle\n          postSlug\n          tagSlug\n          tagName\n          tagCommentType\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n        tagRevisions {\n          _id\n          scoreChange\n          tagId\n          tagSlug\n          tagName\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n      }\n      thisWeeksKarmaChanges {\n        posts {\n          _id\n          scoreChange\n          postId\n          title\n          slug\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n        comments {\n          _id\n          scoreChange\n          commentId\n          description\n          postId\n          postTitle\n          postSlug\n          tagSlug\n          tagName\n          tagCommentType\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n        tagRevisions {\n          _id\n          scoreChange\n          tagId\n          tagSlug\n          tagName\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment UserKarmaChanges on User {\n    _id\n    karmaChanges {\n      totalChange\n      updateFrequency\n      startDate\n      endDate\n      nextBatchDate\n      posts {\n        _id\n        scoreChange\n        postId\n        title\n        slug\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n        collectionName\n      }\n      comments {\n        _id\n        scoreChange\n        commentId\n        description\n        postId\n        postTitle\n        postSlug\n        tagSlug\n        tagName\n        tagCommentType\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n        collectionName\n      }\n      tagRevisions {\n        _id\n        scoreChange\n        tagId\n        tagSlug\n        tagName\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n        collectionName\n      }\n      todaysKarmaChanges {\n        posts {\n          _id\n          scoreChange\n          postId\n          title\n          slug\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n        comments {\n          _id\n          scoreChange\n          commentId\n          description\n          postId\n          postTitle\n          postSlug\n          tagSlug\n          tagName\n          tagCommentType\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n        tagRevisions {\n          _id\n          scoreChange\n          tagId\n          tagSlug\n          tagName\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n      }\n      thisWeeksKarmaChanges {\n        posts {\n          _id\n          scoreChange\n          postId\n          title\n          slug\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n        comments {\n          _id\n          scoreChange\n          commentId\n          description\n          postId\n          postTitle\n          postSlug\n          tagSlug\n          tagName\n          tagCommentType\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n        tagRevisions {\n          _id\n          scoreChange\n          tagId\n          tagSlug\n          tagName\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n          collectionName\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersBannedFromUsersModerationLog on User {\n    _id\n    slug\n    displayName\n    bannedUserIds\n    bannedPersonalUserIds\n  }\n"): (typeof documents)["\n  fragment UsersBannedFromUsersModerationLog on User {\n    _id\n    slug\n    displayName\n    bannedUserIds\n    bannedPersonalUserIds\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SunshineUsersList on User {\n    ...UsersMinimumInfo\n    karma\n    htmlBio\n    website\n    createdAt\n    email\n    emails\n    commentCount\n    maxCommentCount\n    postCount\n    maxPostCount\n    voteCount\n    smallUpvoteCount\n    bigUpvoteCount\n    smallDownvoteCount\n    bigDownvoteCount\n    banned\n    reviewedByUserId\n    reviewedAt\n    signUpReCaptchaRating\n    mapLocation\n    needsReview\n    sunshineNotes\n    sunshineFlagged\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n    snoozedUntilContentCount\n    nullifyVotes\n    deleteContent\n    \n    moderatorActions {\n      ...ModeratorActionDisplay\n    }\n    usersContactedBeforeReview\n    associatedClientIds {\n      clientId\n      firstSeenReferrer\n      firstSeenLandingPage\n      userIds\n    }\n    altAccountsDetected\n\n    voteReceivedCount\n    smallUpvoteReceivedCount\n    bigUpvoteReceivedCount\n    smallDownvoteReceivedCount\n    bigDownvoteReceivedCount\n\n    recentKarmaInfo\n    lastNotificationsCheck\n  }\n"): (typeof documents)["\n  fragment SunshineUsersList on User {\n    ...UsersMinimumInfo\n    karma\n    htmlBio\n    website\n    createdAt\n    email\n    emails\n    commentCount\n    maxCommentCount\n    postCount\n    maxPostCount\n    voteCount\n    smallUpvoteCount\n    bigUpvoteCount\n    smallDownvoteCount\n    bigDownvoteCount\n    banned\n    reviewedByUserId\n    reviewedAt\n    signUpReCaptchaRating\n    mapLocation\n    needsReview\n    sunshineNotes\n    sunshineFlagged\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n    snoozedUntilContentCount\n    nullifyVotes\n    deleteContent\n    \n    moderatorActions {\n      ...ModeratorActionDisplay\n    }\n    usersContactedBeforeReview\n    associatedClientIds {\n      clientId\n      firstSeenReferrer\n      firstSeenLandingPage\n      userIds\n    }\n    altAccountsDetected\n\n    voteReceivedCount\n    smallUpvoteReceivedCount\n    bigUpvoteReceivedCount\n    smallDownvoteReceivedCount\n    bigDownvoteReceivedCount\n\n    recentKarmaInfo\n    lastNotificationsCheck\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserAltAccountsFragment on User {\n    ...SunshineUsersList\n    IPs\n  }\n"): (typeof documents)["\n  fragment UserAltAccountsFragment on User {\n    ...SunshineUsersList\n    IPs\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersMapEntry on User {\n    _id\n    displayName\n    username\n    fullName\n    slug\n    mapLocationLatLng {\n      lat\n      lng\n    }\n    mapLocationSet\n    htmlMapMarkerText\n  }\n"): (typeof documents)["\n  fragment UsersMapEntry on User {\n    _id\n    displayName\n    username\n    fullName\n    slug\n    mapLocationLatLng {\n      lat\n      lng\n    }\n    mapLocationSet\n    htmlMapMarkerText\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersEdit on User {\n    ...UsersProfile\n    ...UsersCurrent\n\n    biography {\n      ...RevisionEdit\n    }\n    # Moderation Guidelines editor information\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n\n    # UI Settings\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    hideIntercom\n    commentSorting\n    currentFrontpageFilter\n    noCollapseCommentsPosts\n    noCollapseCommentsFrontpage\n    noSingleLineComments\n    hideCommunitySection\n    showCommunityInRecentDiscussion\n    hidePostsRecommendations\n    beta\n    theme\n\n    # Emails\n    email\n    whenConfirmationEmailSent\n    emailSubscribedToCurated\n    subscribedToDigest\n    subscribedToNewsletter\n    unsubscribeFromAll\n    hasAuth0Id\n\n    # Moderation\n    moderatorAssistance\n    collapseModerationGuidelines\n    bannedUserIds\n    bannedPersonalUserIds\n    noKibitz\n    showHideKarmaOption\n\n    # Ban & Purge\n    nullifyVotes\n    deleteContent\n    banned\n\n    # Name\n    username\n    displayName\n    fullName\n\n    # Location\n    mongoLocation\n    googleLocation\n    location\n    \n    # Map Location (public)\n    mapLocation\n    \n    # Privacy settings\n    hideFromPeopleDirectory\n    allowDatadogSessionReplay\n\n    # Admin & Review\n    reviewedByUserId\n\n    # Alignment Forum\n    reviewForAlignmentForumUserId\n    groups\n    afApplicationText\n    afSubmittedApplication\n\n    # Karma Settings\n    karmaChangeLastOpened\n    karmaChangeNotifierSettings\n\n    notificationShortformContent\n    notificationCommentsOnSubscribedPost\n    notificationRepliesToMyComments\n    notificationRepliesToSubscribedComments\n    notificationSubscribedUserPost\n    notificationSubscribedUserComment\n    notificationSubscribedTagPost\n    notificationSubscribedSequencePost\n    notificationPostsInGroups\n    notificationPrivateMessage\n    notificationSharedWithMe\n    notificationAlignmentSubmissionApproved\n    notificationEventInRadius\n    notificationRSVPs\n    notificationCommentsOnDraft\n    notificationPostsNominatedReview\n    notificationGroupAdministration\n    notificationSubforumUnread\n    notificationNewMention\n    notificationNewDialogueChecks\n    notificationYourTurnMatchForm\n    notificationDialogueMessages\n    notificationPublishedDialogueMessages\n\n    hideFrontpageMap\n    hideTaggingProgressBar\n    hideFrontpageBookAd\n    hideFrontpageBook2020Ad\n\n    deleted\n    permanentDeletionRequestedAt\n\n    twitterProfileURLAdmin\n  }\n"): (typeof documents)["\n  fragment UsersEdit on User {\n    ...UsersProfile\n    ...UsersCurrent\n\n    biography {\n      ...RevisionEdit\n    }\n    # Moderation Guidelines editor information\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n\n    # UI Settings\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    hideIntercom\n    commentSorting\n    currentFrontpageFilter\n    noCollapseCommentsPosts\n    noCollapseCommentsFrontpage\n    noSingleLineComments\n    hideCommunitySection\n    showCommunityInRecentDiscussion\n    hidePostsRecommendations\n    beta\n    theme\n\n    # Emails\n    email\n    whenConfirmationEmailSent\n    emailSubscribedToCurated\n    subscribedToDigest\n    subscribedToNewsletter\n    unsubscribeFromAll\n    hasAuth0Id\n\n    # Moderation\n    moderatorAssistance\n    collapseModerationGuidelines\n    bannedUserIds\n    bannedPersonalUserIds\n    noKibitz\n    showHideKarmaOption\n\n    # Ban & Purge\n    nullifyVotes\n    deleteContent\n    banned\n\n    # Name\n    username\n    displayName\n    fullName\n\n    # Location\n    mongoLocation\n    googleLocation\n    location\n    \n    # Map Location (public)\n    mapLocation\n    \n    # Privacy settings\n    hideFromPeopleDirectory\n    allowDatadogSessionReplay\n\n    # Admin & Review\n    reviewedByUserId\n\n    # Alignment Forum\n    reviewForAlignmentForumUserId\n    groups\n    afApplicationText\n    afSubmittedApplication\n\n    # Karma Settings\n    karmaChangeLastOpened\n    karmaChangeNotifierSettings\n\n    notificationShortformContent\n    notificationCommentsOnSubscribedPost\n    notificationRepliesToMyComments\n    notificationRepliesToSubscribedComments\n    notificationSubscribedUserPost\n    notificationSubscribedUserComment\n    notificationSubscribedTagPost\n    notificationSubscribedSequencePost\n    notificationPostsInGroups\n    notificationPrivateMessage\n    notificationSharedWithMe\n    notificationAlignmentSubmissionApproved\n    notificationEventInRadius\n    notificationRSVPs\n    notificationCommentsOnDraft\n    notificationPostsNominatedReview\n    notificationGroupAdministration\n    notificationSubforumUnread\n    notificationNewMention\n    notificationNewDialogueChecks\n    notificationYourTurnMatchForm\n    notificationDialogueMessages\n    notificationPublishedDialogueMessages\n\n    hideFrontpageMap\n    hideTaggingProgressBar\n    hideFrontpageBookAd\n    hideFrontpageBook2020Ad\n\n    deleted\n    permanentDeletionRequestedAt\n\n    twitterProfileURLAdmin\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersWithReviewInfo on User {\n    ...UsersMinimumInfo\n    reviewVoteCount\n    email\n  }\n"): (typeof documents)["\n  fragment UsersWithReviewInfo on User {\n    ...UsersMinimumInfo\n    reviewVoteCount\n    email\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersProfileEdit on User {\n    _id\n    slug\n    displayName\n    jobTitle\n    organization\n    careerStage\n    profileImageId\n    biography {\n      ...RevisionEdit\n    }\n    howOthersCanHelpMe {\n      ...RevisionEdit\n    }\n    howICanHelpOthers {\n      ...RevisionEdit\n    }\n    profileTagIds\n    organizerOfGroupIds\n    organizerOfGroups {\n      ...localGroupsBase\n    }\n    programParticipation\n    mapLocation\n    website\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    githubProfileURL\n  }\n"): (typeof documents)["\n  fragment UsersProfileEdit on User {\n    _id\n    slug\n    displayName\n    jobTitle\n    organization\n    careerStage\n    profileImageId\n    biography {\n      ...RevisionEdit\n    }\n    howOthersCanHelpMe {\n      ...RevisionEdit\n    }\n    howICanHelpOthers {\n      ...RevisionEdit\n    }\n    profileTagIds\n    organizerOfGroupIds\n    organizerOfGroups {\n      ...localGroupsBase\n    }\n    programParticipation\n    mapLocation\n    website\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    githubProfileURL\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersCrosspostInfo on User {\n    _id\n    username\n    slug\n    fmCrosspostUserId\n  }\n"): (typeof documents)["\n  fragment UsersCrosspostInfo on User {\n    _id\n    username\n    slug\n    fmCrosspostUserId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersOptedInToDialogueFacilitation on User {\n    _id\n    displayName\n  }\n"): (typeof documents)["\n  fragment UsersOptedInToDialogueFacilitation on User {\n    _id\n    displayName\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserOnboardingAuthor on User {\n    _id\n    displayName\n    profileImageId\n    karma\n    jobTitle\n    organization\n  }\n"): (typeof documents)["\n  fragment UserOnboardingAuthor on User {\n    _id\n    displayName\n    profileImageId\n    karma\n    jobTitle\n    organization\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersSocialMediaInfo on User {\n    ...UsersProfile\n    twitterProfileURLAdmin\n  }\n"): (typeof documents)["\n  fragment UsersSocialMediaInfo on User {\n    ...UsersProfile\n    twitterProfileURLAdmin\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SuggestAlignmentUser on User {\n    ...UsersMinimumInfo\n    afKarma\n    afPostCount\n    afCommentCount\n    reviewForAlignmentForumUserId\n    groups\n    afApplicationText\n    afSubmittedApplication\n  }\n"): (typeof documents)["\n  fragment SuggestAlignmentUser on User {\n    ...UsersMinimumInfo\n    afKarma\n    afPostCount\n    afCommentCount\n    reviewForAlignmentForumUserId\n    groups\n    afApplicationText\n    afSubmittedApplication\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRelVotes on Vote {\n    _id\n    userId\n    voteType\n    power\n    documentId\n    votedAt\n    isUnvote\n    tagRel {\n      ...WithVoteTagRel\n    }\n  }\n"): (typeof documents)["\n  fragment TagRelVotes on Vote {\n    _id\n    userId\n    voteType\n    power\n    documentId\n    votedAt\n    isUnvote\n    tagRel {\n      ...WithVoteTagRel\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagVotingActivity on Vote {\n    ...TagRelVotes\n    tagRel {\n      ...TagRelFragment\n    }\n  }\n"): (typeof documents)["\n  fragment TagVotingActivity on Vote {\n    ...TagRelVotes\n    tagRel {\n      ...TagRelFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserVotes on Vote {\n    _id\n    userId\n    voteType\n    power\n    cancelled\n    documentId\n    votedAt\n    isUnvote\n    collectionName\n  }\n"): (typeof documents)["\n  fragment UserVotes on Vote {\n    _id\n    userId\n    voteType\n    power\n    cancelled\n    documentId\n    votedAt\n    isUnvote\n    collectionName\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserVotesWithDocument on Vote {\n    ...UserVotes\n    comment {\n      ...CommentsListWithParentMetadata\n    }\n    post {\n      ...PostsListWithVotes\n    }\n  }\n"): (typeof documents)["\n  fragment UserVotesWithDocument on Vote {\n    ...UserVotes\n    comment {\n      ...CommentsListWithParentMetadata\n    }\n    post {\n      ...PostsListWithVotes\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getCurrentUser {\n      currentUser {\n        ...UsersCurrent\n      }\n    }\n  "): (typeof documents)["\n    query getCurrentUser {\n      currentUser {\n        ...UsersCurrent\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createLWEventwithNewEvents($data: CreateLWEventDataInput!) {\n    createLWEvent(data: $data) {\n      data {\n        ...newEventFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createLWEventwithNewEvents($data: CreateLWEventDataInput!) {\n    createLWEvent(data: $data) {\n      data {\n        ...newEventFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiTagfilterSettingsQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagBasicInfo\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiTagfilterSettingsQuery($selector: TagSelector, $limit: Int, $enableTotal: Boolean) {\n    tags(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...TagBasicInfo\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AdvisorRequestsDefaultFragment on AdvisorRequest {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    interestedInMetaculus\n    jobAds\n  }\n"): (typeof documents)["\n  fragment AdvisorRequestsDefaultFragment on AdvisorRequest {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    interestedInMetaculus\n    jobAds\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ArbitalCachesDefaultFragment on ArbitalCaches {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"): (typeof documents)["\n  fragment ArbitalCachesDefaultFragment on ArbitalCaches {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ArbitalTagContentRelsDefaultFragment on ArbitalTagContentRel {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    parentDocumentId\n    childDocumentId\n    parentCollectionName\n    childCollectionName\n    type\n    level\n    isStrong\n  }\n"): (typeof documents)["\n  fragment ArbitalTagContentRelsDefaultFragment on ArbitalTagContentRel {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    parentDocumentId\n    childDocumentId\n    parentCollectionName\n    childCollectionName\n    type\n    level\n    isStrong\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AutomatedContentEvaluationsDefaultFragment on AutomatedContentEvaluation {\n    _id\n    createdAt\n    revisionId\n    score\n    aiChoice\n    aiReasoning\n    aiCoT\n  }\n"): (typeof documents)["\n  fragment AutomatedContentEvaluationsDefaultFragment on AutomatedContentEvaluation {\n    _id\n    createdAt\n    revisionId\n    score\n    aiChoice\n    aiReasoning\n    aiCoT\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment BansDefaultFragment on Ban {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    expirationDate\n    userId\n    ip\n    reason\n    comment\n    properties\n  }\n"): (typeof documents)["\n  fragment BansDefaultFragment on Ban {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    expirationDate\n    userId\n    ip\n    reason\n    comment\n    properties\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment BookmarksDefaultFragment on Bookmark {\n    _id\n    createdAt\n    documentId\n    collectionName\n    userId\n    lastUpdated\n    active\n  }\n"): (typeof documents)["\n  fragment BookmarksDefaultFragment on Bookmark {\n    _id\n    createdAt\n    documentId\n    collectionName\n    userId\n    lastUpdated\n    active\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment BooksDefaultFragment on Book {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    postedAt\n    title\n    subtitle\n    tocTitle\n    collectionId\n    number\n    postIds\n    sequenceIds\n    displaySequencesAsGrid\n    hideProgressBar\n    showChapters\n  }\n"): (typeof documents)["\n  fragment BooksDefaultFragment on Book {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    postedAt\n    title\n    subtitle\n    tocTitle\n    collectionId\n    number\n    postIds\n    sequenceIds\n    displaySequencesAsGrid\n    hideProgressBar\n    showChapters\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ChaptersDefaultFragment on Chapter {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    title\n    subtitle\n    number\n    sequenceId\n    postIds\n  }\n"): (typeof documents)["\n  fragment ChaptersDefaultFragment on Chapter {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    title\n    subtitle\n    number\n    sequenceId\n    postIds\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CkEditorUserSessionsDefaultFragment on CkEditorUserSession {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    documentId\n    userId\n    endedAt\n    endedBy\n  }\n"): (typeof documents)["\n  fragment CkEditorUserSessionsDefaultFragment on CkEditorUserSession {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    documentId\n    userId\n    endedAt\n    endedBy\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ClientIdsDefaultFragment on ClientId {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    clientId\n    firstSeenReferrer\n    firstSeenLandingPage\n    userIds\n    invalidated\n    lastSeenAt\n    timesSeen\n  }\n"): (typeof documents)["\n  fragment ClientIdsDefaultFragment on ClientId {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    clientId\n    firstSeenReferrer\n    firstSeenLandingPage\n    userIds\n    invalidated\n    lastSeenAt\n    timesSeen\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CollectionsDefaultFragment on Collection {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    userId\n    title\n    slug\n    gridImageId\n    firstPageLink\n    hideStartReadingButton\n    noindex\n  }\n"): (typeof documents)["\n  fragment CollectionsDefaultFragment on Collection {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    userId\n    title\n    slug\n    gridImageId\n    firstPageLink\n    hideStartReadingButton\n    noindex\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentModeratorActionsDefaultFragment on CommentModeratorAction {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    commentId\n    type\n    endedAt\n  }\n"): (typeof documents)["\n  fragment CommentModeratorActionsDefaultFragment on CommentModeratorAction {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    commentId\n    type\n    endedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentsDefaultFragment on Comment {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    pingbacks\n    parentCommentId\n    topLevelCommentId\n    postedAt\n    lastEditedAt\n    author\n    postId\n    tagId\n    forumEventId\n    forumEventMetadata\n    tagCommentType\n    subforumStickyPriority\n    userId\n    userIP\n    userAgent\n    referrer\n    authorIsUnreviewed\n    answer\n    parentAnswerId\n    directChildrenCount\n    descendentCount\n    shortform\n    shortformFrontpage\n    nominatedForReview\n    reviewingForReview\n    lastSubthreadActivity\n    postVersion\n    promoted\n    promotedByUserId\n    promotedAt\n    hideKarma\n    legacy\n    legacyId\n    legacyPoll\n    legacyParentId\n    draft\n    retracted\n    deleted\n    deletedPublic\n    deletedReason\n    deletedDate\n    deletedByUserId\n    spam\n    repliesBlockedUntil\n    needsReview\n    reviewedByUserId\n    hideAuthor\n    moderatorHat\n    hideModeratorHat\n    isPinnedOnProfile\n    title\n    relevantTagIds\n    debateResponse\n    rejected\n    modGPTAnalysis\n    modGPTRecommendation\n    rejectedReason\n    rejectedByUserId\n    af\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    afDate\n    moveToAlignmentUserId\n    agentFoundationsId\n    originalDialogueId\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n"): (typeof documents)["\n  fragment CommentsDefaultFragment on Comment {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    pingbacks\n    parentCommentId\n    topLevelCommentId\n    postedAt\n    lastEditedAt\n    author\n    postId\n    tagId\n    forumEventId\n    forumEventMetadata\n    tagCommentType\n    subforumStickyPriority\n    userId\n    userIP\n    userAgent\n    referrer\n    authorIsUnreviewed\n    answer\n    parentAnswerId\n    directChildrenCount\n    descendentCount\n    shortform\n    shortformFrontpage\n    nominatedForReview\n    reviewingForReview\n    lastSubthreadActivity\n    postVersion\n    promoted\n    promotedByUserId\n    promotedAt\n    hideKarma\n    legacy\n    legacyId\n    legacyPoll\n    legacyParentId\n    draft\n    retracted\n    deleted\n    deletedPublic\n    deletedReason\n    deletedDate\n    deletedByUserId\n    spam\n    repliesBlockedUntil\n    needsReview\n    reviewedByUserId\n    hideAuthor\n    moderatorHat\n    hideModeratorHat\n    isPinnedOnProfile\n    title\n    relevantTagIds\n    debateResponse\n    rejected\n    modGPTAnalysis\n    modGPTRecommendation\n    rejectedReason\n    rejectedByUserId\n    af\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    afDate\n    moveToAlignmentUserId\n    agentFoundationsId\n    originalDialogueId\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ConversationsDefaultFragment on Conversation {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    title\n    participantIds\n    latestActivity\n    af\n    messageCount\n    moderator\n    archivedByIds\n  }\n"): (typeof documents)["\n  fragment ConversationsDefaultFragment on Conversation {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    title\n    participantIds\n    latestActivity\n    af\n    messageCount\n    moderator\n    archivedByIds\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CronHistoriesDefaultFragment on CronHistory {\n    _id\n    intendedAt\n    name\n    startedAt\n    finishedAt\n    result\n  }\n"): (typeof documents)["\n  fragment CronHistoriesDefaultFragment on CronHistory {\n    _id\n    intendedAt\n    name\n    startedAt\n    finishedAt\n    result\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CurationEmailsDefaultFragment on CurationEmail {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    postId\n  }\n"): (typeof documents)["\n  fragment CurationEmailsDefaultFragment on CurationEmail {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    postId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CurationNoticesDefaultFragment on CurationNotice {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    userId\n    commentId\n    postId\n    deleted\n  }\n"): (typeof documents)["\n  fragment CurationNoticesDefaultFragment on CurationNotice {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    userId\n    commentId\n    postId\n    deleted\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DatabaseMetadataDefaultFragment on DatabaseMetadata {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"): (typeof documents)["\n  fragment DatabaseMetadataDefaultFragment on DatabaseMetadata {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DebouncerEventsDefaultFragment on DebouncerEvents {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"): (typeof documents)["\n  fragment DebouncerEventsDefaultFragment on DebouncerEvents {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DialogueChecksDefaultFragment on DialogueCheck {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    targetUserId\n    checked\n    checkedAt\n    hideInRecommendations\n  }\n"): (typeof documents)["\n  fragment DialogueChecksDefaultFragment on DialogueCheck {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    targetUserId\n    checked\n    checkedAt\n    hideInRecommendations\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DialogueMatchPreferencesDefaultFragment on DialogueMatchPreference {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    dialogueCheckId\n    topicPreferences\n    topicNotes\n    syncPreference\n    asyncPreference\n    formatNotes\n    calendlyLink\n    generatedDialogueId\n    deleted\n  }\n"): (typeof documents)["\n  fragment DialogueMatchPreferencesDefaultFragment on DialogueMatchPreference {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    dialogueCheckId\n    topicPreferences\n    topicNotes\n    syncPreference\n    asyncPreference\n    formatNotes\n    calendlyLink\n    generatedDialogueId\n    deleted\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DigestPostsDefaultFragment on DigestPost {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    digestId\n    postId\n    emailDigestStatus\n    onsiteDigestStatus\n  }\n"): (typeof documents)["\n  fragment DigestPostsDefaultFragment on DigestPost {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    digestId\n    postId\n    emailDigestStatus\n    onsiteDigestStatus\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DigestsDefaultFragment on Digest {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    num\n    startDate\n    endDate\n    publishedDate\n    onsiteImageId\n    onsitePrimaryColor\n  }\n"): (typeof documents)["\n  fragment DigestsDefaultFragment on Digest {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    num\n    startDate\n    endDate\n    publishedDate\n    onsiteImageId\n    onsitePrimaryColor\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ElectionCandidatesDefaultFragment on ElectionCandidate {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    electionName\n    name\n    logoSrc\n    href\n    fundraiserLink\n    gwwcLink\n    gwwcId\n    description\n    userId\n    postCount\n    tagId\n    isElectionFundraiser\n    amountRaised\n    targetAmount\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n"): (typeof documents)["\n  fragment ElectionCandidatesDefaultFragment on ElectionCandidate {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    electionName\n    name\n    logoSrc\n    href\n    fundraiserLink\n    gwwcLink\n    gwwcId\n    description\n    userId\n    postCount\n    tagId\n    isElectionFundraiser\n    amountRaised\n    targetAmount\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ElectionVotesDefaultFragment on ElectionVote {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    electionName\n    userId\n    compareState\n    vote\n    submittedAt\n    submissionComments\n    userExplanation\n    userOtherComments\n  }\n"): (typeof documents)["\n  fragment ElectionVotesDefaultFragment on ElectionVote {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    electionName\n    userId\n    compareState\n    vote\n    submittedAt\n    submissionComments\n    userExplanation\n    userOtherComments\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ElicitQuestionPredictionsDefaultFragment on ElicitQuestionPrediction {\n    _id\n    prediction\n    createdAt\n    notes\n    userId\n    sourceUrl\n    sourceId\n    binaryQuestionId\n    isDeleted\n  }\n"): (typeof documents)["\n  fragment ElicitQuestionPredictionsDefaultFragment on ElicitQuestionPrediction {\n    _id\n    prediction\n    createdAt\n    notes\n    userId\n    sourceUrl\n    sourceId\n    binaryQuestionId\n    isDeleted\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ElicitQuestionsDefaultFragment on ElicitQuestion {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    title\n    notes\n    resolution\n    resolvesBy\n  }\n"): (typeof documents)["\n  fragment ElicitQuestionsDefaultFragment on ElicitQuestion {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    title\n    notes\n    resolution\n    resolvesBy\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment EmailTokensDefaultFragment on EmailTokens {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"): (typeof documents)["\n  fragment EmailTokensDefaultFragment on EmailTokens {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FeaturedResourcesDefaultFragment on FeaturedResource {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    title\n    body\n    ctaText\n    ctaUrl\n    expiresAt\n  }\n"): (typeof documents)["\n  fragment FeaturedResourcesDefaultFragment on FeaturedResource {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    title\n    body\n    ctaText\n    ctaUrl\n    expiresAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FieldChangesDefaultFragment on FieldChange {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    changeGroup\n    documentId\n    fieldName\n    oldValue\n    newValue\n  }\n"): (typeof documents)["\n  fragment FieldChangesDefaultFragment on FieldChange {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    changeGroup\n    documentId\n    fieldName\n    oldValue\n    newValue\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ForumEventsDefaultFragment on ForumEvent {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    frontpageDescription_latest\n    frontpageDescriptionMobile_latest\n    postPageDescription_latest\n    title\n    startDate\n    endDate\n    darkColor\n    lightColor\n    bannerTextColor\n    contrastColor\n    tagId\n    postId\n    commentId\n    bannerImageId\n    includesPoll\n    isGlobal\n    eventFormat\n    pollQuestion_latest\n    pollAgreeWording\n    pollDisagreeWording\n    maxStickersPerUser\n    customComponent\n    commentPrompt\n    publicData\n  }\n"): (typeof documents)["\n  fragment ForumEventsDefaultFragment on ForumEvent {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    frontpageDescription_latest\n    frontpageDescriptionMobile_latest\n    postPageDescription_latest\n    title\n    startDate\n    endDate\n    darkColor\n    lightColor\n    bannerTextColor\n    contrastColor\n    tagId\n    postId\n    commentId\n    bannerImageId\n    includesPoll\n    isGlobal\n    eventFormat\n    pollQuestion_latest\n    pollAgreeWording\n    pollDisagreeWording\n    maxStickersPerUser\n    customComponent\n    commentPrompt\n    publicData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment GardenCodesDefaultFragment on GardenCode {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    pingbacks\n    slug\n    code\n    title\n    userId\n    startTime\n    endTime\n    fbLink\n    type\n    hidden\n    deleted\n    afOnly\n  }\n"): (typeof documents)["\n  fragment GardenCodesDefaultFragment on GardenCode {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    pingbacks\n    slug\n    code\n    title\n    userId\n    startTime\n    endTime\n    fbLink\n    type\n    hidden\n    deleted\n    afOnly\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment GoogleServiceAccountSessionsDefaultFragment on GoogleServiceAccountSession {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    email\n    estimatedExpiry\n    active\n    revoked\n  }\n"): (typeof documents)["\n  fragment GoogleServiceAccountSessionsDefaultFragment on GoogleServiceAccountSession {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    email\n    estimatedExpiry\n    active\n    revoked\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ImagesDefaultFragment on Images {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"): (typeof documents)["\n  fragment ImagesDefaultFragment on Images {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment JargonTermsDefaultFragment on JargonTerm {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    postId\n    term\n    approved\n    deleted\n    altTerms\n  }\n"): (typeof documents)["\n  fragment JargonTermsDefaultFragment on JargonTerm {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    postId\n    term\n    approved\n    deleted\n    altTerms\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LWEventsDefaultFragment on LWEvent {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    name\n    documentId\n    important\n    properties\n    intercom\n  }\n"): (typeof documents)["\n  fragment LWEventsDefaultFragment on LWEvent {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    name\n    documentId\n    important\n    properties\n    intercom\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LegacyDataDefaultFragment on LegacyData {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"): (typeof documents)["\n  fragment LegacyDataDefaultFragment on LegacyData {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LlmConversationsDefaultFragment on LlmConversation {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    title\n    model\n    systemPrompt\n    deleted\n  }\n"): (typeof documents)["\n  fragment LlmConversationsDefaultFragment on LlmConversation {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    title\n    model\n    systemPrompt\n    deleted\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LlmMessagesDefaultFragment on LlmMessage {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    conversationId\n    role\n    content\n  }\n"): (typeof documents)["\n  fragment LlmMessagesDefaultFragment on LlmMessage {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    conversationId\n    role\n    content\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LocalgroupsDefaultFragment on Localgroup {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    name\n    nameInAnotherLanguage\n    organizerIds\n    lastActivity\n    types\n    categories\n    isOnline\n    mongoLocation\n    googleLocation\n    location\n    contactInfo\n    facebookLink\n    facebookPageLink\n    meetupLink\n    slackLink\n    website\n    bannerImageId\n    inactive\n    deleted\n  }\n"): (typeof documents)["\n  fragment LocalgroupsDefaultFragment on Localgroup {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    name\n    nameInAnotherLanguage\n    organizerIds\n    lastActivity\n    types\n    categories\n    isOnline\n    mongoLocation\n    googleLocation\n    location\n    contactInfo\n    facebookLink\n    facebookPageLink\n    meetupLink\n    slackLink\n    website\n    bannerImageId\n    inactive\n    deleted\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ManifoldProbabilitiesCachesDefaultFragment on ManifoldProbabilitiesCache {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    marketId\n    probability\n    isResolved\n    year\n    lastUpdated\n    url\n  }\n"): (typeof documents)["\n  fragment ManifoldProbabilitiesCachesDefaultFragment on ManifoldProbabilitiesCache {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    marketId\n    probability\n    isResolved\n    year\n    lastUpdated\n    url\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MessagesDefaultFragment on Message {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    userId\n    conversationId\n    noEmail\n  }\n"): (typeof documents)["\n  fragment MessagesDefaultFragment on Message {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    userId\n    conversationId\n    noEmail\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MigrationsDefaultFragment on Migration {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"): (typeof documents)["\n  fragment MigrationsDefaultFragment on Migration {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ModerationTemplatesDefaultFragment on ModerationTemplate {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    name\n    collectionName\n    order\n    deleted\n  }\n"): (typeof documents)["\n  fragment ModerationTemplatesDefaultFragment on ModerationTemplate {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    name\n    collectionName\n    order\n    deleted\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ModeratorActionsDefaultFragment on ModeratorAction {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    type\n    endedAt\n  }\n"): (typeof documents)["\n  fragment ModeratorActionsDefaultFragment on ModeratorAction {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    type\n    endedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MultiDocumentsDefaultFragment on MultiDocument {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    pingbacks\n    slug\n    oldSlugs\n    title\n    preview\n    tabTitle\n    tabSubtitle\n    userId\n    parentDocumentId\n    collectionName\n    fieldName\n    index\n    contributionStats\n    htmlWithContributorAnnotations\n    deleted\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n"): (typeof documents)["\n  fragment MultiDocumentsDefaultFragment on MultiDocument {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    pingbacks\n    slug\n    oldSlugs\n    title\n    preview\n    tabTitle\n    tabSubtitle\n    userId\n    parentDocumentId\n    collectionName\n    fieldName\n    index\n    contributionStats\n    htmlWithContributorAnnotations\n    deleted\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NotificationsDefaultFragment on Notification {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    documentId\n    documentType\n    extraData\n    link\n    title\n    message\n    type\n    deleted\n    viewed\n    emailed\n    waitingForBatch\n  }\n"): (typeof documents)["\n  fragment NotificationsDefaultFragment on Notification {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    documentId\n    documentType\n    extraData\n    link\n    title\n    message\n    type\n    deleted\n    viewed\n    emailed\n    waitingForBatch\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PageCacheDefaultFragment on PageCacheEntry {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"): (typeof documents)["\n  fragment PageCacheDefaultFragment on PageCacheEntry {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PetrovDayActionsDefaultFragment on PetrovDayAction {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    actionType\n    data\n    userId\n  }\n"): (typeof documents)["\n  fragment PetrovDayActionsDefaultFragment on PetrovDayAction {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    actionType\n    data\n    userId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PetrovDayLaunchsDefaultFragment on PetrovDayLaunch {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    launchCode\n    hashedLaunchCode\n    userId\n  }\n"): (typeof documents)["\n  fragment PetrovDayLaunchsDefaultFragment on PetrovDayLaunch {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    launchCode\n    hashedLaunchCode\n    userId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PodcastEpisodesDefaultFragment on PodcastEpisode {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    podcastId\n    title\n    episodeLink\n    externalEpisodeId\n  }\n"): (typeof documents)["\n  fragment PodcastEpisodesDefaultFragment on PodcastEpisode {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    podcastId\n    title\n    episodeLink\n    externalEpisodeId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PodcastsDefaultFragment on Podcast {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    title\n    applePodcastLink\n    spotifyPodcastLink\n  }\n"): (typeof documents)["\n  fragment PodcastsDefaultFragment on Podcast {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    title\n    applePodcastLink\n    spotifyPodcastLink\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostRecommendationsDefaultFragment on PostRecommendation {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    clientId\n    postId\n    strategyName\n    strategySettings\n    recommendationCount\n    lastRecommendedAt\n    clickedAt\n  }\n"): (typeof documents)["\n  fragment PostRecommendationsDefaultFragment on PostRecommendation {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    clientId\n    postId\n    strategyName\n    strategySettings\n    recommendationCount\n    lastRecommendedAt\n    clickedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostRelationsDefaultFragment on PostRelation {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    type\n    sourcePostId\n    targetPostId\n    order\n  }\n"): (typeof documents)["\n  fragment PostRelationsDefaultFragment on PostRelation {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    type\n    sourcePostId\n    targetPostId\n    order\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsDefaultFragment on Post {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    pingbacks\n    moderationGuidelines_latest\n    customHighlight_latest\n    slug\n    postedAt\n    modifiedAt\n    url\n    postCategory\n    title\n    viewCount\n    lastCommentedAt\n    clickCount\n    deletedDraft\n    status\n    isFuture\n    sticky\n    stickyPriority\n    userIP\n    userAgent\n    referrer\n    author\n    userId\n    question\n    authorIsUnreviewed\n    readTimeMinutesOverride\n    submitToFrontpage\n    hiddenRelatedQuestion\n    originalPostRelationSourceId\n    shortform\n    canonicalSource\n    nominationCount2018\n    nominationCount2019\n    reviewCount2018\n    reviewCount2019\n    reviewCount\n    reviewVoteCount\n    positiveReviewVoteCount\n    manifoldReviewMarketId\n    reviewVoteScoreAF\n    reviewVotesAF\n    reviewVoteScoreHighKarma\n    reviewVotesHighKarma\n    reviewVoteScoreAllKarma\n    reviewVotesAllKarma\n    finalReviewVoteScoreHighKarma\n    finalReviewVotesHighKarma\n    finalReviewVoteScoreAllKarma\n    finalReviewVotesAllKarma\n    finalReviewVoteScoreAF\n    finalReviewVotesAF\n    lastCommentPromotedAt\n    tagRelevance\n    noIndex\n    rsvps\n    activateRSVPs\n    nextDayReminderSent\n    onlyVisibleToLoggedIn\n    onlyVisibleToEstablishedAccounts\n    hideFromRecentDiscussions\n    votingSystem\n    podcastEpisodeId\n    forceAllowType3Audio\n    legacy\n    legacyId\n    legacySpam\n    feedId\n    feedLink\n    curatedDate\n    metaDate\n    suggestForCuratedUserIds\n    frontpageDate\n    autoFrontpage\n    collectionTitle\n    hasCoauthorPermission\n    socialPreviewImageId\n    socialPreviewImageAutoUrl\n    canonicalSequenceId\n    canonicalCollectionSlug\n    canonicalBookId\n    canonicalNextPostSlug\n    canonicalPrevPostSlug\n    unlisted\n    disableRecommendation\n    defaultRecommendation\n    hideFromPopularComments\n    draft\n    wasEverUndrafted\n    meta\n    hideFrontpageComments\n    maxBaseScore\n    scoreExceeded2Date\n    scoreExceeded30Date\n    scoreExceeded45Date\n    scoreExceeded75Date\n    scoreExceeded125Date\n    scoreExceeded200Date\n    bannedUserIds\n    commentsLocked\n    commentsLockedToAccountsCreatedAfter\n    organizerIds\n    groupId\n    eventType\n    isEvent\n    reviewedByUserId\n    reviewForCuratedUserId\n    startTime\n    localStartTime\n    endTime\n    localEndTime\n    eventRegistrationLink\n    joinEventLink\n    onlineEvent\n    globalEvent\n    mongoLocation\n    googleLocation\n    location\n    contactInfo\n    facebookLink\n    meetupLink\n    website\n    eventImageId\n    types\n    metaSticky\n    sharingSettings\n    shareWithUsers\n    linkSharingKey\n    linkSharingKeyUsedBy\n    commentSortOrder\n    hideAuthor\n    sideCommentVisibility\n    disableSidenotes\n    moderationStyle\n    ignoreRateLimits\n    hideCommentKarma\n    commentCount\n    topLevelCommentCount\n    debate\n    collabEditorDialogue\n    mostRecentPublishedDialogueResponseDate\n    rejected\n    rejectedReason\n    rejectedByUserId\n    subforumTagId\n    af\n    afDate\n    afCommentCount\n    afLastCommentedAt\n    afSticky\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    agentFoundationsId\n    swrCachingEnabled\n    generateDraftJargon\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n"): (typeof documents)["\n  fragment PostsDefaultFragment on Post {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    pingbacks\n    moderationGuidelines_latest\n    customHighlight_latest\n    slug\n    postedAt\n    modifiedAt\n    url\n    postCategory\n    title\n    viewCount\n    lastCommentedAt\n    clickCount\n    deletedDraft\n    status\n    isFuture\n    sticky\n    stickyPriority\n    userIP\n    userAgent\n    referrer\n    author\n    userId\n    question\n    authorIsUnreviewed\n    readTimeMinutesOverride\n    submitToFrontpage\n    hiddenRelatedQuestion\n    originalPostRelationSourceId\n    shortform\n    canonicalSource\n    nominationCount2018\n    nominationCount2019\n    reviewCount2018\n    reviewCount2019\n    reviewCount\n    reviewVoteCount\n    positiveReviewVoteCount\n    manifoldReviewMarketId\n    reviewVoteScoreAF\n    reviewVotesAF\n    reviewVoteScoreHighKarma\n    reviewVotesHighKarma\n    reviewVoteScoreAllKarma\n    reviewVotesAllKarma\n    finalReviewVoteScoreHighKarma\n    finalReviewVotesHighKarma\n    finalReviewVoteScoreAllKarma\n    finalReviewVotesAllKarma\n    finalReviewVoteScoreAF\n    finalReviewVotesAF\n    lastCommentPromotedAt\n    tagRelevance\n    noIndex\n    rsvps\n    activateRSVPs\n    nextDayReminderSent\n    onlyVisibleToLoggedIn\n    onlyVisibleToEstablishedAccounts\n    hideFromRecentDiscussions\n    votingSystem\n    podcastEpisodeId\n    forceAllowType3Audio\n    legacy\n    legacyId\n    legacySpam\n    feedId\n    feedLink\n    curatedDate\n    metaDate\n    suggestForCuratedUserIds\n    frontpageDate\n    autoFrontpage\n    collectionTitle\n    hasCoauthorPermission\n    socialPreviewImageId\n    socialPreviewImageAutoUrl\n    canonicalSequenceId\n    canonicalCollectionSlug\n    canonicalBookId\n    canonicalNextPostSlug\n    canonicalPrevPostSlug\n    unlisted\n    disableRecommendation\n    defaultRecommendation\n    hideFromPopularComments\n    draft\n    wasEverUndrafted\n    meta\n    hideFrontpageComments\n    maxBaseScore\n    scoreExceeded2Date\n    scoreExceeded30Date\n    scoreExceeded45Date\n    scoreExceeded75Date\n    scoreExceeded125Date\n    scoreExceeded200Date\n    bannedUserIds\n    commentsLocked\n    commentsLockedToAccountsCreatedAfter\n    organizerIds\n    groupId\n    eventType\n    isEvent\n    reviewedByUserId\n    reviewForCuratedUserId\n    startTime\n    localStartTime\n    endTime\n    localEndTime\n    eventRegistrationLink\n    joinEventLink\n    onlineEvent\n    globalEvent\n    mongoLocation\n    googleLocation\n    location\n    contactInfo\n    facebookLink\n    meetupLink\n    website\n    eventImageId\n    types\n    metaSticky\n    sharingSettings\n    shareWithUsers\n    linkSharingKey\n    linkSharingKeyUsedBy\n    commentSortOrder\n    hideAuthor\n    sideCommentVisibility\n    disableSidenotes\n    moderationStyle\n    ignoreRateLimits\n    hideCommentKarma\n    commentCount\n    topLevelCommentCount\n    debate\n    collabEditorDialogue\n    mostRecentPublishedDialogueResponseDate\n    rejected\n    rejectedReason\n    rejectedByUserId\n    subforumTagId\n    af\n    afDate\n    afCommentCount\n    afLastCommentedAt\n    afSticky\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    agentFoundationsId\n    swrCachingEnabled\n    generateDraftJargon\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RSSFeedsDefaultFragment on RSSFeed {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    status\n    rawFeed\n    setCanonicalUrl\n    importAsDraft\n  }\n"): (typeof documents)["\n  fragment RSSFeedsDefaultFragment on RSSFeed {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    status\n    rawFeed\n    setCanonicalUrl\n    importAsDraft\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReadStatusesDefaultFragment on ReadStatus {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"): (typeof documents)["\n  fragment ReadStatusesDefaultFragment on ReadStatus {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RecommendationsCachesDefaultFragment on RecommendationsCache {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    postId\n    source\n    scenario\n    attributionId\n    ttlMs\n  }\n"): (typeof documents)["\n  fragment RecommendationsCachesDefaultFragment on RecommendationsCache {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    postId\n    source\n    scenario\n    attributionId\n    ttlMs\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReportsDefaultFragment on Report {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    reportedUserId\n    commentId\n    postId\n    link\n    claimedUserId\n    description\n    closedAt\n    markedAsSpam\n    reportedAsSpam\n  }\n"): (typeof documents)["\n  fragment ReportsDefaultFragment on Report {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    reportedUserId\n    commentId\n    postId\n    link\n    claimedUserId\n    description\n    closedAt\n    markedAsSpam\n    reportedAsSpam\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReviewVotesDefaultFragment on ReviewVote {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    postId\n    qualitativeScore\n    quadraticScore\n    comment\n    year\n    dummy\n    reactions\n  }\n"): (typeof documents)["\n  fragment ReviewVotesDefaultFragment on ReviewVote {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    postId\n    qualitativeScore\n    quadraticScore\n    comment\n    year\n    dummy\n    reactions\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReviewWinnerArtsDefaultFragment on ReviewWinnerArt {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    postId\n    splashArtImagePrompt\n    splashArtImageUrl\n  }\n"): (typeof documents)["\n  fragment ReviewWinnerArtsDefaultFragment on ReviewWinnerArt {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    postId\n    splashArtImagePrompt\n    splashArtImageUrl\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReviewWinnersDefaultFragment on ReviewWinner {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    postId\n    reviewYear\n    category\n    curatedOrder\n    reviewRanking\n    isAI\n  }\n"): (typeof documents)["\n  fragment ReviewWinnersDefaultFragment on ReviewWinner {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    postId\n    reviewYear\n    category\n    curatedOrder\n    reviewRanking\n    isAI\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionsDefaultFragment on Revision {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    documentId\n    collectionName\n    fieldName\n    editedAt\n    updateType\n    version\n    commitMessage\n    userId\n    draft\n    html\n    wordCount\n    changeMetrics\n    googleDocMetadata\n    skipAttributions\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n"): (typeof documents)["\n  fragment RevisionsDefaultFragment on Revision {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    documentId\n    collectionName\n    fieldName\n    editedAt\n    updateType\n    version\n    commitMessage\n    userId\n    draft\n    html\n    wordCount\n    changeMetrics\n    googleDocMetadata\n    skipAttributions\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SequencesDefaultFragment on Sequence {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    lastUpdated\n    userId\n    title\n    bannerImageId\n    gridImageId\n    hideFromAuthorPage\n    draft\n    isDeleted\n    curatedOrder\n    userProfileOrder\n    canonicalCollectionSlug\n    hidden\n    noindex\n    af\n  }\n"): (typeof documents)["\n  fragment SequencesDefaultFragment on Sequence {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    lastUpdated\n    userId\n    title\n    bannerImageId\n    gridImageId\n    hideFromAuthorPage\n    draft\n    isDeleted\n    curatedOrder\n    userProfileOrder\n    canonicalCollectionSlug\n    hidden\n    noindex\n    af\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SessionsDefaultFragment on Session {\n    _id\n    session\n    expires\n    lastModified\n  }\n"): (typeof documents)["\n  fragment SessionsDefaultFragment on Session {\n    _id\n    session\n    expires\n    lastModified\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SideCommentCachesDefaultFragment on SideCommentCache {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"): (typeof documents)["\n  fragment SideCommentCachesDefaultFragment on SideCommentCache {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SplashArtCoordinatesDefaultFragment on SplashArtCoordinate {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    reviewWinnerArtId\n    leftXPct\n    leftYPct\n    leftHeightPct\n    leftWidthPct\n    leftFlipped\n    middleXPct\n    middleYPct\n    middleHeightPct\n    middleWidthPct\n    middleFlipped\n    rightXPct\n    rightYPct\n    rightHeightPct\n    rightWidthPct\n    rightFlipped\n  }\n"): (typeof documents)["\n  fragment SplashArtCoordinatesDefaultFragment on SplashArtCoordinate {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    reviewWinnerArtId\n    leftXPct\n    leftYPct\n    leftHeightPct\n    leftWidthPct\n    leftFlipped\n    middleXPct\n    middleYPct\n    middleHeightPct\n    middleWidthPct\n    middleFlipped\n    rightXPct\n    rightYPct\n    rightHeightPct\n    rightWidthPct\n    rightFlipped\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SpotlightsDefaultFragment on Spotlight {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    description_latest\n    documentId\n    documentType\n    position\n    duration\n    customTitle\n    customSubtitle\n    subtitleUrl\n    headerTitle\n    headerTitleLeftColor\n    headerTitleRightColor\n    lastPromotedAt\n    spotlightSplashImageUrl\n    draft\n    deletedDraft\n    showAuthor\n    imageFade\n    imageFadeColor\n    spotlightImageId\n    spotlightDarkImageId\n  }\n"): (typeof documents)["\n  fragment SpotlightsDefaultFragment on Spotlight {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    description_latest\n    documentId\n    documentType\n    position\n    duration\n    customTitle\n    customSubtitle\n    subtitleUrl\n    headerTitle\n    headerTitleLeftColor\n    headerTitleRightColor\n    lastPromotedAt\n    spotlightSplashImageUrl\n    draft\n    deletedDraft\n    showAuthor\n    imageFade\n    imageFadeColor\n    spotlightImageId\n    spotlightDarkImageId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SubscriptionsDefaultFragment on Subscription {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    state\n    documentId\n    collectionName\n    deleted\n    type\n  }\n"): (typeof documents)["\n  fragment SubscriptionsDefaultFragment on Subscription {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    state\n    documentId\n    collectionName\n    deleted\n    type\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SurveyQuestionsDefaultFragment on SurveyQuestion {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    surveyId\n    question\n    format\n    order\n  }\n"): (typeof documents)["\n  fragment SurveyQuestionsDefaultFragment on SurveyQuestion {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    surveyId\n    question\n    format\n    order\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SurveyResponsesDefaultFragment on SurveyResponse {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    surveyId\n    surveyScheduleId\n    userId\n    clientId\n    response\n  }\n"): (typeof documents)["\n  fragment SurveyResponsesDefaultFragment on SurveyResponse {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    surveyId\n    surveyScheduleId\n    userId\n    clientId\n    response\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SurveySchedulesDefaultFragment on SurveySchedule {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    surveyId\n    name\n    impressionsLimit\n    maxVisitorPercentage\n    minKarma\n    maxKarma\n    target\n    startDate\n    endDate\n    deactivated\n    clientIds\n  }\n"): (typeof documents)["\n  fragment SurveySchedulesDefaultFragment on SurveySchedule {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    surveyId\n    name\n    impressionsLimit\n    maxVisitorPercentage\n    minKarma\n    maxKarma\n    target\n    startDate\n    endDate\n    deactivated\n    clientIds\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SurveysDefaultFragment on Survey {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    name\n  }\n"): (typeof documents)["\n  fragment SurveysDefaultFragment on Survey {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    name\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagFlagsDefaultFragment on TagFlag {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    slug\n    name\n    deleted\n    order\n  }\n"): (typeof documents)["\n  fragment TagFlagsDefaultFragment on TagFlag {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    contents_latest\n    slug\n    name\n    deleted\n    order\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRelsDefaultFragment on TagRel {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    tagId\n    postId\n    deleted\n    userId\n    backfilled\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n"): (typeof documents)["\n  fragment TagRelsDefaultFragment on TagRel {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    tagId\n    postId\n    deleted\n    userId\n    backfilled\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagsDefaultFragment on Tag {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    description_latest\n    pingbacks\n    subforumWelcomeText_latest\n    moderationGuidelines_latest\n    slug\n    oldSlugs\n    name\n    shortName\n    subtitle\n    core\n    isPostType\n    suggestedAsFilter\n    defaultOrder\n    descriptionTruncationCount\n    postCount\n    userId\n    adminOnly\n    canEditUserIds\n    charsAdded\n    charsRemoved\n    deleted\n    lastCommentedAt\n    lastSubforumCommentAt\n    needsReview\n    reviewedByUserId\n    wikiGrade\n    wikiOnly\n    bannerImageId\n    squareImageId\n    tagFlagsIds\n    lesswrongWikiImportRevision\n    lesswrongWikiImportSlug\n    lesswrongWikiImportCompleted\n    htmlWithContributorAnnotations\n    contributionStats\n    introSequenceId\n    postsDefaultSortOrder\n    canVoteOnRels\n    isSubforum\n    subforumModeratorIds\n    subforumIntroPostId\n    parentTagId\n    subTagIds\n    autoTagModel\n    autoTagPrompt\n    noindex\n    isPlaceholderPage\n    coreTagId\n    forceAllowType3Audio\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n"): (typeof documents)["\n  fragment TagsDefaultFragment on Tag {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    description_latest\n    pingbacks\n    subforumWelcomeText_latest\n    moderationGuidelines_latest\n    slug\n    oldSlugs\n    name\n    shortName\n    subtitle\n    core\n    isPostType\n    suggestedAsFilter\n    defaultOrder\n    descriptionTruncationCount\n    postCount\n    userId\n    adminOnly\n    canEditUserIds\n    charsAdded\n    charsRemoved\n    deleted\n    lastCommentedAt\n    lastSubforumCommentAt\n    needsReview\n    reviewedByUserId\n    wikiGrade\n    wikiOnly\n    bannerImageId\n    squareImageId\n    tagFlagsIds\n    lesswrongWikiImportRevision\n    lesswrongWikiImportSlug\n    lesswrongWikiImportCompleted\n    htmlWithContributorAnnotations\n    contributionStats\n    introSequenceId\n    postsDefaultSortOrder\n    canVoteOnRels\n    isSubforum\n    subforumModeratorIds\n    subforumIntroPostId\n    parentTagId\n    subTagIds\n    autoTagModel\n    autoTagPrompt\n    noindex\n    isPlaceholderPage\n    coreTagId\n    forceAllowType3Audio\n    voteCount\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    afVoteCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TweetsDefaultFragment on Tweet {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"): (typeof documents)["\n  fragment TweetsDefaultFragment on Tweet {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TypingIndicatorsDefaultFragment on TypingIndicator {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    documentId\n    lastUpdated\n  }\n"): (typeof documents)["\n  fragment TypingIndicatorsDefaultFragment on TypingIndicator {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    documentId\n    lastUpdated\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UltraFeedEventsDefaultFragment on UltraFeedEvent {\n    _id\n    createdAt\n    documentId\n    collectionName\n    eventType\n    userId\n    event\n    feedItemId\n  }\n"): (typeof documents)["\n  fragment UltraFeedEventsDefaultFragment on UltraFeedEvent {\n    _id\n    createdAt\n    documentId\n    collectionName\n    eventType\n    userId\n    event\n    feedItemId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserActivitiesDefaultFragment on UserActivity {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"): (typeof documents)["\n  fragment UserActivitiesDefaultFragment on UserActivity {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserEAGDetailsDefaultFragment on UserEAGDetail {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    careerStage\n    countryOrRegion\n    nearestCity\n    willingnessToRelocate\n    experiencedIn\n    interestedIn\n    lastUpdated\n  }\n"): (typeof documents)["\n  fragment UserEAGDetailsDefaultFragment on UserEAGDetail {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    careerStage\n    countryOrRegion\n    nearestCity\n    willingnessToRelocate\n    experiencedIn\n    interestedIn\n    lastUpdated\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserJobAdsDefaultFragment on UserJobAd {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    jobName\n    adState\n    reminderSetAt\n    lastUpdated\n  }\n"): (typeof documents)["\n  fragment UserJobAdsDefaultFragment on UserJobAd {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    jobName\n    adState\n    reminderSetAt\n    lastUpdated\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserMostValuablePostsDefaultFragment on UserMostValuablePost {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    postId\n    deleted\n  }\n"): (typeof documents)["\n  fragment UserMostValuablePostsDefaultFragment on UserMostValuablePost {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    postId\n    deleted\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserRateLimitsDefaultFragment on UserRateLimit {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    type\n    intervalUnit\n    intervalLength\n    actionsPerInterval\n    endedAt\n  }\n"): (typeof documents)["\n  fragment UserRateLimitsDefaultFragment on UserRateLimit {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    userId\n    type\n    intervalUnit\n    intervalLength\n    actionsPerInterval\n    endedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserTagRelsDefaultFragment on UserTagRel {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    tagId\n    userId\n    subforumShowUnreadInSidebar\n    subforumEmailNotifications\n    subforumHideIntroPost\n  }\n"): (typeof documents)["\n  fragment UserTagRelsDefaultFragment on UserTagRel {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    tagId\n    userId\n    subforumShowUnreadInSidebar\n    subforumEmailNotifications\n    subforumHideIntroPost\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersDefaultFragment on User {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    moderationGuidelines_latest\n    howOthersCanHelpMe_latest\n    howICanHelpOthers_latest\n    slug\n    oldSlugs\n    biography_latest\n    username\n    emails\n    isAdmin\n    profile\n    services\n    displayName\n    previousDisplayName\n    email\n    noindex\n    groups\n    lwWikiImport\n    theme\n    lastUsedTimezone\n    whenConfirmationEmailSent\n    legacy\n    commentSorting\n    sortDraftsBy\n    reactPaletteStyle\n    noKibitz\n    showHideKarmaOption\n    showPostAuthorCard\n    hideIntercom\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    noSingleLineComments\n    noCollapseCommentsPosts\n    noCollapseCommentsFrontpage\n    hideCommunitySection\n    showCommunityInRecentDiscussion\n    hidePostsRecommendations\n    petrovOptOut\n    optedOutOfSurveys\n    postGlossariesPinned\n    generateJargonForDrafts\n    generateJargonForPublishedPosts\n    acceptedTos\n    hideNavigationSidebar\n    currentFrontpageFilter\n    frontpageSelectedTab\n    frontpageFilterSettings\n    hideFrontpageFilterSettingsDesktop\n    allPostsTimeframe\n    allPostsFilter\n    allPostsSorting\n    allPostsShowLowKarma\n    allPostsIncludeEvents\n    allPostsHideCommunity\n    allPostsOpenSettings\n    draftsListSorting\n    draftsListShowArchived\n    draftsListShowShared\n    lastNotificationsCheck\n    karma\n    goodHeartTokens\n    moderationStyle\n    moderatorAssistance\n    collapseModerationGuidelines\n    bannedUserIds\n    bannedPersonalUserIds\n    bookmarksCount\n    legacyId\n    deleted\n    permanentDeletionRequestedAt\n    voteBanned\n    nullifyVotes\n    deleteContent\n    banned\n    auto_subscribe_to_my_posts\n    auto_subscribe_to_my_comments\n    autoSubscribeAsOrganizer\n    notificationCommentsOnSubscribedPost\n    notificationShortformContent\n    notificationRepliesToMyComments\n    notificationRepliesToSubscribedComments\n    notificationSubscribedUserPost\n    notificationSubscribedUserComment\n    notificationPostsInGroups\n    notificationSubscribedTagPost\n    notificationSubscribedSequencePost\n    notificationPrivateMessage\n    notificationSharedWithMe\n    notificationAlignmentSubmissionApproved\n    notificationEventInRadius\n    notificationKarmaPowersGained\n    notificationRSVPs\n    notificationGroupAdministration\n    notificationCommentsOnDraft\n    notificationPostsNominatedReview\n    notificationSubforumUnread\n    notificationNewMention\n    notificationDialogueMessages\n    notificationPublishedDialogueMessages\n    notificationAddedAsCoauthor\n    notificationDebateCommentsOnSubscribedPost\n    notificationDebateReplies\n    notificationDialogueMatch\n    notificationNewDialogueChecks\n    notificationYourTurnMatchForm\n    hideDialogueFacilitation\n    revealChecksToAdmins\n    optedInToDialogueFacilitation\n    showDialoguesList\n    showMyDialogues\n    showMatches\n    showRecommendedPartners\n    hideActiveDialogueUsers\n    karmaChangeNotifierSettings\n    karmaChangeLastOpened\n    karmaChangeBatchStart\n    emailSubscribedToCurated\n    subscribedToDigest\n    subscribedToNewsletter\n    unsubscribeFromAll\n    hideSubscribePoke\n    hideMeetupsPoke\n    hideHomeRHS\n    frontpagePostCount\n    sequenceCount\n    sequenceDraftCount\n    mongoLocation\n    googleLocation\n    location\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    nearbyEventsNotifications\n    nearbyEventsNotificationsLocation\n    nearbyEventsNotificationsMongoLocation\n    nearbyEventsNotificationsRadius\n    nearbyPeopleNotificationThreshold\n    hideFrontpageMap\n    hideTaggingProgressBar\n    hideFrontpageBookAd\n    hideFrontpageBook2019Ad\n    hideFrontpageBook2020Ad\n    sunshineNotes\n    sunshineFlagged\n    needsReview\n    sunshineSnoozed\n    snoozedUntilContentCount\n    reviewedByUserId\n    reviewedAt\n    afKarma\n    voteCount\n    smallUpvoteCount\n    smallDownvoteCount\n    bigUpvoteCount\n    bigDownvoteCount\n    voteReceivedCount\n    smallUpvoteReceivedCount\n    smallDownvoteReceivedCount\n    bigUpvoteReceivedCount\n    bigDownvoteReceivedCount\n    usersContactedBeforeReview\n    fullName\n    shortformFeedId\n    viewUnreviewedComments\n    beta\n    reviewVotesQuadratic\n    reviewVotesQuadratic2019\n    reviewVotesQuadratic2020\n    petrovPressedButtonDate\n    petrovLaunchCodeDate\n    defaultToCKEditor\n    signUpReCaptchaRating\n    noExpandUnreadCommentsReview\n    postCount\n    maxPostCount\n    commentCount\n    maxCommentCount\n    tagRevisionCount\n    abTestKey\n    abTestOverrides\n    walledGardenInvite\n    hideWalledGardenUI\n    walledGardenPortalOnboarded\n    taggingDashboardCollapsed\n    usernameUnset\n    paymentEmail\n    paymentInfo\n    profileUpdatedAt\n    profileImageId\n    jobTitle\n    organization\n    careerStage\n    website\n    fmCrosspostUserId\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    twitterProfileURLAdmin\n    githubProfileURL\n    profileTagIds\n    organizerOfGroupIds\n    programParticipation\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n    acknowledgedNewUserGuidelines\n    subforumPreferredLayout\n    hideJobAdUntil\n    criticismTipsDismissed\n    hideFromPeopleDirectory\n    allowDatadogSessionReplay\n    afPostCount\n    afCommentCount\n    afSequenceCount\n    afSequenceDraftCount\n    reviewForAlignmentForumUserId\n    afApplicationText\n    afSubmittedApplication\n    hideSunshineSidebar\n    inactiveSurveyEmailSentAt\n    userSurveyEmailSentAt\n    recommendationSettings\n  }\n"): (typeof documents)["\n  fragment UsersDefaultFragment on User {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    moderationGuidelines_latest\n    howOthersCanHelpMe_latest\n    howICanHelpOthers_latest\n    slug\n    oldSlugs\n    biography_latest\n    username\n    emails\n    isAdmin\n    profile\n    services\n    displayName\n    previousDisplayName\n    email\n    noindex\n    groups\n    lwWikiImport\n    theme\n    lastUsedTimezone\n    whenConfirmationEmailSent\n    legacy\n    commentSorting\n    sortDraftsBy\n    reactPaletteStyle\n    noKibitz\n    showHideKarmaOption\n    showPostAuthorCard\n    hideIntercom\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    noSingleLineComments\n    noCollapseCommentsPosts\n    noCollapseCommentsFrontpage\n    hideCommunitySection\n    showCommunityInRecentDiscussion\n    hidePostsRecommendations\n    petrovOptOut\n    optedOutOfSurveys\n    postGlossariesPinned\n    generateJargonForDrafts\n    generateJargonForPublishedPosts\n    acceptedTos\n    hideNavigationSidebar\n    currentFrontpageFilter\n    frontpageSelectedTab\n    frontpageFilterSettings\n    hideFrontpageFilterSettingsDesktop\n    allPostsTimeframe\n    allPostsFilter\n    allPostsSorting\n    allPostsShowLowKarma\n    allPostsIncludeEvents\n    allPostsHideCommunity\n    allPostsOpenSettings\n    draftsListSorting\n    draftsListShowArchived\n    draftsListShowShared\n    lastNotificationsCheck\n    karma\n    goodHeartTokens\n    moderationStyle\n    moderatorAssistance\n    collapseModerationGuidelines\n    bannedUserIds\n    bannedPersonalUserIds\n    bookmarksCount\n    legacyId\n    deleted\n    permanentDeletionRequestedAt\n    voteBanned\n    nullifyVotes\n    deleteContent\n    banned\n    auto_subscribe_to_my_posts\n    auto_subscribe_to_my_comments\n    autoSubscribeAsOrganizer\n    notificationCommentsOnSubscribedPost\n    notificationShortformContent\n    notificationRepliesToMyComments\n    notificationRepliesToSubscribedComments\n    notificationSubscribedUserPost\n    notificationSubscribedUserComment\n    notificationPostsInGroups\n    notificationSubscribedTagPost\n    notificationSubscribedSequencePost\n    notificationPrivateMessage\n    notificationSharedWithMe\n    notificationAlignmentSubmissionApproved\n    notificationEventInRadius\n    notificationKarmaPowersGained\n    notificationRSVPs\n    notificationGroupAdministration\n    notificationCommentsOnDraft\n    notificationPostsNominatedReview\n    notificationSubforumUnread\n    notificationNewMention\n    notificationDialogueMessages\n    notificationPublishedDialogueMessages\n    notificationAddedAsCoauthor\n    notificationDebateCommentsOnSubscribedPost\n    notificationDebateReplies\n    notificationDialogueMatch\n    notificationNewDialogueChecks\n    notificationYourTurnMatchForm\n    hideDialogueFacilitation\n    revealChecksToAdmins\n    optedInToDialogueFacilitation\n    showDialoguesList\n    showMyDialogues\n    showMatches\n    showRecommendedPartners\n    hideActiveDialogueUsers\n    karmaChangeNotifierSettings\n    karmaChangeLastOpened\n    karmaChangeBatchStart\n    emailSubscribedToCurated\n    subscribedToDigest\n    subscribedToNewsletter\n    unsubscribeFromAll\n    hideSubscribePoke\n    hideMeetupsPoke\n    hideHomeRHS\n    frontpagePostCount\n    sequenceCount\n    sequenceDraftCount\n    mongoLocation\n    googleLocation\n    location\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    nearbyEventsNotifications\n    nearbyEventsNotificationsLocation\n    nearbyEventsNotificationsMongoLocation\n    nearbyEventsNotificationsRadius\n    nearbyPeopleNotificationThreshold\n    hideFrontpageMap\n    hideTaggingProgressBar\n    hideFrontpageBookAd\n    hideFrontpageBook2019Ad\n    hideFrontpageBook2020Ad\n    sunshineNotes\n    sunshineFlagged\n    needsReview\n    sunshineSnoozed\n    snoozedUntilContentCount\n    reviewedByUserId\n    reviewedAt\n    afKarma\n    voteCount\n    smallUpvoteCount\n    smallDownvoteCount\n    bigUpvoteCount\n    bigDownvoteCount\n    voteReceivedCount\n    smallUpvoteReceivedCount\n    smallDownvoteReceivedCount\n    bigUpvoteReceivedCount\n    bigDownvoteReceivedCount\n    usersContactedBeforeReview\n    fullName\n    shortformFeedId\n    viewUnreviewedComments\n    beta\n    reviewVotesQuadratic\n    reviewVotesQuadratic2019\n    reviewVotesQuadratic2020\n    petrovPressedButtonDate\n    petrovLaunchCodeDate\n    defaultToCKEditor\n    signUpReCaptchaRating\n    noExpandUnreadCommentsReview\n    postCount\n    maxPostCount\n    commentCount\n    maxCommentCount\n    tagRevisionCount\n    abTestKey\n    abTestOverrides\n    walledGardenInvite\n    hideWalledGardenUI\n    walledGardenPortalOnboarded\n    taggingDashboardCollapsed\n    usernameUnset\n    paymentEmail\n    paymentInfo\n    profileUpdatedAt\n    profileImageId\n    jobTitle\n    organization\n    careerStage\n    website\n    fmCrosspostUserId\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    twitterProfileURLAdmin\n    githubProfileURL\n    profileTagIds\n    organizerOfGroupIds\n    programParticipation\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n    acknowledgedNewUserGuidelines\n    subforumPreferredLayout\n    hideJobAdUntil\n    criticismTipsDismissed\n    hideFromPeopleDirectory\n    allowDatadogSessionReplay\n    afPostCount\n    afCommentCount\n    afSequenceCount\n    afSequenceDraftCount\n    reviewForAlignmentForumUserId\n    afApplicationText\n    afSubmittedApplication\n    hideSunshineSidebar\n    inactiveSurveyEmailSentAt\n    userSurveyEmailSentAt\n    recommendationSettings\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment VotesDefaultFragment on Vote {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    documentId\n    collectionName\n    userId\n    authorIds\n    voteType\n    extendedVoteType\n    power\n    afPower\n    cancelled\n    isUnvote\n    votedAt\n    documentIsAf\n    silenceNotification\n  }\n"): (typeof documents)["\n  fragment VotesDefaultFragment on Vote {\n    _id\n    schemaVersion\n    createdAt\n    legacyData\n    documentId\n    collectionName\n    userId\n    authorIds\n    voteType\n    extendedVoteType\n    power\n    afPower\n    cancelled\n    isUnvote\n    votedAt\n    documentIsAf\n    silenceNotification\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Lightcone2024FundraiserStripeAmounts {\n      Lightcone2024FundraiserStripeAmounts\n    }\n  "): (typeof documents)["\n    query Lightcone2024FundraiserStripeAmounts {\n      Lightcone2024FundraiserStripeAmounts\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SubscribedPostAndCommentsFeed on SubscribedPostAndComments {\n    _id\n    post {\n      ...PostsList\n    }\n    comments {\n      ...CommentsList\n    }\n    expandCommentIds\n    postIsFromSubscribedUser\n  }\n"): (typeof documents)["\n  fragment SubscribedPostAndCommentsFeed on SubscribedPostAndComments {\n    _id\n    post {\n      ...PostsList\n    }\n    comments {\n      ...CommentsList\n    }\n    expandCommentIds\n    postIsFromSubscribedUser\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FeedPostFragment on FeedPost {\n    _id\n    postMetaInfo\n    post {\n      ...PostsListWithVotes\n    }\n  }\n"): (typeof documents)["\n  fragment FeedPostFragment on FeedPost {\n    _id\n    postMetaInfo\n    post {\n      ...PostsListWithVotes\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FeedCommentThreadFragment on FeedCommentThread {\n    _id\n    commentMetaInfos\n    isOnReadPost\n    postSources\n    post {\n      ...PostsListWithVotes\n    }\n    comments {\n      ...UltraFeedComment\n    }\n  }\n"): (typeof documents)["\n  fragment FeedCommentThreadFragment on FeedCommentThread {\n    _id\n    commentMetaInfos\n    isOnReadPost\n    postSources\n    post {\n      ...PostsListWithVotes\n    }\n    comments {\n      ...UltraFeedComment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FeedSpotlightFragment on FeedSpotlightItem {\n    _id\n    spotlight {\n      ...SpotlightDisplay\n    }\n    post {\n      ...PostsListWithVotes\n    }\n    spotlightMetaInfo {\n      sources\n      servedEventId\n    }\n  }\n"): (typeof documents)["\n  fragment FeedSpotlightFragment on FeedSpotlightItem {\n    _id\n    spotlight {\n      ...SpotlightDisplay\n    }\n    post {\n      ...PostsListWithVotes\n    }\n    spotlightMetaInfo {\n      sources\n      servedEventId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FeedSubscriptionSuggestionsFragment on FeedSubscriptionSuggestions {\n    _id\n    suggestedUsers {\n      ...UsersMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment FeedSubscriptionSuggestionsFragment on FeedSubscriptionSuggestions {\n    _id\n    suggestedUsers {\n      ...UsersMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostsForAutocompleteQuery($input: MultiPostInput) {\n    posts(input: $input) {\n      results {\n        ...PostsForAutocomplete\n      }\n    }\n  }\n"): (typeof documents)["\n  query multiPostsForAutocompleteQuery($input: MultiPostInput) {\n    posts(input: $input) {\n      results {\n        ...PostsForAutocomplete\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentsForAutocompleteQuery($input: MultiCommentInput) {\n    comments(input: $input) {\n      results {\n        ...CommentsForAutocomplete\n      }\n    }\n  }\n"): (typeof documents)["\n  query multiCommentsForAutocompleteQuery($input: MultiCommentInput) {\n    comments(input: $input) {\n      results {\n        ...CommentsForAutocomplete\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiCommentsForAutocompleteWithParentsQuery($input: MultiCommentInput) {\n    comments(input: $input) {\n      results {\n        ...CommentsForAutocompleteWithParents\n      }\n    }\n  }\n"): (typeof documents)["\n  query multiCommentsForAutocompleteWithParentsQuery($input: MultiCommentInput) {\n    comments(input: $input) {\n      results {\n        ...CommentsForAutocompleteWithParents\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EmailComment2($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n"): (typeof documents)["\n  query EmailComment2($documentId: String) {\n    comment(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...CommentsListWithParentMetadata\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EmailComment1($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagPreviewFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query EmailComment1($documentId: String) {\n    tag(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...TagPreviewFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EmailComment($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query EmailComment($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EmailUsernameByID($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query EmailUsernameByID($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query EventUpdatedEmail($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsBase\n      }\n    }\n  }\n"): (typeof documents)["\n  query EventUpdatedEmail($documentId: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsBase\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query NewDialogueMessagesEmail1($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query NewDialogueMessagesEmail1($documentId: String) {\n    user(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query NewDialogueMessagesEmail($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsRevision\n      }\n    }\n  }\n"): (typeof documents)["\n  query NewDialogueMessagesEmail($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsRevision\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PostNominatedEmail($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsRevision\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostNominatedEmail($documentId: String, $version: String) {\n    post(input: { selector: { documentId: $documentId } }) {\n      result {\n        ...PostsRevision\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostPostsEmailQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean, $version: String) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsRevision\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query multiPostPostsEmailQuery($selector: PostSelector, $limit: Int, $enableTotal: Boolean, $version: String) {\n    posts(selector: $selector, limit: $limit, enableTotal: $enableTotal) {\n      results {\n        ...PostsRevision\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getCrosspostPostsWithNavigation($input: SinglePostInput, $sequenceId: String) {\n    post(input: $input) {\n      result {\n        ...PostsWithNavigation\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCrosspostPostsWithNavigation($input: SinglePostInput, $sequenceId: String) {\n    post(input: $input) {\n      result {\n        ...PostsWithNavigation\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getCrosspostPostsWithNavigationAndRevision($input: SinglePostInput, $version: String, $sequenceId: String) {\n    post(input: $input) {\n      result {\n        ...PostsWithNavigationAndRevision\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCrosspostPostsWithNavigationAndRevision($input: SinglePostInput, $version: String, $sequenceId: String) {\n    post(input: $input) {\n      result {\n        ...PostsWithNavigationAndRevision\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getCrosspostPostsList($input: SinglePostInput) {\n    post(input: $input) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCrosspostPostsList($input: SinglePostInput) {\n    post(input: $input) {\n      result {\n        ...PostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getCrosspostSunshinePostsList($input: SinglePostInput) {\n    post(input: $input) {\n      result {\n        ...SunshinePostsList\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCrosspostSunshinePostsList($input: SinglePostInput) {\n    post(input: $input) {\n      result {\n        ...SunshinePostsList\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getCrosspostPostsPage($input: SinglePostInput) {\n    post(input: $input) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCrosspostPostsPage($input: SinglePostInput) {\n    post(input: $input) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query singleDraftPostForLLMQuery($input: SinglePostInput, $version: String) {\n    post(input: $input) {\n      result {\n        ...PostsEditQueryFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query singleDraftPostForLLMQuery($input: SinglePostInput, $version: String) {\n    post(input: $input) {\n      result {\n        ...PostsEditQueryFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query singlePublishedPostForLLMQuery($input: SinglePostInput) {\n    post(input: $input) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query singlePublishedPostForLLMQuery($input: SinglePostInput) {\n    post(input: $input) {\n      result {\n        ...PostsPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query multiPostsForLLMQuery($input: MultiPostInput) {\n    posts(input: $input) {\n      results {\n        ...PostsPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query multiPostsForLLMQuery($input: MultiPostInput) {\n    posts(input: $input) {\n      results {\n        ...PostsPage\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;