/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n    mutation revokeGoogleServiceAccountTokens {\n      revokeGoogleServiceAccountTokens\n    }\n  ": typeof types.RevokeGoogleServiceAccountTokensDocument,
    "query AdminMetadataQuery {\n    AdminMetadata\n  }": typeof types.AdminMetadataQueryDocument,
    "\n    query SearchSynonyms {\n      SearchSynonyms\n    }\n  ": typeof types.SearchSynonymsDocument,
    "mutation UpdateSearchSynonyms($synonyms: [String!]!) {\n      UpdateSearchSynonyms(synonyms: $synonyms)\n    }": typeof types.UpdateSearchSynonymsDocument,
    "\n    query randomUser($userIsAuthor: String!) {\n      GetRandomUser(userIsAuthor: $userIsAuthor) {\n        ...UsersMinimumInfo\n      }\n    }\n    \n  ": typeof types.RandomUserDocument,
    "\n    query MigrationsDashboardQuery {\n      MigrationsDashboard {\n        migrations {\n          name\n          dateWritten\n          runs { name started finished succeeded }\n          lastRun\n        }\n      }\n    }\n  ": typeof types.MigrationsDashboardQueryDocument,
    "\n      query getReadHistory($limit: Int, $filter: PostReviewFilter, $sort: PostReviewSort) {\n        UserReadHistory(limit: $limit, filter: $filter, sort: $sort) {\n          posts {\n            ...PostsListWithVotes\n            lastVisitedAt\n          }\n        }\n      }\n      \n    ": typeof types.GetReadHistoryDocument,
    "\n    mutation upsertUserTypingIndicator($documentId: String!) {\n      upsertUserTypingIndicator(documentId: $documentId) {\n        ...TypingIndicatorInfo\n      }\n    }\n    \n  ": typeof types.UpsertUserTypingIndicatorDocument,
    "\n    mutation sendVertexMediaCompleteEventMutation($postId: String!, $attributionId: String) {\n      sendVertexMediaCompleteEvent(postId: $postId, attributionId: $attributionId)\n    }\n  ": typeof types.SendVertexMediaCompleteEventMutationDocument,
    "\n    mutation sendVertexViewHomePageEventMutation {\n      sendVertexViewHomePageEvent\n    }\n  ": typeof types.SendVertexViewHomePageEventMutationDocument,
    "\n    mutation lockThread($commentId: String!, $until: String) {\n      lockThread(commentId: $commentId, until: $until)\n    }\n  ": typeof types.LockThreadDocument,
    "\n    mutation unlockThread($commentId: String!) {\n      unlockThread(commentId: $commentId)\n    }\n  ": typeof types.UnlockThreadDocument,
    "\n    query getRssPostChanges($postId: String!) {\n      RssPostChanges(postId: $postId) {\n        isChanged\n        newHtml\n        htmlDiff\n      }\n    }\n  ": typeof types.GetRssPostChangesDocument,
    "\n    mutation setIsHidden($postId: String!, $isHidden: Boolean!) {\n      setIsHidden(postId: $postId, isHidden: $isHidden) {\n        ...UsersCurrent\n      }\n    }\n    \n  ": typeof types.SetIsHiddenDocument,
    "\n    query getDigestPosts($num: Int) {\n      DigestPosts(num: $num) {\n        ...PostsListWithVotes\n      }\n    }\n    \n  ": typeof types.GetDigestPostsDocument,
    "\n      query getUserReadsPerCoreTag($userId: String!) {\n        UserReadsPerCoreTag(userId: $userId) {\n          tagId\n          userReadCount\n        }\n      }\n    ": typeof types.GetUserReadsPerCoreTagDocument,
    "\n    query getDigestPlannerData($digestId: String, $startDate: Date, $endDate: Date) {\n      DigestPlannerData(digestId: $digestId, startDate: $startDate, endDate: $endDate) {\n        post {\n          ...PostsListWithVotes\n        }\n        digestPost {\n          _id\n          emailDigestStatus\n          onsiteDigestStatus\n        }\n        rating\n      }\n    }\n    \n    ": typeof types.GetDigestPlannerDataDocument,
    "\n    mutation NewUserCompleteProfile(\n      $username: String!,\n      $subscribeToDigest: Boolean!,\n      $email: String,\n      $acceptedTos: Boolean\n    ) {\n      NewUserCompleteProfile(\n        username: $username,\n        subscribeToDigest: $subscribeToDigest,\n        email: $email,\n        acceptedTos: $acceptedTos\n      ) {\n        username\n        slug\n        displayName\n      }\n    }\n  ": typeof types.NewUserCompleteProfileDocument,
    "\n    query isDisplayNameTaken($displayName: String!) {\n      IsDisplayNameTaken(displayName: $displayName)\n    }\n  ": typeof types.IsDisplayNameTakenDocument,
    "\n    query getWrappedData($userId: String!, $year: Int!) {\n      UserWrappedDataByYear(userId: $userId, year: $year) {\n        engagementPercentile\n        postsReadCount\n        totalSeconds\n        daysVisited\n        mostReadTopics {\n          name\n          shortName\n          slug\n          count\n        }\n        relativeMostReadCoreTopics {\n          tagId\n          tagName\n          tagShortName\n          userReadCount\n          readLikelihoodRatio\n        }\n        mostReadAuthors {\n          _id\n          displayName\n          slug\n          profileImageId\n          count\n          engagementPercentile\n        }\n        topPosts {\n          _id\n          title\n          slug\n          baseScore\n        }\n        postCount\n        authorPercentile\n        topComment {\n          _id\n          postedAt\n          postId\n          postTitle\n          postSlug\n          baseScore\n          extendedScore\n          contents {\n            html\n          }\n        }\n        commentCount\n        commenterPercentile\n        topShortform {\n          _id\n          postedAt\n          postId\n          baseScore\n          extendedScore\n          contents {\n            html\n          }\n        }\n        shortformCount\n        shortformPercentile\n        karmaChange\n        combinedKarmaVals {\n          date\n          postKarma\n          commentKarma\n        }\n        mostReceivedReacts {\n          name\n          count\n        }\n        personality\n      }\n    }\n  ": typeof types.GetWrappedDataDocument,
    "\n    mutation sendNewDialogueMessageNotification($postId: String!, $dialogueHtml: String!) {\n      sendNewDialogueMessageNotification(postId: $postId, dialogueHtml: $dialogueHtml)\n    }\n  ": typeof types.SendNewDialogueMessageNotificationDocument,
    "\n    query getPostIsCriticism($args: JSON) {\n      PostIsCriticism(args: $args)\n    }\n    ": typeof types.GetPostIsCriticismDocument,
    "\n    mutation autosaveRevision($postId: String!, $contents: AutosaveContentType!) {\n      autosaveRevision(postId: $postId, contents: $contents) {\n        ...RevisionEdit\n      }\n    }\n    \n  ": typeof types.AutosaveRevisionDocument,
    "\n    query LinkSharingQuery($postId: String!, $linkSharingKey: String!) {\n      getLinkSharedPost(postId: $postId, linkSharingKey: $linkSharingKey) {\n        ...PostsEdit\n      }\n    }\n    \n  ": typeof types.LinkSharingQueryDocument,
    "\n    mutation revertPostToRevision($postId: String!, $revisionId: String!) {\n      revertPostToRevision(postId: $postId, revisionId: $revisionId) {\n        ...PostsEdit\n      }\n    }\n    \n  ": typeof types.RevertPostToRevisionDocument,
    "\n    mutation revertToRevision($tagId: String!, $revertToRevisionId: String!, $contributorsLimit: Int) {\n      revertTagToRevision(tagId: $tagId, revertToRevisionId: $revertToRevisionId) {\n        ...TagPageFragment\n      }\n    }\n    \n  ": typeof types.RevertToRevisionDocument,
    "\n    query ConvertDocument($document: JSON, $targetFormat: String) {\n      convertDocument(document: $document, targetFormat: $targetFormat)\n    }\n  ": typeof types.ConvertDocumentDocument,
    "\n    mutation unlinkCrossposter {\n      unlinkCrossposter\n    }\n  ": typeof types.UnlinkCrossposterDocument,
    "\n    mutation AddForumEventVote($forumEventId: String!, $x: Float!, $delta: Float, $postIds: [String]) {\n      AddForumEventVote(forumEventId: $forumEventId, x: $x, delta: $delta, postIds: $postIds)\n    }\n  ": typeof types.AddForumEventVoteDocument,
    "\n    mutation RemoveForumEventVote($forumEventId: String!) {\n      RemoveForumEventVote(forumEventId: $forumEventId)\n    }\n  ": typeof types.RemoveForumEventVoteDocument,
    "\n    mutation RemoveForumEventSticker($forumEventId: String!, $stickerId: String!) {\n      RemoveForumEventSticker(forumEventId: $forumEventId, stickerId: $stickerId)\n    }\n  ": typeof types.RemoveForumEventStickerDocument,
    "\n    query MultiPostAnalyticsQuery($userId: String, $postIds: [String], $sortBy: String, $desc: Boolean, $limit: Int) {\n      MultiPostAnalytics(userId: $userId, postIds: $postIds, sortBy: $sortBy, desc: $desc, limit: $limit) {\n        posts {\n          _id\n          title\n          slug\n          postedAt\n          views\n          uniqueViews\n          reads\n          meanReadingTime\n          karma\n          comments\n        }\n        totalCount\n      }\n    }\n  ": typeof types.MultiPostAnalyticsQueryDocument,
    "\n    query AnalyticsSeriesQuery($userId: String, $postIds: [String], $startDate: Date, $endDate: Date) {\n      AnalyticsSeries(userId: $userId, postIds: $postIds, startDate: $startDate, endDate: $endDate) {\n        date\n        views\n        reads\n        karma\n        comments\n      }\n    }\n  ": typeof types.AnalyticsSeriesQueryDocument,
    "\n    mutation setIsBookmarked($postId: String!, $isBookmarked: Boolean!) {\n      setIsBookmarked(postId: $postId, isBookmarked: $isBookmarked) {\n        ...UsersCurrent\n      }\n    }\n    \n  ": typeof types.SetIsBookmarkedDocument,
    "\n    query CurrentFrontpageSurvey {\n      CurrentFrontpageSurvey {\n        ...SurveyScheduleMinimumInfo\n      }\n    }\n    \n  ": typeof types.CurrentFrontpageSurveyDocument,
    "\n      mutation UserExpandFrontpageSection($section: String!, $expanded: Boolean!) {\n        UserExpandFrontpageSection(section: $section, expanded: $expanded)\n      }\n    ": typeof types.UserExpandFrontpageSectionDocument,
    "\n    mutation initiateConversation($participantIds: [String!]!, $af: Boolean, $moderator: Boolean) {\n      initiateConversation(participantIds: $participantIds, af: $af, moderator: $moderator) {\n        ...ConversationsMinimumInfo\n      }\n    }\n    \n  ": typeof types.InitiateConversationDocument,
    "\n      mutation markConversationRead($conversationId: String!) {\n        markConversationRead(conversationId: $conversationId)\n      }\n    ": typeof types.MarkConversationReadDocument,
    "\n    query PostAnalyticsQuery($postId: String!) {\n      PostAnalytics(postId: $postId) {\n        allViews\n        uniqueClientViews\n        uniqueClientViews10Sec\n        medianReadingTime\n        uniqueClientViews5Min\n        uniqueClientViewsSeries {\n          date\n          uniqueClientViews\n        }\n      }\n    }\n  ": typeof types.PostAnalyticsQueryDocument,
    "\n    mutation increasePostViewCountMutation($postId: String) {\n      increasePostViewCount(postId: $postId)\n    }\n  ": typeof types.IncreasePostViewCountMutationDocument,
    "\n    mutation sendVertexViewItemEventMutation($postId: String!, $attributionId: String) {\n      sendVertexViewItemEvent(postId: $postId, attributionId: $attributionId)\n    }\n  ": typeof types.SendVertexViewItemEventMutationDocument,
    "\n    mutation markPostCommentsRead($postId: String!) {\n      markPostCommentsRead(postId: $postId)\n    }\n  ": typeof types.MarkPostCommentsReadDocument,
    "\n    mutation RefreshDbSettings {\n      RefreshDbSettings\n    }\n  ": typeof types.RefreshDbSettingsDocument,
    "\n    query UnreadNotificationCountQuery {\n      unreadNotificationCounts {\n        unreadNotifications\n        unreadPrivateMessages\n        faviconBadgeNumber\n        checkedAt\n      }\n    }\n  ": typeof types.UnreadNotificationCountQueryDocument,
    "\n    mutation getNewJargonTerms($postId: String!, $glossaryPrompt: String, $examplePost: String, $exampleTerm: String, $exampleAltTerm: String, $exampleDefinition: String) {\n      getNewJargonTerms(postId: $postId, glossaryPrompt: $glossaryPrompt, examplePost: $examplePost, exampleTerm: $exampleTerm, exampleAltTerm: $exampleAltTerm, exampleDefinition: $exampleDefinition) {\n        ...JargonTerms\n      }\n    }\n    \n  ": typeof types.GetNewJargonTermsDocument,
    "\n    query getPostsWithApprovedJargon($limit: Int!) {\n      PostsWithApprovedJargon(limit: $limit) {\n        results {\n          post {\n            ...PostsListWithVotes\n          }\n          jargonTerms {\n            ...JargonTerms\n          }\n        }\n      }\n    }\n    \n    \n  ": typeof types.GetPostsWithApprovedJargonDocument,
    "\n    query ArbitalPageRequest {\n      ArbitalPageData(pageAlias: \"\") {\n        title\n        html\n      }\n    }\n  ": typeof types.ArbitalPageRequestDocument,
    "\n      query EmailPreviewQuery($notificationIds: [String], $postId: String) {\n        EmailPreview(notificationIds: $notificationIds, postId: $postId) { to subject html text }\n      }\n  ": typeof types.EmailPreviewQueryDocument,
    "\n    query getNotificationDisplays($limit: Int, $type: String) {\n      NotificationDisplays(limit: $limit, type: $type) {\n        results\n      }\n    }\n  ": typeof types.GetNotificationDisplaysDocument,
    "\n    mutation MarkAllNotificationsAsRead {\n      MarkAllNotificationsAsRead\n    }\n  ": typeof types.MarkAllNotificationsAsReadDocument,
    "\n    query ActiveTagCount {\n      ActiveTagCount\n    }\n  ": typeof types.ActiveTagCountDocument,
    "\n    mutation importUrlAsDraftPost($url: String!) {\n      importUrlAsDraftPost(url: $url) {\n        alreadyExists\n        post {\n          _id\n          slug\n          title\n          content\n          url\n        }\n      }\n    }\n  ": typeof types.ImportUrlAsDraftPostDocument,
    "\n      query latestGoogleDocMetadata($postId: String!, $version: String) {\n        latestGoogleDocMetadata(postId: $postId, version: $version)\n      }\n    ": typeof types.LatestGoogleDocMetadataDocument,
    "\n      query CanAccessGoogleDoc($fileUrl: String!) {\n        CanAccessGoogleDoc(fileUrl: $fileUrl)\n      }\n    ": typeof types.CanAccessGoogleDocDocument,
    "\n      mutation ImportGoogleDoc($fileUrl: String!, $postId: String) {\n        ImportGoogleDoc(fileUrl: $fileUrl, postId: $postId) {\n          ...PostsBase\n        }\n      }\n      \n    ": typeof types.ImportGoogleDocDocument,
    "\n    query LatestDialogueMessages($dialogueId: String!, $unreadCount: Int!) {\n      latestDialogueMessages(dialogueId: $dialogueId, numMessages: $unreadCount)\n    }\n  ": typeof types.LatestDialogueMessagesDocument,
    "\n    mutation flipSplashArtImage($reviewWinnerArtId: String!) {\n      flipSplashArtImage(reviewWinnerArtId: $reviewWinnerArtId)\n    }\n  ": typeof types.FlipSplashArtImageDocument,
    "\n    mutation AcceptCoauthorRequest($postId: String, $userId: String, $accept: Boolean) {\n        acceptCoauthorRequest(postId: $postId, userId: $userId, accept: $accept) {\n          ...PostsDetails\n        }\n    }\n    \n  ": typeof types.AcceptCoauthorRequestDocument,
    "\n    mutation RegisterRSVP($postId: String, $name: String, $email: String, $private: Boolean, $response: String) {\n        RSVPToEvent(postId: $postId, name: $name, email: $email, private: $private, response: $response) {\n        ...PostsDetails\n        }\n    }\n    \n  ": typeof types.RegisterRsvpDocument,
    "\n    mutation CancelRSVPToEvent($postId: String, $name: String, $userId: String) {\n        CancelRSVPToEvent(postId: $postId, name: $name, userId: $userId) {\n        ...PostsDetails\n        }\n    }\n    \n  ": typeof types.CancelRsvpToEventDocument,
    "\n      mutation observeRecommendation($postId: String!) {\n        observeRecommendation(postId: $postId)\n      }\n    ": typeof types.ObserveRecommendationDocument,
    "\n      mutation clickRecommendation($postId: String!) {\n        clickRecommendation(postId: $postId)\n      }\n    ": typeof types.ClickRecommendationDocument,
    "\n    query ContinueReadingQuery {\n      ContinueReading {\n        sequence {\n          ...SequenceContinueReadingFragment\n        }\n        collection {\n          ...CollectionContinueReadingFragment\n        }\n        nextPost {\n          ...PostsListWithVotes\n        }\n        numRead\n        numTotal\n        lastReadTime\n      }\n    }\n    \n  ": typeof types.ContinueReadingQueryDocument,
    "\n    mutation dismissRecommendation($postId: String) {\n      dismissRecommendation(postId: $postId)\n    }\n  ": typeof types.DismissRecommendationDocument,
    "\n      query RecommendationsQuery($count: Int, $algorithm: JSON) {\n        Recommendations(count: $count, algorithm: $algorithm) {\n          ...PostsListWithVotesAndSequence\n        }\n      }\n      \n    ": typeof types.RecommendationsQueryDocument,
    "\n    query BestOfLessWrongAdmin {\n      GetAllReviewWinners {\n        ...PostsTopItemInfo\n      }\n    }\n    \n  ": typeof types.BestOfLessWrongAdminDocument,
    "\n    mutation GenerateCoverImagesForPost($postId: String!, $prompt: String) {\n      generateCoverImagesForPost(postId: $postId, prompt: $prompt) { \n        _id\n      }\n    }\n  ": typeof types.GenerateCoverImagesForPostDocument,
    "\n      query getPostsUserCommentedOn($limit: Int, $filter: PostReviewFilter, $sort: PostReviewSort) {\n        PostsUserCommentedOn(limit: $limit, filter: $filter, sort: $sort) {\n          posts {\n            ...PostsListWithVotes\n          }\n        }\n      }\n      \n    ": typeof types.GetPostsUserCommentedOnDocument,
    "\n    query GivingSeasonHeartsQuery($electionName: String!) {\n      GivingSeasonHearts(electionName: $electionName) {\n        userId\n        displayName\n        x\n        y\n        theta\n      }\n    }\n  ": typeof types.GivingSeasonHeartsQueryDocument,
    "\n      mutation AddGivingSeasonHeart(\n        $electionName: String!,\n        $x: Float!,\n        $y: Float!,\n        $theta: Float!\n      ) {\n        AddGivingSeasonHeart(\n          electionName: $electionName,\n          x: $x,\n          y: $y,\n          theta: $theta\n        ) {\n          userId\n          displayName\n          x\n          y\n          theta\n        }\n      }\n    ": typeof types.AddGivingSeasonHeartDocument,
    "\n      mutation RemoveGivingSeasonHeart($electionName: String!) {\n        RemoveGivingSeasonHeart(electionName: $electionName) {\n          userId\n          displayName\n          x\n          y\n          theta\n        }\n      }\n    ": typeof types.RemoveGivingSeasonHeartDocument,
    "\n    mutation submitReviewVote($postId: String, $qualitativeScore: Int, $quadraticChange: Int, $newQuadraticScore: Int, $comment: String, $year: String, $dummy: Boolean) {\n      submitReviewVote(postId: $postId, qualitativeScore: $qualitativeScore, quadraticChange: $quadraticChange, comment: $comment, newQuadraticScore: $newQuadraticScore, year: $year, dummy: $dummy) {\n        ...PostsReviewVotingList\n      }\n    }\n     \n  ": typeof types.SubmitReviewVoteDocument,
    "\n      query RotatingReviewWinnerSpotlight {\n        GetAllReviewWinners {\n          ...PostForReviewWinnerItem\n        }\n      }\n      \n    ": typeof types.RotatingReviewWinnerSpotlightDocument,
    "\n    query RevisionsDiff($collectionName: String!, $fieldName: String!, $id: String!, $beforeRev: String, $afterRev: String!, $trim: Boolean) {\n      RevisionsDiff(collectionName: $collectionName, fieldName: $fieldName, id: $id, beforeRev: $beforeRev, afterRev: $afterRev, trim: $trim)\n    }\n  ": typeof types.RevisionsDiffDocument,
    "\n    mutation launchPetrovMissile($launchCode: String) {\n      PetrovDayLaunchMissile(launchCode: $launchCode) {\n        launchCode\n      }\n    }\n  ": typeof types.LaunchPetrovMissileDocument,
    "\n    query petrovDayLaunchResolvers {\n      PetrovDayCheckIfIncoming {\n        launched\n        createdAt\n      }\n    }\n  ": typeof types.PetrovDayLaunchResolversDocument,
    "\n    query petrov2024checkIfNuked {\n      petrov2024checkIfNuked\n    }\n  ": typeof types.Petrov2024checkIfNukedDocument,
    "\n    query petrovDay2024Resolvers {\n      PetrovDay2024CheckNumberOfIncoming {\n        count\n      }\n    }\n  ": typeof types.PetrovDay2024ResolversDocument,
    "\n    query GetAllReviewWinners {\n      GetAllReviewWinners {\n        ...PostsTopItemInfo\n      }\n    }\n    \n  ": typeof types.GetAllReviewWinnersDocument,
    "\n    mutation updateContinueReading($sequenceId: String!, $postId: String!) {\n      updateContinueReading(sequenceId: $sequenceId, postId: $postId)\n    }\n  ": typeof types.UpdateContinueReadingDocument,
    "\n    query ModeratorIPAddressInfo($ipAddress: String!) {\n      moderatorViewIPAddress(ipAddress: $ipAddress) {\n        ip\n        userIds\n      }\n    }\n  ": typeof types.ModeratorIpAddressInfoDocument,
    "\n    mutation editSurvey($surveyId: String!, $name: String!, $questions: [SurveyQuestionInfo!]!) {\n      editSurvey(surveyId: $surveyId, name: $name, questions: $questions) {\n        ...SurveyMinimumInfo\n      }\n    }\n    \n  ": typeof types.EditSurveyDocument,
    "\n    mutation addPostsToTag($tagId: String, $postId: String) {\n      addOrUpvoteTag(tagId: $tagId, postId: $postId) {\n        ...TagRelCreationFragment\n      }\n    }\n    \n  ": typeof types.AddPostsToTagDocument,
    "\n    mutation addOrUpvoteTag($tagId: String, $postId: String) {\n      addOrUpvoteTag(tagId: $tagId, postId: $postId) {\n        ...TagRelMinimumFragment\n      }\n    }\n    \n  ": typeof types.AddOrUpvoteTagDocument,
    "\n    query getRandomTag {\n      RandomTag {slug}\n    }\n  ": typeof types.GetRandomTagDocument,
    "\n    mutation reorderSummaries($parentDocumentId: String!, $parentDocumentCollectionName: String!, $summaryIds: [String!]!) {\n      reorderSummaries(parentDocumentId: $parentDocumentId, parentDocumentCollectionName: $parentDocumentCollectionName, summaryIds: $summaryIds)\n    }\n  ": typeof types.ReorderSummariesDocument,
    "\n    query getTagUpdates($before: Date!, $after: Date!) {\n      TagUpdatesInTimeBlock(before: $before, after: $after) {\n        tag {\n          ...TagHistoryFragment\n        }\n        revisionIds\n        commentCount\n        commentIds\n        lastRevisedAt\n        lastCommentedAt\n        added\n        removed\n        users {\n          ...UsersMinimumInfo\n        }\n        documentDeletions {\n          userId\n          documentId\n          netChange\n          type\n          docFields {\n            _id\n            slug\n            tabTitle\n            tabSubtitle\n          }\n          createdAt\n        }\n      }\n    }\n    \n  ": typeof types.GetTagUpdatesDocument,
    "\n    mutation mergeTags(\n      $sourceTagId: String!\n      $targetTagId: String!\n      $transferSubtags: Boolean!\n      $redirectSource: Boolean!\n    ) {\n      mergeTags(\n        sourceTagId: $sourceTagId\n        targetTagId: $targetTagId\n        transferSubtags: $transferSubtags\n        redirectSource: $redirectSource\n      )\n    }\n  ": typeof types.MergeTagsDocument,
    "\n    mutation promoteLensToMain($lensId: String!) {\n      promoteLensToMain(lensId: $lensId)\n    }\n  ": typeof types.PromoteLensToMainDocument,
    "\n    query GetTagsByCoreTagId(\n      $coreTagId: String,\n      $limit: Int,\n      $searchTagIds: [String]\n    ) {\n      TagsByCoreTagId(\n        coreTagId: $coreTagId,\n        limit: $limit,\n        searchTagIds: $searchTagIds\n      ) {\n        tags {\n          ...ConceptItemFragment\n        }\n        totalCount\n      }\n    }\n    \n  ": typeof types.GetTagsByCoreTagIdDocument,
    "\n    mutation UserUpdateSubforumMembership($tagId: String!, $member: Boolean!) {\n      UserUpdateSubforumMembership(tagId: $tagId, member: $member) {\n        ...UsersCurrent\n      }\n    }\n    \n  ": typeof types.UserUpdateSubforumMembershipDocument,
    "\n    mutation connectCrossposter($token: String) {\n      connectCrossposter(token: $token)\n    }\n  ": typeof types.ConnectCrossposterDocument,
    "\n    mutation sendEventTriggeredDM($eventType: String!) {\n      sendEventTriggeredDM(eventType: $eventType)\n    }\n  ": typeof types.SendEventTriggeredDmDocument,
    "\n    mutation login($username: String, $password: String) {\n      login(username: $username, password: $password) {\n        token\n      }\n    }\n  ": typeof types.LoginDocument,
    "\n    mutation signup($email: String, $username: String, $password: String, $subscribeToCurated: Boolean, $reCaptchaToken: String, $abTestKey: String) {\n      signup(email: $email, username: $username, password: $password, subscribeToCurated: $subscribeToCurated, reCaptchaToken: $reCaptchaToken, abTestKey: $abTestKey) {\n        token\n      }\n    }\n  ": typeof types.SignupDocument,
    "\n    mutation resetPassword($email: String) {\n      resetPassword(email: $email)\n    }\n  ": typeof types.ResetPasswordDocument,
    "\n  fragment AdvisorRequestsMinimumInfo on AdvisorRequest {\n    _id\n    userId\n    createdAt\n    interestedInMetaculus\n    jobAds\n  }\n": typeof types.AdvisorRequestsMinimumInfoFragmentDoc,
    "\n  fragment BansAdminPageFragment on Ban {\n    _id\n    createdAt\n    expirationDate\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    reason\n    comment\n    ip\n    properties\n  }\n": typeof types.BansAdminPageFragmentFragmentDoc,
    "\n  fragment BookPageFragment on Book {\n    _id\n    createdAt\n    title\n    number\n    subtitle\n    tocTitle\n    contents {\n      ...RevisionDisplay\n    }\n    sequenceIds\n    sequences {\n      ...SequencesPageWithChaptersFragment\n    }\n    postIds\n    posts {\n      ...PostsListWithVotes\n    }\n    collectionId\n    displaySequencesAsGrid\n    hideProgressBar\n    showChapters\n  }\n": typeof types.BookPageFragmentFragmentDoc,
    "\n  fragment BookEdit on Book {\n    ...BookPageFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.BookEditFragmentDoc,
    "\n  fragment ChaptersFragment on Chapter {\n    _id\n    createdAt\n    title\n    subtitle\n    contents {\n      ...RevisionDisplay\n    }\n    number\n    sequenceId\n    postIds\n    posts {\n      ...PostsListWithVotes\n    }\n  }\n": typeof types.ChaptersFragmentFragmentDoc,
    "\n  fragment ChaptersEdit on Chapter {\n    ...ChaptersFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.ChaptersEditFragmentDoc,
    "\n  fragment CkEditorUserSessionInfo on CkEditorUserSession {\n    _id\n    userId\n    documentId\n    endedAt\n    endedBy\n  }\n": typeof types.CkEditorUserSessionInfoFragmentDoc,
    "\n  fragment ModeratorClientIDInfo on ClientId {\n    _id\n    clientId\n    createdAt\n    firstSeenReferrer\n    firstSeenLandingPage\n    users {\n      ...UsersMinimumInfo\n    }\n  }\n": typeof types.ModeratorClientIdInfoFragmentDoc,
    "\n  fragment CollectionContinueReadingFragment on Collection {\n    _id\n    title\n    slug\n    gridImageId\n  }\n": typeof types.CollectionContinueReadingFragmentFragmentDoc,
    "\n  fragment CollectionsPageFragment on Collection {\n    _id\n    createdAt\n    slug\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    contents {\n      ...RevisionDisplay\n    }\n    firstPageLink\n    gridImageId\n    books {\n      ...BookPageFragment\n    }\n    hideStartReadingButton\n    noindex\n  }\n": typeof types.CollectionsPageFragmentFragmentDoc,
    "\n  fragment CollectionsEditFragment on Collection {\n    ...CollectionsPageFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.CollectionsEditFragmentFragmentDoc,
    "\n  fragment CollectionsBestOfFragment on Collection {\n    _id\n    createdAt\n    slug\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    gridImageId\n    noindex\n    postsCount\n    readPostsCount\n    contents {\n      ...RevisionDisplay\n    }\n  }\n": typeof types.CollectionsBestOfFragmentFragmentDoc,
    "\n  fragment CommentModeratorActionDisplay on CommentModeratorAction {\n    _id\n    comment {\n      ...CommentsListWithModerationMetadata\n    }\n    commentId\n    type\n    active\n    createdAt\n    endedAt\n  }\n": typeof types.CommentModeratorActionDisplayFragmentDoc,
    "\n  fragment CommentsList on Comment {\n    _id\n    postId\n    tagId\n    tag {\n      _id\n      slug\n    }\n    relevantTagIds\n    relevantTags {\n      ...TagPreviewFragment\n    }\n    tagCommentType\n    parentCommentId\n    topLevelCommentId\n    descendentCount\n    title\n    contents {\n      _id\n      html\n      plaintextMainText\n      wordCount\n    }\n    postedAt\n    lastEditedAt\n    repliesBlockedUntil\n    userId\n    deleted\n    deletedPublic\n    deletedByUserId\n    deletedReason\n    hideAuthor\n    authorIsUnreviewed\n    user {\n      ...UsersMinimumInfo\n    }\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    voteCount\n    emojiReactors\n    af\n    afDate\n    moveToAlignmentUserId\n    afBaseScore\n    afExtendedScore\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    needsReview\n    answer\n    parentAnswerId\n    retracted\n    postVersion\n    reviewedByUserId\n    shortform\n    shortformFrontpage\n    lastSubthreadActivity\n    moderatorHat\n    hideModeratorHat\n    nominatedForReview\n    reviewingForReview\n    promoted\n    promotedByUser {\n      ...UsersMinimumInfo\n    }\n    directChildrenCount\n    votingSystem\n    isPinnedOnProfile\n    debateResponse\n    rejected\n    rejectedReason\n    modGPTRecommendation\n    originalDialogueId\n\n    forumEventId\n    forumEventMetadata\n  }\n": typeof types.CommentsListFragmentDoc,
    "\n  fragment CommentsListWithTopLevelComment on Comment {\n    ...CommentsList\n    topLevelComment {\n      ...CommentsList\n    }\n  }\n": typeof types.CommentsListWithTopLevelCommentFragmentDoc,
    "\n  fragment ShortformComments on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    relevantTags {\n      ...TagPreviewFragment\n    }\n  }\n": typeof types.ShortformCommentsFragmentDoc,
    "\n  fragment CommentWithRepliesFragment on Comment {\n    ...CommentsList\n    lastSubthreadActivity\n    latestChildren {\n      ...CommentsList\n    }\n    tag {\n      ...TagBasicInfo\n    }\n    post {\n      ...PostsBase\n    }\n  }\n": typeof types.CommentWithRepliesFragmentFragmentDoc,
    "\n  fragment CommentEdit on Comment {\n    ...CommentsList\n    relevantTagIds\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.CommentEditFragmentDoc,
    "\n  fragment DeletedCommentsMetaData on Comment {\n    _id\n    deleted\n    deletedDate\n    deletedByUser {\n      _id\n      displayName\n    }\n    deletedReason\n    deletedPublic\n  }\n": typeof types.DeletedCommentsMetaDataFragmentDoc,
    "\n  fragment DeletedCommentsModerationLog on Comment {\n    ...DeletedCommentsMetaData\n    user {\n      ...UsersMinimumInfo\n    }\n    post {\n      title\n      slug\n      _id\n    }\n  }\n": typeof types.DeletedCommentsModerationLogFragmentDoc,
    "\n  fragment CommentsListWithParentMetadata on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n      isRead\n    }\n    tag {\n      ...TagBasicInfo\n    }\n  }\n": typeof types.CommentsListWithParentMetadataFragmentDoc,
    "\n  fragment StickySubforumCommentFragment on Comment {\n    ...CommentWithRepliesFragment\n    tag {\n      ...TagBasicInfo\n    }\n  }\n": typeof types.StickySubforumCommentFragmentFragmentDoc,
    "\n  fragment WithVoteComment on Comment {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n  }\n": typeof types.WithVoteCommentFragmentDoc,
    "\n  fragment CommentsListWithModerationMetadata on Comment {\n    ...CommentWithRepliesFragment\n    allVotes {\n      voteType\n    }\n  }\n": typeof types.CommentsListWithModerationMetadataFragmentDoc,
    "\n  fragment CommentsListWithModGPTAnalysis on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    modGPTAnalysis\n  }\n": typeof types.CommentsListWithModGptAnalysisFragmentDoc,
    "\n  fragment CommentsForAutocomplete on Comment {\n    _id\n    postId\n    baseScore\n    extendedScore\n    createdAt\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      markdown\n    }\n    post {\n      ...PostsForAutocomplete\n    }\n  }\n": typeof types.CommentsForAutocompleteFragmentDoc,
    "\n  fragment CommentsForAutocompleteWithParents on Comment {\n    ...CommentsForAutocomplete\n    parentComment {\n      ...CommentsForAutocomplete\n      parentComment {\n        ...CommentsForAutocomplete\n        parentComment {\n          ...CommentsForAutocomplete\n          parentComment {\n            ...CommentsForAutocomplete\n            parentComment {\n              ...CommentsForAutocomplete\n              parentComment {\n                ...CommentsForAutocomplete\n                parentComment {\n                  ...CommentsForAutocomplete\n                  parentComment {\n                    ...CommentsForAutocomplete\n                    parentComment {\n                      ...CommentsForAutocomplete\n                      parentComment {\n                        ...CommentsForAutocomplete\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.CommentsForAutocompleteWithParentsFragmentDoc,
    "\n  fragment SuggestAlignmentComment on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    suggestForAlignmentUserIds\n    suggestForAlignmentUsers {\n      _id\n      displayName\n    }\n  }\n": typeof types.SuggestAlignmentCommentFragmentDoc,
    "\n  fragment ConversationsMinimumInfo on Conversation {\n    _id\n    createdAt\n    latestActivity\n    title\n    participantIds\n    archivedByIds\n    messageCount\n    moderator\n  }\n": typeof types.ConversationsMinimumInfoFragmentDoc,
    "\n  fragment ConversationsList on Conversation {\n    ...ConversationsMinimumInfo\n    participants {\n      ...UsersMinimumInfo\n    }\n    latestMessage {\n      ...messageListFragment\n    }\n  }\n": typeof types.ConversationsListFragmentDoc,
    "\n  fragment ConversationsListWithReadStatus on Conversation {\n    ...ConversationsList\n    hasUnreadMessages\n  }\n": typeof types.ConversationsListWithReadStatusFragmentDoc,
    "\n  fragment CurationNoticesFragment on CurationNotice {\n    _id\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    commentId\n    comment {\n      ...CommentsList\n    }\n    postId\n    post {\n      ...PostsMinimumInfo\n    }\n    deleted\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.CurationNoticesFragmentFragmentDoc,
    "\n  fragment DialogueCheckInfo on DialogueCheck {\n    _id\n    userId\n    targetUserId\n    checked\n    checkedAt\n    hideInRecommendations\n    matchPreference {\n      ...DialogueMatchPreferenceInfo\n    }\n    reciprocalMatchPreference {\n      ...DialogueMatchPreferenceInfo\n    }\n  }\n": typeof types.DialogueCheckInfoFragmentDoc,
    "\n  fragment DialogueMatchPreferenceInfo on DialogueMatchPreference {\n    _id\n    dialogueCheckId\n    topicNotes\n    topicPreferences\n    syncPreference\n    asyncPreference\n    formatNotes\n    generatedDialogueId\n    deleted\n  }\n": typeof types.DialogueMatchPreferenceInfoFragmentDoc,
    "\n  fragment DigestPostsMinimumInfo on DigestPost {\n    _id\n    digestId\n    postId\n    emailDigestStatus\n    onsiteDigestStatus\n  }\n": typeof types.DigestPostsMinimumInfoFragmentDoc,
    "\n  fragment DigestsMinimumInfo on Digest {\n    _id\n    num\n    startDate\n    endDate\n    publishedDate\n    onsiteImageId\n    onsitePrimaryColor\n  }\n": typeof types.DigestsMinimumInfoFragmentDoc,
    "\n  fragment ElectionCandidateBasicInfo on ElectionCandidate {\n    _id\n    electionName\n    name\n    logoSrc\n    href\n    fundraiserLink\n    gwwcLink\n    gwwcId\n    description\n    tagId\n    tag {\n      ...TagBasicInfo\n    }\n    postCount\n    baseScore\n    score\n    extendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.ElectionCandidateBasicInfoFragmentDoc,
    "\n  fragment ElectionCandidateSimple on ElectionCandidate {\n    _id\n    name\n    logoSrc\n    href\n    fundraiserLink\n    description\n  }\n": typeof types.ElectionCandidateSimpleFragmentDoc,
    "\n  fragment WithVoteElectionCandidate on ElectionCandidate {\n    __typename\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.WithVoteElectionCandidateFragmentDoc,
    "\n  fragment ElectionVoteInfo on ElectionVote {\n    _id\n    electionName\n    userId\n    compareState\n    vote\n    submittedAt\n    submissionComments\n    userExplanation\n    userOtherComments\n  }\n": typeof types.ElectionVoteInfoFragmentDoc,
    "\n  fragment ElectionVoteRecentDiscussion on ElectionVote {\n    _id\n    electionName\n    submittedAt\n  }\n": typeof types.ElectionVoteRecentDiscussionFragmentDoc,
    "\n  fragment ElicitQuestionFragment on ElicitQuestion {\n    _id\n    title\n    notes\n    resolution\n    resolvesBy\n  }\n": typeof types.ElicitQuestionFragmentFragmentDoc,
    "\n  fragment FeaturedResourcesFragment on FeaturedResource {\n    _id\n    title\n    body\n    ctaText\n    ctaUrl\n    expiresAt\n  }\n": typeof types.FeaturedResourcesFragmentFragmentDoc,
    "\n  fragment FieldChangeFragment on FieldChange {\n    _id\n    createdAt\n    userId\n    changeGroup\n    documentId\n    fieldName\n    oldValue\n    newValue\n  }\n": typeof types.FieldChangeFragmentFragmentDoc,
    "\n  fragment ForumEventsMinimumInfo on ForumEvent {\n    _id\n    title\n    startDate\n    endDate\n    darkColor\n    lightColor\n    bannerTextColor\n    contrastColor\n    tagId\n    postId\n    bannerImageId\n    eventFormat\n    customComponent\n    commentPrompt\n\n    pollAgreeWording\n    pollDisagreeWording\n\n    maxStickersPerUser\n  }\n": typeof types.ForumEventsMinimumInfoFragmentDoc,
    "\n  fragment ForumEventsDisplay on ForumEvent {\n    ...ForumEventsMinimumInfo\n    publicData\n    voteCount\n\n    post {\n      ...PostsMinimumInfo\n    }\n    tag {\n      ...TagBasicInfo\n    }\n    frontpageDescription {\n      _id\n      html\n    }\n    frontpageDescriptionMobile {\n      _id\n      html\n    }\n    postPageDescription {\n      _id\n      html\n    }\n    pollQuestion {\n      _id\n      html\n    }\n  }\n": typeof types.ForumEventsDisplayFragmentDoc,
    "\n  fragment ForumEventsEdit on ForumEvent {\n    ...ForumEventsMinimumInfo\n    frontpageDescription {\n      ...RevisionEdit\n    }\n    frontpageDescriptionMobile {\n      ...RevisionEdit\n    }\n    postPageDescription {\n      ...RevisionEdit\n    }\n    pollQuestion {\n      ...RevisionEdit\n    }\n  }\n": typeof types.ForumEventsEditFragmentDoc,
    "\n  fragment GardenCodeFragment on GardenCode {\n    _id\n    code\n    title\n    userId\n    deleted\n    slug\n    startTime\n    endTime\n    fbLink\n    type\n    afOnly\n    contents {\n      ...RevisionDisplay\n    }\n  }\n": typeof types.GardenCodeFragmentFragmentDoc,
    "\n  fragment GardenCodeFragmentEdit on GardenCode {\n    _id\n    code\n    title\n    userId\n    deleted\n    slug\n    startTime\n    endTime\n    fbLink\n    type\n    afOnly\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.GardenCodeFragmentEditFragmentDoc,
    "\n  fragment GoogleServiceAccountSessionInfo on GoogleServiceAccountSession {\n    _id\n    email\n  }\n": typeof types.GoogleServiceAccountSessionInfoFragmentDoc,
    "\n  fragment GoogleServiceAccountSessionAdminInfo on GoogleServiceAccountSession {\n    _id\n    email\n    estimatedExpiry\n  }\n": typeof types.GoogleServiceAccountSessionAdminInfoFragmentDoc,
    "\n  fragment JargonTerms on JargonTerm {\n    _id\n    postId\n    term\n    contents {\n      ...RevisionEdit\n    }\n    humansAndOrAIEdited\n    approved\n    deleted\n    altTerms\n  }\n": typeof types.JargonTermsFragmentDoc,
    "\n  fragment JargonTermsPost on JargonTerm {\n    _id\n    term\n    humansAndOrAIEdited\n    approved\n    deleted\n    altTerms\n    contents {\n      ...RevisionDisplay\n    }\n  }\n": typeof types.JargonTermsPostFragmentDoc,
    "\n  fragment JargonTermsWithPostInfo on JargonTerm {\n    ...JargonTerms\n    post {\n      ...PostsMinimumInfo\n    }\n  }\n": typeof types.JargonTermsWithPostInfoFragmentDoc,
    "\n  fragment LlmConversationsFragment on LlmConversation {\n    _id\n    userId\n    title\n    createdAt\n    lastUpdatedAt\n    deleted\n  }\n": typeof types.LlmConversationsFragmentFragmentDoc,
    "\n  fragment LlmConversationsViewingPageFragment on LlmConversation {\n    ...LlmConversationsFragment\n    totalCharacterCount\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": typeof types.LlmConversationsViewingPageFragmentFragmentDoc,
    "\n  fragment LlmConversationsWithMessagesFragment on LlmConversation {\n    ...LlmConversationsFragment\n    messages {\n      ...LlmMessagesFragment\n    }\n  }\n": typeof types.LlmConversationsWithMessagesFragmentFragmentDoc,
    "\n  fragment LlmMessagesFragment on LlmMessage {\n    _id\n    userId\n    conversationId\n    role\n    content\n    createdAt\n  }\n": typeof types.LlmMessagesFragmentFragmentDoc,
    "\n  fragment localGroupsBase on Localgroup {\n    _id\n    createdAt\n    organizerIds\n    organizers {\n      ...UsersMinimumInfo\n    }\n    lastActivity\n    name\n    nameInAnotherLanguage\n    isOnline\n    location\n    googleLocation\n    mongoLocation\n    types\n    categories\n    contactInfo\n    facebookLink\n    facebookPageLink\n    meetupLink\n    slackLink\n    website\n    bannerImageId\n    inactive\n    deleted\n  }\n": typeof types.LocalGroupsBaseFragmentDoc,
    "\n  fragment localGroupsHomeFragment on Localgroup {\n    ...localGroupsBase\n    contents {\n      ...RevisionDisplay\n    }\n  }\n": typeof types.LocalGroupsHomeFragmentFragmentDoc,
    "\n  fragment localGroupsEdit on Localgroup {\n    ...localGroupsBase\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.LocalGroupsEditFragmentDoc,
    "\n  fragment localGroupsIsOnline on Localgroup {\n    _id\n    name\n    isOnline\n  }\n": typeof types.LocalGroupsIsOnlineFragmentDoc,
    "\n  fragment newEventFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    name\n    important\n    properties\n    intercom\n  }\n": typeof types.NewEventFragmentFragmentDoc,
    "\n  fragment lastEventFragment on LWEvent {\n    _id\n    createdAt\n    documentId\n    userId\n    name\n    important\n    properties\n    intercom\n  }\n": typeof types.LastEventFragmentFragmentDoc,
    "\n  fragment lwEventsAdminPageFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    name\n    documentId\n    important\n    properties\n    intercom\n  }\n": typeof types.LwEventsAdminPageFragmentFragmentDoc,
    "\n  fragment emailHistoryFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    name\n    properties\n  }\n": typeof types.EmailHistoryFragmentFragmentDoc,
    "\n  fragment messageListFragment on Message {\n    _id\n    user {\n      ...UsersMinimumInfo\n      profileImageId\n    }\n    contents {\n      html\n      plaintextMainText\n    }\n    createdAt\n    conversationId\n  }\n": typeof types.MessageListFragmentFragmentDoc,
    "\n  fragment ModerationTemplateFragment on ModerationTemplate {\n    _id\n    name\n    collectionName\n    order\n    deleted\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.ModerationTemplateFragmentFragmentDoc,
    "\n  fragment ModeratorActionDisplay on ModeratorAction {\n    _id\n    user {\n      ...UsersMinimumInfo\n    }\n    userId\n    type\n    active\n    createdAt\n    endedAt\n  }\n": typeof types.ModeratorActionDisplayFragmentDoc,
    "\n  fragment MultiDocumentMinimumInfo on MultiDocument {\n    _id\n    parentDocumentId\n    collectionName\n    fieldName\n    userId\n    slug\n    oldSlugs\n    title\n    tabTitle\n    tabSubtitle\n    preview\n    index\n    deleted\n    createdAt\n    legacyData\n\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.MultiDocumentMinimumInfoFragmentDoc,
    "\n  fragment MultiDocumentContentDisplay on MultiDocument {\n    ...MultiDocumentMinimumInfo\n    tableOfContents\n    textLastUpdatedAt\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.MultiDocumentContentDisplayFragmentDoc,
    "\n  fragment MultiDocumentEdit on MultiDocument {\n    ...MultiDocumentContentDisplay\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    summaries {\n      ...MultiDocumentContentDisplay\n    }\n    textLastUpdatedAt\n  }\n": typeof types.MultiDocumentEditFragmentDoc,
    "\n  fragment MultiDocumentParentDocument on MultiDocument {\n    ...MultiDocumentEdit\n    parentTag {\n      ...TagHistoryFragment\n    }\n  }\n": typeof types.MultiDocumentParentDocumentFragmentDoc,
    "\n  fragment MultiDocumentWithContributors on MultiDocument {\n    ...MultiDocumentEdit\n    contributors {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        currentAttributionCharCount\n      }\n    }\n  }\n": typeof types.MultiDocumentWithContributorsFragmentDoc,
    "\n  fragment MultiDocumentRevision on MultiDocument {\n    ...MultiDocumentMinimumInfo\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n    tableOfContents(version: $version)\n  }\n": typeof types.MultiDocumentRevisionFragmentDoc,
    "\n  fragment MultiDocumentWithContributorsRevision on MultiDocument {\n    ...MultiDocumentRevision\n    contributors(version: $version) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        currentAttributionCharCount\n        contributionScore\n      }\n    }\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    textLastUpdatedAt\n  }\n": typeof types.MultiDocumentWithContributorsRevisionFragmentDoc,
    "\n  fragment WithVoteMultiDocument on MultiDocument {\n    ...MultiDocumentMinimumInfo\n  }\n": typeof types.WithVoteMultiDocumentFragmentDoc,
    "\n  fragment NotificationsList on Notification {\n    _id\n    documentId\n    documentType\n    deleted\n    userId\n    createdAt\n    link\n    message\n    type\n    viewed\n    extraData\n  }\n": typeof types.NotificationsListFragmentDoc,
    "\n  fragment PetrovDayActionInfo on PetrovDayAction {\n    _id\n    createdAt\n    userId\n    actionType\n    data\n  }\n": typeof types.PetrovDayActionInfoFragmentDoc,
    "\n  fragment PetrovDayLaunchInfo on PetrovDayLaunch {\n    _id\n    createdAt\n    launchCode\n    userId\n  }\n": typeof types.PetrovDayLaunchInfoFragmentDoc,
    "\n  fragment PodcastEpisodeFull on PodcastEpisode {\n    _id\n    podcastId\n    title\n    episodeLink\n    externalEpisodeId\n  }\n": typeof types.PodcastEpisodeFullFragmentDoc,
    "\n  fragment PodcastSelect on Podcast {\n    _id\n    title\n  }\n": typeof types.PodcastSelectFragmentDoc,
    "\n  fragment PostsMinimumInfo on Post {\n    _id\n    slug\n    title\n    draft\n    shortform\n    hideCommentKarma\n    af\n    currentUserReviewVote {\n      _id\n      qualitativeScore\n      quadraticScore\n    }\n    userId\n    coauthorStatuses\n    hasCoauthorPermission\n    rejected\n    debate\n    collabEditorDialogue\n  }\n": typeof types.PostsMinimumInfoFragmentDoc,
    "\n  fragment PostsTopItemInfo on Post {\n    ...PostsMinimumInfo\n    ...PostsAuthors\n    isRead\n    contents {\n      _id\n      htmlHighlight\n      wordCount\n      version\n    }\n    customHighlight {\n      _id\n      html\n    }\n    tags {\n      ...TagPreviewFragment\n    }\n    reviewWinner {\n      ...ReviewWinnerTopPostsPage\n    }\n    spotlight {\n      ...SpotlightReviewWinner\n    }\n    reviews {\n      ...CommentsList\n    }\n    finalReviewVoteScoreHighKarma\n  }\n": typeof types.PostsTopItemInfoFragmentDoc,
    "\n  fragment PostsBase on Post {\n    ...PostsMinimumInfo\n    \n    # Core fields\n    url\n    postedAt\n    createdAt\n    sticky\n    metaSticky\n    stickyPriority\n    status\n    frontpageDate\n    meta\n    deletedDraft\n    postCategory\n    tagRelevance\n\n    shareWithUsers\n    sharingSettings\n    linkSharingKey\n\n    contents_latest\n    commentCount\n    voteCount\n    baseScore\n    extendedScore\n    emojiReactors\n    unlisted\n    score\n    lastVisitedAt\n    isFuture\n    isRead\n    lastCommentedAt\n    lastCommentPromotedAt\n    canonicalCollectionSlug\n    curatedDate\n    commentsLocked\n    commentsLockedToAccountsCreatedAfter\n    debate\n\n    # questions\n    question\n    hiddenRelatedQuestion\n    originalPostRelationSourceId\n\n    userId\n    \n    # Local Event data\n    location\n    googleLocation\n    onlineEvent\n    globalEvent\n    startTime\n    endTime\n    localStartTime\n    localEndTime\n    eventRegistrationLink\n    joinEventLink\n    facebookLink\n    meetupLink\n    website\n    contactInfo\n    isEvent\n    eventImageId\n    eventType\n    types\n    groupId\n\n    # Review data \n    reviewedByUserId\n    suggestForCuratedUserIds\n    suggestForCuratedUsernames\n    reviewForCuratedUserId\n    authorIsUnreviewed\n\n    # Alignment Forum\n    afDate\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    afBaseScore\n    afExtendedScore\n    afCommentCount\n    afLastCommentedAt\n    afSticky\n    \n    hideAuthor\n    moderationStyle\n    ignoreRateLimits\n\n    submitToFrontpage\n    shortform\n    onlyVisibleToLoggedIn\n    onlyVisibleToEstablishedAccounts\n\n    reviewCount\n    reviewVoteCount\n    positiveReviewVoteCount\n    manifoldReviewMarketId\n\n    annualReviewMarketProbability\n    annualReviewMarketIsResolved\n    annualReviewMarketYear\n    annualReviewMarketUrl\n\n    group {\n      _id\n      name\n      organizerIds\n    }\n    rsvpCounts\n\n    podcastEpisodeId\n    forceAllowType3Audio\n\n    # deprecated\n    nominationCount2019\n    reviewCount2019\n\n    votingSystem\n    \n    disableRecommendation\n  }\n": typeof types.PostsBaseFragmentDoc,
    "\n  fragment PostsWithVotes on Post {\n    ...PostsBase\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.PostsWithVotesFragmentDoc,
    "\n  fragment PostsListWithVotes on Post {\n    ...PostsList\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.PostsListWithVotesFragmentDoc,
    "\n  fragment PostsListWithVotesAndSequence on Post {\n    ...PostsListWithVotes\n    canonicalSequence {\n      ...SequencesPageFragment\n    }\n  }\n": typeof types.PostsListWithVotesAndSequenceFragmentDoc,
    "\n  fragment PostsReviewVotingList on Post {\n    ...PostsListWithVotes\n    reviewVoteScoreAllKarma\n    reviewVotesAllKarma\n    reviewVoteScoreHighKarma\n    reviewVotesHighKarma\n    reviewVoteScoreAF\n    reviewVotesAF\n  }\n": typeof types.PostsReviewVotingListFragmentDoc,
    "\n  fragment PostsModerationGuidelines on Post {\n    ...PostsMinimumInfo\n    frontpageDate\n    user {\n      _id\n      displayName\n      moderationStyle\n    }\n    moderationStyle\n    moderationGuidelines {\n      _id\n      html\n      originalContents {\n        type\n        data\n      }\n    }\n  }\n": typeof types.PostsModerationGuidelinesFragmentDoc,
    "\n  fragment PostsAuthors on Post {\n    user {\n      ...UsersMinimumInfo\n      profileImageId\n      \n      # Author moderation info\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n    }\n    coauthors {\n      ...UsersMinimumInfo\n    }\n  }\n": typeof types.PostsAuthorsFragmentDoc,
    "\n  fragment PostsListBase on Post {\n    ...PostsBase\n    ...PostsAuthors\n    readTimeMinutes\n    rejectedReason\n    customHighlight {\n      _id\n      html\n      plaintextDescription\n    }\n    lastPromotedComment {\n      _id\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n    bestAnswer {\n      ...CommentsList\n    }\n    tags {\n      ...TagBasicInfo\n    }\n    socialPreviewData {\n      _id\n      imageUrl\n    }\n\n    feedId\n    totalDialogueResponseCount\n    unreadDebateResponseCount\n    dialogTooltipPreview\n    disableSidenotes\n  }\n": typeof types.PostsListBaseFragmentDoc,
    "\n  fragment PostsList on Post {\n    ...PostsListBase\n    deletedDraft\n    contents {\n      _id\n      htmlHighlight\n      plaintextDescription\n      wordCount\n      version\n    }\n    fmCrosspost\n  }\n": typeof types.PostsListFragmentDoc,
    "\n  fragment SunshineCurationPostsList on Post {\n    ...PostsList\n    curationNotices {\n      ...CurationNoticesFragment\n    }\n  }\n": typeof types.SunshineCurationPostsListFragmentDoc,
    "\n  fragment PostsListTag on Post {\n    ...PostsList\n    tagRel(tagId: $tagId) {\n      ...WithVoteTagRel\n    }\n  }\n": typeof types.PostsListTagFragmentDoc,
    "\n  fragment PostsListTagWithVotes on Post {\n    ...PostsListWithVotes\n    tagRel(tagId: $tagId) {\n      ...WithVoteTagRel\n    }\n  }\n": typeof types.PostsListTagWithVotesFragmentDoc,
    "\n  fragment PostsDetails on Post {\n    ...PostsListBase\n\n    canonicalSource\n    noIndex\n    viewCount\n    tags {\n      ...TagPreviewFragment\n    }\n    socialPreviewData {\n      _id\n      text\n      imageUrl\n    }\n    \n    # Tags\n    tagRelevance\n    \n    # Posts-page display options\n    commentSortOrder\n    sideCommentVisibility\n    \n    # Sequence navigation\n    collectionTitle\n    canonicalPrevPostSlug\n    canonicalNextPostSlug\n    canonicalSequenceId\n    canonicalBookId\n    canonicalSequence {\n      _id\n      title\n    }\n    canonicalBook {\n      _id\n      title\n    }\n    canonicalCollection {\n      _id\n      title\n    }\n\n    # Podcast\n    podcastEpisode {\n      _id\n      title\n      podcast {\n        _id\n        title\n        applePodcastLink\n        spotifyPodcastLink\n      }\n      episodeLink\n      externalEpisodeId\n    }\n\n    # Moderation stuff\n    bannedUserIds\n    moderationStyle\n    \n    # Voting\n    currentUserVote\n    currentUserExtendedVote\n    \n    # RSS metadata\n    feedLink\n    feed {\n      ...RSSFeedMinimumInfo\n    }\n    \n    # Related Questions\n    sourcePostRelations {\n      _id\n      sourcePostId\n      sourcePost {\n        ...PostsListWithVotes\n      }\n      order\n    }\n    targetPostRelations {\n      _id\n      sourcePostId\n      targetPostId\n      targetPost {\n        ...PostsListWithVotes\n      }\n      order\n    }\n    \n    # Events\n    rsvps\n    activateRSVPs\n\n    # Crossposting\n    fmCrosspost\n\n    # Jargon Terms\n    glossary {\n      ...JargonTermsPost\n    }\n  }\n": typeof types.PostsDetailsFragmentDoc,
    "\n  fragment PostsExpandedHighlight on Post {\n    _id\n    contents {\n      _id\n      html\n    }\n  }\n": typeof types.PostsExpandedHighlightFragmentDoc,
    "\n  fragment PostsPlaintextDescription on Post {\n    _id\n    contents {\n      _id\n      plaintextDescription\n    }\n  }\n": typeof types.PostsPlaintextDescriptionFragmentDoc,
    "\n  fragment PostsRevision on Post {\n    ...PostsDetails\n\n    # Content & Revisions\n    version\n    contents(version: $version) {\n      ...RevisionDisplay\n    }\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n": typeof types.PostsRevisionFragmentDoc,
    "\n  fragment PostsRevisionEdit on Post {\n    ...PostsDetails\n\n    # Content & Revisions\n    version\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n": typeof types.PostsRevisionEditFragmentDoc,
    "\n  fragment PostsWithNavigationAndRevision on Post {\n    ...PostsRevision\n    ...PostSequenceNavigation\n    customHighlight {\n      ...RevisionDisplay\n    }\n    \n    tableOfContentsRevision(version: $version)\n    reviewWinner {\n      ...ReviewWinnerAll\n    }\n  }\n": typeof types.PostsWithNavigationAndRevisionFragmentDoc,
    "\n  fragment PostsWithNavigation on Post {\n    ...PostsPage\n    ...PostSequenceNavigation\n    \n    tableOfContents\n    reviewWinner {\n      ...ReviewWinnerAll\n    }\n  }\n": typeof types.PostsWithNavigationFragmentDoc,
    "\n  fragment PostSequenceNavigation on Post {\n    # Prev/next sequence navigation\n    sequence(sequenceId: $sequenceId) {\n      ...SequencesPageFragment\n    }\n    prevPost(sequenceId: $sequenceId) {\n      ...PostsListWithVotes\n      sequence(sequenceId: $sequenceId, prevOrNext: \"prev\") {\n        _id\n      }\n    }\n    nextPost(sequenceId: $sequenceId) {\n      ...PostsListWithVotes\n      sequence(sequenceId: $sequenceId, prevOrNext: \"next\") {\n        _id\n      }\n    }\n  }\n": typeof types.PostSequenceNavigationFragmentDoc,
    "\n  fragment PostsPage on Post {\n    ...PostsDetails\n    version\n    contents {\n      ...RevisionDisplay\n    }\n    customHighlight {\n      ...RevisionDisplay\n    }\n    myEditorAccess\n  }\n": typeof types.PostsPageFragmentDoc,
    "\n  fragment PostsEdit on Post {\n    ...PostsDetails\n    ...PostSideComments\n    myEditorAccess\n    version\n    coauthorStatuses\n    readTimeMinutesOverride\n    fmCrosspost\n    hideFromRecentDiscussions\n    hideFromPopularComments\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n    customHighlight {\n      ...RevisionEdit\n    }\n    tableOfContents\n    subforumTagId\n    socialPreviewImageId\n    socialPreview\n    socialPreviewData {\n      _id\n      imageId\n      text\n    }\n    user {\n      ...UsersMinimumInfo\n    }\n    usersSharedWith {\n      ...UsersMinimumInfo\n    }\n    coauthors {\n      ...UsersMinimumInfo\n    }\n    generateDraftJargon\n  }\n": typeof types.PostsEditFragmentDoc,
    "\n  fragment PostsEditQueryFragment on Post {\n    ...PostsEdit\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n  }\n": typeof types.PostsEditQueryFragmentFragmentDoc,
    "\n  fragment PostsEditMutationFragment on Post {\n    ...PostsEdit\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.PostsEditMutationFragmentFragmentDoc,
    "\n  fragment PostsRevisionsList on Post {\n    _id\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n": typeof types.PostsRevisionsListFragmentDoc,
    "\n  fragment PostsRecentDiscussion on Post {\n    ...PostsListWithVotes\n    recentComments(commentsLimit: $commentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsList\n    }\n  }\n": typeof types.PostsRecentDiscussionFragmentDoc,
    "\n  fragment ShortformRecentDiscussion on Post {\n    ...PostsListWithVotes\n    recentComments(commentsLimit: $commentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsListWithTopLevelComment\n    }\n  }\n": typeof types.ShortformRecentDiscussionFragmentDoc,
    "\n  fragment UsersBannedFromPostsModerationLog on Post {\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    slug\n    _id\n    bannedUserIds\n  }\n": typeof types.UsersBannedFromPostsModerationLogFragmentDoc,
    "\n  fragment SunshinePostsList on Post {\n    ...PostsListBase\n\n    currentUserVote\n    currentUserExtendedVote\n    fmCrosspost\n    rejectedReason\n    autoFrontpage\n\n    contents {\n      _id\n      html\n      htmlHighlight\n      wordCount\n      version\n    }\n\n    moderationGuidelines {\n      _id\n      html\n    }\n\n    user {\n      ...UsersMinimumInfo\n      biography {\n        ...RevisionDisplay\n      }\n      profileImageId\n      \n      # Author moderation info\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n      \n      moderationGuidelines {\n        _id\n        html\n      }\n\n      needsReview\n      moderatorActions {\n        ...ModeratorActionDisplay\n      }\n    }\n  }\n": typeof types.SunshinePostsListFragmentDoc,
    "\n  fragment WithVotePost on Post {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n  }\n": typeof types.WithVotePostFragmentDoc,
    "\n  fragment HighlightWithHash on Post {\n    _id\n    contents {\n      _id\n      htmlHighlightStartingAtHash(hash: $hash)\n    }\n  }\n": typeof types.HighlightWithHashFragmentDoc,
    "\n  fragment PostWithDialogueMessage on Post {\n    _id\n    dialogueMessageContents(dialogueMessageId: $dialogueMessageId)\n  }\n": typeof types.PostWithDialogueMessageFragmentDoc,
    "\n  fragment PostSideComments on Post {\n    _id\n    sideComments\n    sideCommentsCache {\n      ...SideCommentCacheMinimumInfo\n    }\n  }\n": typeof types.PostSideCommentsFragmentDoc,
    "\n  fragment PostWithGeneratedSummary on Post {\n    _id\n    languageModelSummary\n  }\n": typeof types.PostWithGeneratedSummaryFragmentDoc,
    "\n  fragment PostsBestOfList on Post {\n    ...PostsListWithVotes\n    podcastEpisode {\n      _id\n      title\n      podcast {\n        _id\n        title\n        applePodcastLink\n        spotifyPodcastLink\n      }\n      episodeLink\n      externalEpisodeId\n    }\n    socialPreviewData {\n      _id\n      text\n      imageUrl\n    }\n    firstVideoAttribsForPreview\n  }\n": typeof types.PostsBestOfListFragmentDoc,
    "\n  fragment PostsRSSFeed on Post {\n    ...PostsPage\n    scoreExceeded2Date\n    scoreExceeded30Date\n    scoreExceeded45Date\n    scoreExceeded75Date\n    scoreExceeded125Date\n    scoreExceeded200Date\n    metaDate\n  }\n": typeof types.PostsRssFeedFragmentDoc,
    "\n  fragment PostsOriginalContents on Post {\n    _id\n    contents {\n      _id\n      originalContents {\n        type\n        data\n      }\n    }\n  }\n": typeof types.PostsOriginalContentsFragmentDoc,
    "\n  fragment PostsHTML on Post {\n    _id\n    contents {\n      ...RevisionHTML\n    }\n  }\n": typeof types.PostsHtmlFragmentDoc,
    "\n  fragment PostsForAutocomplete on Post {\n    _id\n    title\n    userId\n    baseScore\n    extendedScore\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      markdown\n    }\n  }\n": typeof types.PostsForAutocompleteFragmentDoc,
    "\n  fragment PostForReviewWinnerItem on Post {\n    _id\n    spotlight {\n      _id\n    }\n    reviewWinner {\n      _id\n      category\n    }\n  }\n": typeof types.PostForReviewWinnerItemFragmentDoc,
    "\n  fragment PostsTwitterAdmin on Post {\n    ...PostsListWithVotes\n    user {\n      ...UsersSocialMediaInfo\n    }\n    coauthors {\n      ...UsersSocialMediaInfo\n    }\n  }\n": typeof types.PostsTwitterAdminFragmentDoc,
    "\n  fragment SuggestAlignmentPost on Post {\n    ...PostsList\n    suggestForAlignmentUsers {\n      _id\n      displayName\n    }\n  }\n": typeof types.SuggestAlignmentPostFragmentDoc,
    "\n  fragment UnclaimedReportsList on Report {\n    _id\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    commentId\n    comment {\n      ...CommentsList\n      post {\n        ...PostsMinimumInfo\n      }\n      tag {\n        ...TagBasicInfo\n      }\n    }\n    postId\n    post {\n      ...PostsList\n    }\n    reportedUser {\n      ...SunshineUsersList\n    }\n    closedAt\n    createdAt\n    claimedUserId\n    claimedUser {\n      _id\n      displayName\n      username\n      slug\n    }\n    link\n    description\n    reportedAsSpam\n    markedAsSpam\n  }\n": typeof types.UnclaimedReportsListFragmentDoc,
    "\n  fragment reviewVoteFragment on ReviewVote {\n    _id\n    createdAt\n    userId\n    postId\n    qualitativeScore\n    quadraticScore\n    comment\n    year\n    dummy\n    reactions\n  }\n": typeof types.ReviewVoteFragmentFragmentDoc,
    "\n  fragment reviewVoteWithUserAndPost on ReviewVote {\n    ...reviewVoteFragment\n    user {\n      ...UsersMinimumInfo\n      email\n      emails\n    }\n    post {\n      ...PostsMinimumInfo\n    }\n  }\n": typeof types.ReviewVoteWithUserAndPostFragmentDoc,
    "\n  fragment reviewAdminDashboard on ReviewVote {\n    _id\n    createdAt\n    userId\n    user {\n      _id\n      displayName\n      karma\n    }\n  }\n": typeof types.ReviewAdminDashboardFragmentDoc,
    "\n  fragment ReviewWinnerArtImages on ReviewWinnerArt {\n    _id\n    postId\n    splashArtImagePrompt\n    splashArtImageUrl\n    activeSplashArtCoordinates {\n      ...SplashArtCoordinatesEdit\n    }\n  }\n": typeof types.ReviewWinnerArtImagesFragmentDoc,
    "\n  fragment ReviewWinnerEditDisplay on ReviewWinner {\n    _id\n    postId\n    reviewYear\n    curatedOrder\n    reviewRanking\n  }\n": typeof types.ReviewWinnerEditDisplayFragmentDoc,
    "\n  fragment ReviewWinnerTopPostsDisplay on ReviewWinner {\n    _id\n    postId\n    post {\n      ...PostsTopItemInfo\n    }\n    reviewYear\n    curatedOrder\n    reviewRanking\n  }\n": typeof types.ReviewWinnerTopPostsDisplayFragmentDoc,
    "\n  fragment ReviewWinnerAll on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    postId\n    reviewYear\n    reviewRanking\n    reviewWinnerArt {\n      ...ReviewWinnerArtImages\n    }\n    competitorCount\n  }\n": typeof types.ReviewWinnerAllFragmentDoc,
    "\n  fragment ReviewWinnerTopPostsPage on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    reviewYear\n    reviewRanking\n    reviewWinnerArt {\n      splashArtImageUrl\n      activeSplashArtCoordinates {\n        ...SplashArtCoordinatesEdit\n      }\n    }\n  }\n": typeof types.ReviewWinnerTopPostsPageFragmentDoc,
    "\n  fragment ReviewWinnerAnnouncement on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    reviewYear\n    reviewRanking\n    competitorCount\n    postId\n    post {\n      _id\n      title\n      slug\n    }\n  }\n": typeof types.ReviewWinnerAnnouncementFragmentDoc,
    "\n  fragment RevisionDisplay on Revision {\n    _id\n    version\n    updateType\n    editedAt\n    userId\n    html\n    commitMessage\n    wordCount\n    htmlHighlight\n    plaintextDescription\n  }\n": typeof types.RevisionDisplayFragmentDoc,
    "\n  fragment RevisionHTML on Revision {\n    _id\n    html\n  }\n": typeof types.RevisionHtmlFragmentDoc,
    "\n  fragment RevisionEdit on Revision {\n    _id\n    version\n    updateType\n    editedAt\n    userId\n    originalContents {\n      type\n      data\n    }\n    html\n    markdown\n    draftJS\n    ckEditorMarkup\n    wordCount\n    htmlHighlight\n    plaintextDescription\n  }\n": typeof types.RevisionEditFragmentDoc,
    "\n  fragment RevisionMetadata on Revision {\n    _id\n    version\n    editedAt\n    commitMessage\n    userId\n    \n    score\n    baseScore\n    extendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.RevisionMetadataFragmentDoc,
    "\n  fragment RevisionMetadataWithChangeMetrics on Revision {\n    ...RevisionMetadata\n    changeMetrics\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": typeof types.RevisionMetadataWithChangeMetricsFragmentDoc,
    "\n  fragment RevisionHistoryEntry on Revision {\n    ...RevisionMetadata\n    documentId\n    collectionName\n    changeMetrics\n    legacyData\n    skipAttributions\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": typeof types.RevisionHistoryEntryFragmentDoc,
    "\n  fragment RevisionHistorySummaryEdit on Revision {\n    ...RevisionHistoryEntry\n    summary {\n      ...MultiDocumentMinimumInfo\n      parentTag {\n        _id\n        name\n      }\n      parentLens {\n        _id\n        title\n        tabTitle\n        tabSubtitle\n      }\n    }\n  }\n": typeof types.RevisionHistorySummaryEditFragmentDoc,
    "\n  fragment RevisionTagFragment on Revision {\n    ...RevisionHistoryEntry\n    tag {\n      ...TagHistoryFragment\n    }\n    lens {\n      ...MultiDocumentParentDocument\n    }\n  }\n": typeof types.RevisionTagFragmentFragmentDoc,
    "\n  fragment RecentDiscussionRevisionTagFragment on Revision {\n    ...RevisionHistoryEntry\n    tag {\n      ...TagRecentDiscussion\n    }\n  }\n": typeof types.RecentDiscussionRevisionTagFragmentFragmentDoc,
    "\n  fragment WithVoteRevision on Revision {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    voteCount\n  }\n": typeof types.WithVoteRevisionFragmentDoc,
    "\n  fragment RSSFeedMinimumInfo on RSSFeed {\n    _id\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    createdAt\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    importAsDraft\n  }\n": typeof types.RssFeedMinimumInfoFragmentDoc,
    "\n  fragment newRSSFeedFragment on RSSFeed {\n    _id\n    userId\n    createdAt\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    status\n    importAsDraft\n  }\n": typeof types.NewRssFeedFragmentFragmentDoc,
    "\n  fragment RSSFeedMutationFragment on RSSFeed {\n    _id\n    userId\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    importAsDraft\n  }\n": typeof types.RssFeedMutationFragmentFragmentDoc,
    "\n  fragment SequencesPageTitleFragment on Sequence {\n    _id\n    title\n    canonicalCollectionSlug\n    canonicalCollection {\n      _id\n      title\n    }\n  }\n": typeof types.SequencesPageTitleFragmentFragmentDoc,
    "\n  fragment SequencesPageFragment on Sequence {\n    ...SequencesPageTitleFragment\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      ...RevisionDisplay\n    }\n    gridImageId\n    bannerImageId\n    canonicalCollectionSlug\n    draft\n    isDeleted\n    hidden\n    hideFromAuthorPage\n    noindex\n    curatedOrder\n    userProfileOrder\n    af\n    postsCount\n    readPostsCount\n  }\n": typeof types.SequencesPageFragmentFragmentDoc,
    "\n  fragment SequenceContinueReadingFragment on Sequence {\n    _id\n    title\n    gridImageId\n    canonicalCollectionSlug\n  }\n": typeof types.SequenceContinueReadingFragmentFragmentDoc,
    "\n  fragment SequencesPageWithChaptersFragment on Sequence {\n    ...SequencesPageFragment\n    chapters {\n      ...ChaptersFragment\n    }\n  }\n": typeof types.SequencesPageWithChaptersFragmentFragmentDoc,
    "\n  fragment SequencesEdit on Sequence {\n    ...SequencesPageFragment\n    contents { \n      ...RevisionEdit\n    }\n  }\n": typeof types.SequencesEditFragmentDoc,
    "\n  fragment SideCommentCacheMinimumInfo on SideCommentCache {\n    _id\n    postId\n    annotatedHtml\n    commentsByBlock\n    version\n    createdAt\n  }\n": typeof types.SideCommentCacheMinimumInfoFragmentDoc,
    "\n  fragment SplashArtCoordinates on SplashArtCoordinate {\n    _id\n    reviewWinnerArtId\n    leftXPct\n    leftYPct\n    leftHeightPct\n    leftWidthPct\n    leftFlipped\n    middleXPct\n    middleYPct\n    middleHeightPct\n    middleWidthPct\n    middleFlipped\n    rightXPct\n    rightYPct\n    rightHeightPct\n    rightWidthPct\n    rightFlipped\n  }\n": typeof types.SplashArtCoordinatesFragmentDoc,
    "\n  fragment SplashArtCoordinatesEdit on SplashArtCoordinate {\n    ...SplashArtCoordinates\n    createdAt\n  }\n": typeof types.SplashArtCoordinatesEditFragmentDoc,
    "\n  fragment SpotlightMinimumInfo on Spotlight {\n    _id\n    documentId\n    documentType\n    spotlightImageId\n    spotlightDarkImageId\n    spotlightSplashImageUrl\n    draft\n    deletedDraft\n    position\n    lastPromotedAt\n    customTitle\n    customSubtitle\n    subtitleUrl\n    headerTitle\n    headerTitleLeftColor\n    headerTitleRightColor\n    duration\n    showAuthor\n    imageFade\n    imageFadeColor\n  }\n": typeof types.SpotlightMinimumInfoFragmentDoc,
    "\n  fragment SpotlightReviewWinner on Spotlight {\n    ...SpotlightMinimumInfo\n    description {\n      html\n    }\n    sequenceChapters {\n      ...ChaptersFragment\n    }\n  }\n": typeof types.SpotlightReviewWinnerFragmentDoc,
    "\n  fragment SpotlightHeaderEventSubtitle on Spotlight {\n    ...SpotlightMinimumInfo\n    post {\n      _id\n      slug\n    }\n    sequence {\n      _id\n    }\n    tag {\n      _id\n      slug\n    }\n  }\n": typeof types.SpotlightHeaderEventSubtitleFragmentDoc,
    "\n  fragment SpotlightDisplay on Spotlight {\n    ...SpotlightMinimumInfo\n    post {\n      ...PostsMinimumInfo\n      user {\n        _id\n        displayName\n        slug\n      }\n      reviews {\n        ...CommentsList\n      }\n    }\n    sequence {\n      _id\n      title\n      user {\n        _id\n        displayName\n        slug\n      }\n    }\n    tag {\n      _id\n      name\n      slug\n      user {\n        _id\n        displayName\n        slug\n      }\n    }\n    sequenceChapters {\n      ...ChaptersFragment\n    }\n    description {\n      html\n    }\n  }\n": typeof types.SpotlightDisplayFragmentDoc,
    "\n  fragment SpotlightEditQueryFragment on Spotlight {\n    ...SpotlightMinimumInfo\n    description {\n      ...RevisionEdit\n    }\n  }\n": typeof types.SpotlightEditQueryFragmentFragmentDoc,
    "\n  fragment SubscriptionState on Subscription {\n    _id\n    userId\n    createdAt\n    state\n    documentId\n    collectionName\n    deleted\n    type\n  }\n": typeof types.SubscriptionStateFragmentDoc,
    "\n  fragment MembersOfGroupFragment on Subscription {\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": typeof types.MembersOfGroupFragmentFragmentDoc,
    "\n  fragment SurveyQuestionMinimumInfo on SurveyQuestion {\n    _id\n    question\n    format\n    order\n  }\n": typeof types.SurveyQuestionMinimumInfoFragmentDoc,
    "\n  fragment SurveyResponseMinimumInfo on SurveyResponse {\n    _id\n    surveyId\n    surveyScheduleId\n    userId\n    clientId\n    response\n  }\n": typeof types.SurveyResponseMinimumInfoFragmentDoc,
    "\n  fragment SurveyScheduleMinimumInfo on SurveySchedule {\n    _id\n    survey {\n      ...SurveyMinimumInfo\n    }\n  }\n": typeof types.SurveyScheduleMinimumInfoFragmentDoc,
    "\n  fragment SurveyScheduleEdit on SurveySchedule {\n    ...SurveyScheduleMinimumInfo\n    surveyId\n    name\n    impressionsLimit\n    maxVisitorPercentage\n    minKarma\n    maxKarma\n    target\n    startDate\n    endDate\n    deactivated\n    createdAt\n  }\n": typeof types.SurveyScheduleEditFragmentDoc,
    "\n  fragment SurveyMinimumInfo on Survey {\n    _id\n    name\n    questions {\n      ...SurveyQuestionMinimumInfo\n    }\n    createdAt\n  }\n": typeof types.SurveyMinimumInfoFragmentDoc,
    "\n  fragment TagFlagFragment on TagFlag {\n    _id\n    createdAt\n    name\n    slug\n    order\n    deleted\n    contents { \n      html\n      htmlHighlight\n      plaintextDescription\n    }\n  }\n": typeof types.TagFlagFragmentFragmentDoc,
    "\n  fragment TagFlagEditFragment on TagFlag {\n    ...TagFlagFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n": typeof types.TagFlagEditFragmentFragmentDoc,
    "\n  fragment TagRelBasicInfo on TagRel {\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    tagId\n    postId\n    autoApplied\n  }\n": typeof types.TagRelBasicInfoFragmentDoc,
    "\n  fragment TagRelFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    post {\n      ...PostsList\n    }\n    currentUserVote\n    currentUserExtendedVote\n    currentUserCanVote\n  }\n": typeof types.TagRelFragmentFragmentDoc,
    "\n  fragment TagRelHistoryFragment on TagRel {\n    ...TagRelBasicInfo\n    createdAt\n    user {\n      ...UsersMinimumInfo\n    }\n    post {\n      ...PostsList\n    }\n  }\n": typeof types.TagRelHistoryFragmentFragmentDoc,
    "\n  fragment TagRelCreationFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    post {\n      ...PostsList\n      tagRelevance\n      tagRel(tagId: $tagId) {\n        ...WithVoteTagRel\n      }\n    }\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.TagRelCreationFragmentFragmentDoc,
    "\n  fragment TagRelMinimumFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    currentUserVote\n    currentUserExtendedVote\n    currentUserCanVote\n  }\n": typeof types.TagRelMinimumFragmentFragmentDoc,
    "\n  fragment WithVoteTagRel on TagRel {\n    __typename\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.WithVoteTagRelFragmentDoc,
    "\n  fragment TagBasicInfo on Tag {\n    _id\n    userId\n    name\n    shortName\n    slug\n    core\n    postCount\n    adminOnly\n    canEditUserIds\n    suggestedAsFilter\n    needsReview\n    descriptionTruncationCount\n    createdAt\n    wikiOnly\n    deleted\n    isSubforum\n    noindex\n    isArbitalImport\n    isPlaceholderPage\n\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": typeof types.TagBasicInfoFragmentDoc,
    "\n  fragment TagDetailsFragment on Tag {\n    ...TagBasicInfo\n    subtitle\n    oldSlugs\n    isRead\n    defaultOrder\n    reviewedByUserId\n    wikiGrade\n    subforumModeratorIds\n    subforumModerators {\n      ...UsersMinimumInfo\n    }\n    moderationGuidelines {\n      _id\n      html\n    }\n    bannerImageId\n    squareImageId\n    lesswrongWikiImportSlug\n    lesswrongWikiImportRevision\n    sequence {\n      ...SequencesPageFragment\n    }\n  }\n": typeof types.TagDetailsFragmentFragmentDoc,
    "\n  fragment TagFragment on Tag {\n    ...TagDetailsFragment\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      html\n      htmlHighlight\n      plaintextDescription\n      version\n      editedAt\n    }\n    canVoteOnRels\n  }\n": typeof types.TagFragmentFragmentDoc,
    "\n  fragment TagHistoryFragment on Tag {\n    ...TagFragment\n    textLastUpdatedAt\n    tableOfContents\n    user {\n      ...UsersMinimumInfo\n    }\n    lensesIncludingDeleted {\n      ...MultiDocumentContentDisplay\n    }\n  }\n": typeof types.TagHistoryFragmentFragmentDoc,
    "\n  fragment TagCreationHistoryFragment on Tag {\n    ...TagFragment\n    user {\n      ...UsersMinimumInfo\n    }\n    description {\n      html\n    }\n  }\n": typeof types.TagCreationHistoryFragmentFragmentDoc,
    "\n  fragment TagRevisionFragment on Tag {\n    ...TagDetailsFragment\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    isRead\n    description(version: $version) {\n      _id\n      version\n      html\n      htmlHighlight\n      plaintextDescription\n      editedAt\n      \n      user {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": typeof types.TagRevisionFragmentFragmentDoc,
    "\n  fragment TagPreviewFragment on Tag {\n    ...TagBasicInfo\n    isRead\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      htmlHighlight\n    }\n    canVoteOnRels\n    isArbitalImport\n  }\n": typeof types.TagPreviewFragmentFragmentDoc,
    "\n  fragment TagSectionPreviewFragment on Tag {\n    ...TagBasicInfo\n    isRead\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      htmlHighlightStartingAtHash(hash: $hash)\n    }\n    canVoteOnRels\n  }\n": typeof types.TagSectionPreviewFragmentFragmentDoc,
    "\n  fragment TagSubforumFragment on Tag {\n    ...TagPreviewFragment\n    subforumModeratorIds\n    tableOfContents\n    subforumWelcomeText {\n      _id\n      html\n    }\n  }\n": typeof types.TagSubforumFragmentFragmentDoc,
    "\n  fragment TagSubtagFragment on Tag {\n    _id\n    subforumModeratorIds\n    subTags {\n      ...TagPreviewFragment\n    }\n  }\n": typeof types.TagSubtagFragmentFragmentDoc,
    "\n  fragment TagSubforumSidebarFragment on Tag {\n    ...TagBasicInfo\n  }\n": typeof types.TagSubforumSidebarFragmentFragmentDoc,
    "\n  fragment TagDetailedPreviewFragment on Tag {\n    ...TagDetailsFragment\n    description {\n      _id\n      htmlHighlight\n    }\n  }\n": typeof types.TagDetailedPreviewFragmentFragmentDoc,
    "\n  fragment TagWithFlagsFragment on Tag {\n    ...TagFragment\n    tagFlagsIds\n    tagFlags {\n      ...TagFlagFragment\n    }\n  }\n": typeof types.TagWithFlagsFragmentFragmentDoc,
    "\n  fragment TagWithFlagsAndRevisionFragment on Tag {\n    ...TagRevisionFragment\n    tagFlagsIds\n    tagFlags {\n      ...TagFlagFragment\n    }\n  }\n": typeof types.TagWithFlagsAndRevisionFragmentFragmentDoc,
    "\n  fragment ArbitalLinkedPagesFragment on ArbitalLinkedPages {\n    faster {\n      _id\n      name\n      slug\n    }\n    slower {\n      _id\n      name\n      slug\n    }\n    moreTechnical {\n      _id\n      name\n      slug\n    }\n    lessTechnical {\n      _id\n      name\n      slug\n    }\n    requirements {\n      _id\n      name\n      slug\n    }\n    teaches {\n      _id\n      name\n      slug\n    }\n    parents {\n      _id\n      name\n      slug\n    }\n    children {\n      _id\n      name\n      slug\n    }\n  }\n": typeof types.ArbitalLinkedPagesFragmentFragmentDoc,
    "\n  fragment TagPageArbitalContentFragment on Tag {\n    lenses {\n      ...MultiDocumentWithContributors\n    }\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n  }\n": typeof types.TagPageArbitalContentFragmentFragmentDoc,
    "\n  fragment TagPageFragment on Tag {\n    ...TagWithFlagsFragment\n    tableOfContents\n    postsDefaultSortOrder\n    subforumIntroPost {\n      ...PostsListWithVotes\n    }\n    subforumWelcomeText {\n      _id\n      html\n    }\n    contributors(limit: $contributorsLimit) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    canVoteOnRels\n    forceAllowType3Audio\n    textLastUpdatedAt\n  }\n": typeof types.TagPageFragmentFragmentDoc,
    "\n  fragment TagPageWithArbitalContentFragment on Tag {\n    ...TagPageFragment\n    ...TagPageArbitalContentFragment\n  }\n": typeof types.TagPageWithArbitalContentFragmentFragmentDoc,
    "\n  fragment AllTagsPageFragment on Tag {\n    ...TagWithFlagsFragment\n    tableOfContents\n  }\n": typeof types.AllTagsPageFragmentFragmentDoc,
    "\n  fragment TagPageWithRevisionFragment on Tag {\n    ...TagWithFlagsAndRevisionFragment\n    tableOfContents(version: $version)\n    textLastUpdatedAt\n    postsDefaultSortOrder\n    subforumIntroPost {\n      ...PostsListWithVotes\n    }\n    subforumWelcomeText {\n      _id\n      html\n    }\n    contributors(limit: $contributorsLimit, version: $version) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    canVoteOnRels\n    forceAllowType3Audio\n  }\n": typeof types.TagPageWithRevisionFragmentFragmentDoc,
    "\n  fragment TagPageRevisionWithArbitalContentFragment on Tag {\n    ...TagPageWithRevisionFragment\n    ...TagPageArbitalContentFragment\n  }\n": typeof types.TagPageRevisionWithArbitalContentFragmentFragmentDoc,
    "\n  fragment TagFullContributorsList on Tag {\n    contributors {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n  }\n": typeof types.TagFullContributorsListFragmentDoc,
    "\n  fragment TagEditFragment on Tag {\n    ...TagDetailsFragment\n    isPostType\n    parentTagId\n    parentTag {\n      ...TagBasicInfo\n    }\n    subforumIntroPostId\n    tagFlagsIds\n    postsDefaultSortOrder\n    introSequenceId\n    \n    autoTagModel\n    autoTagPrompt\n    \n    description {\n      ...RevisionEdit\n    }\n    subforumWelcomeText {\n      ...RevisionEdit\n    }\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n  }\n": typeof types.TagEditFragmentFragmentDoc,
    "\n  fragment TagRecentDiscussion on Tag {\n    ...TagFragment\n    lastVisitedAt\n    recentComments(tagCommentsLimit: $tagCommentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsList\n    }\n  }\n": typeof types.TagRecentDiscussionFragmentDoc,
    "\n  fragment SunshineTagFragment on Tag {\n    ...TagFragment\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": typeof types.SunshineTagFragmentFragmentDoc,
    "\n  fragment UserOnboardingTag on Tag {\n    _id\n    name\n    slug\n    bannerImageId\n    squareImageId\n  }\n": typeof types.UserOnboardingTagFragmentDoc,
    "\n  fragment TagName on Tag {\n    _id\n    name\n    slug\n  }\n": typeof types.TagNameFragmentDoc,
    "\n  fragment ExplorePageTagFragment on Tag {\n    ...TagFragment\n    contributors(limit: $contributorsLimit) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    legacyData\n  }\n": typeof types.ExplorePageTagFragmentFragmentDoc,
    "\n  fragment ConceptItemFragment on Tag {\n    _id\n    core\n    name\n    slug\n    oldSlugs\n    postCount\n    baseScore\n    description {\n      _id\n      wordCount\n    }\n    wikiOnly\n    isArbitalImport\n    coreTagId\n    maxScore\n    usersWhoLiked {\n      _id\n      displayName\n    }\n  }\n": typeof types.ConceptItemFragmentFragmentDoc,
    "\n  fragment TagPageWithArbitalContentAndLensRevisionFragment on Tag {\n    ...TagPageFragment\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    lenses(lensSlug: $lensSlug, version: $version) {\n      ...MultiDocumentWithContributorsRevision\n    }\n  }\n": typeof types.TagPageWithArbitalContentAndLensRevisionFragmentFragmentDoc,
    "\n  fragment WithVoteTag on Tag {\n    ...TagBasicInfo\n  }\n": typeof types.WithVoteTagFragmentDoc,
    "\n  fragment TypingIndicatorInfo on TypingIndicator {\n    _id\n    userId\n    documentId\n    lastUpdated\n  }\n": typeof types.TypingIndicatorInfoFragmentDoc,
    "\n  fragment UserEAGDetailsMinimumInfo on UserEAGDetail {\n    _id\n    userId\n    createdAt\n    lastUpdated\n    careerStage\n    countryOrRegion\n    nearestCity\n    willingnessToRelocate\n    experiencedIn\n    interestedIn\n  }\n": typeof types.UserEagDetailsMinimumInfoFragmentDoc,
    "\n  fragment UserJobAdsMinimumInfo on UserJobAd {\n    _id\n    userId\n    createdAt\n    lastUpdated\n    jobName\n    adState\n    reminderSetAt\n  }\n": typeof types.UserJobAdsMinimumInfoFragmentDoc,
    "\n  fragment UserMostValuablePostInfo on UserMostValuablePost {\n    _id\n    userId\n    postId\n    deleted\n  }\n": typeof types.UserMostValuablePostInfoFragmentDoc,
    "\n  fragment UserRateLimitDisplay on UserRateLimit {\n    _id\n    user {\n      ...UsersMinimumInfo\n    }\n    userId\n    type\n    actionsPerInterval\n    intervalUnit\n    intervalLength\n    createdAt\n    endedAt\n  }\n": typeof types.UserRateLimitDisplayFragmentDoc,
    "\n  fragment UserTagRelDetails on UserTagRel {\n    _id\n    userId\n    tagId\n    subforumShowUnreadInSidebar\n    subforumEmailNotifications\n    subforumHideIntroPost\n  }\n": typeof types.UserTagRelDetailsFragmentDoc,
    "\n  fragment UsersMinimumInfo on User {\n    _id\n    slug\n    createdAt\n    username\n    displayName\n    profileImageId\n    previousDisplayName\n    fullName\n    karma\n    afKarma\n    deleted\n    isAdmin\n    htmlBio\n    jobTitle\n    organization\n    postCount\n    commentCount\n    sequenceCount\n    afPostCount\n    afCommentCount\n    spamRiskScore\n    tagRevisionCount\n    reviewedByUserId\n  }\n": typeof types.UsersMinimumInfoFragmentDoc,
    "\n  fragment UsersProfile on User {\n    ...UsersMinimumInfo\n    oldSlugs\n    groups\n    jobTitle\n    organization\n    careerStage\n    biography {\n      ...RevisionDisplay\n    }\n    howOthersCanHelpMe {\n      ...RevisionDisplay\n    }\n    howICanHelpOthers {\n      ...RevisionDisplay\n    }\n    profileTagIds\n    profileTags {\n      ...TagPreviewFragment\n    }\n    organizerOfGroupIds\n    organizerOfGroups {\n      ...localGroupsBase\n    }\n    programParticipation\n    website\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    githubProfileURL\n    frontpagePostCount\n    afSequenceCount\n    afSequenceDraftCount\n    sequenceDraftCount\n    moderationStyle\n    moderationGuidelines {\n      ...RevisionDisplay\n    }\n    bannedUserIds\n    location\n    googleLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    mongoLocation\n    shortformFeedId\n    viewUnreviewedComments\n    auto_subscribe_to_my_posts\n    auto_subscribe_to_my_comments\n    autoSubscribeAsOrganizer\n    petrovPressedButtonDate\n    petrovOptOut\n    sortDraftsBy\n    email\n    emails\n    banned\n    ...SharedUserBooleans\n    noindex\n    paymentEmail\n    paymentInfo\n    goodHeartTokens\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n  }\n": typeof types.UsersProfileFragmentDoc,
    "\n  fragment UsersCurrent on User {\n    ...UsersProfile\n\n    beta\n    email\n    services\n    acceptedTos\n    pageUrl\n    banned\n    isReviewed\n    nullifyVotes\n    hideIntercom\n    hideNavigationSidebar\n    hideCommunitySection\n    expandedFrontpageSections\n    hidePostsRecommendations\n    currentFrontpageFilter\n    frontpageSelectedTab\n    frontpageFilterSettings\n    hideFrontpageFilterSettingsDesktop\n    allPostsTimeframe\n    allPostsSorting\n    allPostsFilter\n    allPostsShowLowKarma\n    allPostsIncludeEvents\n    allPostsHideCommunity\n    allPostsOpenSettings\n    draftsListSorting\n    draftsListShowArchived\n    draftsListShowShared\n    lastNotificationsCheck\n    bannedUserIds\n    bannedPersonalUserIds\n    moderationStyle\n    noKibitz\n    showHideKarmaOption\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    commentSorting\n    location\n    googleLocation\n    mongoLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    nearbyEventsNotifications\n    nearbyEventsNotificationsLocation\n    nearbyEventsNotificationsRadius\n    nearbyPeopleNotificationThreshold\n    hideFrontpageMap\n    emailSubscribedToCurated\n    subscribedToDigest\n    unsubscribeFromAll\n    emails\n    whenConfirmationEmailSent\n    hideSubscribePoke\n    hideMeetupsPoke\n    hideHomeRHS\n    noCollapseCommentsFrontpage\n    noCollapseCommentsPosts\n    noSingleLineComments\n    showCommunityInRecentDiscussion\n    karmaChangeNotifierSettings\n    karmaChangeLastOpened\n    shortformFeedId\n    viewUnreviewedComments\n    recommendationSettings\n    theme\n\n    bookmarkedPostsMetadata\n\n    hiddenPostsMetadata\n    auto_subscribe_to_my_posts\n    auto_subscribe_to_my_comments\n    autoSubscribeAsOrganizer\n    noExpandUnreadCommentsReview\n    reviewVotesQuadratic\n    reviewVotesQuadratic2019\n    reviewVotesQuadratic2020\n    hideTaggingProgressBar\n    hideFrontpageBookAd\n    hideFrontpageBook2019Ad\n\n    abTestKey\n    abTestOverrides\n\n    sortDraftsBy\n    reactPaletteStyle\n\n    petrovPressedButtonDate\n    petrovLaunchCodeDate\n    petrovOptOut\n    lastUsedTimezone\n    ...SharedUserBooleans\n\n    acknowledgedNewUserGuidelines\n    notificationSubforumUnread\n    subforumPreferredLayout\n    \n    hideJobAdUntil\n    criticismTipsDismissed\n    \n    allowDatadogSessionReplay\n    hideFrontpageBook2020Ad\n\n    hideDialogueFacilitation\n    optedInToDialogueFacilitation\n    revealChecksToAdmins\n    notificationNewDialogueChecks\n    notificationYourTurnMatchForm\n\n    showDialoguesList\n    showMyDialogues\n    showMatches\n    showRecommendedPartners\n    hideActiveDialogueUsers\n\n    hideSunshineSidebar\n    optedOutOfSurveys\n    postGlossariesPinned\n    generateJargonForDrafts\n    generateJargonForPublishedPosts\n  }\n": typeof types.UsersCurrentFragmentDoc,
    "\n  fragment UsersCurrentCommentRateLimit on User {\n    _id\n    rateLimitNextAbleToComment(postId: $postId)\n  }\n": typeof types.UsersCurrentCommentRateLimitFragmentDoc,
    "\n  fragment UsersCurrentPostRateLimit on User {\n    _id\n    rateLimitNextAbleToPost(eventForm: $eventForm)\n  }\n": typeof types.UsersCurrentPostRateLimitFragmentDoc,
    "\n  fragment UserBookmarkedPosts on User {\n    _id\n    bookmarkedPosts {\n      ...PostsList\n    }\n  }\n": typeof types.UserBookmarkedPostsFragmentDoc,
    "\n  fragment UserKarmaChanges on User {\n    _id\n    karmaChanges {\n      totalChange\n      updateFrequency\n      startDate\n      endDate\n      nextBatchDate\n      posts {\n        _id\n        scoreChange\n        postId\n        title\n        slug\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n      }\n      comments {\n        _id\n        scoreChange\n        commentId\n        description\n        postId\n        postTitle\n        postSlug\n        tagSlug\n        tagName\n        tagCommentType\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n      }\n      tagRevisions {\n        _id\n        scoreChange\n        tagId\n        tagSlug\n        tagName\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n      }\n      todaysKarmaChanges {\n        posts {\n          _id\n          scoreChange\n          postId\n          title\n          slug\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n        comments {\n          _id\n          scoreChange\n          commentId\n          description\n          postId\n          postTitle\n          postSlug\n          tagSlug\n          tagName\n          tagCommentType\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n        tagRevisions {\n          _id\n          scoreChange\n          tagId\n          tagSlug\n          tagName\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n      }\n      thisWeeksKarmaChanges {\n        posts {\n          _id\n          scoreChange\n          postId\n          title\n          slug\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n        comments {\n          _id\n          scoreChange\n          commentId\n          description\n          postId\n          postTitle\n          postSlug\n          tagSlug\n          tagName\n          tagCommentType\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n        tagRevisions {\n          _id\n          scoreChange\n          tagId\n          tagSlug\n          tagName\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n      }\n    }\n  }\n": typeof types.UserKarmaChangesFragmentDoc,
    "\n  fragment UsersBannedFromUsersModerationLog on User {\n    _id\n    slug\n    displayName\n    bannedUserIds\n    bannedPersonalUserIds\n  }\n": typeof types.UsersBannedFromUsersModerationLogFragmentDoc,
    "\n  fragment SunshineUsersList on User {\n    ...UsersMinimumInfo\n    karma\n    htmlBio\n    website\n    createdAt\n    email\n    emails\n    commentCount\n    maxCommentCount\n    postCount\n    maxPostCount\n    voteCount\n    smallUpvoteCount\n    bigUpvoteCount\n    smallDownvoteCount\n    bigDownvoteCount\n    banned\n    reviewedByUserId\n    reviewedAt\n    signUpReCaptchaRating\n    mapLocation\n    needsReview\n    sunshineNotes\n    sunshineFlagged\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n    snoozedUntilContentCount\n    nullifyVotes\n    deleteContent\n    \n    moderatorActions {\n      ...ModeratorActionDisplay\n    }\n    usersContactedBeforeReview\n    associatedClientIds {\n      clientId\n      firstSeenReferrer\n      firstSeenLandingPage\n      userIds\n    }\n    altAccountsDetected\n\n    voteReceivedCount\n    smallUpvoteReceivedCount\n    bigUpvoteReceivedCount\n    smallDownvoteReceivedCount\n    bigDownvoteReceivedCount\n\n    recentKarmaInfo\n    lastNotificationsCheck\n  }\n": typeof types.SunshineUsersListFragmentDoc,
    "\n  fragment UserAltAccountsFragment on User {\n    ...SunshineUsersList\n    IPs\n  }\n": typeof types.UserAltAccountsFragmentFragmentDoc,
    "\n  fragment SharedUserBooleans on User {\n    walledGardenInvite\n    hideWalledGardenUI\n    walledGardenPortalOnboarded\n    taggingDashboardCollapsed\n    usernameUnset\n  }\n": typeof types.SharedUserBooleansFragmentDoc,
    "\n  fragment UsersMapEntry on User {\n    _id\n    displayName\n    username\n    fullName\n    slug\n    mapLocationLatLng {\n      lat\n      lng\n    }\n    mapLocationSet\n    htmlMapMarkerText\n  }\n": typeof types.UsersMapEntryFragmentDoc,
    "\n  fragment UsersEdit on User {\n    ...UsersCurrent\n    biography {\n      ...RevisionEdit\n    }\n    # Moderation Guidelines editor information\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n\n    # UI Settings\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    hideIntercom\n    commentSorting\n    currentFrontpageFilter\n    noCollapseCommentsPosts\n    noCollapseCommentsFrontpage\n    noSingleLineComments\n    hideCommunitySection\n    showCommunityInRecentDiscussion\n    hidePostsRecommendations\n    beta\n    theme\n\n    # Emails\n    email\n    whenConfirmationEmailSent\n    emailSubscribedToCurated\n    subscribedToDigest\n    unsubscribeFromAll\n    hasAuth0Id\n\n    # Moderation\n    moderatorAssistance\n    collapseModerationGuidelines\n    bannedUserIds\n    bannedPersonalUserIds\n    noKibitz\n    showHideKarmaOption\n\n    # Ban & Purge\n    nullifyVotes\n    deleteContent\n    banned\n\n    # Name\n    username\n    displayName\n    fullName\n\n    # Location\n    mongoLocation\n    googleLocation\n    location\n    \n    # Map Location (public)\n    mapLocation\n    \n    # Privacy settings\n    hideFromPeopleDirectory\n    allowDatadogSessionReplay\n\n    # Admin & Review\n    reviewedByUserId\n\n    # Alignment Forum\n    reviewForAlignmentForumUserId\n    groups\n    afApplicationText\n    afSubmittedApplication\n\n    # Karma Settings\n    karmaChangeLastOpened\n    karmaChangeNotifierSettings\n\n    notificationShortformContent\n    notificationCommentsOnSubscribedPost\n    notificationRepliesToMyComments\n    notificationRepliesToSubscribedComments\n    notificationSubscribedUserPost\n    notificationSubscribedUserComment\n    notificationSubscribedTagPost\n    notificationSubscribedSequencePost\n    notificationPostsInGroups\n    notificationPrivateMessage\n    notificationSharedWithMe\n    notificationAlignmentSubmissionApproved\n    notificationEventInRadius\n    notificationRSVPs\n    notificationCommentsOnDraft\n    notificationPostsNominatedReview\n    notificationGroupAdministration\n    notificationSubforumUnread\n    notificationNewMention\n    notificationNewDialogueChecks\n    notificationYourTurnMatchForm\n\n    hideFrontpageMap\n    hideTaggingProgressBar\n    hideFrontpageBookAd\n    hideFrontpageBook2020Ad\n\n    deleted\n    permanentDeletionRequestedAt\n\n    twitterProfileURLAdmin\n  }\n": typeof types.UsersEditFragmentDoc,
    "\n  fragment UsersAdmin on User {\n    _id\n    username\n    createdAt\n    isAdmin\n    displayName\n    email\n    slug\n    groups\n    services\n    karma\n  }\n": typeof types.UsersAdminFragmentDoc,
    "\n  fragment UsersWithReviewInfo on User {\n    ...UsersMinimumInfo\n    reviewVoteCount\n    email\n  }\n": typeof types.UsersWithReviewInfoFragmentDoc,
    "\n  fragment UsersProfileEdit on User {\n    _id\n    slug\n    displayName\n    jobTitle\n    organization\n    careerStage\n    profileImageId\n    biography {\n      ...RevisionEdit\n    }\n    howOthersCanHelpMe {\n      ...RevisionEdit\n    }\n    howICanHelpOthers {\n      ...RevisionEdit\n    }\n    profileTagIds\n    organizerOfGroupIds\n    organizerOfGroups {\n      ...localGroupsBase\n    }\n    programParticipation\n    mapLocation\n    website\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    githubProfileURL\n  }\n": typeof types.UsersProfileEditFragmentDoc,
    "\n  fragment UsersCrosspostInfo on User {\n    _id\n    username\n    slug\n    fmCrosspostUserId\n  }\n": typeof types.UsersCrosspostInfoFragmentDoc,
    "\n  fragment UsersOptedInToDialogueFacilitation on User {\n    _id\n    displayName\n  }\n": typeof types.UsersOptedInToDialogueFacilitationFragmentDoc,
    "\n  fragment UserOnboardingAuthor on User {\n    _id\n    displayName\n    profileImageId\n    karma\n    jobTitle\n    organization\n  }\n": typeof types.UserOnboardingAuthorFragmentDoc,
    "\n  fragment UsersSocialMediaInfo on User {\n    ...UsersProfile\n    twitterProfileURLAdmin\n  }\n": typeof types.UsersSocialMediaInfoFragmentDoc,
    "\n  fragment SuggestAlignmentUser on User {\n    ...UsersMinimumInfo\n    afKarma\n    afPostCount\n    afCommentCount\n    reviewForAlignmentForumUserId\n    groups\n    afApplicationText\n    afSubmittedApplication\n  }\n": typeof types.SuggestAlignmentUserFragmentDoc,
    "\n  fragment TagRelVotes on Vote {\n    _id\n    userId\n    voteType\n    power\n    documentId\n    votedAt\n    isUnvote\n    tagRel {\n      ...WithVoteTagRel\n    }\n  }\n": typeof types.TagRelVotesFragmentDoc,
    "\n  fragment TagVotingActivity on Vote {\n    ...TagRelVotes\n    tagRel {\n      ...TagRelFragment\n    }\n  }\n": typeof types.TagVotingActivityFragmentDoc,
    "\n  fragment UserVotes on Vote {\n    _id\n    userId\n    voteType\n    power\n    cancelled\n    documentId\n    votedAt\n    isUnvote\n    collectionName\n  }\n": typeof types.UserVotesFragmentDoc,
    "\n  fragment UserVotesWithDocument on Vote {\n    ...UserVotes\n    comment {\n      ...CommentsListWithParentMetadata\n    }\n    post {\n      ...PostsListWithVotes\n    }\n  }\n": typeof types.UserVotesWithDocumentFragmentDoc,
    "\n    query getCurrentUser {\n      currentUser {\n        ...UsersCurrent\n      }\n    }\n    \n  ": typeof types.GetCurrentUserDocument,
    "\n    query Lightcone2024FundraiserStripeAmounts {\n      Lightcone2024FundraiserStripeAmounts\n    }\n  ": typeof types.Lightcone2024FundraiserStripeAmountsDocument,
    "\n  fragment SubscribedPostAndCommentsFeed on SubscribedPostAndComments {\n    _id\n    post {\n      ...PostsList\n    }\n    comments {\n      ...CommentsList\n    }\n    expandCommentIds\n    postIsFromSubscribedUser\n  }\n": typeof types.SubscribedPostAndCommentsFeedFragmentDoc,
};
const documents: Documents = {
    "\n    mutation revokeGoogleServiceAccountTokens {\n      revokeGoogleServiceAccountTokens\n    }\n  ": types.RevokeGoogleServiceAccountTokensDocument,
    "query AdminMetadataQuery {\n    AdminMetadata\n  }": types.AdminMetadataQueryDocument,
    "\n    query SearchSynonyms {\n      SearchSynonyms\n    }\n  ": types.SearchSynonymsDocument,
    "mutation UpdateSearchSynonyms($synonyms: [String!]!) {\n      UpdateSearchSynonyms(synonyms: $synonyms)\n    }": types.UpdateSearchSynonymsDocument,
    "\n    query randomUser($userIsAuthor: String!) {\n      GetRandomUser(userIsAuthor: $userIsAuthor) {\n        ...UsersMinimumInfo\n      }\n    }\n    \n  ": types.RandomUserDocument,
    "\n    query MigrationsDashboardQuery {\n      MigrationsDashboard {\n        migrations {\n          name\n          dateWritten\n          runs { name started finished succeeded }\n          lastRun\n        }\n      }\n    }\n  ": types.MigrationsDashboardQueryDocument,
    "\n      query getReadHistory($limit: Int, $filter: PostReviewFilter, $sort: PostReviewSort) {\n        UserReadHistory(limit: $limit, filter: $filter, sort: $sort) {\n          posts {\n            ...PostsListWithVotes\n            lastVisitedAt\n          }\n        }\n      }\n      \n    ": types.GetReadHistoryDocument,
    "\n    mutation upsertUserTypingIndicator($documentId: String!) {\n      upsertUserTypingIndicator(documentId: $documentId) {\n        ...TypingIndicatorInfo\n      }\n    }\n    \n  ": types.UpsertUserTypingIndicatorDocument,
    "\n    mutation sendVertexMediaCompleteEventMutation($postId: String!, $attributionId: String) {\n      sendVertexMediaCompleteEvent(postId: $postId, attributionId: $attributionId)\n    }\n  ": types.SendVertexMediaCompleteEventMutationDocument,
    "\n    mutation sendVertexViewHomePageEventMutation {\n      sendVertexViewHomePageEvent\n    }\n  ": types.SendVertexViewHomePageEventMutationDocument,
    "\n    mutation lockThread($commentId: String!, $until: String) {\n      lockThread(commentId: $commentId, until: $until)\n    }\n  ": types.LockThreadDocument,
    "\n    mutation unlockThread($commentId: String!) {\n      unlockThread(commentId: $commentId)\n    }\n  ": types.UnlockThreadDocument,
    "\n    query getRssPostChanges($postId: String!) {\n      RssPostChanges(postId: $postId) {\n        isChanged\n        newHtml\n        htmlDiff\n      }\n    }\n  ": types.GetRssPostChangesDocument,
    "\n    mutation setIsHidden($postId: String!, $isHidden: Boolean!) {\n      setIsHidden(postId: $postId, isHidden: $isHidden) {\n        ...UsersCurrent\n      }\n    }\n    \n  ": types.SetIsHiddenDocument,
    "\n    query getDigestPosts($num: Int) {\n      DigestPosts(num: $num) {\n        ...PostsListWithVotes\n      }\n    }\n    \n  ": types.GetDigestPostsDocument,
    "\n      query getUserReadsPerCoreTag($userId: String!) {\n        UserReadsPerCoreTag(userId: $userId) {\n          tagId\n          userReadCount\n        }\n      }\n    ": types.GetUserReadsPerCoreTagDocument,
    "\n    query getDigestPlannerData($digestId: String, $startDate: Date, $endDate: Date) {\n      DigestPlannerData(digestId: $digestId, startDate: $startDate, endDate: $endDate) {\n        post {\n          ...PostsListWithVotes\n        }\n        digestPost {\n          _id\n          emailDigestStatus\n          onsiteDigestStatus\n        }\n        rating\n      }\n    }\n    \n    ": types.GetDigestPlannerDataDocument,
    "\n    mutation NewUserCompleteProfile(\n      $username: String!,\n      $subscribeToDigest: Boolean!,\n      $email: String,\n      $acceptedTos: Boolean\n    ) {\n      NewUserCompleteProfile(\n        username: $username,\n        subscribeToDigest: $subscribeToDigest,\n        email: $email,\n        acceptedTos: $acceptedTos\n      ) {\n        username\n        slug\n        displayName\n      }\n    }\n  ": types.NewUserCompleteProfileDocument,
    "\n    query isDisplayNameTaken($displayName: String!) {\n      IsDisplayNameTaken(displayName: $displayName)\n    }\n  ": types.IsDisplayNameTakenDocument,
    "\n    query getWrappedData($userId: String!, $year: Int!) {\n      UserWrappedDataByYear(userId: $userId, year: $year) {\n        engagementPercentile\n        postsReadCount\n        totalSeconds\n        daysVisited\n        mostReadTopics {\n          name\n          shortName\n          slug\n          count\n        }\n        relativeMostReadCoreTopics {\n          tagId\n          tagName\n          tagShortName\n          userReadCount\n          readLikelihoodRatio\n        }\n        mostReadAuthors {\n          _id\n          displayName\n          slug\n          profileImageId\n          count\n          engagementPercentile\n        }\n        topPosts {\n          _id\n          title\n          slug\n          baseScore\n        }\n        postCount\n        authorPercentile\n        topComment {\n          _id\n          postedAt\n          postId\n          postTitle\n          postSlug\n          baseScore\n          extendedScore\n          contents {\n            html\n          }\n        }\n        commentCount\n        commenterPercentile\n        topShortform {\n          _id\n          postedAt\n          postId\n          baseScore\n          extendedScore\n          contents {\n            html\n          }\n        }\n        shortformCount\n        shortformPercentile\n        karmaChange\n        combinedKarmaVals {\n          date\n          postKarma\n          commentKarma\n        }\n        mostReceivedReacts {\n          name\n          count\n        }\n        personality\n      }\n    }\n  ": types.GetWrappedDataDocument,
    "\n    mutation sendNewDialogueMessageNotification($postId: String!, $dialogueHtml: String!) {\n      sendNewDialogueMessageNotification(postId: $postId, dialogueHtml: $dialogueHtml)\n    }\n  ": types.SendNewDialogueMessageNotificationDocument,
    "\n    query getPostIsCriticism($args: JSON) {\n      PostIsCriticism(args: $args)\n    }\n    ": types.GetPostIsCriticismDocument,
    "\n    mutation autosaveRevision($postId: String!, $contents: AutosaveContentType!) {\n      autosaveRevision(postId: $postId, contents: $contents) {\n        ...RevisionEdit\n      }\n    }\n    \n  ": types.AutosaveRevisionDocument,
    "\n    query LinkSharingQuery($postId: String!, $linkSharingKey: String!) {\n      getLinkSharedPost(postId: $postId, linkSharingKey: $linkSharingKey) {\n        ...PostsEdit\n      }\n    }\n    \n  ": types.LinkSharingQueryDocument,
    "\n    mutation revertPostToRevision($postId: String!, $revisionId: String!) {\n      revertPostToRevision(postId: $postId, revisionId: $revisionId) {\n        ...PostsEdit\n      }\n    }\n    \n  ": types.RevertPostToRevisionDocument,
    "\n    mutation revertToRevision($tagId: String!, $revertToRevisionId: String!, $contributorsLimit: Int) {\n      revertTagToRevision(tagId: $tagId, revertToRevisionId: $revertToRevisionId) {\n        ...TagPageFragment\n      }\n    }\n    \n  ": types.RevertToRevisionDocument,
    "\n    query ConvertDocument($document: JSON, $targetFormat: String) {\n      convertDocument(document: $document, targetFormat: $targetFormat)\n    }\n  ": types.ConvertDocumentDocument,
    "\n    mutation unlinkCrossposter {\n      unlinkCrossposter\n    }\n  ": types.UnlinkCrossposterDocument,
    "\n    mutation AddForumEventVote($forumEventId: String!, $x: Float!, $delta: Float, $postIds: [String]) {\n      AddForumEventVote(forumEventId: $forumEventId, x: $x, delta: $delta, postIds: $postIds)\n    }\n  ": types.AddForumEventVoteDocument,
    "\n    mutation RemoveForumEventVote($forumEventId: String!) {\n      RemoveForumEventVote(forumEventId: $forumEventId)\n    }\n  ": types.RemoveForumEventVoteDocument,
    "\n    mutation RemoveForumEventSticker($forumEventId: String!, $stickerId: String!) {\n      RemoveForumEventSticker(forumEventId: $forumEventId, stickerId: $stickerId)\n    }\n  ": types.RemoveForumEventStickerDocument,
    "\n    query MultiPostAnalyticsQuery($userId: String, $postIds: [String], $sortBy: String, $desc: Boolean, $limit: Int) {\n      MultiPostAnalytics(userId: $userId, postIds: $postIds, sortBy: $sortBy, desc: $desc, limit: $limit) {\n        posts {\n          _id\n          title\n          slug\n          postedAt\n          views\n          uniqueViews\n          reads\n          meanReadingTime\n          karma\n          comments\n        }\n        totalCount\n      }\n    }\n  ": types.MultiPostAnalyticsQueryDocument,
    "\n    query AnalyticsSeriesQuery($userId: String, $postIds: [String], $startDate: Date, $endDate: Date) {\n      AnalyticsSeries(userId: $userId, postIds: $postIds, startDate: $startDate, endDate: $endDate) {\n        date\n        views\n        reads\n        karma\n        comments\n      }\n    }\n  ": types.AnalyticsSeriesQueryDocument,
    "\n    mutation setIsBookmarked($postId: String!, $isBookmarked: Boolean!) {\n      setIsBookmarked(postId: $postId, isBookmarked: $isBookmarked) {\n        ...UsersCurrent\n      }\n    }\n    \n  ": types.SetIsBookmarkedDocument,
    "\n    query CurrentFrontpageSurvey {\n      CurrentFrontpageSurvey {\n        ...SurveyScheduleMinimumInfo\n      }\n    }\n    \n  ": types.CurrentFrontpageSurveyDocument,
    "\n      mutation UserExpandFrontpageSection($section: String!, $expanded: Boolean!) {\n        UserExpandFrontpageSection(section: $section, expanded: $expanded)\n      }\n    ": types.UserExpandFrontpageSectionDocument,
    "\n    mutation initiateConversation($participantIds: [String!]!, $af: Boolean, $moderator: Boolean) {\n      initiateConversation(participantIds: $participantIds, af: $af, moderator: $moderator) {\n        ...ConversationsMinimumInfo\n      }\n    }\n    \n  ": types.InitiateConversationDocument,
    "\n      mutation markConversationRead($conversationId: String!) {\n        markConversationRead(conversationId: $conversationId)\n      }\n    ": types.MarkConversationReadDocument,
    "\n    query PostAnalyticsQuery($postId: String!) {\n      PostAnalytics(postId: $postId) {\n        allViews\n        uniqueClientViews\n        uniqueClientViews10Sec\n        medianReadingTime\n        uniqueClientViews5Min\n        uniqueClientViewsSeries {\n          date\n          uniqueClientViews\n        }\n      }\n    }\n  ": types.PostAnalyticsQueryDocument,
    "\n    mutation increasePostViewCountMutation($postId: String) {\n      increasePostViewCount(postId: $postId)\n    }\n  ": types.IncreasePostViewCountMutationDocument,
    "\n    mutation sendVertexViewItemEventMutation($postId: String!, $attributionId: String) {\n      sendVertexViewItemEvent(postId: $postId, attributionId: $attributionId)\n    }\n  ": types.SendVertexViewItemEventMutationDocument,
    "\n    mutation markPostCommentsRead($postId: String!) {\n      markPostCommentsRead(postId: $postId)\n    }\n  ": types.MarkPostCommentsReadDocument,
    "\n    mutation RefreshDbSettings {\n      RefreshDbSettings\n    }\n  ": types.RefreshDbSettingsDocument,
    "\n    query UnreadNotificationCountQuery {\n      unreadNotificationCounts {\n        unreadNotifications\n        unreadPrivateMessages\n        faviconBadgeNumber\n        checkedAt\n      }\n    }\n  ": types.UnreadNotificationCountQueryDocument,
    "\n    mutation getNewJargonTerms($postId: String!, $glossaryPrompt: String, $examplePost: String, $exampleTerm: String, $exampleAltTerm: String, $exampleDefinition: String) {\n      getNewJargonTerms(postId: $postId, glossaryPrompt: $glossaryPrompt, examplePost: $examplePost, exampleTerm: $exampleTerm, exampleAltTerm: $exampleAltTerm, exampleDefinition: $exampleDefinition) {\n        ...JargonTerms\n      }\n    }\n    \n  ": types.GetNewJargonTermsDocument,
    "\n    query getPostsWithApprovedJargon($limit: Int!) {\n      PostsWithApprovedJargon(limit: $limit) {\n        results {\n          post {\n            ...PostsListWithVotes\n          }\n          jargonTerms {\n            ...JargonTerms\n          }\n        }\n      }\n    }\n    \n    \n  ": types.GetPostsWithApprovedJargonDocument,
    "\n    query ArbitalPageRequest {\n      ArbitalPageData(pageAlias: \"\") {\n        title\n        html\n      }\n    }\n  ": types.ArbitalPageRequestDocument,
    "\n      query EmailPreviewQuery($notificationIds: [String], $postId: String) {\n        EmailPreview(notificationIds: $notificationIds, postId: $postId) { to subject html text }\n      }\n  ": types.EmailPreviewQueryDocument,
    "\n    query getNotificationDisplays($limit: Int, $type: String) {\n      NotificationDisplays(limit: $limit, type: $type) {\n        results\n      }\n    }\n  ": types.GetNotificationDisplaysDocument,
    "\n    mutation MarkAllNotificationsAsRead {\n      MarkAllNotificationsAsRead\n    }\n  ": types.MarkAllNotificationsAsReadDocument,
    "\n    query ActiveTagCount {\n      ActiveTagCount\n    }\n  ": types.ActiveTagCountDocument,
    "\n    mutation importUrlAsDraftPost($url: String!) {\n      importUrlAsDraftPost(url: $url) {\n        alreadyExists\n        post {\n          _id\n          slug\n          title\n          content\n          url\n        }\n      }\n    }\n  ": types.ImportUrlAsDraftPostDocument,
    "\n      query latestGoogleDocMetadata($postId: String!, $version: String) {\n        latestGoogleDocMetadata(postId: $postId, version: $version)\n      }\n    ": types.LatestGoogleDocMetadataDocument,
    "\n      query CanAccessGoogleDoc($fileUrl: String!) {\n        CanAccessGoogleDoc(fileUrl: $fileUrl)\n      }\n    ": types.CanAccessGoogleDocDocument,
    "\n      mutation ImportGoogleDoc($fileUrl: String!, $postId: String) {\n        ImportGoogleDoc(fileUrl: $fileUrl, postId: $postId) {\n          ...PostsBase\n        }\n      }\n      \n    ": types.ImportGoogleDocDocument,
    "\n    query LatestDialogueMessages($dialogueId: String!, $unreadCount: Int!) {\n      latestDialogueMessages(dialogueId: $dialogueId, numMessages: $unreadCount)\n    }\n  ": types.LatestDialogueMessagesDocument,
    "\n    mutation flipSplashArtImage($reviewWinnerArtId: String!) {\n      flipSplashArtImage(reviewWinnerArtId: $reviewWinnerArtId)\n    }\n  ": types.FlipSplashArtImageDocument,
    "\n    mutation AcceptCoauthorRequest($postId: String, $userId: String, $accept: Boolean) {\n        acceptCoauthorRequest(postId: $postId, userId: $userId, accept: $accept) {\n          ...PostsDetails\n        }\n    }\n    \n  ": types.AcceptCoauthorRequestDocument,
    "\n    mutation RegisterRSVP($postId: String, $name: String, $email: String, $private: Boolean, $response: String) {\n        RSVPToEvent(postId: $postId, name: $name, email: $email, private: $private, response: $response) {\n        ...PostsDetails\n        }\n    }\n    \n  ": types.RegisterRsvpDocument,
    "\n    mutation CancelRSVPToEvent($postId: String, $name: String, $userId: String) {\n        CancelRSVPToEvent(postId: $postId, name: $name, userId: $userId) {\n        ...PostsDetails\n        }\n    }\n    \n  ": types.CancelRsvpToEventDocument,
    "\n      mutation observeRecommendation($postId: String!) {\n        observeRecommendation(postId: $postId)\n      }\n    ": types.ObserveRecommendationDocument,
    "\n      mutation clickRecommendation($postId: String!) {\n        clickRecommendation(postId: $postId)\n      }\n    ": types.ClickRecommendationDocument,
    "\n    query ContinueReadingQuery {\n      ContinueReading {\n        sequence {\n          ...SequenceContinueReadingFragment\n        }\n        collection {\n          ...CollectionContinueReadingFragment\n        }\n        nextPost {\n          ...PostsListWithVotes\n        }\n        numRead\n        numTotal\n        lastReadTime\n      }\n    }\n    \n  ": types.ContinueReadingQueryDocument,
    "\n    mutation dismissRecommendation($postId: String) {\n      dismissRecommendation(postId: $postId)\n    }\n  ": types.DismissRecommendationDocument,
    "\n      query RecommendationsQuery($count: Int, $algorithm: JSON) {\n        Recommendations(count: $count, algorithm: $algorithm) {\n          ...PostsListWithVotesAndSequence\n        }\n      }\n      \n    ": types.RecommendationsQueryDocument,
    "\n    query BestOfLessWrongAdmin {\n      GetAllReviewWinners {\n        ...PostsTopItemInfo\n      }\n    }\n    \n  ": types.BestOfLessWrongAdminDocument,
    "\n    mutation GenerateCoverImagesForPost($postId: String!, $prompt: String) {\n      generateCoverImagesForPost(postId: $postId, prompt: $prompt) { \n        _id\n      }\n    }\n  ": types.GenerateCoverImagesForPostDocument,
    "\n      query getPostsUserCommentedOn($limit: Int, $filter: PostReviewFilter, $sort: PostReviewSort) {\n        PostsUserCommentedOn(limit: $limit, filter: $filter, sort: $sort) {\n          posts {\n            ...PostsListWithVotes\n          }\n        }\n      }\n      \n    ": types.GetPostsUserCommentedOnDocument,
    "\n    query GivingSeasonHeartsQuery($electionName: String!) {\n      GivingSeasonHearts(electionName: $electionName) {\n        userId\n        displayName\n        x\n        y\n        theta\n      }\n    }\n  ": types.GivingSeasonHeartsQueryDocument,
    "\n      mutation AddGivingSeasonHeart(\n        $electionName: String!,\n        $x: Float!,\n        $y: Float!,\n        $theta: Float!\n      ) {\n        AddGivingSeasonHeart(\n          electionName: $electionName,\n          x: $x,\n          y: $y,\n          theta: $theta\n        ) {\n          userId\n          displayName\n          x\n          y\n          theta\n        }\n      }\n    ": types.AddGivingSeasonHeartDocument,
    "\n      mutation RemoveGivingSeasonHeart($electionName: String!) {\n        RemoveGivingSeasonHeart(electionName: $electionName) {\n          userId\n          displayName\n          x\n          y\n          theta\n        }\n      }\n    ": types.RemoveGivingSeasonHeartDocument,
    "\n    mutation submitReviewVote($postId: String, $qualitativeScore: Int, $quadraticChange: Int, $newQuadraticScore: Int, $comment: String, $year: String, $dummy: Boolean) {\n      submitReviewVote(postId: $postId, qualitativeScore: $qualitativeScore, quadraticChange: $quadraticChange, comment: $comment, newQuadraticScore: $newQuadraticScore, year: $year, dummy: $dummy) {\n        ...PostsReviewVotingList\n      }\n    }\n     \n  ": types.SubmitReviewVoteDocument,
    "\n      query RotatingReviewWinnerSpotlight {\n        GetAllReviewWinners {\n          ...PostForReviewWinnerItem\n        }\n      }\n      \n    ": types.RotatingReviewWinnerSpotlightDocument,
    "\n    query RevisionsDiff($collectionName: String!, $fieldName: String!, $id: String!, $beforeRev: String, $afterRev: String!, $trim: Boolean) {\n      RevisionsDiff(collectionName: $collectionName, fieldName: $fieldName, id: $id, beforeRev: $beforeRev, afterRev: $afterRev, trim: $trim)\n    }\n  ": types.RevisionsDiffDocument,
    "\n    mutation launchPetrovMissile($launchCode: String) {\n      PetrovDayLaunchMissile(launchCode: $launchCode) {\n        launchCode\n      }\n    }\n  ": types.LaunchPetrovMissileDocument,
    "\n    query petrovDayLaunchResolvers {\n      PetrovDayCheckIfIncoming {\n        launched\n        createdAt\n      }\n    }\n  ": types.PetrovDayLaunchResolversDocument,
    "\n    query petrov2024checkIfNuked {\n      petrov2024checkIfNuked\n    }\n  ": types.Petrov2024checkIfNukedDocument,
    "\n    query petrovDay2024Resolvers {\n      PetrovDay2024CheckNumberOfIncoming {\n        count\n      }\n    }\n  ": types.PetrovDay2024ResolversDocument,
    "\n    query GetAllReviewWinners {\n      GetAllReviewWinners {\n        ...PostsTopItemInfo\n      }\n    }\n    \n  ": types.GetAllReviewWinnersDocument,
    "\n    mutation updateContinueReading($sequenceId: String!, $postId: String!) {\n      updateContinueReading(sequenceId: $sequenceId, postId: $postId)\n    }\n  ": types.UpdateContinueReadingDocument,
    "\n    query ModeratorIPAddressInfo($ipAddress: String!) {\n      moderatorViewIPAddress(ipAddress: $ipAddress) {\n        ip\n        userIds\n      }\n    }\n  ": types.ModeratorIpAddressInfoDocument,
    "\n    mutation editSurvey($surveyId: String!, $name: String!, $questions: [SurveyQuestionInfo!]!) {\n      editSurvey(surveyId: $surveyId, name: $name, questions: $questions) {\n        ...SurveyMinimumInfo\n      }\n    }\n    \n  ": types.EditSurveyDocument,
    "\n    mutation addPostsToTag($tagId: String, $postId: String) {\n      addOrUpvoteTag(tagId: $tagId, postId: $postId) {\n        ...TagRelCreationFragment\n      }\n    }\n    \n  ": types.AddPostsToTagDocument,
    "\n    mutation addOrUpvoteTag($tagId: String, $postId: String) {\n      addOrUpvoteTag(tagId: $tagId, postId: $postId) {\n        ...TagRelMinimumFragment\n      }\n    }\n    \n  ": types.AddOrUpvoteTagDocument,
    "\n    query getRandomTag {\n      RandomTag {slug}\n    }\n  ": types.GetRandomTagDocument,
    "\n    mutation reorderSummaries($parentDocumentId: String!, $parentDocumentCollectionName: String!, $summaryIds: [String!]!) {\n      reorderSummaries(parentDocumentId: $parentDocumentId, parentDocumentCollectionName: $parentDocumentCollectionName, summaryIds: $summaryIds)\n    }\n  ": types.ReorderSummariesDocument,
    "\n    query getTagUpdates($before: Date!, $after: Date!) {\n      TagUpdatesInTimeBlock(before: $before, after: $after) {\n        tag {\n          ...TagHistoryFragment\n        }\n        revisionIds\n        commentCount\n        commentIds\n        lastRevisedAt\n        lastCommentedAt\n        added\n        removed\n        users {\n          ...UsersMinimumInfo\n        }\n        documentDeletions {\n          userId\n          documentId\n          netChange\n          type\n          docFields {\n            _id\n            slug\n            tabTitle\n            tabSubtitle\n          }\n          createdAt\n        }\n      }\n    }\n    \n  ": types.GetTagUpdatesDocument,
    "\n    mutation mergeTags(\n      $sourceTagId: String!\n      $targetTagId: String!\n      $transferSubtags: Boolean!\n      $redirectSource: Boolean!\n    ) {\n      mergeTags(\n        sourceTagId: $sourceTagId\n        targetTagId: $targetTagId\n        transferSubtags: $transferSubtags\n        redirectSource: $redirectSource\n      )\n    }\n  ": types.MergeTagsDocument,
    "\n    mutation promoteLensToMain($lensId: String!) {\n      promoteLensToMain(lensId: $lensId)\n    }\n  ": types.PromoteLensToMainDocument,
    "\n    query GetTagsByCoreTagId(\n      $coreTagId: String,\n      $limit: Int,\n      $searchTagIds: [String]\n    ) {\n      TagsByCoreTagId(\n        coreTagId: $coreTagId,\n        limit: $limit,\n        searchTagIds: $searchTagIds\n      ) {\n        tags {\n          ...ConceptItemFragment\n        }\n        totalCount\n      }\n    }\n    \n  ": types.GetTagsByCoreTagIdDocument,
    "\n    mutation UserUpdateSubforumMembership($tagId: String!, $member: Boolean!) {\n      UserUpdateSubforumMembership(tagId: $tagId, member: $member) {\n        ...UsersCurrent\n      }\n    }\n    \n  ": types.UserUpdateSubforumMembershipDocument,
    "\n    mutation connectCrossposter($token: String) {\n      connectCrossposter(token: $token)\n    }\n  ": types.ConnectCrossposterDocument,
    "\n    mutation sendEventTriggeredDM($eventType: String!) {\n      sendEventTriggeredDM(eventType: $eventType)\n    }\n  ": types.SendEventTriggeredDmDocument,
    "\n    mutation login($username: String, $password: String) {\n      login(username: $username, password: $password) {\n        token\n      }\n    }\n  ": types.LoginDocument,
    "\n    mutation signup($email: String, $username: String, $password: String, $subscribeToCurated: Boolean, $reCaptchaToken: String, $abTestKey: String) {\n      signup(email: $email, username: $username, password: $password, subscribeToCurated: $subscribeToCurated, reCaptchaToken: $reCaptchaToken, abTestKey: $abTestKey) {\n        token\n      }\n    }\n  ": types.SignupDocument,
    "\n    mutation resetPassword($email: String) {\n      resetPassword(email: $email)\n    }\n  ": types.ResetPasswordDocument,
    "\n  fragment AdvisorRequestsMinimumInfo on AdvisorRequest {\n    _id\n    userId\n    createdAt\n    interestedInMetaculus\n    jobAds\n  }\n": types.AdvisorRequestsMinimumInfoFragmentDoc,
    "\n  fragment BansAdminPageFragment on Ban {\n    _id\n    createdAt\n    expirationDate\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    reason\n    comment\n    ip\n    properties\n  }\n": types.BansAdminPageFragmentFragmentDoc,
    "\n  fragment BookPageFragment on Book {\n    _id\n    createdAt\n    title\n    number\n    subtitle\n    tocTitle\n    contents {\n      ...RevisionDisplay\n    }\n    sequenceIds\n    sequences {\n      ...SequencesPageWithChaptersFragment\n    }\n    postIds\n    posts {\n      ...PostsListWithVotes\n    }\n    collectionId\n    displaySequencesAsGrid\n    hideProgressBar\n    showChapters\n  }\n": types.BookPageFragmentFragmentDoc,
    "\n  fragment BookEdit on Book {\n    ...BookPageFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.BookEditFragmentDoc,
    "\n  fragment ChaptersFragment on Chapter {\n    _id\n    createdAt\n    title\n    subtitle\n    contents {\n      ...RevisionDisplay\n    }\n    number\n    sequenceId\n    postIds\n    posts {\n      ...PostsListWithVotes\n    }\n  }\n": types.ChaptersFragmentFragmentDoc,
    "\n  fragment ChaptersEdit on Chapter {\n    ...ChaptersFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.ChaptersEditFragmentDoc,
    "\n  fragment CkEditorUserSessionInfo on CkEditorUserSession {\n    _id\n    userId\n    documentId\n    endedAt\n    endedBy\n  }\n": types.CkEditorUserSessionInfoFragmentDoc,
    "\n  fragment ModeratorClientIDInfo on ClientId {\n    _id\n    clientId\n    createdAt\n    firstSeenReferrer\n    firstSeenLandingPage\n    users {\n      ...UsersMinimumInfo\n    }\n  }\n": types.ModeratorClientIdInfoFragmentDoc,
    "\n  fragment CollectionContinueReadingFragment on Collection {\n    _id\n    title\n    slug\n    gridImageId\n  }\n": types.CollectionContinueReadingFragmentFragmentDoc,
    "\n  fragment CollectionsPageFragment on Collection {\n    _id\n    createdAt\n    slug\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    contents {\n      ...RevisionDisplay\n    }\n    firstPageLink\n    gridImageId\n    books {\n      ...BookPageFragment\n    }\n    hideStartReadingButton\n    noindex\n  }\n": types.CollectionsPageFragmentFragmentDoc,
    "\n  fragment CollectionsEditFragment on Collection {\n    ...CollectionsPageFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.CollectionsEditFragmentFragmentDoc,
    "\n  fragment CollectionsBestOfFragment on Collection {\n    _id\n    createdAt\n    slug\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    gridImageId\n    noindex\n    postsCount\n    readPostsCount\n    contents {\n      ...RevisionDisplay\n    }\n  }\n": types.CollectionsBestOfFragmentFragmentDoc,
    "\n  fragment CommentModeratorActionDisplay on CommentModeratorAction {\n    _id\n    comment {\n      ...CommentsListWithModerationMetadata\n    }\n    commentId\n    type\n    active\n    createdAt\n    endedAt\n  }\n": types.CommentModeratorActionDisplayFragmentDoc,
    "\n  fragment CommentsList on Comment {\n    _id\n    postId\n    tagId\n    tag {\n      _id\n      slug\n    }\n    relevantTagIds\n    relevantTags {\n      ...TagPreviewFragment\n    }\n    tagCommentType\n    parentCommentId\n    topLevelCommentId\n    descendentCount\n    title\n    contents {\n      _id\n      html\n      plaintextMainText\n      wordCount\n    }\n    postedAt\n    lastEditedAt\n    repliesBlockedUntil\n    userId\n    deleted\n    deletedPublic\n    deletedByUserId\n    deletedReason\n    hideAuthor\n    authorIsUnreviewed\n    user {\n      ...UsersMinimumInfo\n    }\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    voteCount\n    emojiReactors\n    af\n    afDate\n    moveToAlignmentUserId\n    afBaseScore\n    afExtendedScore\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    needsReview\n    answer\n    parentAnswerId\n    retracted\n    postVersion\n    reviewedByUserId\n    shortform\n    shortformFrontpage\n    lastSubthreadActivity\n    moderatorHat\n    hideModeratorHat\n    nominatedForReview\n    reviewingForReview\n    promoted\n    promotedByUser {\n      ...UsersMinimumInfo\n    }\n    directChildrenCount\n    votingSystem\n    isPinnedOnProfile\n    debateResponse\n    rejected\n    rejectedReason\n    modGPTRecommendation\n    originalDialogueId\n\n    forumEventId\n    forumEventMetadata\n  }\n": types.CommentsListFragmentDoc,
    "\n  fragment CommentsListWithTopLevelComment on Comment {\n    ...CommentsList\n    topLevelComment {\n      ...CommentsList\n    }\n  }\n": types.CommentsListWithTopLevelCommentFragmentDoc,
    "\n  fragment ShortformComments on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    relevantTags {\n      ...TagPreviewFragment\n    }\n  }\n": types.ShortformCommentsFragmentDoc,
    "\n  fragment CommentWithRepliesFragment on Comment {\n    ...CommentsList\n    lastSubthreadActivity\n    latestChildren {\n      ...CommentsList\n    }\n    tag {\n      ...TagBasicInfo\n    }\n    post {\n      ...PostsBase\n    }\n  }\n": types.CommentWithRepliesFragmentFragmentDoc,
    "\n  fragment CommentEdit on Comment {\n    ...CommentsList\n    relevantTagIds\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.CommentEditFragmentDoc,
    "\n  fragment DeletedCommentsMetaData on Comment {\n    _id\n    deleted\n    deletedDate\n    deletedByUser {\n      _id\n      displayName\n    }\n    deletedReason\n    deletedPublic\n  }\n": types.DeletedCommentsMetaDataFragmentDoc,
    "\n  fragment DeletedCommentsModerationLog on Comment {\n    ...DeletedCommentsMetaData\n    user {\n      ...UsersMinimumInfo\n    }\n    post {\n      title\n      slug\n      _id\n    }\n  }\n": types.DeletedCommentsModerationLogFragmentDoc,
    "\n  fragment CommentsListWithParentMetadata on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n      isRead\n    }\n    tag {\n      ...TagBasicInfo\n    }\n  }\n": types.CommentsListWithParentMetadataFragmentDoc,
    "\n  fragment StickySubforumCommentFragment on Comment {\n    ...CommentWithRepliesFragment\n    tag {\n      ...TagBasicInfo\n    }\n  }\n": types.StickySubforumCommentFragmentFragmentDoc,
    "\n  fragment WithVoteComment on Comment {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n  }\n": types.WithVoteCommentFragmentDoc,
    "\n  fragment CommentsListWithModerationMetadata on Comment {\n    ...CommentWithRepliesFragment\n    allVotes {\n      voteType\n    }\n  }\n": types.CommentsListWithModerationMetadataFragmentDoc,
    "\n  fragment CommentsListWithModGPTAnalysis on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    modGPTAnalysis\n  }\n": types.CommentsListWithModGptAnalysisFragmentDoc,
    "\n  fragment CommentsForAutocomplete on Comment {\n    _id\n    postId\n    baseScore\n    extendedScore\n    createdAt\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      markdown\n    }\n    post {\n      ...PostsForAutocomplete\n    }\n  }\n": types.CommentsForAutocompleteFragmentDoc,
    "\n  fragment CommentsForAutocompleteWithParents on Comment {\n    ...CommentsForAutocomplete\n    parentComment {\n      ...CommentsForAutocomplete\n      parentComment {\n        ...CommentsForAutocomplete\n        parentComment {\n          ...CommentsForAutocomplete\n          parentComment {\n            ...CommentsForAutocomplete\n            parentComment {\n              ...CommentsForAutocomplete\n              parentComment {\n                ...CommentsForAutocomplete\n                parentComment {\n                  ...CommentsForAutocomplete\n                  parentComment {\n                    ...CommentsForAutocomplete\n                    parentComment {\n                      ...CommentsForAutocomplete\n                      parentComment {\n                        ...CommentsForAutocomplete\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.CommentsForAutocompleteWithParentsFragmentDoc,
    "\n  fragment SuggestAlignmentComment on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    suggestForAlignmentUserIds\n    suggestForAlignmentUsers {\n      _id\n      displayName\n    }\n  }\n": types.SuggestAlignmentCommentFragmentDoc,
    "\n  fragment ConversationsMinimumInfo on Conversation {\n    _id\n    createdAt\n    latestActivity\n    title\n    participantIds\n    archivedByIds\n    messageCount\n    moderator\n  }\n": types.ConversationsMinimumInfoFragmentDoc,
    "\n  fragment ConversationsList on Conversation {\n    ...ConversationsMinimumInfo\n    participants {\n      ...UsersMinimumInfo\n    }\n    latestMessage {\n      ...messageListFragment\n    }\n  }\n": types.ConversationsListFragmentDoc,
    "\n  fragment ConversationsListWithReadStatus on Conversation {\n    ...ConversationsList\n    hasUnreadMessages\n  }\n": types.ConversationsListWithReadStatusFragmentDoc,
    "\n  fragment CurationNoticesFragment on CurationNotice {\n    _id\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    commentId\n    comment {\n      ...CommentsList\n    }\n    postId\n    post {\n      ...PostsMinimumInfo\n    }\n    deleted\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.CurationNoticesFragmentFragmentDoc,
    "\n  fragment DialogueCheckInfo on DialogueCheck {\n    _id\n    userId\n    targetUserId\n    checked\n    checkedAt\n    hideInRecommendations\n    matchPreference {\n      ...DialogueMatchPreferenceInfo\n    }\n    reciprocalMatchPreference {\n      ...DialogueMatchPreferenceInfo\n    }\n  }\n": types.DialogueCheckInfoFragmentDoc,
    "\n  fragment DialogueMatchPreferenceInfo on DialogueMatchPreference {\n    _id\n    dialogueCheckId\n    topicNotes\n    topicPreferences\n    syncPreference\n    asyncPreference\n    formatNotes\n    generatedDialogueId\n    deleted\n  }\n": types.DialogueMatchPreferenceInfoFragmentDoc,
    "\n  fragment DigestPostsMinimumInfo on DigestPost {\n    _id\n    digestId\n    postId\n    emailDigestStatus\n    onsiteDigestStatus\n  }\n": types.DigestPostsMinimumInfoFragmentDoc,
    "\n  fragment DigestsMinimumInfo on Digest {\n    _id\n    num\n    startDate\n    endDate\n    publishedDate\n    onsiteImageId\n    onsitePrimaryColor\n  }\n": types.DigestsMinimumInfoFragmentDoc,
    "\n  fragment ElectionCandidateBasicInfo on ElectionCandidate {\n    _id\n    electionName\n    name\n    logoSrc\n    href\n    fundraiserLink\n    gwwcLink\n    gwwcId\n    description\n    tagId\n    tag {\n      ...TagBasicInfo\n    }\n    postCount\n    baseScore\n    score\n    extendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.ElectionCandidateBasicInfoFragmentDoc,
    "\n  fragment ElectionCandidateSimple on ElectionCandidate {\n    _id\n    name\n    logoSrc\n    href\n    fundraiserLink\n    description\n  }\n": types.ElectionCandidateSimpleFragmentDoc,
    "\n  fragment WithVoteElectionCandidate on ElectionCandidate {\n    __typename\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.WithVoteElectionCandidateFragmentDoc,
    "\n  fragment ElectionVoteInfo on ElectionVote {\n    _id\n    electionName\n    userId\n    compareState\n    vote\n    submittedAt\n    submissionComments\n    userExplanation\n    userOtherComments\n  }\n": types.ElectionVoteInfoFragmentDoc,
    "\n  fragment ElectionVoteRecentDiscussion on ElectionVote {\n    _id\n    electionName\n    submittedAt\n  }\n": types.ElectionVoteRecentDiscussionFragmentDoc,
    "\n  fragment ElicitQuestionFragment on ElicitQuestion {\n    _id\n    title\n    notes\n    resolution\n    resolvesBy\n  }\n": types.ElicitQuestionFragmentFragmentDoc,
    "\n  fragment FeaturedResourcesFragment on FeaturedResource {\n    _id\n    title\n    body\n    ctaText\n    ctaUrl\n    expiresAt\n  }\n": types.FeaturedResourcesFragmentFragmentDoc,
    "\n  fragment FieldChangeFragment on FieldChange {\n    _id\n    createdAt\n    userId\n    changeGroup\n    documentId\n    fieldName\n    oldValue\n    newValue\n  }\n": types.FieldChangeFragmentFragmentDoc,
    "\n  fragment ForumEventsMinimumInfo on ForumEvent {\n    _id\n    title\n    startDate\n    endDate\n    darkColor\n    lightColor\n    bannerTextColor\n    contrastColor\n    tagId\n    postId\n    bannerImageId\n    eventFormat\n    customComponent\n    commentPrompt\n\n    pollAgreeWording\n    pollDisagreeWording\n\n    maxStickersPerUser\n  }\n": types.ForumEventsMinimumInfoFragmentDoc,
    "\n  fragment ForumEventsDisplay on ForumEvent {\n    ...ForumEventsMinimumInfo\n    publicData\n    voteCount\n\n    post {\n      ...PostsMinimumInfo\n    }\n    tag {\n      ...TagBasicInfo\n    }\n    frontpageDescription {\n      _id\n      html\n    }\n    frontpageDescriptionMobile {\n      _id\n      html\n    }\n    postPageDescription {\n      _id\n      html\n    }\n    pollQuestion {\n      _id\n      html\n    }\n  }\n": types.ForumEventsDisplayFragmentDoc,
    "\n  fragment ForumEventsEdit on ForumEvent {\n    ...ForumEventsMinimumInfo\n    frontpageDescription {\n      ...RevisionEdit\n    }\n    frontpageDescriptionMobile {\n      ...RevisionEdit\n    }\n    postPageDescription {\n      ...RevisionEdit\n    }\n    pollQuestion {\n      ...RevisionEdit\n    }\n  }\n": types.ForumEventsEditFragmentDoc,
    "\n  fragment GardenCodeFragment on GardenCode {\n    _id\n    code\n    title\n    userId\n    deleted\n    slug\n    startTime\n    endTime\n    fbLink\n    type\n    afOnly\n    contents {\n      ...RevisionDisplay\n    }\n  }\n": types.GardenCodeFragmentFragmentDoc,
    "\n  fragment GardenCodeFragmentEdit on GardenCode {\n    _id\n    code\n    title\n    userId\n    deleted\n    slug\n    startTime\n    endTime\n    fbLink\n    type\n    afOnly\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.GardenCodeFragmentEditFragmentDoc,
    "\n  fragment GoogleServiceAccountSessionInfo on GoogleServiceAccountSession {\n    _id\n    email\n  }\n": types.GoogleServiceAccountSessionInfoFragmentDoc,
    "\n  fragment GoogleServiceAccountSessionAdminInfo on GoogleServiceAccountSession {\n    _id\n    email\n    estimatedExpiry\n  }\n": types.GoogleServiceAccountSessionAdminInfoFragmentDoc,
    "\n  fragment JargonTerms on JargonTerm {\n    _id\n    postId\n    term\n    contents {\n      ...RevisionEdit\n    }\n    humansAndOrAIEdited\n    approved\n    deleted\n    altTerms\n  }\n": types.JargonTermsFragmentDoc,
    "\n  fragment JargonTermsPost on JargonTerm {\n    _id\n    term\n    humansAndOrAIEdited\n    approved\n    deleted\n    altTerms\n    contents {\n      ...RevisionDisplay\n    }\n  }\n": types.JargonTermsPostFragmentDoc,
    "\n  fragment JargonTermsWithPostInfo on JargonTerm {\n    ...JargonTerms\n    post {\n      ...PostsMinimumInfo\n    }\n  }\n": types.JargonTermsWithPostInfoFragmentDoc,
    "\n  fragment LlmConversationsFragment on LlmConversation {\n    _id\n    userId\n    title\n    createdAt\n    lastUpdatedAt\n    deleted\n  }\n": types.LlmConversationsFragmentFragmentDoc,
    "\n  fragment LlmConversationsViewingPageFragment on LlmConversation {\n    ...LlmConversationsFragment\n    totalCharacterCount\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": types.LlmConversationsViewingPageFragmentFragmentDoc,
    "\n  fragment LlmConversationsWithMessagesFragment on LlmConversation {\n    ...LlmConversationsFragment\n    messages {\n      ...LlmMessagesFragment\n    }\n  }\n": types.LlmConversationsWithMessagesFragmentFragmentDoc,
    "\n  fragment LlmMessagesFragment on LlmMessage {\n    _id\n    userId\n    conversationId\n    role\n    content\n    createdAt\n  }\n": types.LlmMessagesFragmentFragmentDoc,
    "\n  fragment localGroupsBase on Localgroup {\n    _id\n    createdAt\n    organizerIds\n    organizers {\n      ...UsersMinimumInfo\n    }\n    lastActivity\n    name\n    nameInAnotherLanguage\n    isOnline\n    location\n    googleLocation\n    mongoLocation\n    types\n    categories\n    contactInfo\n    facebookLink\n    facebookPageLink\n    meetupLink\n    slackLink\n    website\n    bannerImageId\n    inactive\n    deleted\n  }\n": types.LocalGroupsBaseFragmentDoc,
    "\n  fragment localGroupsHomeFragment on Localgroup {\n    ...localGroupsBase\n    contents {\n      ...RevisionDisplay\n    }\n  }\n": types.LocalGroupsHomeFragmentFragmentDoc,
    "\n  fragment localGroupsEdit on Localgroup {\n    ...localGroupsBase\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.LocalGroupsEditFragmentDoc,
    "\n  fragment localGroupsIsOnline on Localgroup {\n    _id\n    name\n    isOnline\n  }\n": types.LocalGroupsIsOnlineFragmentDoc,
    "\n  fragment newEventFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    name\n    important\n    properties\n    intercom\n  }\n": types.NewEventFragmentFragmentDoc,
    "\n  fragment lastEventFragment on LWEvent {\n    _id\n    createdAt\n    documentId\n    userId\n    name\n    important\n    properties\n    intercom\n  }\n": types.LastEventFragmentFragmentDoc,
    "\n  fragment lwEventsAdminPageFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    name\n    documentId\n    important\n    properties\n    intercom\n  }\n": types.LwEventsAdminPageFragmentFragmentDoc,
    "\n  fragment emailHistoryFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    name\n    properties\n  }\n": types.EmailHistoryFragmentFragmentDoc,
    "\n  fragment messageListFragment on Message {\n    _id\n    user {\n      ...UsersMinimumInfo\n      profileImageId\n    }\n    contents {\n      html\n      plaintextMainText\n    }\n    createdAt\n    conversationId\n  }\n": types.MessageListFragmentFragmentDoc,
    "\n  fragment ModerationTemplateFragment on ModerationTemplate {\n    _id\n    name\n    collectionName\n    order\n    deleted\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.ModerationTemplateFragmentFragmentDoc,
    "\n  fragment ModeratorActionDisplay on ModeratorAction {\n    _id\n    user {\n      ...UsersMinimumInfo\n    }\n    userId\n    type\n    active\n    createdAt\n    endedAt\n  }\n": types.ModeratorActionDisplayFragmentDoc,
    "\n  fragment MultiDocumentMinimumInfo on MultiDocument {\n    _id\n    parentDocumentId\n    collectionName\n    fieldName\n    userId\n    slug\n    oldSlugs\n    title\n    tabTitle\n    tabSubtitle\n    preview\n    index\n    deleted\n    createdAt\n    legacyData\n\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.MultiDocumentMinimumInfoFragmentDoc,
    "\n  fragment MultiDocumentContentDisplay on MultiDocument {\n    ...MultiDocumentMinimumInfo\n    tableOfContents\n    textLastUpdatedAt\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.MultiDocumentContentDisplayFragmentDoc,
    "\n  fragment MultiDocumentEdit on MultiDocument {\n    ...MultiDocumentContentDisplay\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    summaries {\n      ...MultiDocumentContentDisplay\n    }\n    textLastUpdatedAt\n  }\n": types.MultiDocumentEditFragmentDoc,
    "\n  fragment MultiDocumentParentDocument on MultiDocument {\n    ...MultiDocumentEdit\n    parentTag {\n      ...TagHistoryFragment\n    }\n  }\n": types.MultiDocumentParentDocumentFragmentDoc,
    "\n  fragment MultiDocumentWithContributors on MultiDocument {\n    ...MultiDocumentEdit\n    contributors {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        currentAttributionCharCount\n      }\n    }\n  }\n": types.MultiDocumentWithContributorsFragmentDoc,
    "\n  fragment MultiDocumentRevision on MultiDocument {\n    ...MultiDocumentMinimumInfo\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n    tableOfContents(version: $version)\n  }\n": types.MultiDocumentRevisionFragmentDoc,
    "\n  fragment MultiDocumentWithContributorsRevision on MultiDocument {\n    ...MultiDocumentRevision\n    contributors(version: $version) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        currentAttributionCharCount\n        contributionScore\n      }\n    }\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    textLastUpdatedAt\n  }\n": types.MultiDocumentWithContributorsRevisionFragmentDoc,
    "\n  fragment WithVoteMultiDocument on MultiDocument {\n    ...MultiDocumentMinimumInfo\n  }\n": types.WithVoteMultiDocumentFragmentDoc,
    "\n  fragment NotificationsList on Notification {\n    _id\n    documentId\n    documentType\n    deleted\n    userId\n    createdAt\n    link\n    message\n    type\n    viewed\n    extraData\n  }\n": types.NotificationsListFragmentDoc,
    "\n  fragment PetrovDayActionInfo on PetrovDayAction {\n    _id\n    createdAt\n    userId\n    actionType\n    data\n  }\n": types.PetrovDayActionInfoFragmentDoc,
    "\n  fragment PetrovDayLaunchInfo on PetrovDayLaunch {\n    _id\n    createdAt\n    launchCode\n    userId\n  }\n": types.PetrovDayLaunchInfoFragmentDoc,
    "\n  fragment PodcastEpisodeFull on PodcastEpisode {\n    _id\n    podcastId\n    title\n    episodeLink\n    externalEpisodeId\n  }\n": types.PodcastEpisodeFullFragmentDoc,
    "\n  fragment PodcastSelect on Podcast {\n    _id\n    title\n  }\n": types.PodcastSelectFragmentDoc,
    "\n  fragment PostsMinimumInfo on Post {\n    _id\n    slug\n    title\n    draft\n    shortform\n    hideCommentKarma\n    af\n    currentUserReviewVote {\n      _id\n      qualitativeScore\n      quadraticScore\n    }\n    userId\n    coauthorStatuses\n    hasCoauthorPermission\n    rejected\n    debate\n    collabEditorDialogue\n  }\n": types.PostsMinimumInfoFragmentDoc,
    "\n  fragment PostsTopItemInfo on Post {\n    ...PostsMinimumInfo\n    ...PostsAuthors\n    isRead\n    contents {\n      _id\n      htmlHighlight\n      wordCount\n      version\n    }\n    customHighlight {\n      _id\n      html\n    }\n    tags {\n      ...TagPreviewFragment\n    }\n    reviewWinner {\n      ...ReviewWinnerTopPostsPage\n    }\n    spotlight {\n      ...SpotlightReviewWinner\n    }\n    reviews {\n      ...CommentsList\n    }\n    finalReviewVoteScoreHighKarma\n  }\n": types.PostsTopItemInfoFragmentDoc,
    "\n  fragment PostsBase on Post {\n    ...PostsMinimumInfo\n    \n    # Core fields\n    url\n    postedAt\n    createdAt\n    sticky\n    metaSticky\n    stickyPriority\n    status\n    frontpageDate\n    meta\n    deletedDraft\n    postCategory\n    tagRelevance\n\n    shareWithUsers\n    sharingSettings\n    linkSharingKey\n\n    contents_latest\n    commentCount\n    voteCount\n    baseScore\n    extendedScore\n    emojiReactors\n    unlisted\n    score\n    lastVisitedAt\n    isFuture\n    isRead\n    lastCommentedAt\n    lastCommentPromotedAt\n    canonicalCollectionSlug\n    curatedDate\n    commentsLocked\n    commentsLockedToAccountsCreatedAfter\n    debate\n\n    # questions\n    question\n    hiddenRelatedQuestion\n    originalPostRelationSourceId\n\n    userId\n    \n    # Local Event data\n    location\n    googleLocation\n    onlineEvent\n    globalEvent\n    startTime\n    endTime\n    localStartTime\n    localEndTime\n    eventRegistrationLink\n    joinEventLink\n    facebookLink\n    meetupLink\n    website\n    contactInfo\n    isEvent\n    eventImageId\n    eventType\n    types\n    groupId\n\n    # Review data \n    reviewedByUserId\n    suggestForCuratedUserIds\n    suggestForCuratedUsernames\n    reviewForCuratedUserId\n    authorIsUnreviewed\n\n    # Alignment Forum\n    afDate\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    afBaseScore\n    afExtendedScore\n    afCommentCount\n    afLastCommentedAt\n    afSticky\n    \n    hideAuthor\n    moderationStyle\n    ignoreRateLimits\n\n    submitToFrontpage\n    shortform\n    onlyVisibleToLoggedIn\n    onlyVisibleToEstablishedAccounts\n\n    reviewCount\n    reviewVoteCount\n    positiveReviewVoteCount\n    manifoldReviewMarketId\n\n    annualReviewMarketProbability\n    annualReviewMarketIsResolved\n    annualReviewMarketYear\n    annualReviewMarketUrl\n\n    group {\n      _id\n      name\n      organizerIds\n    }\n    rsvpCounts\n\n    podcastEpisodeId\n    forceAllowType3Audio\n\n    # deprecated\n    nominationCount2019\n    reviewCount2019\n\n    votingSystem\n    \n    disableRecommendation\n  }\n": types.PostsBaseFragmentDoc,
    "\n  fragment PostsWithVotes on Post {\n    ...PostsBase\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.PostsWithVotesFragmentDoc,
    "\n  fragment PostsListWithVotes on Post {\n    ...PostsList\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.PostsListWithVotesFragmentDoc,
    "\n  fragment PostsListWithVotesAndSequence on Post {\n    ...PostsListWithVotes\n    canonicalSequence {\n      ...SequencesPageFragment\n    }\n  }\n": types.PostsListWithVotesAndSequenceFragmentDoc,
    "\n  fragment PostsReviewVotingList on Post {\n    ...PostsListWithVotes\n    reviewVoteScoreAllKarma\n    reviewVotesAllKarma\n    reviewVoteScoreHighKarma\n    reviewVotesHighKarma\n    reviewVoteScoreAF\n    reviewVotesAF\n  }\n": types.PostsReviewVotingListFragmentDoc,
    "\n  fragment PostsModerationGuidelines on Post {\n    ...PostsMinimumInfo\n    frontpageDate\n    user {\n      _id\n      displayName\n      moderationStyle\n    }\n    moderationStyle\n    moderationGuidelines {\n      _id\n      html\n      originalContents {\n        type\n        data\n      }\n    }\n  }\n": types.PostsModerationGuidelinesFragmentDoc,
    "\n  fragment PostsAuthors on Post {\n    user {\n      ...UsersMinimumInfo\n      profileImageId\n      \n      # Author moderation info\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n    }\n    coauthors {\n      ...UsersMinimumInfo\n    }\n  }\n": types.PostsAuthorsFragmentDoc,
    "\n  fragment PostsListBase on Post {\n    ...PostsBase\n    ...PostsAuthors\n    readTimeMinutes\n    rejectedReason\n    customHighlight {\n      _id\n      html\n      plaintextDescription\n    }\n    lastPromotedComment {\n      _id\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n    bestAnswer {\n      ...CommentsList\n    }\n    tags {\n      ...TagBasicInfo\n    }\n    socialPreviewData {\n      _id\n      imageUrl\n    }\n\n    feedId\n    totalDialogueResponseCount\n    unreadDebateResponseCount\n    dialogTooltipPreview\n    disableSidenotes\n  }\n": types.PostsListBaseFragmentDoc,
    "\n  fragment PostsList on Post {\n    ...PostsListBase\n    deletedDraft\n    contents {\n      _id\n      htmlHighlight\n      plaintextDescription\n      wordCount\n      version\n    }\n    fmCrosspost\n  }\n": types.PostsListFragmentDoc,
    "\n  fragment SunshineCurationPostsList on Post {\n    ...PostsList\n    curationNotices {\n      ...CurationNoticesFragment\n    }\n  }\n": types.SunshineCurationPostsListFragmentDoc,
    "\n  fragment PostsListTag on Post {\n    ...PostsList\n    tagRel(tagId: $tagId) {\n      ...WithVoteTagRel\n    }\n  }\n": types.PostsListTagFragmentDoc,
    "\n  fragment PostsListTagWithVotes on Post {\n    ...PostsListWithVotes\n    tagRel(tagId: $tagId) {\n      ...WithVoteTagRel\n    }\n  }\n": types.PostsListTagWithVotesFragmentDoc,
    "\n  fragment PostsDetails on Post {\n    ...PostsListBase\n\n    canonicalSource\n    noIndex\n    viewCount\n    tags {\n      ...TagPreviewFragment\n    }\n    socialPreviewData {\n      _id\n      text\n      imageUrl\n    }\n    \n    # Tags\n    tagRelevance\n    \n    # Posts-page display options\n    commentSortOrder\n    sideCommentVisibility\n    \n    # Sequence navigation\n    collectionTitle\n    canonicalPrevPostSlug\n    canonicalNextPostSlug\n    canonicalSequenceId\n    canonicalBookId\n    canonicalSequence {\n      _id\n      title\n    }\n    canonicalBook {\n      _id\n      title\n    }\n    canonicalCollection {\n      _id\n      title\n    }\n\n    # Podcast\n    podcastEpisode {\n      _id\n      title\n      podcast {\n        _id\n        title\n        applePodcastLink\n        spotifyPodcastLink\n      }\n      episodeLink\n      externalEpisodeId\n    }\n\n    # Moderation stuff\n    bannedUserIds\n    moderationStyle\n    \n    # Voting\n    currentUserVote\n    currentUserExtendedVote\n    \n    # RSS metadata\n    feedLink\n    feed {\n      ...RSSFeedMinimumInfo\n    }\n    \n    # Related Questions\n    sourcePostRelations {\n      _id\n      sourcePostId\n      sourcePost {\n        ...PostsListWithVotes\n      }\n      order\n    }\n    targetPostRelations {\n      _id\n      sourcePostId\n      targetPostId\n      targetPost {\n        ...PostsListWithVotes\n      }\n      order\n    }\n    \n    # Events\n    rsvps\n    activateRSVPs\n\n    # Crossposting\n    fmCrosspost\n\n    # Jargon Terms\n    glossary {\n      ...JargonTermsPost\n    }\n  }\n": types.PostsDetailsFragmentDoc,
    "\n  fragment PostsExpandedHighlight on Post {\n    _id\n    contents {\n      _id\n      html\n    }\n  }\n": types.PostsExpandedHighlightFragmentDoc,
    "\n  fragment PostsPlaintextDescription on Post {\n    _id\n    contents {\n      _id\n      plaintextDescription\n    }\n  }\n": types.PostsPlaintextDescriptionFragmentDoc,
    "\n  fragment PostsRevision on Post {\n    ...PostsDetails\n\n    # Content & Revisions\n    version\n    contents(version: $version) {\n      ...RevisionDisplay\n    }\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n": types.PostsRevisionFragmentDoc,
    "\n  fragment PostsRevisionEdit on Post {\n    ...PostsDetails\n\n    # Content & Revisions\n    version\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n": types.PostsRevisionEditFragmentDoc,
    "\n  fragment PostsWithNavigationAndRevision on Post {\n    ...PostsRevision\n    ...PostSequenceNavigation\n    customHighlight {\n      ...RevisionDisplay\n    }\n    \n    tableOfContentsRevision(version: $version)\n    reviewWinner {\n      ...ReviewWinnerAll\n    }\n  }\n": types.PostsWithNavigationAndRevisionFragmentDoc,
    "\n  fragment PostsWithNavigation on Post {\n    ...PostsPage\n    ...PostSequenceNavigation\n    \n    tableOfContents\n    reviewWinner {\n      ...ReviewWinnerAll\n    }\n  }\n": types.PostsWithNavigationFragmentDoc,
    "\n  fragment PostSequenceNavigation on Post {\n    # Prev/next sequence navigation\n    sequence(sequenceId: $sequenceId) {\n      ...SequencesPageFragment\n    }\n    prevPost(sequenceId: $sequenceId) {\n      ...PostsListWithVotes\n      sequence(sequenceId: $sequenceId, prevOrNext: \"prev\") {\n        _id\n      }\n    }\n    nextPost(sequenceId: $sequenceId) {\n      ...PostsListWithVotes\n      sequence(sequenceId: $sequenceId, prevOrNext: \"next\") {\n        _id\n      }\n    }\n  }\n": types.PostSequenceNavigationFragmentDoc,
    "\n  fragment PostsPage on Post {\n    ...PostsDetails\n    version\n    contents {\n      ...RevisionDisplay\n    }\n    customHighlight {\n      ...RevisionDisplay\n    }\n    myEditorAccess\n  }\n": types.PostsPageFragmentDoc,
    "\n  fragment PostsEdit on Post {\n    ...PostsDetails\n    ...PostSideComments\n    myEditorAccess\n    version\n    coauthorStatuses\n    readTimeMinutesOverride\n    fmCrosspost\n    hideFromRecentDiscussions\n    hideFromPopularComments\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n    customHighlight {\n      ...RevisionEdit\n    }\n    tableOfContents\n    subforumTagId\n    socialPreviewImageId\n    socialPreview\n    socialPreviewData {\n      _id\n      imageId\n      text\n    }\n    user {\n      ...UsersMinimumInfo\n    }\n    usersSharedWith {\n      ...UsersMinimumInfo\n    }\n    coauthors {\n      ...UsersMinimumInfo\n    }\n    generateDraftJargon\n  }\n": types.PostsEditFragmentDoc,
    "\n  fragment PostsEditQueryFragment on Post {\n    ...PostsEdit\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n  }\n": types.PostsEditQueryFragmentFragmentDoc,
    "\n  fragment PostsEditMutationFragment on Post {\n    ...PostsEdit\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.PostsEditMutationFragmentFragmentDoc,
    "\n  fragment PostsRevisionsList on Post {\n    _id\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n": types.PostsRevisionsListFragmentDoc,
    "\n  fragment PostsRecentDiscussion on Post {\n    ...PostsListWithVotes\n    recentComments(commentsLimit: $commentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsList\n    }\n  }\n": types.PostsRecentDiscussionFragmentDoc,
    "\n  fragment ShortformRecentDiscussion on Post {\n    ...PostsListWithVotes\n    recentComments(commentsLimit: $commentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsListWithTopLevelComment\n    }\n  }\n": types.ShortformRecentDiscussionFragmentDoc,
    "\n  fragment UsersBannedFromPostsModerationLog on Post {\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    slug\n    _id\n    bannedUserIds\n  }\n": types.UsersBannedFromPostsModerationLogFragmentDoc,
    "\n  fragment SunshinePostsList on Post {\n    ...PostsListBase\n\n    currentUserVote\n    currentUserExtendedVote\n    fmCrosspost\n    rejectedReason\n    autoFrontpage\n\n    contents {\n      _id\n      html\n      htmlHighlight\n      wordCount\n      version\n    }\n\n    moderationGuidelines {\n      _id\n      html\n    }\n\n    user {\n      ...UsersMinimumInfo\n      biography {\n        ...RevisionDisplay\n      }\n      profileImageId\n      \n      # Author moderation info\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n      \n      moderationGuidelines {\n        _id\n        html\n      }\n\n      needsReview\n      moderatorActions {\n        ...ModeratorActionDisplay\n      }\n    }\n  }\n": types.SunshinePostsListFragmentDoc,
    "\n  fragment WithVotePost on Post {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n  }\n": types.WithVotePostFragmentDoc,
    "\n  fragment HighlightWithHash on Post {\n    _id\n    contents {\n      _id\n      htmlHighlightStartingAtHash(hash: $hash)\n    }\n  }\n": types.HighlightWithHashFragmentDoc,
    "\n  fragment PostWithDialogueMessage on Post {\n    _id\n    dialogueMessageContents(dialogueMessageId: $dialogueMessageId)\n  }\n": types.PostWithDialogueMessageFragmentDoc,
    "\n  fragment PostSideComments on Post {\n    _id\n    sideComments\n    sideCommentsCache {\n      ...SideCommentCacheMinimumInfo\n    }\n  }\n": types.PostSideCommentsFragmentDoc,
    "\n  fragment PostWithGeneratedSummary on Post {\n    _id\n    languageModelSummary\n  }\n": types.PostWithGeneratedSummaryFragmentDoc,
    "\n  fragment PostsBestOfList on Post {\n    ...PostsListWithVotes\n    podcastEpisode {\n      _id\n      title\n      podcast {\n        _id\n        title\n        applePodcastLink\n        spotifyPodcastLink\n      }\n      episodeLink\n      externalEpisodeId\n    }\n    socialPreviewData {\n      _id\n      text\n      imageUrl\n    }\n    firstVideoAttribsForPreview\n  }\n": types.PostsBestOfListFragmentDoc,
    "\n  fragment PostsRSSFeed on Post {\n    ...PostsPage\n    scoreExceeded2Date\n    scoreExceeded30Date\n    scoreExceeded45Date\n    scoreExceeded75Date\n    scoreExceeded125Date\n    scoreExceeded200Date\n    metaDate\n  }\n": types.PostsRssFeedFragmentDoc,
    "\n  fragment PostsOriginalContents on Post {\n    _id\n    contents {\n      _id\n      originalContents {\n        type\n        data\n      }\n    }\n  }\n": types.PostsOriginalContentsFragmentDoc,
    "\n  fragment PostsHTML on Post {\n    _id\n    contents {\n      ...RevisionHTML\n    }\n  }\n": types.PostsHtmlFragmentDoc,
    "\n  fragment PostsForAutocomplete on Post {\n    _id\n    title\n    userId\n    baseScore\n    extendedScore\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      markdown\n    }\n  }\n": types.PostsForAutocompleteFragmentDoc,
    "\n  fragment PostForReviewWinnerItem on Post {\n    _id\n    spotlight {\n      _id\n    }\n    reviewWinner {\n      _id\n      category\n    }\n  }\n": types.PostForReviewWinnerItemFragmentDoc,
    "\n  fragment PostsTwitterAdmin on Post {\n    ...PostsListWithVotes\n    user {\n      ...UsersSocialMediaInfo\n    }\n    coauthors {\n      ...UsersSocialMediaInfo\n    }\n  }\n": types.PostsTwitterAdminFragmentDoc,
    "\n  fragment SuggestAlignmentPost on Post {\n    ...PostsList\n    suggestForAlignmentUsers {\n      _id\n      displayName\n    }\n  }\n": types.SuggestAlignmentPostFragmentDoc,
    "\n  fragment UnclaimedReportsList on Report {\n    _id\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    commentId\n    comment {\n      ...CommentsList\n      post {\n        ...PostsMinimumInfo\n      }\n      tag {\n        ...TagBasicInfo\n      }\n    }\n    postId\n    post {\n      ...PostsList\n    }\n    reportedUser {\n      ...SunshineUsersList\n    }\n    closedAt\n    createdAt\n    claimedUserId\n    claimedUser {\n      _id\n      displayName\n      username\n      slug\n    }\n    link\n    description\n    reportedAsSpam\n    markedAsSpam\n  }\n": types.UnclaimedReportsListFragmentDoc,
    "\n  fragment reviewVoteFragment on ReviewVote {\n    _id\n    createdAt\n    userId\n    postId\n    qualitativeScore\n    quadraticScore\n    comment\n    year\n    dummy\n    reactions\n  }\n": types.ReviewVoteFragmentFragmentDoc,
    "\n  fragment reviewVoteWithUserAndPost on ReviewVote {\n    ...reviewVoteFragment\n    user {\n      ...UsersMinimumInfo\n      email\n      emails\n    }\n    post {\n      ...PostsMinimumInfo\n    }\n  }\n": types.ReviewVoteWithUserAndPostFragmentDoc,
    "\n  fragment reviewAdminDashboard on ReviewVote {\n    _id\n    createdAt\n    userId\n    user {\n      _id\n      displayName\n      karma\n    }\n  }\n": types.ReviewAdminDashboardFragmentDoc,
    "\n  fragment ReviewWinnerArtImages on ReviewWinnerArt {\n    _id\n    postId\n    splashArtImagePrompt\n    splashArtImageUrl\n    activeSplashArtCoordinates {\n      ...SplashArtCoordinatesEdit\n    }\n  }\n": types.ReviewWinnerArtImagesFragmentDoc,
    "\n  fragment ReviewWinnerEditDisplay on ReviewWinner {\n    _id\n    postId\n    reviewYear\n    curatedOrder\n    reviewRanking\n  }\n": types.ReviewWinnerEditDisplayFragmentDoc,
    "\n  fragment ReviewWinnerTopPostsDisplay on ReviewWinner {\n    _id\n    postId\n    post {\n      ...PostsTopItemInfo\n    }\n    reviewYear\n    curatedOrder\n    reviewRanking\n  }\n": types.ReviewWinnerTopPostsDisplayFragmentDoc,
    "\n  fragment ReviewWinnerAll on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    postId\n    reviewYear\n    reviewRanking\n    reviewWinnerArt {\n      ...ReviewWinnerArtImages\n    }\n    competitorCount\n  }\n": types.ReviewWinnerAllFragmentDoc,
    "\n  fragment ReviewWinnerTopPostsPage on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    reviewYear\n    reviewRanking\n    reviewWinnerArt {\n      splashArtImageUrl\n      activeSplashArtCoordinates {\n        ...SplashArtCoordinatesEdit\n      }\n    }\n  }\n": types.ReviewWinnerTopPostsPageFragmentDoc,
    "\n  fragment ReviewWinnerAnnouncement on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    reviewYear\n    reviewRanking\n    competitorCount\n    postId\n    post {\n      _id\n      title\n      slug\n    }\n  }\n": types.ReviewWinnerAnnouncementFragmentDoc,
    "\n  fragment RevisionDisplay on Revision {\n    _id\n    version\n    updateType\n    editedAt\n    userId\n    html\n    commitMessage\n    wordCount\n    htmlHighlight\n    plaintextDescription\n  }\n": types.RevisionDisplayFragmentDoc,
    "\n  fragment RevisionHTML on Revision {\n    _id\n    html\n  }\n": types.RevisionHtmlFragmentDoc,
    "\n  fragment RevisionEdit on Revision {\n    _id\n    version\n    updateType\n    editedAt\n    userId\n    originalContents {\n      type\n      data\n    }\n    html\n    markdown\n    draftJS\n    ckEditorMarkup\n    wordCount\n    htmlHighlight\n    plaintextDescription\n  }\n": types.RevisionEditFragmentDoc,
    "\n  fragment RevisionMetadata on Revision {\n    _id\n    version\n    editedAt\n    commitMessage\n    userId\n    \n    score\n    baseScore\n    extendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.RevisionMetadataFragmentDoc,
    "\n  fragment RevisionMetadataWithChangeMetrics on Revision {\n    ...RevisionMetadata\n    changeMetrics\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": types.RevisionMetadataWithChangeMetricsFragmentDoc,
    "\n  fragment RevisionHistoryEntry on Revision {\n    ...RevisionMetadata\n    documentId\n    collectionName\n    changeMetrics\n    legacyData\n    skipAttributions\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": types.RevisionHistoryEntryFragmentDoc,
    "\n  fragment RevisionHistorySummaryEdit on Revision {\n    ...RevisionHistoryEntry\n    summary {\n      ...MultiDocumentMinimumInfo\n      parentTag {\n        _id\n        name\n      }\n      parentLens {\n        _id\n        title\n        tabTitle\n        tabSubtitle\n      }\n    }\n  }\n": types.RevisionHistorySummaryEditFragmentDoc,
    "\n  fragment RevisionTagFragment on Revision {\n    ...RevisionHistoryEntry\n    tag {\n      ...TagHistoryFragment\n    }\n    lens {\n      ...MultiDocumentParentDocument\n    }\n  }\n": types.RevisionTagFragmentFragmentDoc,
    "\n  fragment RecentDiscussionRevisionTagFragment on Revision {\n    ...RevisionHistoryEntry\n    tag {\n      ...TagRecentDiscussion\n    }\n  }\n": types.RecentDiscussionRevisionTagFragmentFragmentDoc,
    "\n  fragment WithVoteRevision on Revision {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    voteCount\n  }\n": types.WithVoteRevisionFragmentDoc,
    "\n  fragment RSSFeedMinimumInfo on RSSFeed {\n    _id\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    createdAt\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    importAsDraft\n  }\n": types.RssFeedMinimumInfoFragmentDoc,
    "\n  fragment newRSSFeedFragment on RSSFeed {\n    _id\n    userId\n    createdAt\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    status\n    importAsDraft\n  }\n": types.NewRssFeedFragmentFragmentDoc,
    "\n  fragment RSSFeedMutationFragment on RSSFeed {\n    _id\n    userId\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    importAsDraft\n  }\n": types.RssFeedMutationFragmentFragmentDoc,
    "\n  fragment SequencesPageTitleFragment on Sequence {\n    _id\n    title\n    canonicalCollectionSlug\n    canonicalCollection {\n      _id\n      title\n    }\n  }\n": types.SequencesPageTitleFragmentFragmentDoc,
    "\n  fragment SequencesPageFragment on Sequence {\n    ...SequencesPageTitleFragment\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      ...RevisionDisplay\n    }\n    gridImageId\n    bannerImageId\n    canonicalCollectionSlug\n    draft\n    isDeleted\n    hidden\n    hideFromAuthorPage\n    noindex\n    curatedOrder\n    userProfileOrder\n    af\n    postsCount\n    readPostsCount\n  }\n": types.SequencesPageFragmentFragmentDoc,
    "\n  fragment SequenceContinueReadingFragment on Sequence {\n    _id\n    title\n    gridImageId\n    canonicalCollectionSlug\n  }\n": types.SequenceContinueReadingFragmentFragmentDoc,
    "\n  fragment SequencesPageWithChaptersFragment on Sequence {\n    ...SequencesPageFragment\n    chapters {\n      ...ChaptersFragment\n    }\n  }\n": types.SequencesPageWithChaptersFragmentFragmentDoc,
    "\n  fragment SequencesEdit on Sequence {\n    ...SequencesPageFragment\n    contents { \n      ...RevisionEdit\n    }\n  }\n": types.SequencesEditFragmentDoc,
    "\n  fragment SideCommentCacheMinimumInfo on SideCommentCache {\n    _id\n    postId\n    annotatedHtml\n    commentsByBlock\n    version\n    createdAt\n  }\n": types.SideCommentCacheMinimumInfoFragmentDoc,
    "\n  fragment SplashArtCoordinates on SplashArtCoordinate {\n    _id\n    reviewWinnerArtId\n    leftXPct\n    leftYPct\n    leftHeightPct\n    leftWidthPct\n    leftFlipped\n    middleXPct\n    middleYPct\n    middleHeightPct\n    middleWidthPct\n    middleFlipped\n    rightXPct\n    rightYPct\n    rightHeightPct\n    rightWidthPct\n    rightFlipped\n  }\n": types.SplashArtCoordinatesFragmentDoc,
    "\n  fragment SplashArtCoordinatesEdit on SplashArtCoordinate {\n    ...SplashArtCoordinates\n    createdAt\n  }\n": types.SplashArtCoordinatesEditFragmentDoc,
    "\n  fragment SpotlightMinimumInfo on Spotlight {\n    _id\n    documentId\n    documentType\n    spotlightImageId\n    spotlightDarkImageId\n    spotlightSplashImageUrl\n    draft\n    deletedDraft\n    position\n    lastPromotedAt\n    customTitle\n    customSubtitle\n    subtitleUrl\n    headerTitle\n    headerTitleLeftColor\n    headerTitleRightColor\n    duration\n    showAuthor\n    imageFade\n    imageFadeColor\n  }\n": types.SpotlightMinimumInfoFragmentDoc,
    "\n  fragment SpotlightReviewWinner on Spotlight {\n    ...SpotlightMinimumInfo\n    description {\n      html\n    }\n    sequenceChapters {\n      ...ChaptersFragment\n    }\n  }\n": types.SpotlightReviewWinnerFragmentDoc,
    "\n  fragment SpotlightHeaderEventSubtitle on Spotlight {\n    ...SpotlightMinimumInfo\n    post {\n      _id\n      slug\n    }\n    sequence {\n      _id\n    }\n    tag {\n      _id\n      slug\n    }\n  }\n": types.SpotlightHeaderEventSubtitleFragmentDoc,
    "\n  fragment SpotlightDisplay on Spotlight {\n    ...SpotlightMinimumInfo\n    post {\n      ...PostsMinimumInfo\n      user {\n        _id\n        displayName\n        slug\n      }\n      reviews {\n        ...CommentsList\n      }\n    }\n    sequence {\n      _id\n      title\n      user {\n        _id\n        displayName\n        slug\n      }\n    }\n    tag {\n      _id\n      name\n      slug\n      user {\n        _id\n        displayName\n        slug\n      }\n    }\n    sequenceChapters {\n      ...ChaptersFragment\n    }\n    description {\n      html\n    }\n  }\n": types.SpotlightDisplayFragmentDoc,
    "\n  fragment SpotlightEditQueryFragment on Spotlight {\n    ...SpotlightMinimumInfo\n    description {\n      ...RevisionEdit\n    }\n  }\n": types.SpotlightEditQueryFragmentFragmentDoc,
    "\n  fragment SubscriptionState on Subscription {\n    _id\n    userId\n    createdAt\n    state\n    documentId\n    collectionName\n    deleted\n    type\n  }\n": types.SubscriptionStateFragmentDoc,
    "\n  fragment MembersOfGroupFragment on Subscription {\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": types.MembersOfGroupFragmentFragmentDoc,
    "\n  fragment SurveyQuestionMinimumInfo on SurveyQuestion {\n    _id\n    question\n    format\n    order\n  }\n": types.SurveyQuestionMinimumInfoFragmentDoc,
    "\n  fragment SurveyResponseMinimumInfo on SurveyResponse {\n    _id\n    surveyId\n    surveyScheduleId\n    userId\n    clientId\n    response\n  }\n": types.SurveyResponseMinimumInfoFragmentDoc,
    "\n  fragment SurveyScheduleMinimumInfo on SurveySchedule {\n    _id\n    survey {\n      ...SurveyMinimumInfo\n    }\n  }\n": types.SurveyScheduleMinimumInfoFragmentDoc,
    "\n  fragment SurveyScheduleEdit on SurveySchedule {\n    ...SurveyScheduleMinimumInfo\n    surveyId\n    name\n    impressionsLimit\n    maxVisitorPercentage\n    minKarma\n    maxKarma\n    target\n    startDate\n    endDate\n    deactivated\n    createdAt\n  }\n": types.SurveyScheduleEditFragmentDoc,
    "\n  fragment SurveyMinimumInfo on Survey {\n    _id\n    name\n    questions {\n      ...SurveyQuestionMinimumInfo\n    }\n    createdAt\n  }\n": types.SurveyMinimumInfoFragmentDoc,
    "\n  fragment TagFlagFragment on TagFlag {\n    _id\n    createdAt\n    name\n    slug\n    order\n    deleted\n    contents { \n      html\n      htmlHighlight\n      plaintextDescription\n    }\n  }\n": types.TagFlagFragmentFragmentDoc,
    "\n  fragment TagFlagEditFragment on TagFlag {\n    ...TagFlagFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n": types.TagFlagEditFragmentFragmentDoc,
    "\n  fragment TagRelBasicInfo on TagRel {\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    tagId\n    postId\n    autoApplied\n  }\n": types.TagRelBasicInfoFragmentDoc,
    "\n  fragment TagRelFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    post {\n      ...PostsList\n    }\n    currentUserVote\n    currentUserExtendedVote\n    currentUserCanVote\n  }\n": types.TagRelFragmentFragmentDoc,
    "\n  fragment TagRelHistoryFragment on TagRel {\n    ...TagRelBasicInfo\n    createdAt\n    user {\n      ...UsersMinimumInfo\n    }\n    post {\n      ...PostsList\n    }\n  }\n": types.TagRelHistoryFragmentFragmentDoc,
    "\n  fragment TagRelCreationFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    post {\n      ...PostsList\n      tagRelevance\n      tagRel(tagId: $tagId) {\n        ...WithVoteTagRel\n      }\n    }\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.TagRelCreationFragmentFragmentDoc,
    "\n  fragment TagRelMinimumFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    currentUserVote\n    currentUserExtendedVote\n    currentUserCanVote\n  }\n": types.TagRelMinimumFragmentFragmentDoc,
    "\n  fragment WithVoteTagRel on TagRel {\n    __typename\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.WithVoteTagRelFragmentDoc,
    "\n  fragment TagBasicInfo on Tag {\n    _id\n    userId\n    name\n    shortName\n    slug\n    core\n    postCount\n    adminOnly\n    canEditUserIds\n    suggestedAsFilter\n    needsReview\n    descriptionTruncationCount\n    createdAt\n    wikiOnly\n    deleted\n    isSubforum\n    noindex\n    isArbitalImport\n    isPlaceholderPage\n\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n": types.TagBasicInfoFragmentDoc,
    "\n  fragment TagDetailsFragment on Tag {\n    ...TagBasicInfo\n    subtitle\n    oldSlugs\n    isRead\n    defaultOrder\n    reviewedByUserId\n    wikiGrade\n    subforumModeratorIds\n    subforumModerators {\n      ...UsersMinimumInfo\n    }\n    moderationGuidelines {\n      _id\n      html\n    }\n    bannerImageId\n    squareImageId\n    lesswrongWikiImportSlug\n    lesswrongWikiImportRevision\n    sequence {\n      ...SequencesPageFragment\n    }\n  }\n": types.TagDetailsFragmentFragmentDoc,
    "\n  fragment TagFragment on Tag {\n    ...TagDetailsFragment\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      html\n      htmlHighlight\n      plaintextDescription\n      version\n      editedAt\n    }\n    canVoteOnRels\n  }\n": types.TagFragmentFragmentDoc,
    "\n  fragment TagHistoryFragment on Tag {\n    ...TagFragment\n    textLastUpdatedAt\n    tableOfContents\n    user {\n      ...UsersMinimumInfo\n    }\n    lensesIncludingDeleted {\n      ...MultiDocumentContentDisplay\n    }\n  }\n": types.TagHistoryFragmentFragmentDoc,
    "\n  fragment TagCreationHistoryFragment on Tag {\n    ...TagFragment\n    user {\n      ...UsersMinimumInfo\n    }\n    description {\n      html\n    }\n  }\n": types.TagCreationHistoryFragmentFragmentDoc,
    "\n  fragment TagRevisionFragment on Tag {\n    ...TagDetailsFragment\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    isRead\n    description(version: $version) {\n      _id\n      version\n      html\n      htmlHighlight\n      plaintextDescription\n      editedAt\n      \n      user {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n": types.TagRevisionFragmentFragmentDoc,
    "\n  fragment TagPreviewFragment on Tag {\n    ...TagBasicInfo\n    isRead\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      htmlHighlight\n    }\n    canVoteOnRels\n    isArbitalImport\n  }\n": types.TagPreviewFragmentFragmentDoc,
    "\n  fragment TagSectionPreviewFragment on Tag {\n    ...TagBasicInfo\n    isRead\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      htmlHighlightStartingAtHash(hash: $hash)\n    }\n    canVoteOnRels\n  }\n": types.TagSectionPreviewFragmentFragmentDoc,
    "\n  fragment TagSubforumFragment on Tag {\n    ...TagPreviewFragment\n    subforumModeratorIds\n    tableOfContents\n    subforumWelcomeText {\n      _id\n      html\n    }\n  }\n": types.TagSubforumFragmentFragmentDoc,
    "\n  fragment TagSubtagFragment on Tag {\n    _id\n    subforumModeratorIds\n    subTags {\n      ...TagPreviewFragment\n    }\n  }\n": types.TagSubtagFragmentFragmentDoc,
    "\n  fragment TagSubforumSidebarFragment on Tag {\n    ...TagBasicInfo\n  }\n": types.TagSubforumSidebarFragmentFragmentDoc,
    "\n  fragment TagDetailedPreviewFragment on Tag {\n    ...TagDetailsFragment\n    description {\n      _id\n      htmlHighlight\n    }\n  }\n": types.TagDetailedPreviewFragmentFragmentDoc,
    "\n  fragment TagWithFlagsFragment on Tag {\n    ...TagFragment\n    tagFlagsIds\n    tagFlags {\n      ...TagFlagFragment\n    }\n  }\n": types.TagWithFlagsFragmentFragmentDoc,
    "\n  fragment TagWithFlagsAndRevisionFragment on Tag {\n    ...TagRevisionFragment\n    tagFlagsIds\n    tagFlags {\n      ...TagFlagFragment\n    }\n  }\n": types.TagWithFlagsAndRevisionFragmentFragmentDoc,
    "\n  fragment ArbitalLinkedPagesFragment on ArbitalLinkedPages {\n    faster {\n      _id\n      name\n      slug\n    }\n    slower {\n      _id\n      name\n      slug\n    }\n    moreTechnical {\n      _id\n      name\n      slug\n    }\n    lessTechnical {\n      _id\n      name\n      slug\n    }\n    requirements {\n      _id\n      name\n      slug\n    }\n    teaches {\n      _id\n      name\n      slug\n    }\n    parents {\n      _id\n      name\n      slug\n    }\n    children {\n      _id\n      name\n      slug\n    }\n  }\n": types.ArbitalLinkedPagesFragmentFragmentDoc,
    "\n  fragment TagPageArbitalContentFragment on Tag {\n    lenses {\n      ...MultiDocumentWithContributors\n    }\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n  }\n": types.TagPageArbitalContentFragmentFragmentDoc,
    "\n  fragment TagPageFragment on Tag {\n    ...TagWithFlagsFragment\n    tableOfContents\n    postsDefaultSortOrder\n    subforumIntroPost {\n      ...PostsListWithVotes\n    }\n    subforumWelcomeText {\n      _id\n      html\n    }\n    contributors(limit: $contributorsLimit) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    canVoteOnRels\n    forceAllowType3Audio\n    textLastUpdatedAt\n  }\n": types.TagPageFragmentFragmentDoc,
    "\n  fragment TagPageWithArbitalContentFragment on Tag {\n    ...TagPageFragment\n    ...TagPageArbitalContentFragment\n  }\n": types.TagPageWithArbitalContentFragmentFragmentDoc,
    "\n  fragment AllTagsPageFragment on Tag {\n    ...TagWithFlagsFragment\n    tableOfContents\n  }\n": types.AllTagsPageFragmentFragmentDoc,
    "\n  fragment TagPageWithRevisionFragment on Tag {\n    ...TagWithFlagsAndRevisionFragment\n    tableOfContents(version: $version)\n    textLastUpdatedAt\n    postsDefaultSortOrder\n    subforumIntroPost {\n      ...PostsListWithVotes\n    }\n    subforumWelcomeText {\n      _id\n      html\n    }\n    contributors(limit: $contributorsLimit, version: $version) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    canVoteOnRels\n    forceAllowType3Audio\n  }\n": types.TagPageWithRevisionFragmentFragmentDoc,
    "\n  fragment TagPageRevisionWithArbitalContentFragment on Tag {\n    ...TagPageWithRevisionFragment\n    ...TagPageArbitalContentFragment\n  }\n": types.TagPageRevisionWithArbitalContentFragmentFragmentDoc,
    "\n  fragment TagFullContributorsList on Tag {\n    contributors {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n  }\n": types.TagFullContributorsListFragmentDoc,
    "\n  fragment TagEditFragment on Tag {\n    ...TagDetailsFragment\n    isPostType\n    parentTagId\n    parentTag {\n      ...TagBasicInfo\n    }\n    subforumIntroPostId\n    tagFlagsIds\n    postsDefaultSortOrder\n    introSequenceId\n    \n    autoTagModel\n    autoTagPrompt\n    \n    description {\n      ...RevisionEdit\n    }\n    subforumWelcomeText {\n      ...RevisionEdit\n    }\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n  }\n": types.TagEditFragmentFragmentDoc,
    "\n  fragment TagRecentDiscussion on Tag {\n    ...TagFragment\n    lastVisitedAt\n    recentComments(tagCommentsLimit: $tagCommentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsList\n    }\n  }\n": types.TagRecentDiscussionFragmentDoc,
    "\n  fragment SunshineTagFragment on Tag {\n    ...TagFragment\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n": types.SunshineTagFragmentFragmentDoc,
    "\n  fragment UserOnboardingTag on Tag {\n    _id\n    name\n    slug\n    bannerImageId\n    squareImageId\n  }\n": types.UserOnboardingTagFragmentDoc,
    "\n  fragment TagName on Tag {\n    _id\n    name\n    slug\n  }\n": types.TagNameFragmentDoc,
    "\n  fragment ExplorePageTagFragment on Tag {\n    ...TagFragment\n    contributors(limit: $contributorsLimit) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    legacyData\n  }\n": types.ExplorePageTagFragmentFragmentDoc,
    "\n  fragment ConceptItemFragment on Tag {\n    _id\n    core\n    name\n    slug\n    oldSlugs\n    postCount\n    baseScore\n    description {\n      _id\n      wordCount\n    }\n    wikiOnly\n    isArbitalImport\n    coreTagId\n    maxScore\n    usersWhoLiked {\n      _id\n      displayName\n    }\n  }\n": types.ConceptItemFragmentFragmentDoc,
    "\n  fragment TagPageWithArbitalContentAndLensRevisionFragment on Tag {\n    ...TagPageFragment\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    lenses(lensSlug: $lensSlug, version: $version) {\n      ...MultiDocumentWithContributorsRevision\n    }\n  }\n": types.TagPageWithArbitalContentAndLensRevisionFragmentFragmentDoc,
    "\n  fragment WithVoteTag on Tag {\n    ...TagBasicInfo\n  }\n": types.WithVoteTagFragmentDoc,
    "\n  fragment TypingIndicatorInfo on TypingIndicator {\n    _id\n    userId\n    documentId\n    lastUpdated\n  }\n": types.TypingIndicatorInfoFragmentDoc,
    "\n  fragment UserEAGDetailsMinimumInfo on UserEAGDetail {\n    _id\n    userId\n    createdAt\n    lastUpdated\n    careerStage\n    countryOrRegion\n    nearestCity\n    willingnessToRelocate\n    experiencedIn\n    interestedIn\n  }\n": types.UserEagDetailsMinimumInfoFragmentDoc,
    "\n  fragment UserJobAdsMinimumInfo on UserJobAd {\n    _id\n    userId\n    createdAt\n    lastUpdated\n    jobName\n    adState\n    reminderSetAt\n  }\n": types.UserJobAdsMinimumInfoFragmentDoc,
    "\n  fragment UserMostValuablePostInfo on UserMostValuablePost {\n    _id\n    userId\n    postId\n    deleted\n  }\n": types.UserMostValuablePostInfoFragmentDoc,
    "\n  fragment UserRateLimitDisplay on UserRateLimit {\n    _id\n    user {\n      ...UsersMinimumInfo\n    }\n    userId\n    type\n    actionsPerInterval\n    intervalUnit\n    intervalLength\n    createdAt\n    endedAt\n  }\n": types.UserRateLimitDisplayFragmentDoc,
    "\n  fragment UserTagRelDetails on UserTagRel {\n    _id\n    userId\n    tagId\n    subforumShowUnreadInSidebar\n    subforumEmailNotifications\n    subforumHideIntroPost\n  }\n": types.UserTagRelDetailsFragmentDoc,
    "\n  fragment UsersMinimumInfo on User {\n    _id\n    slug\n    createdAt\n    username\n    displayName\n    profileImageId\n    previousDisplayName\n    fullName\n    karma\n    afKarma\n    deleted\n    isAdmin\n    htmlBio\n    jobTitle\n    organization\n    postCount\n    commentCount\n    sequenceCount\n    afPostCount\n    afCommentCount\n    spamRiskScore\n    tagRevisionCount\n    reviewedByUserId\n  }\n": types.UsersMinimumInfoFragmentDoc,
    "\n  fragment UsersProfile on User {\n    ...UsersMinimumInfo\n    oldSlugs\n    groups\n    jobTitle\n    organization\n    careerStage\n    biography {\n      ...RevisionDisplay\n    }\n    howOthersCanHelpMe {\n      ...RevisionDisplay\n    }\n    howICanHelpOthers {\n      ...RevisionDisplay\n    }\n    profileTagIds\n    profileTags {\n      ...TagPreviewFragment\n    }\n    organizerOfGroupIds\n    organizerOfGroups {\n      ...localGroupsBase\n    }\n    programParticipation\n    website\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    githubProfileURL\n    frontpagePostCount\n    afSequenceCount\n    afSequenceDraftCount\n    sequenceDraftCount\n    moderationStyle\n    moderationGuidelines {\n      ...RevisionDisplay\n    }\n    bannedUserIds\n    location\n    googleLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    mongoLocation\n    shortformFeedId\n    viewUnreviewedComments\n    auto_subscribe_to_my_posts\n    auto_subscribe_to_my_comments\n    autoSubscribeAsOrganizer\n    petrovPressedButtonDate\n    petrovOptOut\n    sortDraftsBy\n    email\n    emails\n    banned\n    ...SharedUserBooleans\n    noindex\n    paymentEmail\n    paymentInfo\n    goodHeartTokens\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n  }\n": types.UsersProfileFragmentDoc,
    "\n  fragment UsersCurrent on User {\n    ...UsersProfile\n\n    beta\n    email\n    services\n    acceptedTos\n    pageUrl\n    banned\n    isReviewed\n    nullifyVotes\n    hideIntercom\n    hideNavigationSidebar\n    hideCommunitySection\n    expandedFrontpageSections\n    hidePostsRecommendations\n    currentFrontpageFilter\n    frontpageSelectedTab\n    frontpageFilterSettings\n    hideFrontpageFilterSettingsDesktop\n    allPostsTimeframe\n    allPostsSorting\n    allPostsFilter\n    allPostsShowLowKarma\n    allPostsIncludeEvents\n    allPostsHideCommunity\n    allPostsOpenSettings\n    draftsListSorting\n    draftsListShowArchived\n    draftsListShowShared\n    lastNotificationsCheck\n    bannedUserIds\n    bannedPersonalUserIds\n    moderationStyle\n    noKibitz\n    showHideKarmaOption\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    commentSorting\n    location\n    googleLocation\n    mongoLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    nearbyEventsNotifications\n    nearbyEventsNotificationsLocation\n    nearbyEventsNotificationsRadius\n    nearbyPeopleNotificationThreshold\n    hideFrontpageMap\n    emailSubscribedToCurated\n    subscribedToDigest\n    unsubscribeFromAll\n    emails\n    whenConfirmationEmailSent\n    hideSubscribePoke\n    hideMeetupsPoke\n    hideHomeRHS\n    noCollapseCommentsFrontpage\n    noCollapseCommentsPosts\n    noSingleLineComments\n    showCommunityInRecentDiscussion\n    karmaChangeNotifierSettings\n    karmaChangeLastOpened\n    shortformFeedId\n    viewUnreviewedComments\n    recommendationSettings\n    theme\n\n    bookmarkedPostsMetadata\n\n    hiddenPostsMetadata\n    auto_subscribe_to_my_posts\n    auto_subscribe_to_my_comments\n    autoSubscribeAsOrganizer\n    noExpandUnreadCommentsReview\n    reviewVotesQuadratic\n    reviewVotesQuadratic2019\n    reviewVotesQuadratic2020\n    hideTaggingProgressBar\n    hideFrontpageBookAd\n    hideFrontpageBook2019Ad\n\n    abTestKey\n    abTestOverrides\n\n    sortDraftsBy\n    reactPaletteStyle\n\n    petrovPressedButtonDate\n    petrovLaunchCodeDate\n    petrovOptOut\n    lastUsedTimezone\n    ...SharedUserBooleans\n\n    acknowledgedNewUserGuidelines\n    notificationSubforumUnread\n    subforumPreferredLayout\n    \n    hideJobAdUntil\n    criticismTipsDismissed\n    \n    allowDatadogSessionReplay\n    hideFrontpageBook2020Ad\n\n    hideDialogueFacilitation\n    optedInToDialogueFacilitation\n    revealChecksToAdmins\n    notificationNewDialogueChecks\n    notificationYourTurnMatchForm\n\n    showDialoguesList\n    showMyDialogues\n    showMatches\n    showRecommendedPartners\n    hideActiveDialogueUsers\n\n    hideSunshineSidebar\n    optedOutOfSurveys\n    postGlossariesPinned\n    generateJargonForDrafts\n    generateJargonForPublishedPosts\n  }\n": types.UsersCurrentFragmentDoc,
    "\n  fragment UsersCurrentCommentRateLimit on User {\n    _id\n    rateLimitNextAbleToComment(postId: $postId)\n  }\n": types.UsersCurrentCommentRateLimitFragmentDoc,
    "\n  fragment UsersCurrentPostRateLimit on User {\n    _id\n    rateLimitNextAbleToPost(eventForm: $eventForm)\n  }\n": types.UsersCurrentPostRateLimitFragmentDoc,
    "\n  fragment UserBookmarkedPosts on User {\n    _id\n    bookmarkedPosts {\n      ...PostsList\n    }\n  }\n": types.UserBookmarkedPostsFragmentDoc,
    "\n  fragment UserKarmaChanges on User {\n    _id\n    karmaChanges {\n      totalChange\n      updateFrequency\n      startDate\n      endDate\n      nextBatchDate\n      posts {\n        _id\n        scoreChange\n        postId\n        title\n        slug\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n      }\n      comments {\n        _id\n        scoreChange\n        commentId\n        description\n        postId\n        postTitle\n        postSlug\n        tagSlug\n        tagName\n        tagCommentType\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n      }\n      tagRevisions {\n        _id\n        scoreChange\n        tagId\n        tagSlug\n        tagName\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n      }\n      todaysKarmaChanges {\n        posts {\n          _id\n          scoreChange\n          postId\n          title\n          slug\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n        comments {\n          _id\n          scoreChange\n          commentId\n          description\n          postId\n          postTitle\n          postSlug\n          tagSlug\n          tagName\n          tagCommentType\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n        tagRevisions {\n          _id\n          scoreChange\n          tagId\n          tagSlug\n          tagName\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n      }\n      thisWeeksKarmaChanges {\n        posts {\n          _id\n          scoreChange\n          postId\n          title\n          slug\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n        comments {\n          _id\n          scoreChange\n          commentId\n          description\n          postId\n          postTitle\n          postSlug\n          tagSlug\n          tagName\n          tagCommentType\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n        tagRevisions {\n          _id\n          scoreChange\n          tagId\n          tagSlug\n          tagName\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n      }\n    }\n  }\n": types.UserKarmaChangesFragmentDoc,
    "\n  fragment UsersBannedFromUsersModerationLog on User {\n    _id\n    slug\n    displayName\n    bannedUserIds\n    bannedPersonalUserIds\n  }\n": types.UsersBannedFromUsersModerationLogFragmentDoc,
    "\n  fragment SunshineUsersList on User {\n    ...UsersMinimumInfo\n    karma\n    htmlBio\n    website\n    createdAt\n    email\n    emails\n    commentCount\n    maxCommentCount\n    postCount\n    maxPostCount\n    voteCount\n    smallUpvoteCount\n    bigUpvoteCount\n    smallDownvoteCount\n    bigDownvoteCount\n    banned\n    reviewedByUserId\n    reviewedAt\n    signUpReCaptchaRating\n    mapLocation\n    needsReview\n    sunshineNotes\n    sunshineFlagged\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n    snoozedUntilContentCount\n    nullifyVotes\n    deleteContent\n    \n    moderatorActions {\n      ...ModeratorActionDisplay\n    }\n    usersContactedBeforeReview\n    associatedClientIds {\n      clientId\n      firstSeenReferrer\n      firstSeenLandingPage\n      userIds\n    }\n    altAccountsDetected\n\n    voteReceivedCount\n    smallUpvoteReceivedCount\n    bigUpvoteReceivedCount\n    smallDownvoteReceivedCount\n    bigDownvoteReceivedCount\n\n    recentKarmaInfo\n    lastNotificationsCheck\n  }\n": types.SunshineUsersListFragmentDoc,
    "\n  fragment UserAltAccountsFragment on User {\n    ...SunshineUsersList\n    IPs\n  }\n": types.UserAltAccountsFragmentFragmentDoc,
    "\n  fragment SharedUserBooleans on User {\n    walledGardenInvite\n    hideWalledGardenUI\n    walledGardenPortalOnboarded\n    taggingDashboardCollapsed\n    usernameUnset\n  }\n": types.SharedUserBooleansFragmentDoc,
    "\n  fragment UsersMapEntry on User {\n    _id\n    displayName\n    username\n    fullName\n    slug\n    mapLocationLatLng {\n      lat\n      lng\n    }\n    mapLocationSet\n    htmlMapMarkerText\n  }\n": types.UsersMapEntryFragmentDoc,
    "\n  fragment UsersEdit on User {\n    ...UsersCurrent\n    biography {\n      ...RevisionEdit\n    }\n    # Moderation Guidelines editor information\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n\n    # UI Settings\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    hideIntercom\n    commentSorting\n    currentFrontpageFilter\n    noCollapseCommentsPosts\n    noCollapseCommentsFrontpage\n    noSingleLineComments\n    hideCommunitySection\n    showCommunityInRecentDiscussion\n    hidePostsRecommendations\n    beta\n    theme\n\n    # Emails\n    email\n    whenConfirmationEmailSent\n    emailSubscribedToCurated\n    subscribedToDigest\n    unsubscribeFromAll\n    hasAuth0Id\n\n    # Moderation\n    moderatorAssistance\n    collapseModerationGuidelines\n    bannedUserIds\n    bannedPersonalUserIds\n    noKibitz\n    showHideKarmaOption\n\n    # Ban & Purge\n    nullifyVotes\n    deleteContent\n    banned\n\n    # Name\n    username\n    displayName\n    fullName\n\n    # Location\n    mongoLocation\n    googleLocation\n    location\n    \n    # Map Location (public)\n    mapLocation\n    \n    # Privacy settings\n    hideFromPeopleDirectory\n    allowDatadogSessionReplay\n\n    # Admin & Review\n    reviewedByUserId\n\n    # Alignment Forum\n    reviewForAlignmentForumUserId\n    groups\n    afApplicationText\n    afSubmittedApplication\n\n    # Karma Settings\n    karmaChangeLastOpened\n    karmaChangeNotifierSettings\n\n    notificationShortformContent\n    notificationCommentsOnSubscribedPost\n    notificationRepliesToMyComments\n    notificationRepliesToSubscribedComments\n    notificationSubscribedUserPost\n    notificationSubscribedUserComment\n    notificationSubscribedTagPost\n    notificationSubscribedSequencePost\n    notificationPostsInGroups\n    notificationPrivateMessage\n    notificationSharedWithMe\n    notificationAlignmentSubmissionApproved\n    notificationEventInRadius\n    notificationRSVPs\n    notificationCommentsOnDraft\n    notificationPostsNominatedReview\n    notificationGroupAdministration\n    notificationSubforumUnread\n    notificationNewMention\n    notificationNewDialogueChecks\n    notificationYourTurnMatchForm\n\n    hideFrontpageMap\n    hideTaggingProgressBar\n    hideFrontpageBookAd\n    hideFrontpageBook2020Ad\n\n    deleted\n    permanentDeletionRequestedAt\n\n    twitterProfileURLAdmin\n  }\n": types.UsersEditFragmentDoc,
    "\n  fragment UsersAdmin on User {\n    _id\n    username\n    createdAt\n    isAdmin\n    displayName\n    email\n    slug\n    groups\n    services\n    karma\n  }\n": types.UsersAdminFragmentDoc,
    "\n  fragment UsersWithReviewInfo on User {\n    ...UsersMinimumInfo\n    reviewVoteCount\n    email\n  }\n": types.UsersWithReviewInfoFragmentDoc,
    "\n  fragment UsersProfileEdit on User {\n    _id\n    slug\n    displayName\n    jobTitle\n    organization\n    careerStage\n    profileImageId\n    biography {\n      ...RevisionEdit\n    }\n    howOthersCanHelpMe {\n      ...RevisionEdit\n    }\n    howICanHelpOthers {\n      ...RevisionEdit\n    }\n    profileTagIds\n    organizerOfGroupIds\n    organizerOfGroups {\n      ...localGroupsBase\n    }\n    programParticipation\n    mapLocation\n    website\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    githubProfileURL\n  }\n": types.UsersProfileEditFragmentDoc,
    "\n  fragment UsersCrosspostInfo on User {\n    _id\n    username\n    slug\n    fmCrosspostUserId\n  }\n": types.UsersCrosspostInfoFragmentDoc,
    "\n  fragment UsersOptedInToDialogueFacilitation on User {\n    _id\n    displayName\n  }\n": types.UsersOptedInToDialogueFacilitationFragmentDoc,
    "\n  fragment UserOnboardingAuthor on User {\n    _id\n    displayName\n    profileImageId\n    karma\n    jobTitle\n    organization\n  }\n": types.UserOnboardingAuthorFragmentDoc,
    "\n  fragment UsersSocialMediaInfo on User {\n    ...UsersProfile\n    twitterProfileURLAdmin\n  }\n": types.UsersSocialMediaInfoFragmentDoc,
    "\n  fragment SuggestAlignmentUser on User {\n    ...UsersMinimumInfo\n    afKarma\n    afPostCount\n    afCommentCount\n    reviewForAlignmentForumUserId\n    groups\n    afApplicationText\n    afSubmittedApplication\n  }\n": types.SuggestAlignmentUserFragmentDoc,
    "\n  fragment TagRelVotes on Vote {\n    _id\n    userId\n    voteType\n    power\n    documentId\n    votedAt\n    isUnvote\n    tagRel {\n      ...WithVoteTagRel\n    }\n  }\n": types.TagRelVotesFragmentDoc,
    "\n  fragment TagVotingActivity on Vote {\n    ...TagRelVotes\n    tagRel {\n      ...TagRelFragment\n    }\n  }\n": types.TagVotingActivityFragmentDoc,
    "\n  fragment UserVotes on Vote {\n    _id\n    userId\n    voteType\n    power\n    cancelled\n    documentId\n    votedAt\n    isUnvote\n    collectionName\n  }\n": types.UserVotesFragmentDoc,
    "\n  fragment UserVotesWithDocument on Vote {\n    ...UserVotes\n    comment {\n      ...CommentsListWithParentMetadata\n    }\n    post {\n      ...PostsListWithVotes\n    }\n  }\n": types.UserVotesWithDocumentFragmentDoc,
    "\n    query getCurrentUser {\n      currentUser {\n        ...UsersCurrent\n      }\n    }\n    \n  ": types.GetCurrentUserDocument,
    "\n    query Lightcone2024FundraiserStripeAmounts {\n      Lightcone2024FundraiserStripeAmounts\n    }\n  ": types.Lightcone2024FundraiserStripeAmountsDocument,
    "\n  fragment SubscribedPostAndCommentsFeed on SubscribedPostAndComments {\n    _id\n    post {\n      ...PostsList\n    }\n    comments {\n      ...CommentsList\n    }\n    expandCommentIds\n    postIsFromSubscribedUser\n  }\n": types.SubscribedPostAndCommentsFeedFragmentDoc,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation revokeGoogleServiceAccountTokens {\n      revokeGoogleServiceAccountTokens\n    }\n  "): (typeof documents)["\n    mutation revokeGoogleServiceAccountTokens {\n      revokeGoogleServiceAccountTokens\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query AdminMetadataQuery {\n    AdminMetadata\n  }"): (typeof documents)["query AdminMetadataQuery {\n    AdminMetadata\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query SearchSynonyms {\n      SearchSynonyms\n    }\n  "): (typeof documents)["\n    query SearchSynonyms {\n      SearchSynonyms\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateSearchSynonyms($synonyms: [String!]!) {\n      UpdateSearchSynonyms(synonyms: $synonyms)\n    }"): (typeof documents)["mutation UpdateSearchSynonyms($synonyms: [String!]!) {\n      UpdateSearchSynonyms(synonyms: $synonyms)\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query randomUser($userIsAuthor: String!) {\n      GetRandomUser(userIsAuthor: $userIsAuthor) {\n        ...UsersMinimumInfo\n      }\n    }\n    \n  "): (typeof documents)["\n    query randomUser($userIsAuthor: String!) {\n      GetRandomUser(userIsAuthor: $userIsAuthor) {\n        ...UsersMinimumInfo\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query MigrationsDashboardQuery {\n      MigrationsDashboard {\n        migrations {\n          name\n          dateWritten\n          runs { name started finished succeeded }\n          lastRun\n        }\n      }\n    }\n  "): (typeof documents)["\n    query MigrationsDashboardQuery {\n      MigrationsDashboard {\n        migrations {\n          name\n          dateWritten\n          runs { name started finished succeeded }\n          lastRun\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query getReadHistory($limit: Int, $filter: PostReviewFilter, $sort: PostReviewSort) {\n        UserReadHistory(limit: $limit, filter: $filter, sort: $sort) {\n          posts {\n            ...PostsListWithVotes\n            lastVisitedAt\n          }\n        }\n      }\n      \n    "): (typeof documents)["\n      query getReadHistory($limit: Int, $filter: PostReviewFilter, $sort: PostReviewSort) {\n        UserReadHistory(limit: $limit, filter: $filter, sort: $sort) {\n          posts {\n            ...PostsListWithVotes\n            lastVisitedAt\n          }\n        }\n      }\n      \n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation upsertUserTypingIndicator($documentId: String!) {\n      upsertUserTypingIndicator(documentId: $documentId) {\n        ...TypingIndicatorInfo\n      }\n    }\n    \n  "): (typeof documents)["\n    mutation upsertUserTypingIndicator($documentId: String!) {\n      upsertUserTypingIndicator(documentId: $documentId) {\n        ...TypingIndicatorInfo\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation sendVertexMediaCompleteEventMutation($postId: String!, $attributionId: String) {\n      sendVertexMediaCompleteEvent(postId: $postId, attributionId: $attributionId)\n    }\n  "): (typeof documents)["\n    mutation sendVertexMediaCompleteEventMutation($postId: String!, $attributionId: String) {\n      sendVertexMediaCompleteEvent(postId: $postId, attributionId: $attributionId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation sendVertexViewHomePageEventMutation {\n      sendVertexViewHomePageEvent\n    }\n  "): (typeof documents)["\n    mutation sendVertexViewHomePageEventMutation {\n      sendVertexViewHomePageEvent\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation lockThread($commentId: String!, $until: String) {\n      lockThread(commentId: $commentId, until: $until)\n    }\n  "): (typeof documents)["\n    mutation lockThread($commentId: String!, $until: String) {\n      lockThread(commentId: $commentId, until: $until)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation unlockThread($commentId: String!) {\n      unlockThread(commentId: $commentId)\n    }\n  "): (typeof documents)["\n    mutation unlockThread($commentId: String!) {\n      unlockThread(commentId: $commentId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getRssPostChanges($postId: String!) {\n      RssPostChanges(postId: $postId) {\n        isChanged\n        newHtml\n        htmlDiff\n      }\n    }\n  "): (typeof documents)["\n    query getRssPostChanges($postId: String!) {\n      RssPostChanges(postId: $postId) {\n        isChanged\n        newHtml\n        htmlDiff\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation setIsHidden($postId: String!, $isHidden: Boolean!) {\n      setIsHidden(postId: $postId, isHidden: $isHidden) {\n        ...UsersCurrent\n      }\n    }\n    \n  "): (typeof documents)["\n    mutation setIsHidden($postId: String!, $isHidden: Boolean!) {\n      setIsHidden(postId: $postId, isHidden: $isHidden) {\n        ...UsersCurrent\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getDigestPosts($num: Int) {\n      DigestPosts(num: $num) {\n        ...PostsListWithVotes\n      }\n    }\n    \n  "): (typeof documents)["\n    query getDigestPosts($num: Int) {\n      DigestPosts(num: $num) {\n        ...PostsListWithVotes\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query getUserReadsPerCoreTag($userId: String!) {\n        UserReadsPerCoreTag(userId: $userId) {\n          tagId\n          userReadCount\n        }\n      }\n    "): (typeof documents)["\n      query getUserReadsPerCoreTag($userId: String!) {\n        UserReadsPerCoreTag(userId: $userId) {\n          tagId\n          userReadCount\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getDigestPlannerData($digestId: String, $startDate: Date, $endDate: Date) {\n      DigestPlannerData(digestId: $digestId, startDate: $startDate, endDate: $endDate) {\n        post {\n          ...PostsListWithVotes\n        }\n        digestPost {\n          _id\n          emailDigestStatus\n          onsiteDigestStatus\n        }\n        rating\n      }\n    }\n    \n    "): (typeof documents)["\n    query getDigestPlannerData($digestId: String, $startDate: Date, $endDate: Date) {\n      DigestPlannerData(digestId: $digestId, startDate: $startDate, endDate: $endDate) {\n        post {\n          ...PostsListWithVotes\n        }\n        digestPost {\n          _id\n          emailDigestStatus\n          onsiteDigestStatus\n        }\n        rating\n      }\n    }\n    \n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation NewUserCompleteProfile(\n      $username: String!,\n      $subscribeToDigest: Boolean!,\n      $email: String,\n      $acceptedTos: Boolean\n    ) {\n      NewUserCompleteProfile(\n        username: $username,\n        subscribeToDigest: $subscribeToDigest,\n        email: $email,\n        acceptedTos: $acceptedTos\n      ) {\n        username\n        slug\n        displayName\n      }\n    }\n  "): (typeof documents)["\n    mutation NewUserCompleteProfile(\n      $username: String!,\n      $subscribeToDigest: Boolean!,\n      $email: String,\n      $acceptedTos: Boolean\n    ) {\n      NewUserCompleteProfile(\n        username: $username,\n        subscribeToDigest: $subscribeToDigest,\n        email: $email,\n        acceptedTos: $acceptedTos\n      ) {\n        username\n        slug\n        displayName\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query isDisplayNameTaken($displayName: String!) {\n      IsDisplayNameTaken(displayName: $displayName)\n    }\n  "): (typeof documents)["\n    query isDisplayNameTaken($displayName: String!) {\n      IsDisplayNameTaken(displayName: $displayName)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getWrappedData($userId: String!, $year: Int!) {\n      UserWrappedDataByYear(userId: $userId, year: $year) {\n        engagementPercentile\n        postsReadCount\n        totalSeconds\n        daysVisited\n        mostReadTopics {\n          name\n          shortName\n          slug\n          count\n        }\n        relativeMostReadCoreTopics {\n          tagId\n          tagName\n          tagShortName\n          userReadCount\n          readLikelihoodRatio\n        }\n        mostReadAuthors {\n          _id\n          displayName\n          slug\n          profileImageId\n          count\n          engagementPercentile\n        }\n        topPosts {\n          _id\n          title\n          slug\n          baseScore\n        }\n        postCount\n        authorPercentile\n        topComment {\n          _id\n          postedAt\n          postId\n          postTitle\n          postSlug\n          baseScore\n          extendedScore\n          contents {\n            html\n          }\n        }\n        commentCount\n        commenterPercentile\n        topShortform {\n          _id\n          postedAt\n          postId\n          baseScore\n          extendedScore\n          contents {\n            html\n          }\n        }\n        shortformCount\n        shortformPercentile\n        karmaChange\n        combinedKarmaVals {\n          date\n          postKarma\n          commentKarma\n        }\n        mostReceivedReacts {\n          name\n          count\n        }\n        personality\n      }\n    }\n  "): (typeof documents)["\n    query getWrappedData($userId: String!, $year: Int!) {\n      UserWrappedDataByYear(userId: $userId, year: $year) {\n        engagementPercentile\n        postsReadCount\n        totalSeconds\n        daysVisited\n        mostReadTopics {\n          name\n          shortName\n          slug\n          count\n        }\n        relativeMostReadCoreTopics {\n          tagId\n          tagName\n          tagShortName\n          userReadCount\n          readLikelihoodRatio\n        }\n        mostReadAuthors {\n          _id\n          displayName\n          slug\n          profileImageId\n          count\n          engagementPercentile\n        }\n        topPosts {\n          _id\n          title\n          slug\n          baseScore\n        }\n        postCount\n        authorPercentile\n        topComment {\n          _id\n          postedAt\n          postId\n          postTitle\n          postSlug\n          baseScore\n          extendedScore\n          contents {\n            html\n          }\n        }\n        commentCount\n        commenterPercentile\n        topShortform {\n          _id\n          postedAt\n          postId\n          baseScore\n          extendedScore\n          contents {\n            html\n          }\n        }\n        shortformCount\n        shortformPercentile\n        karmaChange\n        combinedKarmaVals {\n          date\n          postKarma\n          commentKarma\n        }\n        mostReceivedReacts {\n          name\n          count\n        }\n        personality\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation sendNewDialogueMessageNotification($postId: String!, $dialogueHtml: String!) {\n      sendNewDialogueMessageNotification(postId: $postId, dialogueHtml: $dialogueHtml)\n    }\n  "): (typeof documents)["\n    mutation sendNewDialogueMessageNotification($postId: String!, $dialogueHtml: String!) {\n      sendNewDialogueMessageNotification(postId: $postId, dialogueHtml: $dialogueHtml)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getPostIsCriticism($args: JSON) {\n      PostIsCriticism(args: $args)\n    }\n    "): (typeof documents)["\n    query getPostIsCriticism($args: JSON) {\n      PostIsCriticism(args: $args)\n    }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation autosaveRevision($postId: String!, $contents: AutosaveContentType!) {\n      autosaveRevision(postId: $postId, contents: $contents) {\n        ...RevisionEdit\n      }\n    }\n    \n  "): (typeof documents)["\n    mutation autosaveRevision($postId: String!, $contents: AutosaveContentType!) {\n      autosaveRevision(postId: $postId, contents: $contents) {\n        ...RevisionEdit\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query LinkSharingQuery($postId: String!, $linkSharingKey: String!) {\n      getLinkSharedPost(postId: $postId, linkSharingKey: $linkSharingKey) {\n        ...PostsEdit\n      }\n    }\n    \n  "): (typeof documents)["\n    query LinkSharingQuery($postId: String!, $linkSharingKey: String!) {\n      getLinkSharedPost(postId: $postId, linkSharingKey: $linkSharingKey) {\n        ...PostsEdit\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation revertPostToRevision($postId: String!, $revisionId: String!) {\n      revertPostToRevision(postId: $postId, revisionId: $revisionId) {\n        ...PostsEdit\n      }\n    }\n    \n  "): (typeof documents)["\n    mutation revertPostToRevision($postId: String!, $revisionId: String!) {\n      revertPostToRevision(postId: $postId, revisionId: $revisionId) {\n        ...PostsEdit\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation revertToRevision($tagId: String!, $revertToRevisionId: String!, $contributorsLimit: Int) {\n      revertTagToRevision(tagId: $tagId, revertToRevisionId: $revertToRevisionId) {\n        ...TagPageFragment\n      }\n    }\n    \n  "): (typeof documents)["\n    mutation revertToRevision($tagId: String!, $revertToRevisionId: String!, $contributorsLimit: Int) {\n      revertTagToRevision(tagId: $tagId, revertToRevisionId: $revertToRevisionId) {\n        ...TagPageFragment\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ConvertDocument($document: JSON, $targetFormat: String) {\n      convertDocument(document: $document, targetFormat: $targetFormat)\n    }\n  "): (typeof documents)["\n    query ConvertDocument($document: JSON, $targetFormat: String) {\n      convertDocument(document: $document, targetFormat: $targetFormat)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation unlinkCrossposter {\n      unlinkCrossposter\n    }\n  "): (typeof documents)["\n    mutation unlinkCrossposter {\n      unlinkCrossposter\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation AddForumEventVote($forumEventId: String!, $x: Float!, $delta: Float, $postIds: [String]) {\n      AddForumEventVote(forumEventId: $forumEventId, x: $x, delta: $delta, postIds: $postIds)\n    }\n  "): (typeof documents)["\n    mutation AddForumEventVote($forumEventId: String!, $x: Float!, $delta: Float, $postIds: [String]) {\n      AddForumEventVote(forumEventId: $forumEventId, x: $x, delta: $delta, postIds: $postIds)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation RemoveForumEventVote($forumEventId: String!) {\n      RemoveForumEventVote(forumEventId: $forumEventId)\n    }\n  "): (typeof documents)["\n    mutation RemoveForumEventVote($forumEventId: String!) {\n      RemoveForumEventVote(forumEventId: $forumEventId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation RemoveForumEventSticker($forumEventId: String!, $stickerId: String!) {\n      RemoveForumEventSticker(forumEventId: $forumEventId, stickerId: $stickerId)\n    }\n  "): (typeof documents)["\n    mutation RemoveForumEventSticker($forumEventId: String!, $stickerId: String!) {\n      RemoveForumEventSticker(forumEventId: $forumEventId, stickerId: $stickerId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query MultiPostAnalyticsQuery($userId: String, $postIds: [String], $sortBy: String, $desc: Boolean, $limit: Int) {\n      MultiPostAnalytics(userId: $userId, postIds: $postIds, sortBy: $sortBy, desc: $desc, limit: $limit) {\n        posts {\n          _id\n          title\n          slug\n          postedAt\n          views\n          uniqueViews\n          reads\n          meanReadingTime\n          karma\n          comments\n        }\n        totalCount\n      }\n    }\n  "): (typeof documents)["\n    query MultiPostAnalyticsQuery($userId: String, $postIds: [String], $sortBy: String, $desc: Boolean, $limit: Int) {\n      MultiPostAnalytics(userId: $userId, postIds: $postIds, sortBy: $sortBy, desc: $desc, limit: $limit) {\n        posts {\n          _id\n          title\n          slug\n          postedAt\n          views\n          uniqueViews\n          reads\n          meanReadingTime\n          karma\n          comments\n        }\n        totalCount\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query AnalyticsSeriesQuery($userId: String, $postIds: [String], $startDate: Date, $endDate: Date) {\n      AnalyticsSeries(userId: $userId, postIds: $postIds, startDate: $startDate, endDate: $endDate) {\n        date\n        views\n        reads\n        karma\n        comments\n      }\n    }\n  "): (typeof documents)["\n    query AnalyticsSeriesQuery($userId: String, $postIds: [String], $startDate: Date, $endDate: Date) {\n      AnalyticsSeries(userId: $userId, postIds: $postIds, startDate: $startDate, endDate: $endDate) {\n        date\n        views\n        reads\n        karma\n        comments\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation setIsBookmarked($postId: String!, $isBookmarked: Boolean!) {\n      setIsBookmarked(postId: $postId, isBookmarked: $isBookmarked) {\n        ...UsersCurrent\n      }\n    }\n    \n  "): (typeof documents)["\n    mutation setIsBookmarked($postId: String!, $isBookmarked: Boolean!) {\n      setIsBookmarked(postId: $postId, isBookmarked: $isBookmarked) {\n        ...UsersCurrent\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query CurrentFrontpageSurvey {\n      CurrentFrontpageSurvey {\n        ...SurveyScheduleMinimumInfo\n      }\n    }\n    \n  "): (typeof documents)["\n    query CurrentFrontpageSurvey {\n      CurrentFrontpageSurvey {\n        ...SurveyScheduleMinimumInfo\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation UserExpandFrontpageSection($section: String!, $expanded: Boolean!) {\n        UserExpandFrontpageSection(section: $section, expanded: $expanded)\n      }\n    "): (typeof documents)["\n      mutation UserExpandFrontpageSection($section: String!, $expanded: Boolean!) {\n        UserExpandFrontpageSection(section: $section, expanded: $expanded)\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation initiateConversation($participantIds: [String!]!, $af: Boolean, $moderator: Boolean) {\n      initiateConversation(participantIds: $participantIds, af: $af, moderator: $moderator) {\n        ...ConversationsMinimumInfo\n      }\n    }\n    \n  "): (typeof documents)["\n    mutation initiateConversation($participantIds: [String!]!, $af: Boolean, $moderator: Boolean) {\n      initiateConversation(participantIds: $participantIds, af: $af, moderator: $moderator) {\n        ...ConversationsMinimumInfo\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation markConversationRead($conversationId: String!) {\n        markConversationRead(conversationId: $conversationId)\n      }\n    "): (typeof documents)["\n      mutation markConversationRead($conversationId: String!) {\n        markConversationRead(conversationId: $conversationId)\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query PostAnalyticsQuery($postId: String!) {\n      PostAnalytics(postId: $postId) {\n        allViews\n        uniqueClientViews\n        uniqueClientViews10Sec\n        medianReadingTime\n        uniqueClientViews5Min\n        uniqueClientViewsSeries {\n          date\n          uniqueClientViews\n        }\n      }\n    }\n  "): (typeof documents)["\n    query PostAnalyticsQuery($postId: String!) {\n      PostAnalytics(postId: $postId) {\n        allViews\n        uniqueClientViews\n        uniqueClientViews10Sec\n        medianReadingTime\n        uniqueClientViews5Min\n        uniqueClientViewsSeries {\n          date\n          uniqueClientViews\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation increasePostViewCountMutation($postId: String) {\n      increasePostViewCount(postId: $postId)\n    }\n  "): (typeof documents)["\n    mutation increasePostViewCountMutation($postId: String) {\n      increasePostViewCount(postId: $postId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation sendVertexViewItemEventMutation($postId: String!, $attributionId: String) {\n      sendVertexViewItemEvent(postId: $postId, attributionId: $attributionId)\n    }\n  "): (typeof documents)["\n    mutation sendVertexViewItemEventMutation($postId: String!, $attributionId: String) {\n      sendVertexViewItemEvent(postId: $postId, attributionId: $attributionId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation markPostCommentsRead($postId: String!) {\n      markPostCommentsRead(postId: $postId)\n    }\n  "): (typeof documents)["\n    mutation markPostCommentsRead($postId: String!) {\n      markPostCommentsRead(postId: $postId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation RefreshDbSettings {\n      RefreshDbSettings\n    }\n  "): (typeof documents)["\n    mutation RefreshDbSettings {\n      RefreshDbSettings\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query UnreadNotificationCountQuery {\n      unreadNotificationCounts {\n        unreadNotifications\n        unreadPrivateMessages\n        faviconBadgeNumber\n        checkedAt\n      }\n    }\n  "): (typeof documents)["\n    query UnreadNotificationCountQuery {\n      unreadNotificationCounts {\n        unreadNotifications\n        unreadPrivateMessages\n        faviconBadgeNumber\n        checkedAt\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation getNewJargonTerms($postId: String!, $glossaryPrompt: String, $examplePost: String, $exampleTerm: String, $exampleAltTerm: String, $exampleDefinition: String) {\n      getNewJargonTerms(postId: $postId, glossaryPrompt: $glossaryPrompt, examplePost: $examplePost, exampleTerm: $exampleTerm, exampleAltTerm: $exampleAltTerm, exampleDefinition: $exampleDefinition) {\n        ...JargonTerms\n      }\n    }\n    \n  "): (typeof documents)["\n    mutation getNewJargonTerms($postId: String!, $glossaryPrompt: String, $examplePost: String, $exampleTerm: String, $exampleAltTerm: String, $exampleDefinition: String) {\n      getNewJargonTerms(postId: $postId, glossaryPrompt: $glossaryPrompt, examplePost: $examplePost, exampleTerm: $exampleTerm, exampleAltTerm: $exampleAltTerm, exampleDefinition: $exampleDefinition) {\n        ...JargonTerms\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getPostsWithApprovedJargon($limit: Int!) {\n      PostsWithApprovedJargon(limit: $limit) {\n        results {\n          post {\n            ...PostsListWithVotes\n          }\n          jargonTerms {\n            ...JargonTerms\n          }\n        }\n      }\n    }\n    \n    \n  "): (typeof documents)["\n    query getPostsWithApprovedJargon($limit: Int!) {\n      PostsWithApprovedJargon(limit: $limit) {\n        results {\n          post {\n            ...PostsListWithVotes\n          }\n          jargonTerms {\n            ...JargonTerms\n          }\n        }\n      }\n    }\n    \n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ArbitalPageRequest {\n      ArbitalPageData(pageAlias: \"\") {\n        title\n        html\n      }\n    }\n  "): (typeof documents)["\n    query ArbitalPageRequest {\n      ArbitalPageData(pageAlias: \"\") {\n        title\n        html\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query EmailPreviewQuery($notificationIds: [String], $postId: String) {\n        EmailPreview(notificationIds: $notificationIds, postId: $postId) { to subject html text }\n      }\n  "): (typeof documents)["\n      query EmailPreviewQuery($notificationIds: [String], $postId: String) {\n        EmailPreview(notificationIds: $notificationIds, postId: $postId) { to subject html text }\n      }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getNotificationDisplays($limit: Int, $type: String) {\n      NotificationDisplays(limit: $limit, type: $type) {\n        results\n      }\n    }\n  "): (typeof documents)["\n    query getNotificationDisplays($limit: Int, $type: String) {\n      NotificationDisplays(limit: $limit, type: $type) {\n        results\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation MarkAllNotificationsAsRead {\n      MarkAllNotificationsAsRead\n    }\n  "): (typeof documents)["\n    mutation MarkAllNotificationsAsRead {\n      MarkAllNotificationsAsRead\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ActiveTagCount {\n      ActiveTagCount\n    }\n  "): (typeof documents)["\n    query ActiveTagCount {\n      ActiveTagCount\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation importUrlAsDraftPost($url: String!) {\n      importUrlAsDraftPost(url: $url) {\n        alreadyExists\n        post {\n          _id\n          slug\n          title\n          content\n          url\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation importUrlAsDraftPost($url: String!) {\n      importUrlAsDraftPost(url: $url) {\n        alreadyExists\n        post {\n          _id\n          slug\n          title\n          content\n          url\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query latestGoogleDocMetadata($postId: String!, $version: String) {\n        latestGoogleDocMetadata(postId: $postId, version: $version)\n      }\n    "): (typeof documents)["\n      query latestGoogleDocMetadata($postId: String!, $version: String) {\n        latestGoogleDocMetadata(postId: $postId, version: $version)\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query CanAccessGoogleDoc($fileUrl: String!) {\n        CanAccessGoogleDoc(fileUrl: $fileUrl)\n      }\n    "): (typeof documents)["\n      query CanAccessGoogleDoc($fileUrl: String!) {\n        CanAccessGoogleDoc(fileUrl: $fileUrl)\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation ImportGoogleDoc($fileUrl: String!, $postId: String) {\n        ImportGoogleDoc(fileUrl: $fileUrl, postId: $postId) {\n          ...PostsBase\n        }\n      }\n      \n    "): (typeof documents)["\n      mutation ImportGoogleDoc($fileUrl: String!, $postId: String) {\n        ImportGoogleDoc(fileUrl: $fileUrl, postId: $postId) {\n          ...PostsBase\n        }\n      }\n      \n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query LatestDialogueMessages($dialogueId: String!, $unreadCount: Int!) {\n      latestDialogueMessages(dialogueId: $dialogueId, numMessages: $unreadCount)\n    }\n  "): (typeof documents)["\n    query LatestDialogueMessages($dialogueId: String!, $unreadCount: Int!) {\n      latestDialogueMessages(dialogueId: $dialogueId, numMessages: $unreadCount)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation flipSplashArtImage($reviewWinnerArtId: String!) {\n      flipSplashArtImage(reviewWinnerArtId: $reviewWinnerArtId)\n    }\n  "): (typeof documents)["\n    mutation flipSplashArtImage($reviewWinnerArtId: String!) {\n      flipSplashArtImage(reviewWinnerArtId: $reviewWinnerArtId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation AcceptCoauthorRequest($postId: String, $userId: String, $accept: Boolean) {\n        acceptCoauthorRequest(postId: $postId, userId: $userId, accept: $accept) {\n          ...PostsDetails\n        }\n    }\n    \n  "): (typeof documents)["\n    mutation AcceptCoauthorRequest($postId: String, $userId: String, $accept: Boolean) {\n        acceptCoauthorRequest(postId: $postId, userId: $userId, accept: $accept) {\n          ...PostsDetails\n        }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation RegisterRSVP($postId: String, $name: String, $email: String, $private: Boolean, $response: String) {\n        RSVPToEvent(postId: $postId, name: $name, email: $email, private: $private, response: $response) {\n        ...PostsDetails\n        }\n    }\n    \n  "): (typeof documents)["\n    mutation RegisterRSVP($postId: String, $name: String, $email: String, $private: Boolean, $response: String) {\n        RSVPToEvent(postId: $postId, name: $name, email: $email, private: $private, response: $response) {\n        ...PostsDetails\n        }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation CancelRSVPToEvent($postId: String, $name: String, $userId: String) {\n        CancelRSVPToEvent(postId: $postId, name: $name, userId: $userId) {\n        ...PostsDetails\n        }\n    }\n    \n  "): (typeof documents)["\n    mutation CancelRSVPToEvent($postId: String, $name: String, $userId: String) {\n        CancelRSVPToEvent(postId: $postId, name: $name, userId: $userId) {\n        ...PostsDetails\n        }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation observeRecommendation($postId: String!) {\n        observeRecommendation(postId: $postId)\n      }\n    "): (typeof documents)["\n      mutation observeRecommendation($postId: String!) {\n        observeRecommendation(postId: $postId)\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation clickRecommendation($postId: String!) {\n        clickRecommendation(postId: $postId)\n      }\n    "): (typeof documents)["\n      mutation clickRecommendation($postId: String!) {\n        clickRecommendation(postId: $postId)\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ContinueReadingQuery {\n      ContinueReading {\n        sequence {\n          ...SequenceContinueReadingFragment\n        }\n        collection {\n          ...CollectionContinueReadingFragment\n        }\n        nextPost {\n          ...PostsListWithVotes\n        }\n        numRead\n        numTotal\n        lastReadTime\n      }\n    }\n    \n  "): (typeof documents)["\n    query ContinueReadingQuery {\n      ContinueReading {\n        sequence {\n          ...SequenceContinueReadingFragment\n        }\n        collection {\n          ...CollectionContinueReadingFragment\n        }\n        nextPost {\n          ...PostsListWithVotes\n        }\n        numRead\n        numTotal\n        lastReadTime\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation dismissRecommendation($postId: String) {\n      dismissRecommendation(postId: $postId)\n    }\n  "): (typeof documents)["\n    mutation dismissRecommendation($postId: String) {\n      dismissRecommendation(postId: $postId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query RecommendationsQuery($count: Int, $algorithm: JSON) {\n        Recommendations(count: $count, algorithm: $algorithm) {\n          ...PostsListWithVotesAndSequence\n        }\n      }\n      \n    "): (typeof documents)["\n      query RecommendationsQuery($count: Int, $algorithm: JSON) {\n        Recommendations(count: $count, algorithm: $algorithm) {\n          ...PostsListWithVotesAndSequence\n        }\n      }\n      \n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query BestOfLessWrongAdmin {\n      GetAllReviewWinners {\n        ...PostsTopItemInfo\n      }\n    }\n    \n  "): (typeof documents)["\n    query BestOfLessWrongAdmin {\n      GetAllReviewWinners {\n        ...PostsTopItemInfo\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation GenerateCoverImagesForPost($postId: String!, $prompt: String) {\n      generateCoverImagesForPost(postId: $postId, prompt: $prompt) { \n        _id\n      }\n    }\n  "): (typeof documents)["\n    mutation GenerateCoverImagesForPost($postId: String!, $prompt: String) {\n      generateCoverImagesForPost(postId: $postId, prompt: $prompt) { \n        _id\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query getPostsUserCommentedOn($limit: Int, $filter: PostReviewFilter, $sort: PostReviewSort) {\n        PostsUserCommentedOn(limit: $limit, filter: $filter, sort: $sort) {\n          posts {\n            ...PostsListWithVotes\n          }\n        }\n      }\n      \n    "): (typeof documents)["\n      query getPostsUserCommentedOn($limit: Int, $filter: PostReviewFilter, $sort: PostReviewSort) {\n        PostsUserCommentedOn(limit: $limit, filter: $filter, sort: $sort) {\n          posts {\n            ...PostsListWithVotes\n          }\n        }\n      }\n      \n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GivingSeasonHeartsQuery($electionName: String!) {\n      GivingSeasonHearts(electionName: $electionName) {\n        userId\n        displayName\n        x\n        y\n        theta\n      }\n    }\n  "): (typeof documents)["\n    query GivingSeasonHeartsQuery($electionName: String!) {\n      GivingSeasonHearts(electionName: $electionName) {\n        userId\n        displayName\n        x\n        y\n        theta\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation AddGivingSeasonHeart(\n        $electionName: String!,\n        $x: Float!,\n        $y: Float!,\n        $theta: Float!\n      ) {\n        AddGivingSeasonHeart(\n          electionName: $electionName,\n          x: $x,\n          y: $y,\n          theta: $theta\n        ) {\n          userId\n          displayName\n          x\n          y\n          theta\n        }\n      }\n    "): (typeof documents)["\n      mutation AddGivingSeasonHeart(\n        $electionName: String!,\n        $x: Float!,\n        $y: Float!,\n        $theta: Float!\n      ) {\n        AddGivingSeasonHeart(\n          electionName: $electionName,\n          x: $x,\n          y: $y,\n          theta: $theta\n        ) {\n          userId\n          displayName\n          x\n          y\n          theta\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation RemoveGivingSeasonHeart($electionName: String!) {\n        RemoveGivingSeasonHeart(electionName: $electionName) {\n          userId\n          displayName\n          x\n          y\n          theta\n        }\n      }\n    "): (typeof documents)["\n      mutation RemoveGivingSeasonHeart($electionName: String!) {\n        RemoveGivingSeasonHeart(electionName: $electionName) {\n          userId\n          displayName\n          x\n          y\n          theta\n        }\n      }\n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation submitReviewVote($postId: String, $qualitativeScore: Int, $quadraticChange: Int, $newQuadraticScore: Int, $comment: String, $year: String, $dummy: Boolean) {\n      submitReviewVote(postId: $postId, qualitativeScore: $qualitativeScore, quadraticChange: $quadraticChange, comment: $comment, newQuadraticScore: $newQuadraticScore, year: $year, dummy: $dummy) {\n        ...PostsReviewVotingList\n      }\n    }\n     \n  "): (typeof documents)["\n    mutation submitReviewVote($postId: String, $qualitativeScore: Int, $quadraticChange: Int, $newQuadraticScore: Int, $comment: String, $year: String, $dummy: Boolean) {\n      submitReviewVote(postId: $postId, qualitativeScore: $qualitativeScore, quadraticChange: $quadraticChange, comment: $comment, newQuadraticScore: $newQuadraticScore, year: $year, dummy: $dummy) {\n        ...PostsReviewVotingList\n      }\n    }\n     \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query RotatingReviewWinnerSpotlight {\n        GetAllReviewWinners {\n          ...PostForReviewWinnerItem\n        }\n      }\n      \n    "): (typeof documents)["\n      query RotatingReviewWinnerSpotlight {\n        GetAllReviewWinners {\n          ...PostForReviewWinnerItem\n        }\n      }\n      \n    "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query RevisionsDiff($collectionName: String!, $fieldName: String!, $id: String!, $beforeRev: String, $afterRev: String!, $trim: Boolean) {\n      RevisionsDiff(collectionName: $collectionName, fieldName: $fieldName, id: $id, beforeRev: $beforeRev, afterRev: $afterRev, trim: $trim)\n    }\n  "): (typeof documents)["\n    query RevisionsDiff($collectionName: String!, $fieldName: String!, $id: String!, $beforeRev: String, $afterRev: String!, $trim: Boolean) {\n      RevisionsDiff(collectionName: $collectionName, fieldName: $fieldName, id: $id, beforeRev: $beforeRev, afterRev: $afterRev, trim: $trim)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation launchPetrovMissile($launchCode: String) {\n      PetrovDayLaunchMissile(launchCode: $launchCode) {\n        launchCode\n      }\n    }\n  "): (typeof documents)["\n    mutation launchPetrovMissile($launchCode: String) {\n      PetrovDayLaunchMissile(launchCode: $launchCode) {\n        launchCode\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query petrovDayLaunchResolvers {\n      PetrovDayCheckIfIncoming {\n        launched\n        createdAt\n      }\n    }\n  "): (typeof documents)["\n    query petrovDayLaunchResolvers {\n      PetrovDayCheckIfIncoming {\n        launched\n        createdAt\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query petrov2024checkIfNuked {\n      petrov2024checkIfNuked\n    }\n  "): (typeof documents)["\n    query petrov2024checkIfNuked {\n      petrov2024checkIfNuked\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query petrovDay2024Resolvers {\n      PetrovDay2024CheckNumberOfIncoming {\n        count\n      }\n    }\n  "): (typeof documents)["\n    query petrovDay2024Resolvers {\n      PetrovDay2024CheckNumberOfIncoming {\n        count\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAllReviewWinners {\n      GetAllReviewWinners {\n        ...PostsTopItemInfo\n      }\n    }\n    \n  "): (typeof documents)["\n    query GetAllReviewWinners {\n      GetAllReviewWinners {\n        ...PostsTopItemInfo\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation updateContinueReading($sequenceId: String!, $postId: String!) {\n      updateContinueReading(sequenceId: $sequenceId, postId: $postId)\n    }\n  "): (typeof documents)["\n    mutation updateContinueReading($sequenceId: String!, $postId: String!) {\n      updateContinueReading(sequenceId: $sequenceId, postId: $postId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ModeratorIPAddressInfo($ipAddress: String!) {\n      moderatorViewIPAddress(ipAddress: $ipAddress) {\n        ip\n        userIds\n      }\n    }\n  "): (typeof documents)["\n    query ModeratorIPAddressInfo($ipAddress: String!) {\n      moderatorViewIPAddress(ipAddress: $ipAddress) {\n        ip\n        userIds\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation editSurvey($surveyId: String!, $name: String!, $questions: [SurveyQuestionInfo!]!) {\n      editSurvey(surveyId: $surveyId, name: $name, questions: $questions) {\n        ...SurveyMinimumInfo\n      }\n    }\n    \n  "): (typeof documents)["\n    mutation editSurvey($surveyId: String!, $name: String!, $questions: [SurveyQuestionInfo!]!) {\n      editSurvey(surveyId: $surveyId, name: $name, questions: $questions) {\n        ...SurveyMinimumInfo\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation addPostsToTag($tagId: String, $postId: String) {\n      addOrUpvoteTag(tagId: $tagId, postId: $postId) {\n        ...TagRelCreationFragment\n      }\n    }\n    \n  "): (typeof documents)["\n    mutation addPostsToTag($tagId: String, $postId: String) {\n      addOrUpvoteTag(tagId: $tagId, postId: $postId) {\n        ...TagRelCreationFragment\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation addOrUpvoteTag($tagId: String, $postId: String) {\n      addOrUpvoteTag(tagId: $tagId, postId: $postId) {\n        ...TagRelMinimumFragment\n      }\n    }\n    \n  "): (typeof documents)["\n    mutation addOrUpvoteTag($tagId: String, $postId: String) {\n      addOrUpvoteTag(tagId: $tagId, postId: $postId) {\n        ...TagRelMinimumFragment\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getRandomTag {\n      RandomTag {slug}\n    }\n  "): (typeof documents)["\n    query getRandomTag {\n      RandomTag {slug}\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation reorderSummaries($parentDocumentId: String!, $parentDocumentCollectionName: String!, $summaryIds: [String!]!) {\n      reorderSummaries(parentDocumentId: $parentDocumentId, parentDocumentCollectionName: $parentDocumentCollectionName, summaryIds: $summaryIds)\n    }\n  "): (typeof documents)["\n    mutation reorderSummaries($parentDocumentId: String!, $parentDocumentCollectionName: String!, $summaryIds: [String!]!) {\n      reorderSummaries(parentDocumentId: $parentDocumentId, parentDocumentCollectionName: $parentDocumentCollectionName, summaryIds: $summaryIds)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getTagUpdates($before: Date!, $after: Date!) {\n      TagUpdatesInTimeBlock(before: $before, after: $after) {\n        tag {\n          ...TagHistoryFragment\n        }\n        revisionIds\n        commentCount\n        commentIds\n        lastRevisedAt\n        lastCommentedAt\n        added\n        removed\n        users {\n          ...UsersMinimumInfo\n        }\n        documentDeletions {\n          userId\n          documentId\n          netChange\n          type\n          docFields {\n            _id\n            slug\n            tabTitle\n            tabSubtitle\n          }\n          createdAt\n        }\n      }\n    }\n    \n  "): (typeof documents)["\n    query getTagUpdates($before: Date!, $after: Date!) {\n      TagUpdatesInTimeBlock(before: $before, after: $after) {\n        tag {\n          ...TagHistoryFragment\n        }\n        revisionIds\n        commentCount\n        commentIds\n        lastRevisedAt\n        lastCommentedAt\n        added\n        removed\n        users {\n          ...UsersMinimumInfo\n        }\n        documentDeletions {\n          userId\n          documentId\n          netChange\n          type\n          docFields {\n            _id\n            slug\n            tabTitle\n            tabSubtitle\n          }\n          createdAt\n        }\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation mergeTags(\n      $sourceTagId: String!\n      $targetTagId: String!\n      $transferSubtags: Boolean!\n      $redirectSource: Boolean!\n    ) {\n      mergeTags(\n        sourceTagId: $sourceTagId\n        targetTagId: $targetTagId\n        transferSubtags: $transferSubtags\n        redirectSource: $redirectSource\n      )\n    }\n  "): (typeof documents)["\n    mutation mergeTags(\n      $sourceTagId: String!\n      $targetTagId: String!\n      $transferSubtags: Boolean!\n      $redirectSource: Boolean!\n    ) {\n      mergeTags(\n        sourceTagId: $sourceTagId\n        targetTagId: $targetTagId\n        transferSubtags: $transferSubtags\n        redirectSource: $redirectSource\n      )\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation promoteLensToMain($lensId: String!) {\n      promoteLensToMain(lensId: $lensId)\n    }\n  "): (typeof documents)["\n    mutation promoteLensToMain($lensId: String!) {\n      promoteLensToMain(lensId: $lensId)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetTagsByCoreTagId(\n      $coreTagId: String,\n      $limit: Int,\n      $searchTagIds: [String]\n    ) {\n      TagsByCoreTagId(\n        coreTagId: $coreTagId,\n        limit: $limit,\n        searchTagIds: $searchTagIds\n      ) {\n        tags {\n          ...ConceptItemFragment\n        }\n        totalCount\n      }\n    }\n    \n  "): (typeof documents)["\n    query GetTagsByCoreTagId(\n      $coreTagId: String,\n      $limit: Int,\n      $searchTagIds: [String]\n    ) {\n      TagsByCoreTagId(\n        coreTagId: $coreTagId,\n        limit: $limit,\n        searchTagIds: $searchTagIds\n      ) {\n        tags {\n          ...ConceptItemFragment\n        }\n        totalCount\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UserUpdateSubforumMembership($tagId: String!, $member: Boolean!) {\n      UserUpdateSubforumMembership(tagId: $tagId, member: $member) {\n        ...UsersCurrent\n      }\n    }\n    \n  "): (typeof documents)["\n    mutation UserUpdateSubforumMembership($tagId: String!, $member: Boolean!) {\n      UserUpdateSubforumMembership(tagId: $tagId, member: $member) {\n        ...UsersCurrent\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation connectCrossposter($token: String) {\n      connectCrossposter(token: $token)\n    }\n  "): (typeof documents)["\n    mutation connectCrossposter($token: String) {\n      connectCrossposter(token: $token)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation sendEventTriggeredDM($eventType: String!) {\n      sendEventTriggeredDM(eventType: $eventType)\n    }\n  "): (typeof documents)["\n    mutation sendEventTriggeredDM($eventType: String!) {\n      sendEventTriggeredDM(eventType: $eventType)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation login($username: String, $password: String) {\n      login(username: $username, password: $password) {\n        token\n      }\n    }\n  "): (typeof documents)["\n    mutation login($username: String, $password: String) {\n      login(username: $username, password: $password) {\n        token\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation signup($email: String, $username: String, $password: String, $subscribeToCurated: Boolean, $reCaptchaToken: String, $abTestKey: String) {\n      signup(email: $email, username: $username, password: $password, subscribeToCurated: $subscribeToCurated, reCaptchaToken: $reCaptchaToken, abTestKey: $abTestKey) {\n        token\n      }\n    }\n  "): (typeof documents)["\n    mutation signup($email: String, $username: String, $password: String, $subscribeToCurated: Boolean, $reCaptchaToken: String, $abTestKey: String) {\n      signup(email: $email, username: $username, password: $password, subscribeToCurated: $subscribeToCurated, reCaptchaToken: $reCaptchaToken, abTestKey: $abTestKey) {\n        token\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation resetPassword($email: String) {\n      resetPassword(email: $email)\n    }\n  "): (typeof documents)["\n    mutation resetPassword($email: String) {\n      resetPassword(email: $email)\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AdvisorRequestsMinimumInfo on AdvisorRequest {\n    _id\n    userId\n    createdAt\n    interestedInMetaculus\n    jobAds\n  }\n"): (typeof documents)["\n  fragment AdvisorRequestsMinimumInfo on AdvisorRequest {\n    _id\n    userId\n    createdAt\n    interestedInMetaculus\n    jobAds\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment BansAdminPageFragment on Ban {\n    _id\n    createdAt\n    expirationDate\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    reason\n    comment\n    ip\n    properties\n  }\n"): (typeof documents)["\n  fragment BansAdminPageFragment on Ban {\n    _id\n    createdAt\n    expirationDate\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    reason\n    comment\n    ip\n    properties\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment BookPageFragment on Book {\n    _id\n    createdAt\n    title\n    number\n    subtitle\n    tocTitle\n    contents {\n      ...RevisionDisplay\n    }\n    sequenceIds\n    sequences {\n      ...SequencesPageWithChaptersFragment\n    }\n    postIds\n    posts {\n      ...PostsListWithVotes\n    }\n    collectionId\n    displaySequencesAsGrid\n    hideProgressBar\n    showChapters\n  }\n"): (typeof documents)["\n  fragment BookPageFragment on Book {\n    _id\n    createdAt\n    title\n    number\n    subtitle\n    tocTitle\n    contents {\n      ...RevisionDisplay\n    }\n    sequenceIds\n    sequences {\n      ...SequencesPageWithChaptersFragment\n    }\n    postIds\n    posts {\n      ...PostsListWithVotes\n    }\n    collectionId\n    displaySequencesAsGrid\n    hideProgressBar\n    showChapters\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment BookEdit on Book {\n    ...BookPageFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment BookEdit on Book {\n    ...BookPageFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ChaptersFragment on Chapter {\n    _id\n    createdAt\n    title\n    subtitle\n    contents {\n      ...RevisionDisplay\n    }\n    number\n    sequenceId\n    postIds\n    posts {\n      ...PostsListWithVotes\n    }\n  }\n"): (typeof documents)["\n  fragment ChaptersFragment on Chapter {\n    _id\n    createdAt\n    title\n    subtitle\n    contents {\n      ...RevisionDisplay\n    }\n    number\n    sequenceId\n    postIds\n    posts {\n      ...PostsListWithVotes\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ChaptersEdit on Chapter {\n    ...ChaptersFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment ChaptersEdit on Chapter {\n    ...ChaptersFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CkEditorUserSessionInfo on CkEditorUserSession {\n    _id\n    userId\n    documentId\n    endedAt\n    endedBy\n  }\n"): (typeof documents)["\n  fragment CkEditorUserSessionInfo on CkEditorUserSession {\n    _id\n    userId\n    documentId\n    endedAt\n    endedBy\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ModeratorClientIDInfo on ClientId {\n    _id\n    clientId\n    createdAt\n    firstSeenReferrer\n    firstSeenLandingPage\n    users {\n      ...UsersMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment ModeratorClientIDInfo on ClientId {\n    _id\n    clientId\n    createdAt\n    firstSeenReferrer\n    firstSeenLandingPage\n    users {\n      ...UsersMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CollectionContinueReadingFragment on Collection {\n    _id\n    title\n    slug\n    gridImageId\n  }\n"): (typeof documents)["\n  fragment CollectionContinueReadingFragment on Collection {\n    _id\n    title\n    slug\n    gridImageId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CollectionsPageFragment on Collection {\n    _id\n    createdAt\n    slug\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    contents {\n      ...RevisionDisplay\n    }\n    firstPageLink\n    gridImageId\n    books {\n      ...BookPageFragment\n    }\n    hideStartReadingButton\n    noindex\n  }\n"): (typeof documents)["\n  fragment CollectionsPageFragment on Collection {\n    _id\n    createdAt\n    slug\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    contents {\n      ...RevisionDisplay\n    }\n    firstPageLink\n    gridImageId\n    books {\n      ...BookPageFragment\n    }\n    hideStartReadingButton\n    noindex\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CollectionsEditFragment on Collection {\n    ...CollectionsPageFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment CollectionsEditFragment on Collection {\n    ...CollectionsPageFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CollectionsBestOfFragment on Collection {\n    _id\n    createdAt\n    slug\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    gridImageId\n    noindex\n    postsCount\n    readPostsCount\n    contents {\n      ...RevisionDisplay\n    }\n  }\n"): (typeof documents)["\n  fragment CollectionsBestOfFragment on Collection {\n    _id\n    createdAt\n    slug\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    gridImageId\n    noindex\n    postsCount\n    readPostsCount\n    contents {\n      ...RevisionDisplay\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentModeratorActionDisplay on CommentModeratorAction {\n    _id\n    comment {\n      ...CommentsListWithModerationMetadata\n    }\n    commentId\n    type\n    active\n    createdAt\n    endedAt\n  }\n"): (typeof documents)["\n  fragment CommentModeratorActionDisplay on CommentModeratorAction {\n    _id\n    comment {\n      ...CommentsListWithModerationMetadata\n    }\n    commentId\n    type\n    active\n    createdAt\n    endedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentsList on Comment {\n    _id\n    postId\n    tagId\n    tag {\n      _id\n      slug\n    }\n    relevantTagIds\n    relevantTags {\n      ...TagPreviewFragment\n    }\n    tagCommentType\n    parentCommentId\n    topLevelCommentId\n    descendentCount\n    title\n    contents {\n      _id\n      html\n      plaintextMainText\n      wordCount\n    }\n    postedAt\n    lastEditedAt\n    repliesBlockedUntil\n    userId\n    deleted\n    deletedPublic\n    deletedByUserId\n    deletedReason\n    hideAuthor\n    authorIsUnreviewed\n    user {\n      ...UsersMinimumInfo\n    }\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    voteCount\n    emojiReactors\n    af\n    afDate\n    moveToAlignmentUserId\n    afBaseScore\n    afExtendedScore\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    needsReview\n    answer\n    parentAnswerId\n    retracted\n    postVersion\n    reviewedByUserId\n    shortform\n    shortformFrontpage\n    lastSubthreadActivity\n    moderatorHat\n    hideModeratorHat\n    nominatedForReview\n    reviewingForReview\n    promoted\n    promotedByUser {\n      ...UsersMinimumInfo\n    }\n    directChildrenCount\n    votingSystem\n    isPinnedOnProfile\n    debateResponse\n    rejected\n    rejectedReason\n    modGPTRecommendation\n    originalDialogueId\n\n    forumEventId\n    forumEventMetadata\n  }\n"): (typeof documents)["\n  fragment CommentsList on Comment {\n    _id\n    postId\n    tagId\n    tag {\n      _id\n      slug\n    }\n    relevantTagIds\n    relevantTags {\n      ...TagPreviewFragment\n    }\n    tagCommentType\n    parentCommentId\n    topLevelCommentId\n    descendentCount\n    title\n    contents {\n      _id\n      html\n      plaintextMainText\n      wordCount\n    }\n    postedAt\n    lastEditedAt\n    repliesBlockedUntil\n    userId\n    deleted\n    deletedPublic\n    deletedByUserId\n    deletedReason\n    hideAuthor\n    authorIsUnreviewed\n    user {\n      ...UsersMinimumInfo\n    }\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    voteCount\n    emojiReactors\n    af\n    afDate\n    moveToAlignmentUserId\n    afBaseScore\n    afExtendedScore\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    needsReview\n    answer\n    parentAnswerId\n    retracted\n    postVersion\n    reviewedByUserId\n    shortform\n    shortformFrontpage\n    lastSubthreadActivity\n    moderatorHat\n    hideModeratorHat\n    nominatedForReview\n    reviewingForReview\n    promoted\n    promotedByUser {\n      ...UsersMinimumInfo\n    }\n    directChildrenCount\n    votingSystem\n    isPinnedOnProfile\n    debateResponse\n    rejected\n    rejectedReason\n    modGPTRecommendation\n    originalDialogueId\n\n    forumEventId\n    forumEventMetadata\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentsListWithTopLevelComment on Comment {\n    ...CommentsList\n    topLevelComment {\n      ...CommentsList\n    }\n  }\n"): (typeof documents)["\n  fragment CommentsListWithTopLevelComment on Comment {\n    ...CommentsList\n    topLevelComment {\n      ...CommentsList\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ShortformComments on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    relevantTags {\n      ...TagPreviewFragment\n    }\n  }\n"): (typeof documents)["\n  fragment ShortformComments on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    relevantTags {\n      ...TagPreviewFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentWithRepliesFragment on Comment {\n    ...CommentsList\n    lastSubthreadActivity\n    latestChildren {\n      ...CommentsList\n    }\n    tag {\n      ...TagBasicInfo\n    }\n    post {\n      ...PostsBase\n    }\n  }\n"): (typeof documents)["\n  fragment CommentWithRepliesFragment on Comment {\n    ...CommentsList\n    lastSubthreadActivity\n    latestChildren {\n      ...CommentsList\n    }\n    tag {\n      ...TagBasicInfo\n    }\n    post {\n      ...PostsBase\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentEdit on Comment {\n    ...CommentsList\n    relevantTagIds\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment CommentEdit on Comment {\n    ...CommentsList\n    relevantTagIds\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DeletedCommentsMetaData on Comment {\n    _id\n    deleted\n    deletedDate\n    deletedByUser {\n      _id\n      displayName\n    }\n    deletedReason\n    deletedPublic\n  }\n"): (typeof documents)["\n  fragment DeletedCommentsMetaData on Comment {\n    _id\n    deleted\n    deletedDate\n    deletedByUser {\n      _id\n      displayName\n    }\n    deletedReason\n    deletedPublic\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DeletedCommentsModerationLog on Comment {\n    ...DeletedCommentsMetaData\n    user {\n      ...UsersMinimumInfo\n    }\n    post {\n      title\n      slug\n      _id\n    }\n  }\n"): (typeof documents)["\n  fragment DeletedCommentsModerationLog on Comment {\n    ...DeletedCommentsMetaData\n    user {\n      ...UsersMinimumInfo\n    }\n    post {\n      title\n      slug\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentsListWithParentMetadata on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n      isRead\n    }\n    tag {\n      ...TagBasicInfo\n    }\n  }\n"): (typeof documents)["\n  fragment CommentsListWithParentMetadata on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n      isRead\n    }\n    tag {\n      ...TagBasicInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment StickySubforumCommentFragment on Comment {\n    ...CommentWithRepliesFragment\n    tag {\n      ...TagBasicInfo\n    }\n  }\n"): (typeof documents)["\n  fragment StickySubforumCommentFragment on Comment {\n    ...CommentWithRepliesFragment\n    tag {\n      ...TagBasicInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment WithVoteComment on Comment {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n  }\n"): (typeof documents)["\n  fragment WithVoteComment on Comment {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentsListWithModerationMetadata on Comment {\n    ...CommentWithRepliesFragment\n    allVotes {\n      voteType\n    }\n  }\n"): (typeof documents)["\n  fragment CommentsListWithModerationMetadata on Comment {\n    ...CommentWithRepliesFragment\n    allVotes {\n      voteType\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentsListWithModGPTAnalysis on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    modGPTAnalysis\n  }\n"): (typeof documents)["\n  fragment CommentsListWithModGPTAnalysis on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    modGPTAnalysis\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentsForAutocomplete on Comment {\n    _id\n    postId\n    baseScore\n    extendedScore\n    createdAt\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      markdown\n    }\n    post {\n      ...PostsForAutocomplete\n    }\n  }\n"): (typeof documents)["\n  fragment CommentsForAutocomplete on Comment {\n    _id\n    postId\n    baseScore\n    extendedScore\n    createdAt\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      markdown\n    }\n    post {\n      ...PostsForAutocomplete\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentsForAutocompleteWithParents on Comment {\n    ...CommentsForAutocomplete\n    parentComment {\n      ...CommentsForAutocomplete\n      parentComment {\n        ...CommentsForAutocomplete\n        parentComment {\n          ...CommentsForAutocomplete\n          parentComment {\n            ...CommentsForAutocomplete\n            parentComment {\n              ...CommentsForAutocomplete\n              parentComment {\n                ...CommentsForAutocomplete\n                parentComment {\n                  ...CommentsForAutocomplete\n                  parentComment {\n                    ...CommentsForAutocomplete\n                    parentComment {\n                      ...CommentsForAutocomplete\n                      parentComment {\n                        ...CommentsForAutocomplete\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CommentsForAutocompleteWithParents on Comment {\n    ...CommentsForAutocomplete\n    parentComment {\n      ...CommentsForAutocomplete\n      parentComment {\n        ...CommentsForAutocomplete\n        parentComment {\n          ...CommentsForAutocomplete\n          parentComment {\n            ...CommentsForAutocomplete\n            parentComment {\n              ...CommentsForAutocomplete\n              parentComment {\n                ...CommentsForAutocomplete\n                parentComment {\n                  ...CommentsForAutocomplete\n                  parentComment {\n                    ...CommentsForAutocomplete\n                    parentComment {\n                      ...CommentsForAutocomplete\n                      parentComment {\n                        ...CommentsForAutocomplete\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SuggestAlignmentComment on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    suggestForAlignmentUserIds\n    suggestForAlignmentUsers {\n      _id\n      displayName\n    }\n  }\n"): (typeof documents)["\n  fragment SuggestAlignmentComment on Comment {\n    ...CommentsList\n    post {\n      ...PostsMinimumInfo\n    }\n    suggestForAlignmentUserIds\n    suggestForAlignmentUsers {\n      _id\n      displayName\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ConversationsMinimumInfo on Conversation {\n    _id\n    createdAt\n    latestActivity\n    title\n    participantIds\n    archivedByIds\n    messageCount\n    moderator\n  }\n"): (typeof documents)["\n  fragment ConversationsMinimumInfo on Conversation {\n    _id\n    createdAt\n    latestActivity\n    title\n    participantIds\n    archivedByIds\n    messageCount\n    moderator\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ConversationsList on Conversation {\n    ...ConversationsMinimumInfo\n    participants {\n      ...UsersMinimumInfo\n    }\n    latestMessage {\n      ...messageListFragment\n    }\n  }\n"): (typeof documents)["\n  fragment ConversationsList on Conversation {\n    ...ConversationsMinimumInfo\n    participants {\n      ...UsersMinimumInfo\n    }\n    latestMessage {\n      ...messageListFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ConversationsListWithReadStatus on Conversation {\n    ...ConversationsList\n    hasUnreadMessages\n  }\n"): (typeof documents)["\n  fragment ConversationsListWithReadStatus on Conversation {\n    ...ConversationsList\n    hasUnreadMessages\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CurationNoticesFragment on CurationNotice {\n    _id\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    commentId\n    comment {\n      ...CommentsList\n    }\n    postId\n    post {\n      ...PostsMinimumInfo\n    }\n    deleted\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment CurationNoticesFragment on CurationNotice {\n    _id\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    commentId\n    comment {\n      ...CommentsList\n    }\n    postId\n    post {\n      ...PostsMinimumInfo\n    }\n    deleted\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DialogueCheckInfo on DialogueCheck {\n    _id\n    userId\n    targetUserId\n    checked\n    checkedAt\n    hideInRecommendations\n    matchPreference {\n      ...DialogueMatchPreferenceInfo\n    }\n    reciprocalMatchPreference {\n      ...DialogueMatchPreferenceInfo\n    }\n  }\n"): (typeof documents)["\n  fragment DialogueCheckInfo on DialogueCheck {\n    _id\n    userId\n    targetUserId\n    checked\n    checkedAt\n    hideInRecommendations\n    matchPreference {\n      ...DialogueMatchPreferenceInfo\n    }\n    reciprocalMatchPreference {\n      ...DialogueMatchPreferenceInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DialogueMatchPreferenceInfo on DialogueMatchPreference {\n    _id\n    dialogueCheckId\n    topicNotes\n    topicPreferences\n    syncPreference\n    asyncPreference\n    formatNotes\n    generatedDialogueId\n    deleted\n  }\n"): (typeof documents)["\n  fragment DialogueMatchPreferenceInfo on DialogueMatchPreference {\n    _id\n    dialogueCheckId\n    topicNotes\n    topicPreferences\n    syncPreference\n    asyncPreference\n    formatNotes\n    generatedDialogueId\n    deleted\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DigestPostsMinimumInfo on DigestPost {\n    _id\n    digestId\n    postId\n    emailDigestStatus\n    onsiteDigestStatus\n  }\n"): (typeof documents)["\n  fragment DigestPostsMinimumInfo on DigestPost {\n    _id\n    digestId\n    postId\n    emailDigestStatus\n    onsiteDigestStatus\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DigestsMinimumInfo on Digest {\n    _id\n    num\n    startDate\n    endDate\n    publishedDate\n    onsiteImageId\n    onsitePrimaryColor\n  }\n"): (typeof documents)["\n  fragment DigestsMinimumInfo on Digest {\n    _id\n    num\n    startDate\n    endDate\n    publishedDate\n    onsiteImageId\n    onsitePrimaryColor\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ElectionCandidateBasicInfo on ElectionCandidate {\n    _id\n    electionName\n    name\n    logoSrc\n    href\n    fundraiserLink\n    gwwcLink\n    gwwcId\n    description\n    tagId\n    tag {\n      ...TagBasicInfo\n    }\n    postCount\n    baseScore\n    score\n    extendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment ElectionCandidateBasicInfo on ElectionCandidate {\n    _id\n    electionName\n    name\n    logoSrc\n    href\n    fundraiserLink\n    gwwcLink\n    gwwcId\n    description\n    tagId\n    tag {\n      ...TagBasicInfo\n    }\n    postCount\n    baseScore\n    score\n    extendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ElectionCandidateSimple on ElectionCandidate {\n    _id\n    name\n    logoSrc\n    href\n    fundraiserLink\n    description\n  }\n"): (typeof documents)["\n  fragment ElectionCandidateSimple on ElectionCandidate {\n    _id\n    name\n    logoSrc\n    href\n    fundraiserLink\n    description\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment WithVoteElectionCandidate on ElectionCandidate {\n    __typename\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment WithVoteElectionCandidate on ElectionCandidate {\n    __typename\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ElectionVoteInfo on ElectionVote {\n    _id\n    electionName\n    userId\n    compareState\n    vote\n    submittedAt\n    submissionComments\n    userExplanation\n    userOtherComments\n  }\n"): (typeof documents)["\n  fragment ElectionVoteInfo on ElectionVote {\n    _id\n    electionName\n    userId\n    compareState\n    vote\n    submittedAt\n    submissionComments\n    userExplanation\n    userOtherComments\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ElectionVoteRecentDiscussion on ElectionVote {\n    _id\n    electionName\n    submittedAt\n  }\n"): (typeof documents)["\n  fragment ElectionVoteRecentDiscussion on ElectionVote {\n    _id\n    electionName\n    submittedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ElicitQuestionFragment on ElicitQuestion {\n    _id\n    title\n    notes\n    resolution\n    resolvesBy\n  }\n"): (typeof documents)["\n  fragment ElicitQuestionFragment on ElicitQuestion {\n    _id\n    title\n    notes\n    resolution\n    resolvesBy\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FeaturedResourcesFragment on FeaturedResource {\n    _id\n    title\n    body\n    ctaText\n    ctaUrl\n    expiresAt\n  }\n"): (typeof documents)["\n  fragment FeaturedResourcesFragment on FeaturedResource {\n    _id\n    title\n    body\n    ctaText\n    ctaUrl\n    expiresAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FieldChangeFragment on FieldChange {\n    _id\n    createdAt\n    userId\n    changeGroup\n    documentId\n    fieldName\n    oldValue\n    newValue\n  }\n"): (typeof documents)["\n  fragment FieldChangeFragment on FieldChange {\n    _id\n    createdAt\n    userId\n    changeGroup\n    documentId\n    fieldName\n    oldValue\n    newValue\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ForumEventsMinimumInfo on ForumEvent {\n    _id\n    title\n    startDate\n    endDate\n    darkColor\n    lightColor\n    bannerTextColor\n    contrastColor\n    tagId\n    postId\n    bannerImageId\n    eventFormat\n    customComponent\n    commentPrompt\n\n    pollAgreeWording\n    pollDisagreeWording\n\n    maxStickersPerUser\n  }\n"): (typeof documents)["\n  fragment ForumEventsMinimumInfo on ForumEvent {\n    _id\n    title\n    startDate\n    endDate\n    darkColor\n    lightColor\n    bannerTextColor\n    contrastColor\n    tagId\n    postId\n    bannerImageId\n    eventFormat\n    customComponent\n    commentPrompt\n\n    pollAgreeWording\n    pollDisagreeWording\n\n    maxStickersPerUser\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ForumEventsDisplay on ForumEvent {\n    ...ForumEventsMinimumInfo\n    publicData\n    voteCount\n\n    post {\n      ...PostsMinimumInfo\n    }\n    tag {\n      ...TagBasicInfo\n    }\n    frontpageDescription {\n      _id\n      html\n    }\n    frontpageDescriptionMobile {\n      _id\n      html\n    }\n    postPageDescription {\n      _id\n      html\n    }\n    pollQuestion {\n      _id\n      html\n    }\n  }\n"): (typeof documents)["\n  fragment ForumEventsDisplay on ForumEvent {\n    ...ForumEventsMinimumInfo\n    publicData\n    voteCount\n\n    post {\n      ...PostsMinimumInfo\n    }\n    tag {\n      ...TagBasicInfo\n    }\n    frontpageDescription {\n      _id\n      html\n    }\n    frontpageDescriptionMobile {\n      _id\n      html\n    }\n    postPageDescription {\n      _id\n      html\n    }\n    pollQuestion {\n      _id\n      html\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ForumEventsEdit on ForumEvent {\n    ...ForumEventsMinimumInfo\n    frontpageDescription {\n      ...RevisionEdit\n    }\n    frontpageDescriptionMobile {\n      ...RevisionEdit\n    }\n    postPageDescription {\n      ...RevisionEdit\n    }\n    pollQuestion {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment ForumEventsEdit on ForumEvent {\n    ...ForumEventsMinimumInfo\n    frontpageDescription {\n      ...RevisionEdit\n    }\n    frontpageDescriptionMobile {\n      ...RevisionEdit\n    }\n    postPageDescription {\n      ...RevisionEdit\n    }\n    pollQuestion {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment GardenCodeFragment on GardenCode {\n    _id\n    code\n    title\n    userId\n    deleted\n    slug\n    startTime\n    endTime\n    fbLink\n    type\n    afOnly\n    contents {\n      ...RevisionDisplay\n    }\n  }\n"): (typeof documents)["\n  fragment GardenCodeFragment on GardenCode {\n    _id\n    code\n    title\n    userId\n    deleted\n    slug\n    startTime\n    endTime\n    fbLink\n    type\n    afOnly\n    contents {\n      ...RevisionDisplay\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment GardenCodeFragmentEdit on GardenCode {\n    _id\n    code\n    title\n    userId\n    deleted\n    slug\n    startTime\n    endTime\n    fbLink\n    type\n    afOnly\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment GardenCodeFragmentEdit on GardenCode {\n    _id\n    code\n    title\n    userId\n    deleted\n    slug\n    startTime\n    endTime\n    fbLink\n    type\n    afOnly\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment GoogleServiceAccountSessionInfo on GoogleServiceAccountSession {\n    _id\n    email\n  }\n"): (typeof documents)["\n  fragment GoogleServiceAccountSessionInfo on GoogleServiceAccountSession {\n    _id\n    email\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment GoogleServiceAccountSessionAdminInfo on GoogleServiceAccountSession {\n    _id\n    email\n    estimatedExpiry\n  }\n"): (typeof documents)["\n  fragment GoogleServiceAccountSessionAdminInfo on GoogleServiceAccountSession {\n    _id\n    email\n    estimatedExpiry\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment JargonTerms on JargonTerm {\n    _id\n    postId\n    term\n    contents {\n      ...RevisionEdit\n    }\n    humansAndOrAIEdited\n    approved\n    deleted\n    altTerms\n  }\n"): (typeof documents)["\n  fragment JargonTerms on JargonTerm {\n    _id\n    postId\n    term\n    contents {\n      ...RevisionEdit\n    }\n    humansAndOrAIEdited\n    approved\n    deleted\n    altTerms\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment JargonTermsPost on JargonTerm {\n    _id\n    term\n    humansAndOrAIEdited\n    approved\n    deleted\n    altTerms\n    contents {\n      ...RevisionDisplay\n    }\n  }\n"): (typeof documents)["\n  fragment JargonTermsPost on JargonTerm {\n    _id\n    term\n    humansAndOrAIEdited\n    approved\n    deleted\n    altTerms\n    contents {\n      ...RevisionDisplay\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment JargonTermsWithPostInfo on JargonTerm {\n    ...JargonTerms\n    post {\n      ...PostsMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment JargonTermsWithPostInfo on JargonTerm {\n    ...JargonTerms\n    post {\n      ...PostsMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LlmConversationsFragment on LlmConversation {\n    _id\n    userId\n    title\n    createdAt\n    lastUpdatedAt\n    deleted\n  }\n"): (typeof documents)["\n  fragment LlmConversationsFragment on LlmConversation {\n    _id\n    userId\n    title\n    createdAt\n    lastUpdatedAt\n    deleted\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LlmConversationsViewingPageFragment on LlmConversation {\n    ...LlmConversationsFragment\n    totalCharacterCount\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment LlmConversationsViewingPageFragment on LlmConversation {\n    ...LlmConversationsFragment\n    totalCharacterCount\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LlmConversationsWithMessagesFragment on LlmConversation {\n    ...LlmConversationsFragment\n    messages {\n      ...LlmMessagesFragment\n    }\n  }\n"): (typeof documents)["\n  fragment LlmConversationsWithMessagesFragment on LlmConversation {\n    ...LlmConversationsFragment\n    messages {\n      ...LlmMessagesFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LlmMessagesFragment on LlmMessage {\n    _id\n    userId\n    conversationId\n    role\n    content\n    createdAt\n  }\n"): (typeof documents)["\n  fragment LlmMessagesFragment on LlmMessage {\n    _id\n    userId\n    conversationId\n    role\n    content\n    createdAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment localGroupsBase on Localgroup {\n    _id\n    createdAt\n    organizerIds\n    organizers {\n      ...UsersMinimumInfo\n    }\n    lastActivity\n    name\n    nameInAnotherLanguage\n    isOnline\n    location\n    googleLocation\n    mongoLocation\n    types\n    categories\n    contactInfo\n    facebookLink\n    facebookPageLink\n    meetupLink\n    slackLink\n    website\n    bannerImageId\n    inactive\n    deleted\n  }\n"): (typeof documents)["\n  fragment localGroupsBase on Localgroup {\n    _id\n    createdAt\n    organizerIds\n    organizers {\n      ...UsersMinimumInfo\n    }\n    lastActivity\n    name\n    nameInAnotherLanguage\n    isOnline\n    location\n    googleLocation\n    mongoLocation\n    types\n    categories\n    contactInfo\n    facebookLink\n    facebookPageLink\n    meetupLink\n    slackLink\n    website\n    bannerImageId\n    inactive\n    deleted\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment localGroupsHomeFragment on Localgroup {\n    ...localGroupsBase\n    contents {\n      ...RevisionDisplay\n    }\n  }\n"): (typeof documents)["\n  fragment localGroupsHomeFragment on Localgroup {\n    ...localGroupsBase\n    contents {\n      ...RevisionDisplay\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment localGroupsEdit on Localgroup {\n    ...localGroupsBase\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment localGroupsEdit on Localgroup {\n    ...localGroupsBase\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment localGroupsIsOnline on Localgroup {\n    _id\n    name\n    isOnline\n  }\n"): (typeof documents)["\n  fragment localGroupsIsOnline on Localgroup {\n    _id\n    name\n    isOnline\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment newEventFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    name\n    important\n    properties\n    intercom\n  }\n"): (typeof documents)["\n  fragment newEventFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    name\n    important\n    properties\n    intercom\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment lastEventFragment on LWEvent {\n    _id\n    createdAt\n    documentId\n    userId\n    name\n    important\n    properties\n    intercom\n  }\n"): (typeof documents)["\n  fragment lastEventFragment on LWEvent {\n    _id\n    createdAt\n    documentId\n    userId\n    name\n    important\n    properties\n    intercom\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment lwEventsAdminPageFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    name\n    documentId\n    important\n    properties\n    intercom\n  }\n"): (typeof documents)["\n  fragment lwEventsAdminPageFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    name\n    documentId\n    important\n    properties\n    intercom\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment emailHistoryFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    name\n    properties\n  }\n"): (typeof documents)["\n  fragment emailHistoryFragment on LWEvent {\n    _id\n    createdAt\n    userId\n    name\n    properties\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment messageListFragment on Message {\n    _id\n    user {\n      ...UsersMinimumInfo\n      profileImageId\n    }\n    contents {\n      html\n      plaintextMainText\n    }\n    createdAt\n    conversationId\n  }\n"): (typeof documents)["\n  fragment messageListFragment on Message {\n    _id\n    user {\n      ...UsersMinimumInfo\n      profileImageId\n    }\n    contents {\n      html\n      plaintextMainText\n    }\n    createdAt\n    conversationId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ModerationTemplateFragment on ModerationTemplate {\n    _id\n    name\n    collectionName\n    order\n    deleted\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment ModerationTemplateFragment on ModerationTemplate {\n    _id\n    name\n    collectionName\n    order\n    deleted\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ModeratorActionDisplay on ModeratorAction {\n    _id\n    user {\n      ...UsersMinimumInfo\n    }\n    userId\n    type\n    active\n    createdAt\n    endedAt\n  }\n"): (typeof documents)["\n  fragment ModeratorActionDisplay on ModeratorAction {\n    _id\n    user {\n      ...UsersMinimumInfo\n    }\n    userId\n    type\n    active\n    createdAt\n    endedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MultiDocumentMinimumInfo on MultiDocument {\n    _id\n    parentDocumentId\n    collectionName\n    fieldName\n    userId\n    slug\n    oldSlugs\n    title\n    tabTitle\n    tabSubtitle\n    preview\n    index\n    deleted\n    createdAt\n    legacyData\n\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment MultiDocumentMinimumInfo on MultiDocument {\n    _id\n    parentDocumentId\n    collectionName\n    fieldName\n    userId\n    slug\n    oldSlugs\n    title\n    tabTitle\n    tabSubtitle\n    preview\n    index\n    deleted\n    createdAt\n    legacyData\n\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MultiDocumentContentDisplay on MultiDocument {\n    ...MultiDocumentMinimumInfo\n    tableOfContents\n    textLastUpdatedAt\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment MultiDocumentContentDisplay on MultiDocument {\n    ...MultiDocumentMinimumInfo\n    tableOfContents\n    textLastUpdatedAt\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MultiDocumentEdit on MultiDocument {\n    ...MultiDocumentContentDisplay\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    summaries {\n      ...MultiDocumentContentDisplay\n    }\n    textLastUpdatedAt\n  }\n"): (typeof documents)["\n  fragment MultiDocumentEdit on MultiDocument {\n    ...MultiDocumentContentDisplay\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    summaries {\n      ...MultiDocumentContentDisplay\n    }\n    textLastUpdatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MultiDocumentParentDocument on MultiDocument {\n    ...MultiDocumentEdit\n    parentTag {\n      ...TagHistoryFragment\n    }\n  }\n"): (typeof documents)["\n  fragment MultiDocumentParentDocument on MultiDocument {\n    ...MultiDocumentEdit\n    parentTag {\n      ...TagHistoryFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MultiDocumentWithContributors on MultiDocument {\n    ...MultiDocumentEdit\n    contributors {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        currentAttributionCharCount\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment MultiDocumentWithContributors on MultiDocument {\n    ...MultiDocumentEdit\n    contributors {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        currentAttributionCharCount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MultiDocumentRevision on MultiDocument {\n    ...MultiDocumentMinimumInfo\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n    tableOfContents(version: $version)\n  }\n"): (typeof documents)["\n  fragment MultiDocumentRevision on MultiDocument {\n    ...MultiDocumentMinimumInfo\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n    tableOfContents(version: $version)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MultiDocumentWithContributorsRevision on MultiDocument {\n    ...MultiDocumentRevision\n    contributors(version: $version) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        currentAttributionCharCount\n        contributionScore\n      }\n    }\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    textLastUpdatedAt\n  }\n"): (typeof documents)["\n  fragment MultiDocumentWithContributorsRevision on MultiDocument {\n    ...MultiDocumentRevision\n    contributors(version: $version) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        currentAttributionCharCount\n        contributionScore\n      }\n    }\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    textLastUpdatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment WithVoteMultiDocument on MultiDocument {\n    ...MultiDocumentMinimumInfo\n  }\n"): (typeof documents)["\n  fragment WithVoteMultiDocument on MultiDocument {\n    ...MultiDocumentMinimumInfo\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NotificationsList on Notification {\n    _id\n    documentId\n    documentType\n    deleted\n    userId\n    createdAt\n    link\n    message\n    type\n    viewed\n    extraData\n  }\n"): (typeof documents)["\n  fragment NotificationsList on Notification {\n    _id\n    documentId\n    documentType\n    deleted\n    userId\n    createdAt\n    link\n    message\n    type\n    viewed\n    extraData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PetrovDayActionInfo on PetrovDayAction {\n    _id\n    createdAt\n    userId\n    actionType\n    data\n  }\n"): (typeof documents)["\n  fragment PetrovDayActionInfo on PetrovDayAction {\n    _id\n    createdAt\n    userId\n    actionType\n    data\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PetrovDayLaunchInfo on PetrovDayLaunch {\n    _id\n    createdAt\n    launchCode\n    userId\n  }\n"): (typeof documents)["\n  fragment PetrovDayLaunchInfo on PetrovDayLaunch {\n    _id\n    createdAt\n    launchCode\n    userId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PodcastEpisodeFull on PodcastEpisode {\n    _id\n    podcastId\n    title\n    episodeLink\n    externalEpisodeId\n  }\n"): (typeof documents)["\n  fragment PodcastEpisodeFull on PodcastEpisode {\n    _id\n    podcastId\n    title\n    episodeLink\n    externalEpisodeId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PodcastSelect on Podcast {\n    _id\n    title\n  }\n"): (typeof documents)["\n  fragment PodcastSelect on Podcast {\n    _id\n    title\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsMinimumInfo on Post {\n    _id\n    slug\n    title\n    draft\n    shortform\n    hideCommentKarma\n    af\n    currentUserReviewVote {\n      _id\n      qualitativeScore\n      quadraticScore\n    }\n    userId\n    coauthorStatuses\n    hasCoauthorPermission\n    rejected\n    debate\n    collabEditorDialogue\n  }\n"): (typeof documents)["\n  fragment PostsMinimumInfo on Post {\n    _id\n    slug\n    title\n    draft\n    shortform\n    hideCommentKarma\n    af\n    currentUserReviewVote {\n      _id\n      qualitativeScore\n      quadraticScore\n    }\n    userId\n    coauthorStatuses\n    hasCoauthorPermission\n    rejected\n    debate\n    collabEditorDialogue\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsTopItemInfo on Post {\n    ...PostsMinimumInfo\n    ...PostsAuthors\n    isRead\n    contents {\n      _id\n      htmlHighlight\n      wordCount\n      version\n    }\n    customHighlight {\n      _id\n      html\n    }\n    tags {\n      ...TagPreviewFragment\n    }\n    reviewWinner {\n      ...ReviewWinnerTopPostsPage\n    }\n    spotlight {\n      ...SpotlightReviewWinner\n    }\n    reviews {\n      ...CommentsList\n    }\n    finalReviewVoteScoreHighKarma\n  }\n"): (typeof documents)["\n  fragment PostsTopItemInfo on Post {\n    ...PostsMinimumInfo\n    ...PostsAuthors\n    isRead\n    contents {\n      _id\n      htmlHighlight\n      wordCount\n      version\n    }\n    customHighlight {\n      _id\n      html\n    }\n    tags {\n      ...TagPreviewFragment\n    }\n    reviewWinner {\n      ...ReviewWinnerTopPostsPage\n    }\n    spotlight {\n      ...SpotlightReviewWinner\n    }\n    reviews {\n      ...CommentsList\n    }\n    finalReviewVoteScoreHighKarma\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsBase on Post {\n    ...PostsMinimumInfo\n    \n    # Core fields\n    url\n    postedAt\n    createdAt\n    sticky\n    metaSticky\n    stickyPriority\n    status\n    frontpageDate\n    meta\n    deletedDraft\n    postCategory\n    tagRelevance\n\n    shareWithUsers\n    sharingSettings\n    linkSharingKey\n\n    contents_latest\n    commentCount\n    voteCount\n    baseScore\n    extendedScore\n    emojiReactors\n    unlisted\n    score\n    lastVisitedAt\n    isFuture\n    isRead\n    lastCommentedAt\n    lastCommentPromotedAt\n    canonicalCollectionSlug\n    curatedDate\n    commentsLocked\n    commentsLockedToAccountsCreatedAfter\n    debate\n\n    # questions\n    question\n    hiddenRelatedQuestion\n    originalPostRelationSourceId\n\n    userId\n    \n    # Local Event data\n    location\n    googleLocation\n    onlineEvent\n    globalEvent\n    startTime\n    endTime\n    localStartTime\n    localEndTime\n    eventRegistrationLink\n    joinEventLink\n    facebookLink\n    meetupLink\n    website\n    contactInfo\n    isEvent\n    eventImageId\n    eventType\n    types\n    groupId\n\n    # Review data \n    reviewedByUserId\n    suggestForCuratedUserIds\n    suggestForCuratedUsernames\n    reviewForCuratedUserId\n    authorIsUnreviewed\n\n    # Alignment Forum\n    afDate\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    afBaseScore\n    afExtendedScore\n    afCommentCount\n    afLastCommentedAt\n    afSticky\n    \n    hideAuthor\n    moderationStyle\n    ignoreRateLimits\n\n    submitToFrontpage\n    shortform\n    onlyVisibleToLoggedIn\n    onlyVisibleToEstablishedAccounts\n\n    reviewCount\n    reviewVoteCount\n    positiveReviewVoteCount\n    manifoldReviewMarketId\n\n    annualReviewMarketProbability\n    annualReviewMarketIsResolved\n    annualReviewMarketYear\n    annualReviewMarketUrl\n\n    group {\n      _id\n      name\n      organizerIds\n    }\n    rsvpCounts\n\n    podcastEpisodeId\n    forceAllowType3Audio\n\n    # deprecated\n    nominationCount2019\n    reviewCount2019\n\n    votingSystem\n    \n    disableRecommendation\n  }\n"): (typeof documents)["\n  fragment PostsBase on Post {\n    ...PostsMinimumInfo\n    \n    # Core fields\n    url\n    postedAt\n    createdAt\n    sticky\n    metaSticky\n    stickyPriority\n    status\n    frontpageDate\n    meta\n    deletedDraft\n    postCategory\n    tagRelevance\n\n    shareWithUsers\n    sharingSettings\n    linkSharingKey\n\n    contents_latest\n    commentCount\n    voteCount\n    baseScore\n    extendedScore\n    emojiReactors\n    unlisted\n    score\n    lastVisitedAt\n    isFuture\n    isRead\n    lastCommentedAt\n    lastCommentPromotedAt\n    canonicalCollectionSlug\n    curatedDate\n    commentsLocked\n    commentsLockedToAccountsCreatedAfter\n    debate\n\n    # questions\n    question\n    hiddenRelatedQuestion\n    originalPostRelationSourceId\n\n    userId\n    \n    # Local Event data\n    location\n    googleLocation\n    onlineEvent\n    globalEvent\n    startTime\n    endTime\n    localStartTime\n    localEndTime\n    eventRegistrationLink\n    joinEventLink\n    facebookLink\n    meetupLink\n    website\n    contactInfo\n    isEvent\n    eventImageId\n    eventType\n    types\n    groupId\n\n    # Review data \n    reviewedByUserId\n    suggestForCuratedUserIds\n    suggestForCuratedUsernames\n    reviewForCuratedUserId\n    authorIsUnreviewed\n\n    # Alignment Forum\n    afDate\n    suggestForAlignmentUserIds\n    reviewForAlignmentUserId\n    afBaseScore\n    afExtendedScore\n    afCommentCount\n    afLastCommentedAt\n    afSticky\n    \n    hideAuthor\n    moderationStyle\n    ignoreRateLimits\n\n    submitToFrontpage\n    shortform\n    onlyVisibleToLoggedIn\n    onlyVisibleToEstablishedAccounts\n\n    reviewCount\n    reviewVoteCount\n    positiveReviewVoteCount\n    manifoldReviewMarketId\n\n    annualReviewMarketProbability\n    annualReviewMarketIsResolved\n    annualReviewMarketYear\n    annualReviewMarketUrl\n\n    group {\n      _id\n      name\n      organizerIds\n    }\n    rsvpCounts\n\n    podcastEpisodeId\n    forceAllowType3Audio\n\n    # deprecated\n    nominationCount2019\n    reviewCount2019\n\n    votingSystem\n    \n    disableRecommendation\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsWithVotes on Post {\n    ...PostsBase\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment PostsWithVotes on Post {\n    ...PostsBase\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsListWithVotes on Post {\n    ...PostsList\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment PostsListWithVotes on Post {\n    ...PostsList\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsListWithVotesAndSequence on Post {\n    ...PostsListWithVotes\n    canonicalSequence {\n      ...SequencesPageFragment\n    }\n  }\n"): (typeof documents)["\n  fragment PostsListWithVotesAndSequence on Post {\n    ...PostsListWithVotes\n    canonicalSequence {\n      ...SequencesPageFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsReviewVotingList on Post {\n    ...PostsListWithVotes\n    reviewVoteScoreAllKarma\n    reviewVotesAllKarma\n    reviewVoteScoreHighKarma\n    reviewVotesHighKarma\n    reviewVoteScoreAF\n    reviewVotesAF\n  }\n"): (typeof documents)["\n  fragment PostsReviewVotingList on Post {\n    ...PostsListWithVotes\n    reviewVoteScoreAllKarma\n    reviewVotesAllKarma\n    reviewVoteScoreHighKarma\n    reviewVotesHighKarma\n    reviewVoteScoreAF\n    reviewVotesAF\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsModerationGuidelines on Post {\n    ...PostsMinimumInfo\n    frontpageDate\n    user {\n      _id\n      displayName\n      moderationStyle\n    }\n    moderationStyle\n    moderationGuidelines {\n      _id\n      html\n      originalContents {\n        type\n        data\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment PostsModerationGuidelines on Post {\n    ...PostsMinimumInfo\n    frontpageDate\n    user {\n      _id\n      displayName\n      moderationStyle\n    }\n    moderationStyle\n    moderationGuidelines {\n      _id\n      html\n      originalContents {\n        type\n        data\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsAuthors on Post {\n    user {\n      ...UsersMinimumInfo\n      profileImageId\n      \n      # Author moderation info\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n    }\n    coauthors {\n      ...UsersMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment PostsAuthors on Post {\n    user {\n      ...UsersMinimumInfo\n      profileImageId\n      \n      # Author moderation info\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n    }\n    coauthors {\n      ...UsersMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsListBase on Post {\n    ...PostsBase\n    ...PostsAuthors\n    readTimeMinutes\n    rejectedReason\n    customHighlight {\n      _id\n      html\n      plaintextDescription\n    }\n    lastPromotedComment {\n      _id\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n    bestAnswer {\n      ...CommentsList\n    }\n    tags {\n      ...TagBasicInfo\n    }\n    socialPreviewData {\n      _id\n      imageUrl\n    }\n\n    feedId\n    totalDialogueResponseCount\n    unreadDebateResponseCount\n    dialogTooltipPreview\n    disableSidenotes\n  }\n"): (typeof documents)["\n  fragment PostsListBase on Post {\n    ...PostsBase\n    ...PostsAuthors\n    readTimeMinutes\n    rejectedReason\n    customHighlight {\n      _id\n      html\n      plaintextDescription\n    }\n    lastPromotedComment {\n      _id\n      user {\n        ...UsersMinimumInfo\n      }\n    }\n    bestAnswer {\n      ...CommentsList\n    }\n    tags {\n      ...TagBasicInfo\n    }\n    socialPreviewData {\n      _id\n      imageUrl\n    }\n\n    feedId\n    totalDialogueResponseCount\n    unreadDebateResponseCount\n    dialogTooltipPreview\n    disableSidenotes\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsList on Post {\n    ...PostsListBase\n    deletedDraft\n    contents {\n      _id\n      htmlHighlight\n      plaintextDescription\n      wordCount\n      version\n    }\n    fmCrosspost\n  }\n"): (typeof documents)["\n  fragment PostsList on Post {\n    ...PostsListBase\n    deletedDraft\n    contents {\n      _id\n      htmlHighlight\n      plaintextDescription\n      wordCount\n      version\n    }\n    fmCrosspost\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SunshineCurationPostsList on Post {\n    ...PostsList\n    curationNotices {\n      ...CurationNoticesFragment\n    }\n  }\n"): (typeof documents)["\n  fragment SunshineCurationPostsList on Post {\n    ...PostsList\n    curationNotices {\n      ...CurationNoticesFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsListTag on Post {\n    ...PostsList\n    tagRel(tagId: $tagId) {\n      ...WithVoteTagRel\n    }\n  }\n"): (typeof documents)["\n  fragment PostsListTag on Post {\n    ...PostsList\n    tagRel(tagId: $tagId) {\n      ...WithVoteTagRel\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsListTagWithVotes on Post {\n    ...PostsListWithVotes\n    tagRel(tagId: $tagId) {\n      ...WithVoteTagRel\n    }\n  }\n"): (typeof documents)["\n  fragment PostsListTagWithVotes on Post {\n    ...PostsListWithVotes\n    tagRel(tagId: $tagId) {\n      ...WithVoteTagRel\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsDetails on Post {\n    ...PostsListBase\n\n    canonicalSource\n    noIndex\n    viewCount\n    tags {\n      ...TagPreviewFragment\n    }\n    socialPreviewData {\n      _id\n      text\n      imageUrl\n    }\n    \n    # Tags\n    tagRelevance\n    \n    # Posts-page display options\n    commentSortOrder\n    sideCommentVisibility\n    \n    # Sequence navigation\n    collectionTitle\n    canonicalPrevPostSlug\n    canonicalNextPostSlug\n    canonicalSequenceId\n    canonicalBookId\n    canonicalSequence {\n      _id\n      title\n    }\n    canonicalBook {\n      _id\n      title\n    }\n    canonicalCollection {\n      _id\n      title\n    }\n\n    # Podcast\n    podcastEpisode {\n      _id\n      title\n      podcast {\n        _id\n        title\n        applePodcastLink\n        spotifyPodcastLink\n      }\n      episodeLink\n      externalEpisodeId\n    }\n\n    # Moderation stuff\n    bannedUserIds\n    moderationStyle\n    \n    # Voting\n    currentUserVote\n    currentUserExtendedVote\n    \n    # RSS metadata\n    feedLink\n    feed {\n      ...RSSFeedMinimumInfo\n    }\n    \n    # Related Questions\n    sourcePostRelations {\n      _id\n      sourcePostId\n      sourcePost {\n        ...PostsListWithVotes\n      }\n      order\n    }\n    targetPostRelations {\n      _id\n      sourcePostId\n      targetPostId\n      targetPost {\n        ...PostsListWithVotes\n      }\n      order\n    }\n    \n    # Events\n    rsvps\n    activateRSVPs\n\n    # Crossposting\n    fmCrosspost\n\n    # Jargon Terms\n    glossary {\n      ...JargonTermsPost\n    }\n  }\n"): (typeof documents)["\n  fragment PostsDetails on Post {\n    ...PostsListBase\n\n    canonicalSource\n    noIndex\n    viewCount\n    tags {\n      ...TagPreviewFragment\n    }\n    socialPreviewData {\n      _id\n      text\n      imageUrl\n    }\n    \n    # Tags\n    tagRelevance\n    \n    # Posts-page display options\n    commentSortOrder\n    sideCommentVisibility\n    \n    # Sequence navigation\n    collectionTitle\n    canonicalPrevPostSlug\n    canonicalNextPostSlug\n    canonicalSequenceId\n    canonicalBookId\n    canonicalSequence {\n      _id\n      title\n    }\n    canonicalBook {\n      _id\n      title\n    }\n    canonicalCollection {\n      _id\n      title\n    }\n\n    # Podcast\n    podcastEpisode {\n      _id\n      title\n      podcast {\n        _id\n        title\n        applePodcastLink\n        spotifyPodcastLink\n      }\n      episodeLink\n      externalEpisodeId\n    }\n\n    # Moderation stuff\n    bannedUserIds\n    moderationStyle\n    \n    # Voting\n    currentUserVote\n    currentUserExtendedVote\n    \n    # RSS metadata\n    feedLink\n    feed {\n      ...RSSFeedMinimumInfo\n    }\n    \n    # Related Questions\n    sourcePostRelations {\n      _id\n      sourcePostId\n      sourcePost {\n        ...PostsListWithVotes\n      }\n      order\n    }\n    targetPostRelations {\n      _id\n      sourcePostId\n      targetPostId\n      targetPost {\n        ...PostsListWithVotes\n      }\n      order\n    }\n    \n    # Events\n    rsvps\n    activateRSVPs\n\n    # Crossposting\n    fmCrosspost\n\n    # Jargon Terms\n    glossary {\n      ...JargonTermsPost\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsExpandedHighlight on Post {\n    _id\n    contents {\n      _id\n      html\n    }\n  }\n"): (typeof documents)["\n  fragment PostsExpandedHighlight on Post {\n    _id\n    contents {\n      _id\n      html\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsPlaintextDescription on Post {\n    _id\n    contents {\n      _id\n      plaintextDescription\n    }\n  }\n"): (typeof documents)["\n  fragment PostsPlaintextDescription on Post {\n    _id\n    contents {\n      _id\n      plaintextDescription\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsRevision on Post {\n    ...PostsDetails\n\n    # Content & Revisions\n    version\n    contents(version: $version) {\n      ...RevisionDisplay\n    }\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n"): (typeof documents)["\n  fragment PostsRevision on Post {\n    ...PostsDetails\n\n    # Content & Revisions\n    version\n    contents(version: $version) {\n      ...RevisionDisplay\n    }\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsRevisionEdit on Post {\n    ...PostsDetails\n\n    # Content & Revisions\n    version\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n"): (typeof documents)["\n  fragment PostsRevisionEdit on Post {\n    ...PostsDetails\n\n    # Content & Revisions\n    version\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsWithNavigationAndRevision on Post {\n    ...PostsRevision\n    ...PostSequenceNavigation\n    customHighlight {\n      ...RevisionDisplay\n    }\n    \n    tableOfContentsRevision(version: $version)\n    reviewWinner {\n      ...ReviewWinnerAll\n    }\n  }\n"): (typeof documents)["\n  fragment PostsWithNavigationAndRevision on Post {\n    ...PostsRevision\n    ...PostSequenceNavigation\n    customHighlight {\n      ...RevisionDisplay\n    }\n    \n    tableOfContentsRevision(version: $version)\n    reviewWinner {\n      ...ReviewWinnerAll\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsWithNavigation on Post {\n    ...PostsPage\n    ...PostSequenceNavigation\n    \n    tableOfContents\n    reviewWinner {\n      ...ReviewWinnerAll\n    }\n  }\n"): (typeof documents)["\n  fragment PostsWithNavigation on Post {\n    ...PostsPage\n    ...PostSequenceNavigation\n    \n    tableOfContents\n    reviewWinner {\n      ...ReviewWinnerAll\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostSequenceNavigation on Post {\n    # Prev/next sequence navigation\n    sequence(sequenceId: $sequenceId) {\n      ...SequencesPageFragment\n    }\n    prevPost(sequenceId: $sequenceId) {\n      ...PostsListWithVotes\n      sequence(sequenceId: $sequenceId, prevOrNext: \"prev\") {\n        _id\n      }\n    }\n    nextPost(sequenceId: $sequenceId) {\n      ...PostsListWithVotes\n      sequence(sequenceId: $sequenceId, prevOrNext: \"next\") {\n        _id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment PostSequenceNavigation on Post {\n    # Prev/next sequence navigation\n    sequence(sequenceId: $sequenceId) {\n      ...SequencesPageFragment\n    }\n    prevPost(sequenceId: $sequenceId) {\n      ...PostsListWithVotes\n      sequence(sequenceId: $sequenceId, prevOrNext: \"prev\") {\n        _id\n      }\n    }\n    nextPost(sequenceId: $sequenceId) {\n      ...PostsListWithVotes\n      sequence(sequenceId: $sequenceId, prevOrNext: \"next\") {\n        _id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsPage on Post {\n    ...PostsDetails\n    version\n    contents {\n      ...RevisionDisplay\n    }\n    customHighlight {\n      ...RevisionDisplay\n    }\n    myEditorAccess\n  }\n"): (typeof documents)["\n  fragment PostsPage on Post {\n    ...PostsDetails\n    version\n    contents {\n      ...RevisionDisplay\n    }\n    customHighlight {\n      ...RevisionDisplay\n    }\n    myEditorAccess\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsEdit on Post {\n    ...PostsDetails\n    ...PostSideComments\n    myEditorAccess\n    version\n    coauthorStatuses\n    readTimeMinutesOverride\n    fmCrosspost\n    hideFromRecentDiscussions\n    hideFromPopularComments\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n    customHighlight {\n      ...RevisionEdit\n    }\n    tableOfContents\n    subforumTagId\n    socialPreviewImageId\n    socialPreview\n    socialPreviewData {\n      _id\n      imageId\n      text\n    }\n    user {\n      ...UsersMinimumInfo\n    }\n    usersSharedWith {\n      ...UsersMinimumInfo\n    }\n    coauthors {\n      ...UsersMinimumInfo\n    }\n    generateDraftJargon\n  }\n"): (typeof documents)["\n  fragment PostsEdit on Post {\n    ...PostsDetails\n    ...PostSideComments\n    myEditorAccess\n    version\n    coauthorStatuses\n    readTimeMinutesOverride\n    fmCrosspost\n    hideFromRecentDiscussions\n    hideFromPopularComments\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n    customHighlight {\n      ...RevisionEdit\n    }\n    tableOfContents\n    subforumTagId\n    socialPreviewImageId\n    socialPreview\n    socialPreviewData {\n      _id\n      imageId\n      text\n    }\n    user {\n      ...UsersMinimumInfo\n    }\n    usersSharedWith {\n      ...UsersMinimumInfo\n    }\n    coauthors {\n      ...UsersMinimumInfo\n    }\n    generateDraftJargon\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsEditQueryFragment on Post {\n    ...PostsEdit\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment PostsEditQueryFragment on Post {\n    ...PostsEdit\n    contents(version: $version) {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsEditMutationFragment on Post {\n    ...PostsEdit\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment PostsEditMutationFragment on Post {\n    ...PostsEdit\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsRevisionsList on Post {\n    _id\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n"): (typeof documents)["\n  fragment PostsRevisionsList on Post {\n    _id\n    revisions {\n      ...RevisionMetadata\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsRecentDiscussion on Post {\n    ...PostsListWithVotes\n    recentComments(commentsLimit: $commentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsList\n    }\n  }\n"): (typeof documents)["\n  fragment PostsRecentDiscussion on Post {\n    ...PostsListWithVotes\n    recentComments(commentsLimit: $commentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsList\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ShortformRecentDiscussion on Post {\n    ...PostsListWithVotes\n    recentComments(commentsLimit: $commentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsListWithTopLevelComment\n    }\n  }\n"): (typeof documents)["\n  fragment ShortformRecentDiscussion on Post {\n    ...PostsListWithVotes\n    recentComments(commentsLimit: $commentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsListWithTopLevelComment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersBannedFromPostsModerationLog on Post {\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    slug\n    _id\n    bannedUserIds\n  }\n"): (typeof documents)["\n  fragment UsersBannedFromPostsModerationLog on Post {\n    user {\n      ...UsersMinimumInfo\n    }\n    title\n    slug\n    _id\n    bannedUserIds\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SunshinePostsList on Post {\n    ...PostsListBase\n\n    currentUserVote\n    currentUserExtendedVote\n    fmCrosspost\n    rejectedReason\n    autoFrontpage\n\n    contents {\n      _id\n      html\n      htmlHighlight\n      wordCount\n      version\n    }\n\n    moderationGuidelines {\n      _id\n      html\n    }\n\n    user {\n      ...UsersMinimumInfo\n      biography {\n        ...RevisionDisplay\n      }\n      profileImageId\n      \n      # Author moderation info\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n      \n      moderationGuidelines {\n        _id\n        html\n      }\n\n      needsReview\n      moderatorActions {\n        ...ModeratorActionDisplay\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment SunshinePostsList on Post {\n    ...PostsListBase\n\n    currentUserVote\n    currentUserExtendedVote\n    fmCrosspost\n    rejectedReason\n    autoFrontpage\n\n    contents {\n      _id\n      html\n      htmlHighlight\n      wordCount\n      version\n    }\n\n    moderationGuidelines {\n      _id\n      html\n    }\n\n    user {\n      ...UsersMinimumInfo\n      biography {\n        ...RevisionDisplay\n      }\n      profileImageId\n      \n      # Author moderation info\n      moderationStyle\n      bannedUserIds\n      moderatorAssistance\n      \n      moderationGuidelines {\n        _id\n        html\n      }\n\n      needsReview\n      moderatorActions {\n        ...ModeratorActionDisplay\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment WithVotePost on Post {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n  }\n"): (typeof documents)["\n  fragment WithVotePost on Post {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment HighlightWithHash on Post {\n    _id\n    contents {\n      _id\n      htmlHighlightStartingAtHash(hash: $hash)\n    }\n  }\n"): (typeof documents)["\n  fragment HighlightWithHash on Post {\n    _id\n    contents {\n      _id\n      htmlHighlightStartingAtHash(hash: $hash)\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostWithDialogueMessage on Post {\n    _id\n    dialogueMessageContents(dialogueMessageId: $dialogueMessageId)\n  }\n"): (typeof documents)["\n  fragment PostWithDialogueMessage on Post {\n    _id\n    dialogueMessageContents(dialogueMessageId: $dialogueMessageId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostSideComments on Post {\n    _id\n    sideComments\n    sideCommentsCache {\n      ...SideCommentCacheMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment PostSideComments on Post {\n    _id\n    sideComments\n    sideCommentsCache {\n      ...SideCommentCacheMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostWithGeneratedSummary on Post {\n    _id\n    languageModelSummary\n  }\n"): (typeof documents)["\n  fragment PostWithGeneratedSummary on Post {\n    _id\n    languageModelSummary\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsBestOfList on Post {\n    ...PostsListWithVotes\n    podcastEpisode {\n      _id\n      title\n      podcast {\n        _id\n        title\n        applePodcastLink\n        spotifyPodcastLink\n      }\n      episodeLink\n      externalEpisodeId\n    }\n    socialPreviewData {\n      _id\n      text\n      imageUrl\n    }\n    firstVideoAttribsForPreview\n  }\n"): (typeof documents)["\n  fragment PostsBestOfList on Post {\n    ...PostsListWithVotes\n    podcastEpisode {\n      _id\n      title\n      podcast {\n        _id\n        title\n        applePodcastLink\n        spotifyPodcastLink\n      }\n      episodeLink\n      externalEpisodeId\n    }\n    socialPreviewData {\n      _id\n      text\n      imageUrl\n    }\n    firstVideoAttribsForPreview\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsRSSFeed on Post {\n    ...PostsPage\n    scoreExceeded2Date\n    scoreExceeded30Date\n    scoreExceeded45Date\n    scoreExceeded75Date\n    scoreExceeded125Date\n    scoreExceeded200Date\n    metaDate\n  }\n"): (typeof documents)["\n  fragment PostsRSSFeed on Post {\n    ...PostsPage\n    scoreExceeded2Date\n    scoreExceeded30Date\n    scoreExceeded45Date\n    scoreExceeded75Date\n    scoreExceeded125Date\n    scoreExceeded200Date\n    metaDate\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsOriginalContents on Post {\n    _id\n    contents {\n      _id\n      originalContents {\n        type\n        data\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment PostsOriginalContents on Post {\n    _id\n    contents {\n      _id\n      originalContents {\n        type\n        data\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsHTML on Post {\n    _id\n    contents {\n      ...RevisionHTML\n    }\n  }\n"): (typeof documents)["\n  fragment PostsHTML on Post {\n    _id\n    contents {\n      ...RevisionHTML\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsForAutocomplete on Post {\n    _id\n    title\n    userId\n    baseScore\n    extendedScore\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      markdown\n    }\n  }\n"): (typeof documents)["\n  fragment PostsForAutocomplete on Post {\n    _id\n    title\n    userId\n    baseScore\n    extendedScore\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      markdown\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostForReviewWinnerItem on Post {\n    _id\n    spotlight {\n      _id\n    }\n    reviewWinner {\n      _id\n      category\n    }\n  }\n"): (typeof documents)["\n  fragment PostForReviewWinnerItem on Post {\n    _id\n    spotlight {\n      _id\n    }\n    reviewWinner {\n      _id\n      category\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PostsTwitterAdmin on Post {\n    ...PostsListWithVotes\n    user {\n      ...UsersSocialMediaInfo\n    }\n    coauthors {\n      ...UsersSocialMediaInfo\n    }\n  }\n"): (typeof documents)["\n  fragment PostsTwitterAdmin on Post {\n    ...PostsListWithVotes\n    user {\n      ...UsersSocialMediaInfo\n    }\n    coauthors {\n      ...UsersSocialMediaInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SuggestAlignmentPost on Post {\n    ...PostsList\n    suggestForAlignmentUsers {\n      _id\n      displayName\n    }\n  }\n"): (typeof documents)["\n  fragment SuggestAlignmentPost on Post {\n    ...PostsList\n    suggestForAlignmentUsers {\n      _id\n      displayName\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UnclaimedReportsList on Report {\n    _id\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    commentId\n    comment {\n      ...CommentsList\n      post {\n        ...PostsMinimumInfo\n      }\n      tag {\n        ...TagBasicInfo\n      }\n    }\n    postId\n    post {\n      ...PostsList\n    }\n    reportedUser {\n      ...SunshineUsersList\n    }\n    closedAt\n    createdAt\n    claimedUserId\n    claimedUser {\n      _id\n      displayName\n      username\n      slug\n    }\n    link\n    description\n    reportedAsSpam\n    markedAsSpam\n  }\n"): (typeof documents)["\n  fragment UnclaimedReportsList on Report {\n    _id\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    commentId\n    comment {\n      ...CommentsList\n      post {\n        ...PostsMinimumInfo\n      }\n      tag {\n        ...TagBasicInfo\n      }\n    }\n    postId\n    post {\n      ...PostsList\n    }\n    reportedUser {\n      ...SunshineUsersList\n    }\n    closedAt\n    createdAt\n    claimedUserId\n    claimedUser {\n      _id\n      displayName\n      username\n      slug\n    }\n    link\n    description\n    reportedAsSpam\n    markedAsSpam\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment reviewVoteFragment on ReviewVote {\n    _id\n    createdAt\n    userId\n    postId\n    qualitativeScore\n    quadraticScore\n    comment\n    year\n    dummy\n    reactions\n  }\n"): (typeof documents)["\n  fragment reviewVoteFragment on ReviewVote {\n    _id\n    createdAt\n    userId\n    postId\n    qualitativeScore\n    quadraticScore\n    comment\n    year\n    dummy\n    reactions\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment reviewVoteWithUserAndPost on ReviewVote {\n    ...reviewVoteFragment\n    user {\n      ...UsersMinimumInfo\n      email\n      emails\n    }\n    post {\n      ...PostsMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment reviewVoteWithUserAndPost on ReviewVote {\n    ...reviewVoteFragment\n    user {\n      ...UsersMinimumInfo\n      email\n      emails\n    }\n    post {\n      ...PostsMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment reviewAdminDashboard on ReviewVote {\n    _id\n    createdAt\n    userId\n    user {\n      _id\n      displayName\n      karma\n    }\n  }\n"): (typeof documents)["\n  fragment reviewAdminDashboard on ReviewVote {\n    _id\n    createdAt\n    userId\n    user {\n      _id\n      displayName\n      karma\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReviewWinnerArtImages on ReviewWinnerArt {\n    _id\n    postId\n    splashArtImagePrompt\n    splashArtImageUrl\n    activeSplashArtCoordinates {\n      ...SplashArtCoordinatesEdit\n    }\n  }\n"): (typeof documents)["\n  fragment ReviewWinnerArtImages on ReviewWinnerArt {\n    _id\n    postId\n    splashArtImagePrompt\n    splashArtImageUrl\n    activeSplashArtCoordinates {\n      ...SplashArtCoordinatesEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReviewWinnerEditDisplay on ReviewWinner {\n    _id\n    postId\n    reviewYear\n    curatedOrder\n    reviewRanking\n  }\n"): (typeof documents)["\n  fragment ReviewWinnerEditDisplay on ReviewWinner {\n    _id\n    postId\n    reviewYear\n    curatedOrder\n    reviewRanking\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReviewWinnerTopPostsDisplay on ReviewWinner {\n    _id\n    postId\n    post {\n      ...PostsTopItemInfo\n    }\n    reviewYear\n    curatedOrder\n    reviewRanking\n  }\n"): (typeof documents)["\n  fragment ReviewWinnerTopPostsDisplay on ReviewWinner {\n    _id\n    postId\n    post {\n      ...PostsTopItemInfo\n    }\n    reviewYear\n    curatedOrder\n    reviewRanking\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReviewWinnerAll on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    postId\n    reviewYear\n    reviewRanking\n    reviewWinnerArt {\n      ...ReviewWinnerArtImages\n    }\n    competitorCount\n  }\n"): (typeof documents)["\n  fragment ReviewWinnerAll on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    postId\n    reviewYear\n    reviewRanking\n    reviewWinnerArt {\n      ...ReviewWinnerArtImages\n    }\n    competitorCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReviewWinnerTopPostsPage on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    reviewYear\n    reviewRanking\n    reviewWinnerArt {\n      splashArtImageUrl\n      activeSplashArtCoordinates {\n        ...SplashArtCoordinatesEdit\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ReviewWinnerTopPostsPage on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    reviewYear\n    reviewRanking\n    reviewWinnerArt {\n      splashArtImageUrl\n      activeSplashArtCoordinates {\n        ...SplashArtCoordinatesEdit\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ReviewWinnerAnnouncement on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    reviewYear\n    reviewRanking\n    competitorCount\n    postId\n    post {\n      _id\n      title\n      slug\n    }\n  }\n"): (typeof documents)["\n  fragment ReviewWinnerAnnouncement on ReviewWinner {\n    _id\n    category\n    curatedOrder\n    reviewYear\n    reviewRanking\n    competitorCount\n    postId\n    post {\n      _id\n      title\n      slug\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionDisplay on Revision {\n    _id\n    version\n    updateType\n    editedAt\n    userId\n    html\n    commitMessage\n    wordCount\n    htmlHighlight\n    plaintextDescription\n  }\n"): (typeof documents)["\n  fragment RevisionDisplay on Revision {\n    _id\n    version\n    updateType\n    editedAt\n    userId\n    html\n    commitMessage\n    wordCount\n    htmlHighlight\n    plaintextDescription\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionHTML on Revision {\n    _id\n    html\n  }\n"): (typeof documents)["\n  fragment RevisionHTML on Revision {\n    _id\n    html\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionEdit on Revision {\n    _id\n    version\n    updateType\n    editedAt\n    userId\n    originalContents {\n      type\n      data\n    }\n    html\n    markdown\n    draftJS\n    ckEditorMarkup\n    wordCount\n    htmlHighlight\n    plaintextDescription\n  }\n"): (typeof documents)["\n  fragment RevisionEdit on Revision {\n    _id\n    version\n    updateType\n    editedAt\n    userId\n    originalContents {\n      type\n      data\n    }\n    html\n    markdown\n    draftJS\n    ckEditorMarkup\n    wordCount\n    htmlHighlight\n    plaintextDescription\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionMetadata on Revision {\n    _id\n    version\n    editedAt\n    commitMessage\n    userId\n    \n    score\n    baseScore\n    extendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment RevisionMetadata on Revision {\n    _id\n    version\n    editedAt\n    commitMessage\n    userId\n    \n    score\n    baseScore\n    extendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionMetadataWithChangeMetrics on Revision {\n    ...RevisionMetadata\n    changeMetrics\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment RevisionMetadataWithChangeMetrics on Revision {\n    ...RevisionMetadata\n    changeMetrics\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionHistoryEntry on Revision {\n    ...RevisionMetadata\n    documentId\n    collectionName\n    changeMetrics\n    legacyData\n    skipAttributions\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment RevisionHistoryEntry on Revision {\n    ...RevisionMetadata\n    documentId\n    collectionName\n    changeMetrics\n    legacyData\n    skipAttributions\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionHistorySummaryEdit on Revision {\n    ...RevisionHistoryEntry\n    summary {\n      ...MultiDocumentMinimumInfo\n      parentTag {\n        _id\n        name\n      }\n      parentLens {\n        _id\n        title\n        tabTitle\n        tabSubtitle\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment RevisionHistorySummaryEdit on Revision {\n    ...RevisionHistoryEntry\n    summary {\n      ...MultiDocumentMinimumInfo\n      parentTag {\n        _id\n        name\n      }\n      parentLens {\n        _id\n        title\n        tabTitle\n        tabSubtitle\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RevisionTagFragment on Revision {\n    ...RevisionHistoryEntry\n    tag {\n      ...TagHistoryFragment\n    }\n    lens {\n      ...MultiDocumentParentDocument\n    }\n  }\n"): (typeof documents)["\n  fragment RevisionTagFragment on Revision {\n    ...RevisionHistoryEntry\n    tag {\n      ...TagHistoryFragment\n    }\n    lens {\n      ...MultiDocumentParentDocument\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RecentDiscussionRevisionTagFragment on Revision {\n    ...RevisionHistoryEntry\n    tag {\n      ...TagRecentDiscussion\n    }\n  }\n"): (typeof documents)["\n  fragment RecentDiscussionRevisionTagFragment on Revision {\n    ...RevisionHistoryEntry\n    tag {\n      ...TagRecentDiscussion\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment WithVoteRevision on Revision {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    voteCount\n  }\n"): (typeof documents)["\n  fragment WithVoteRevision on Revision {\n    __typename\n    _id\n    currentUserVote\n    currentUserExtendedVote\n    baseScore\n    extendedScore\n    score\n    voteCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RSSFeedMinimumInfo on RSSFeed {\n    _id\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    createdAt\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    importAsDraft\n  }\n"): (typeof documents)["\n  fragment RSSFeedMinimumInfo on RSSFeed {\n    _id\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    createdAt\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    importAsDraft\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment newRSSFeedFragment on RSSFeed {\n    _id\n    userId\n    createdAt\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    status\n    importAsDraft\n  }\n"): (typeof documents)["\n  fragment newRSSFeedFragment on RSSFeed {\n    _id\n    userId\n    createdAt\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    status\n    importAsDraft\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment RSSFeedMutationFragment on RSSFeed {\n    _id\n    userId\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    importAsDraft\n  }\n"): (typeof documents)["\n  fragment RSSFeedMutationFragment on RSSFeed {\n    _id\n    userId\n    ownedByUser\n    displayFullContent\n    nickname\n    url\n    importAsDraft\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SequencesPageTitleFragment on Sequence {\n    _id\n    title\n    canonicalCollectionSlug\n    canonicalCollection {\n      _id\n      title\n    }\n  }\n"): (typeof documents)["\n  fragment SequencesPageTitleFragment on Sequence {\n    _id\n    title\n    canonicalCollectionSlug\n    canonicalCollection {\n      _id\n      title\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SequencesPageFragment on Sequence {\n    ...SequencesPageTitleFragment\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      ...RevisionDisplay\n    }\n    gridImageId\n    bannerImageId\n    canonicalCollectionSlug\n    draft\n    isDeleted\n    hidden\n    hideFromAuthorPage\n    noindex\n    curatedOrder\n    userProfileOrder\n    af\n    postsCount\n    readPostsCount\n  }\n"): (typeof documents)["\n  fragment SequencesPageFragment on Sequence {\n    ...SequencesPageTitleFragment\n    createdAt\n    userId\n    user {\n      ...UsersMinimumInfo\n    }\n    contents {\n      ...RevisionDisplay\n    }\n    gridImageId\n    bannerImageId\n    canonicalCollectionSlug\n    draft\n    isDeleted\n    hidden\n    hideFromAuthorPage\n    noindex\n    curatedOrder\n    userProfileOrder\n    af\n    postsCount\n    readPostsCount\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SequenceContinueReadingFragment on Sequence {\n    _id\n    title\n    gridImageId\n    canonicalCollectionSlug\n  }\n"): (typeof documents)["\n  fragment SequenceContinueReadingFragment on Sequence {\n    _id\n    title\n    gridImageId\n    canonicalCollectionSlug\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SequencesPageWithChaptersFragment on Sequence {\n    ...SequencesPageFragment\n    chapters {\n      ...ChaptersFragment\n    }\n  }\n"): (typeof documents)["\n  fragment SequencesPageWithChaptersFragment on Sequence {\n    ...SequencesPageFragment\n    chapters {\n      ...ChaptersFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SequencesEdit on Sequence {\n    ...SequencesPageFragment\n    contents { \n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment SequencesEdit on Sequence {\n    ...SequencesPageFragment\n    contents { \n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SideCommentCacheMinimumInfo on SideCommentCache {\n    _id\n    postId\n    annotatedHtml\n    commentsByBlock\n    version\n    createdAt\n  }\n"): (typeof documents)["\n  fragment SideCommentCacheMinimumInfo on SideCommentCache {\n    _id\n    postId\n    annotatedHtml\n    commentsByBlock\n    version\n    createdAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SplashArtCoordinates on SplashArtCoordinate {\n    _id\n    reviewWinnerArtId\n    leftXPct\n    leftYPct\n    leftHeightPct\n    leftWidthPct\n    leftFlipped\n    middleXPct\n    middleYPct\n    middleHeightPct\n    middleWidthPct\n    middleFlipped\n    rightXPct\n    rightYPct\n    rightHeightPct\n    rightWidthPct\n    rightFlipped\n  }\n"): (typeof documents)["\n  fragment SplashArtCoordinates on SplashArtCoordinate {\n    _id\n    reviewWinnerArtId\n    leftXPct\n    leftYPct\n    leftHeightPct\n    leftWidthPct\n    leftFlipped\n    middleXPct\n    middleYPct\n    middleHeightPct\n    middleWidthPct\n    middleFlipped\n    rightXPct\n    rightYPct\n    rightHeightPct\n    rightWidthPct\n    rightFlipped\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SplashArtCoordinatesEdit on SplashArtCoordinate {\n    ...SplashArtCoordinates\n    createdAt\n  }\n"): (typeof documents)["\n  fragment SplashArtCoordinatesEdit on SplashArtCoordinate {\n    ...SplashArtCoordinates\n    createdAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SpotlightMinimumInfo on Spotlight {\n    _id\n    documentId\n    documentType\n    spotlightImageId\n    spotlightDarkImageId\n    spotlightSplashImageUrl\n    draft\n    deletedDraft\n    position\n    lastPromotedAt\n    customTitle\n    customSubtitle\n    subtitleUrl\n    headerTitle\n    headerTitleLeftColor\n    headerTitleRightColor\n    duration\n    showAuthor\n    imageFade\n    imageFadeColor\n  }\n"): (typeof documents)["\n  fragment SpotlightMinimumInfo on Spotlight {\n    _id\n    documentId\n    documentType\n    spotlightImageId\n    spotlightDarkImageId\n    spotlightSplashImageUrl\n    draft\n    deletedDraft\n    position\n    lastPromotedAt\n    customTitle\n    customSubtitle\n    subtitleUrl\n    headerTitle\n    headerTitleLeftColor\n    headerTitleRightColor\n    duration\n    showAuthor\n    imageFade\n    imageFadeColor\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SpotlightReviewWinner on Spotlight {\n    ...SpotlightMinimumInfo\n    description {\n      html\n    }\n    sequenceChapters {\n      ...ChaptersFragment\n    }\n  }\n"): (typeof documents)["\n  fragment SpotlightReviewWinner on Spotlight {\n    ...SpotlightMinimumInfo\n    description {\n      html\n    }\n    sequenceChapters {\n      ...ChaptersFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SpotlightHeaderEventSubtitle on Spotlight {\n    ...SpotlightMinimumInfo\n    post {\n      _id\n      slug\n    }\n    sequence {\n      _id\n    }\n    tag {\n      _id\n      slug\n    }\n  }\n"): (typeof documents)["\n  fragment SpotlightHeaderEventSubtitle on Spotlight {\n    ...SpotlightMinimumInfo\n    post {\n      _id\n      slug\n    }\n    sequence {\n      _id\n    }\n    tag {\n      _id\n      slug\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SpotlightDisplay on Spotlight {\n    ...SpotlightMinimumInfo\n    post {\n      ...PostsMinimumInfo\n      user {\n        _id\n        displayName\n        slug\n      }\n      reviews {\n        ...CommentsList\n      }\n    }\n    sequence {\n      _id\n      title\n      user {\n        _id\n        displayName\n        slug\n      }\n    }\n    tag {\n      _id\n      name\n      slug\n      user {\n        _id\n        displayName\n        slug\n      }\n    }\n    sequenceChapters {\n      ...ChaptersFragment\n    }\n    description {\n      html\n    }\n  }\n"): (typeof documents)["\n  fragment SpotlightDisplay on Spotlight {\n    ...SpotlightMinimumInfo\n    post {\n      ...PostsMinimumInfo\n      user {\n        _id\n        displayName\n        slug\n      }\n      reviews {\n        ...CommentsList\n      }\n    }\n    sequence {\n      _id\n      title\n      user {\n        _id\n        displayName\n        slug\n      }\n    }\n    tag {\n      _id\n      name\n      slug\n      user {\n        _id\n        displayName\n        slug\n      }\n    }\n    sequenceChapters {\n      ...ChaptersFragment\n    }\n    description {\n      html\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SpotlightEditQueryFragment on Spotlight {\n    ...SpotlightMinimumInfo\n    description {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment SpotlightEditQueryFragment on Spotlight {\n    ...SpotlightMinimumInfo\n    description {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SubscriptionState on Subscription {\n    _id\n    userId\n    createdAt\n    state\n    documentId\n    collectionName\n    deleted\n    type\n  }\n"): (typeof documents)["\n  fragment SubscriptionState on Subscription {\n    _id\n    userId\n    createdAt\n    state\n    documentId\n    collectionName\n    deleted\n    type\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MembersOfGroupFragment on Subscription {\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment MembersOfGroupFragment on Subscription {\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SurveyQuestionMinimumInfo on SurveyQuestion {\n    _id\n    question\n    format\n    order\n  }\n"): (typeof documents)["\n  fragment SurveyQuestionMinimumInfo on SurveyQuestion {\n    _id\n    question\n    format\n    order\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SurveyResponseMinimumInfo on SurveyResponse {\n    _id\n    surveyId\n    surveyScheduleId\n    userId\n    clientId\n    response\n  }\n"): (typeof documents)["\n  fragment SurveyResponseMinimumInfo on SurveyResponse {\n    _id\n    surveyId\n    surveyScheduleId\n    userId\n    clientId\n    response\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SurveyScheduleMinimumInfo on SurveySchedule {\n    _id\n    survey {\n      ...SurveyMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment SurveyScheduleMinimumInfo on SurveySchedule {\n    _id\n    survey {\n      ...SurveyMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SurveyScheduleEdit on SurveySchedule {\n    ...SurveyScheduleMinimumInfo\n    surveyId\n    name\n    impressionsLimit\n    maxVisitorPercentage\n    minKarma\n    maxKarma\n    target\n    startDate\n    endDate\n    deactivated\n    createdAt\n  }\n"): (typeof documents)["\n  fragment SurveyScheduleEdit on SurveySchedule {\n    ...SurveyScheduleMinimumInfo\n    surveyId\n    name\n    impressionsLimit\n    maxVisitorPercentage\n    minKarma\n    maxKarma\n    target\n    startDate\n    endDate\n    deactivated\n    createdAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SurveyMinimumInfo on Survey {\n    _id\n    name\n    questions {\n      ...SurveyQuestionMinimumInfo\n    }\n    createdAt\n  }\n"): (typeof documents)["\n  fragment SurveyMinimumInfo on Survey {\n    _id\n    name\n    questions {\n      ...SurveyQuestionMinimumInfo\n    }\n    createdAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagFlagFragment on TagFlag {\n    _id\n    createdAt\n    name\n    slug\n    order\n    deleted\n    contents { \n      html\n      htmlHighlight\n      plaintextDescription\n    }\n  }\n"): (typeof documents)["\n  fragment TagFlagFragment on TagFlag {\n    _id\n    createdAt\n    name\n    slug\n    order\n    deleted\n    contents { \n      html\n      htmlHighlight\n      plaintextDescription\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagFlagEditFragment on TagFlag {\n    ...TagFlagFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment TagFlagEditFragment on TagFlag {\n    ...TagFlagFragment\n    contents {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRelBasicInfo on TagRel {\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    tagId\n    postId\n    autoApplied\n  }\n"): (typeof documents)["\n  fragment TagRelBasicInfo on TagRel {\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    tagId\n    postId\n    autoApplied\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRelFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    post {\n      ...PostsList\n    }\n    currentUserVote\n    currentUserExtendedVote\n    currentUserCanVote\n  }\n"): (typeof documents)["\n  fragment TagRelFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    post {\n      ...PostsList\n    }\n    currentUserVote\n    currentUserExtendedVote\n    currentUserCanVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRelHistoryFragment on TagRel {\n    ...TagRelBasicInfo\n    createdAt\n    user {\n      ...UsersMinimumInfo\n    }\n    post {\n      ...PostsList\n    }\n  }\n"): (typeof documents)["\n  fragment TagRelHistoryFragment on TagRel {\n    ...TagRelBasicInfo\n    createdAt\n    user {\n      ...UsersMinimumInfo\n    }\n    post {\n      ...PostsList\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRelCreationFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    post {\n      ...PostsList\n      tagRelevance\n      tagRel(tagId: $tagId) {\n        ...WithVoteTagRel\n      }\n    }\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment TagRelCreationFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    post {\n      ...PostsList\n      tagRelevance\n      tagRel(tagId: $tagId) {\n        ...WithVoteTagRel\n      }\n    }\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRelMinimumFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    currentUserVote\n    currentUserExtendedVote\n    currentUserCanVote\n  }\n"): (typeof documents)["\n  fragment TagRelMinimumFragment on TagRel {\n    ...TagRelBasicInfo\n    tag {\n      ...TagPreviewFragment\n    }\n    currentUserVote\n    currentUserExtendedVote\n    currentUserCanVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment WithVoteTagRel on TagRel {\n    __typename\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment WithVoteTagRel on TagRel {\n    __typename\n    _id\n    score\n    baseScore\n    extendedScore\n    afBaseScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagBasicInfo on Tag {\n    _id\n    userId\n    name\n    shortName\n    slug\n    core\n    postCount\n    adminOnly\n    canEditUserIds\n    suggestedAsFilter\n    needsReview\n    descriptionTruncationCount\n    createdAt\n    wikiOnly\n    deleted\n    isSubforum\n    noindex\n    isArbitalImport\n    isPlaceholderPage\n\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"): (typeof documents)["\n  fragment TagBasicInfo on Tag {\n    _id\n    userId\n    name\n    shortName\n    slug\n    core\n    postCount\n    adminOnly\n    canEditUserIds\n    suggestedAsFilter\n    needsReview\n    descriptionTruncationCount\n    createdAt\n    wikiOnly\n    deleted\n    isSubforum\n    noindex\n    isArbitalImport\n    isPlaceholderPage\n\n    baseScore\n    extendedScore\n    score\n    afBaseScore\n    afExtendedScore\n    voteCount\n    currentUserVote\n    currentUserExtendedVote\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagDetailsFragment on Tag {\n    ...TagBasicInfo\n    subtitle\n    oldSlugs\n    isRead\n    defaultOrder\n    reviewedByUserId\n    wikiGrade\n    subforumModeratorIds\n    subforumModerators {\n      ...UsersMinimumInfo\n    }\n    moderationGuidelines {\n      _id\n      html\n    }\n    bannerImageId\n    squareImageId\n    lesswrongWikiImportSlug\n    lesswrongWikiImportRevision\n    sequence {\n      ...SequencesPageFragment\n    }\n  }\n"): (typeof documents)["\n  fragment TagDetailsFragment on Tag {\n    ...TagBasicInfo\n    subtitle\n    oldSlugs\n    isRead\n    defaultOrder\n    reviewedByUserId\n    wikiGrade\n    subforumModeratorIds\n    subforumModerators {\n      ...UsersMinimumInfo\n    }\n    moderationGuidelines {\n      _id\n      html\n    }\n    bannerImageId\n    squareImageId\n    lesswrongWikiImportSlug\n    lesswrongWikiImportRevision\n    sequence {\n      ...SequencesPageFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagFragment on Tag {\n    ...TagDetailsFragment\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      html\n      htmlHighlight\n      plaintextDescription\n      version\n      editedAt\n    }\n    canVoteOnRels\n  }\n"): (typeof documents)["\n  fragment TagFragment on Tag {\n    ...TagDetailsFragment\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      html\n      htmlHighlight\n      plaintextDescription\n      version\n      editedAt\n    }\n    canVoteOnRels\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagHistoryFragment on Tag {\n    ...TagFragment\n    textLastUpdatedAt\n    tableOfContents\n    user {\n      ...UsersMinimumInfo\n    }\n    lensesIncludingDeleted {\n      ...MultiDocumentContentDisplay\n    }\n  }\n"): (typeof documents)["\n  fragment TagHistoryFragment on Tag {\n    ...TagFragment\n    textLastUpdatedAt\n    tableOfContents\n    user {\n      ...UsersMinimumInfo\n    }\n    lensesIncludingDeleted {\n      ...MultiDocumentContentDisplay\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagCreationHistoryFragment on Tag {\n    ...TagFragment\n    user {\n      ...UsersMinimumInfo\n    }\n    description {\n      html\n    }\n  }\n"): (typeof documents)["\n  fragment TagCreationHistoryFragment on Tag {\n    ...TagFragment\n    user {\n      ...UsersMinimumInfo\n    }\n    description {\n      html\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRevisionFragment on Tag {\n    ...TagDetailsFragment\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    isRead\n    description(version: $version) {\n      _id\n      version\n      html\n      htmlHighlight\n      plaintextDescription\n      editedAt\n      \n      user {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment TagRevisionFragment on Tag {\n    ...TagDetailsFragment\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    isRead\n    description(version: $version) {\n      _id\n      version\n      html\n      htmlHighlight\n      plaintextDescription\n      editedAt\n      \n      user {\n        ...UsersMinimumInfo\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagPreviewFragment on Tag {\n    ...TagBasicInfo\n    isRead\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      htmlHighlight\n    }\n    canVoteOnRels\n    isArbitalImport\n  }\n"): (typeof documents)["\n  fragment TagPreviewFragment on Tag {\n    ...TagBasicInfo\n    isRead\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      htmlHighlight\n    }\n    canVoteOnRels\n    isArbitalImport\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagSectionPreviewFragment on Tag {\n    ...TagBasicInfo\n    isRead\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      htmlHighlightStartingAtHash(hash: $hash)\n    }\n    canVoteOnRels\n  }\n"): (typeof documents)["\n  fragment TagSectionPreviewFragment on Tag {\n    ...TagBasicInfo\n    isRead\n    parentTag {\n      ...TagBasicInfo\n    }\n    subTags {\n      ...TagBasicInfo\n    }\n    description {\n      _id\n      htmlHighlightStartingAtHash(hash: $hash)\n    }\n    canVoteOnRels\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagSubforumFragment on Tag {\n    ...TagPreviewFragment\n    subforumModeratorIds\n    tableOfContents\n    subforumWelcomeText {\n      _id\n      html\n    }\n  }\n"): (typeof documents)["\n  fragment TagSubforumFragment on Tag {\n    ...TagPreviewFragment\n    subforumModeratorIds\n    tableOfContents\n    subforumWelcomeText {\n      _id\n      html\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagSubtagFragment on Tag {\n    _id\n    subforumModeratorIds\n    subTags {\n      ...TagPreviewFragment\n    }\n  }\n"): (typeof documents)["\n  fragment TagSubtagFragment on Tag {\n    _id\n    subforumModeratorIds\n    subTags {\n      ...TagPreviewFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagSubforumSidebarFragment on Tag {\n    ...TagBasicInfo\n  }\n"): (typeof documents)["\n  fragment TagSubforumSidebarFragment on Tag {\n    ...TagBasicInfo\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagDetailedPreviewFragment on Tag {\n    ...TagDetailsFragment\n    description {\n      _id\n      htmlHighlight\n    }\n  }\n"): (typeof documents)["\n  fragment TagDetailedPreviewFragment on Tag {\n    ...TagDetailsFragment\n    description {\n      _id\n      htmlHighlight\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagWithFlagsFragment on Tag {\n    ...TagFragment\n    tagFlagsIds\n    tagFlags {\n      ...TagFlagFragment\n    }\n  }\n"): (typeof documents)["\n  fragment TagWithFlagsFragment on Tag {\n    ...TagFragment\n    tagFlagsIds\n    tagFlags {\n      ...TagFlagFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagWithFlagsAndRevisionFragment on Tag {\n    ...TagRevisionFragment\n    tagFlagsIds\n    tagFlags {\n      ...TagFlagFragment\n    }\n  }\n"): (typeof documents)["\n  fragment TagWithFlagsAndRevisionFragment on Tag {\n    ...TagRevisionFragment\n    tagFlagsIds\n    tagFlags {\n      ...TagFlagFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ArbitalLinkedPagesFragment on ArbitalLinkedPages {\n    faster {\n      _id\n      name\n      slug\n    }\n    slower {\n      _id\n      name\n      slug\n    }\n    moreTechnical {\n      _id\n      name\n      slug\n    }\n    lessTechnical {\n      _id\n      name\n      slug\n    }\n    requirements {\n      _id\n      name\n      slug\n    }\n    teaches {\n      _id\n      name\n      slug\n    }\n    parents {\n      _id\n      name\n      slug\n    }\n    children {\n      _id\n      name\n      slug\n    }\n  }\n"): (typeof documents)["\n  fragment ArbitalLinkedPagesFragment on ArbitalLinkedPages {\n    faster {\n      _id\n      name\n      slug\n    }\n    slower {\n      _id\n      name\n      slug\n    }\n    moreTechnical {\n      _id\n      name\n      slug\n    }\n    lessTechnical {\n      _id\n      name\n      slug\n    }\n    requirements {\n      _id\n      name\n      slug\n    }\n    teaches {\n      _id\n      name\n      slug\n    }\n    parents {\n      _id\n      name\n      slug\n    }\n    children {\n      _id\n      name\n      slug\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagPageArbitalContentFragment on Tag {\n    lenses {\n      ...MultiDocumentWithContributors\n    }\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n  }\n"): (typeof documents)["\n  fragment TagPageArbitalContentFragment on Tag {\n    lenses {\n      ...MultiDocumentWithContributors\n    }\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagPageFragment on Tag {\n    ...TagWithFlagsFragment\n    tableOfContents\n    postsDefaultSortOrder\n    subforumIntroPost {\n      ...PostsListWithVotes\n    }\n    subforumWelcomeText {\n      _id\n      html\n    }\n    contributors(limit: $contributorsLimit) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    canVoteOnRels\n    forceAllowType3Audio\n    textLastUpdatedAt\n  }\n"): (typeof documents)["\n  fragment TagPageFragment on Tag {\n    ...TagWithFlagsFragment\n    tableOfContents\n    postsDefaultSortOrder\n    subforumIntroPost {\n      ...PostsListWithVotes\n    }\n    subforumWelcomeText {\n      _id\n      html\n    }\n    contributors(limit: $contributorsLimit) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    canVoteOnRels\n    forceAllowType3Audio\n    textLastUpdatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagPageWithArbitalContentFragment on Tag {\n    ...TagPageFragment\n    ...TagPageArbitalContentFragment\n  }\n"): (typeof documents)["\n  fragment TagPageWithArbitalContentFragment on Tag {\n    ...TagPageFragment\n    ...TagPageArbitalContentFragment\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AllTagsPageFragment on Tag {\n    ...TagWithFlagsFragment\n    tableOfContents\n  }\n"): (typeof documents)["\n  fragment AllTagsPageFragment on Tag {\n    ...TagWithFlagsFragment\n    tableOfContents\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagPageWithRevisionFragment on Tag {\n    ...TagWithFlagsAndRevisionFragment\n    tableOfContents(version: $version)\n    textLastUpdatedAt\n    postsDefaultSortOrder\n    subforumIntroPost {\n      ...PostsListWithVotes\n    }\n    subforumWelcomeText {\n      _id\n      html\n    }\n    contributors(limit: $contributorsLimit, version: $version) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    canVoteOnRels\n    forceAllowType3Audio\n  }\n"): (typeof documents)["\n  fragment TagPageWithRevisionFragment on Tag {\n    ...TagWithFlagsAndRevisionFragment\n    tableOfContents(version: $version)\n    textLastUpdatedAt\n    postsDefaultSortOrder\n    subforumIntroPost {\n      ...PostsListWithVotes\n    }\n    subforumWelcomeText {\n      _id\n      html\n    }\n    contributors(limit: $contributorsLimit, version: $version) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    canVoteOnRels\n    forceAllowType3Audio\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagPageRevisionWithArbitalContentFragment on Tag {\n    ...TagPageWithRevisionFragment\n    ...TagPageArbitalContentFragment\n  }\n"): (typeof documents)["\n  fragment TagPageRevisionWithArbitalContentFragment on Tag {\n    ...TagPageWithRevisionFragment\n    ...TagPageArbitalContentFragment\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagFullContributorsList on Tag {\n    contributors {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment TagFullContributorsList on Tag {\n    contributors {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagEditFragment on Tag {\n    ...TagDetailsFragment\n    isPostType\n    parentTagId\n    parentTag {\n      ...TagBasicInfo\n    }\n    subforumIntroPostId\n    tagFlagsIds\n    postsDefaultSortOrder\n    introSequenceId\n    \n    autoTagModel\n    autoTagPrompt\n    \n    description {\n      ...RevisionEdit\n    }\n    subforumWelcomeText {\n      ...RevisionEdit\n    }\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n  }\n"): (typeof documents)["\n  fragment TagEditFragment on Tag {\n    ...TagDetailsFragment\n    isPostType\n    parentTagId\n    parentTag {\n      ...TagBasicInfo\n    }\n    subforumIntroPostId\n    tagFlagsIds\n    postsDefaultSortOrder\n    introSequenceId\n    \n    autoTagModel\n    autoTagPrompt\n    \n    description {\n      ...RevisionEdit\n    }\n    subforumWelcomeText {\n      ...RevisionEdit\n    }\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRecentDiscussion on Tag {\n    ...TagFragment\n    lastVisitedAt\n    recentComments(tagCommentsLimit: $tagCommentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsList\n    }\n  }\n"): (typeof documents)["\n  fragment TagRecentDiscussion on Tag {\n    ...TagFragment\n    lastVisitedAt\n    recentComments(tagCommentsLimit: $tagCommentsLimit, maxAgeHours: $maxAgeHours, af: $af) {\n      ...CommentsList\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SunshineTagFragment on Tag {\n    ...TagFragment\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"): (typeof documents)["\n  fragment SunshineTagFragment on Tag {\n    ...TagFragment\n    user {\n      ...UsersMinimumInfo\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserOnboardingTag on Tag {\n    _id\n    name\n    slug\n    bannerImageId\n    squareImageId\n  }\n"): (typeof documents)["\n  fragment UserOnboardingTag on Tag {\n    _id\n    name\n    slug\n    bannerImageId\n    squareImageId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagName on Tag {\n    _id\n    name\n    slug\n  }\n"): (typeof documents)["\n  fragment TagName on Tag {\n    _id\n    name\n    slug\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ExplorePageTagFragment on Tag {\n    ...TagFragment\n    contributors(limit: $contributorsLimit) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    legacyData\n  }\n"): (typeof documents)["\n  fragment ExplorePageTagFragment on Tag {\n    ...TagFragment\n    contributors(limit: $contributorsLimit) {\n      totalCount\n      contributors {\n        user {\n          ...UsersMinimumInfo\n        }\n        contributionScore\n        currentAttributionCharCount\n        numCommits\n        voteCount\n      }\n    }\n    legacyData\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ConceptItemFragment on Tag {\n    _id\n    core\n    name\n    slug\n    oldSlugs\n    postCount\n    baseScore\n    description {\n      _id\n      wordCount\n    }\n    wikiOnly\n    isArbitalImport\n    coreTagId\n    maxScore\n    usersWhoLiked {\n      _id\n      displayName\n    }\n  }\n"): (typeof documents)["\n  fragment ConceptItemFragment on Tag {\n    _id\n    core\n    name\n    slug\n    oldSlugs\n    postCount\n    baseScore\n    description {\n      _id\n      wordCount\n    }\n    wikiOnly\n    isArbitalImport\n    coreTagId\n    maxScore\n    usersWhoLiked {\n      _id\n      displayName\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagPageWithArbitalContentAndLensRevisionFragment on Tag {\n    ...TagPageFragment\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    lenses(lensSlug: $lensSlug, version: $version) {\n      ...MultiDocumentWithContributorsRevision\n    }\n  }\n"): (typeof documents)["\n  fragment TagPageWithArbitalContentAndLensRevisionFragment on Tag {\n    ...TagPageFragment\n    arbitalLinkedPages {\n      ...ArbitalLinkedPagesFragment\n    }\n    lenses(lensSlug: $lensSlug, version: $version) {\n      ...MultiDocumentWithContributorsRevision\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment WithVoteTag on Tag {\n    ...TagBasicInfo\n  }\n"): (typeof documents)["\n  fragment WithVoteTag on Tag {\n    ...TagBasicInfo\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TypingIndicatorInfo on TypingIndicator {\n    _id\n    userId\n    documentId\n    lastUpdated\n  }\n"): (typeof documents)["\n  fragment TypingIndicatorInfo on TypingIndicator {\n    _id\n    userId\n    documentId\n    lastUpdated\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserEAGDetailsMinimumInfo on UserEAGDetail {\n    _id\n    userId\n    createdAt\n    lastUpdated\n    careerStage\n    countryOrRegion\n    nearestCity\n    willingnessToRelocate\n    experiencedIn\n    interestedIn\n  }\n"): (typeof documents)["\n  fragment UserEAGDetailsMinimumInfo on UserEAGDetail {\n    _id\n    userId\n    createdAt\n    lastUpdated\n    careerStage\n    countryOrRegion\n    nearestCity\n    willingnessToRelocate\n    experiencedIn\n    interestedIn\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserJobAdsMinimumInfo on UserJobAd {\n    _id\n    userId\n    createdAt\n    lastUpdated\n    jobName\n    adState\n    reminderSetAt\n  }\n"): (typeof documents)["\n  fragment UserJobAdsMinimumInfo on UserJobAd {\n    _id\n    userId\n    createdAt\n    lastUpdated\n    jobName\n    adState\n    reminderSetAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserMostValuablePostInfo on UserMostValuablePost {\n    _id\n    userId\n    postId\n    deleted\n  }\n"): (typeof documents)["\n  fragment UserMostValuablePostInfo on UserMostValuablePost {\n    _id\n    userId\n    postId\n    deleted\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserRateLimitDisplay on UserRateLimit {\n    _id\n    user {\n      ...UsersMinimumInfo\n    }\n    userId\n    type\n    actionsPerInterval\n    intervalUnit\n    intervalLength\n    createdAt\n    endedAt\n  }\n"): (typeof documents)["\n  fragment UserRateLimitDisplay on UserRateLimit {\n    _id\n    user {\n      ...UsersMinimumInfo\n    }\n    userId\n    type\n    actionsPerInterval\n    intervalUnit\n    intervalLength\n    createdAt\n    endedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserTagRelDetails on UserTagRel {\n    _id\n    userId\n    tagId\n    subforumShowUnreadInSidebar\n    subforumEmailNotifications\n    subforumHideIntroPost\n  }\n"): (typeof documents)["\n  fragment UserTagRelDetails on UserTagRel {\n    _id\n    userId\n    tagId\n    subforumShowUnreadInSidebar\n    subforumEmailNotifications\n    subforumHideIntroPost\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersMinimumInfo on User {\n    _id\n    slug\n    createdAt\n    username\n    displayName\n    profileImageId\n    previousDisplayName\n    fullName\n    karma\n    afKarma\n    deleted\n    isAdmin\n    htmlBio\n    jobTitle\n    organization\n    postCount\n    commentCount\n    sequenceCount\n    afPostCount\n    afCommentCount\n    spamRiskScore\n    tagRevisionCount\n    reviewedByUserId\n  }\n"): (typeof documents)["\n  fragment UsersMinimumInfo on User {\n    _id\n    slug\n    createdAt\n    username\n    displayName\n    profileImageId\n    previousDisplayName\n    fullName\n    karma\n    afKarma\n    deleted\n    isAdmin\n    htmlBio\n    jobTitle\n    organization\n    postCount\n    commentCount\n    sequenceCount\n    afPostCount\n    afCommentCount\n    spamRiskScore\n    tagRevisionCount\n    reviewedByUserId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersProfile on User {\n    ...UsersMinimumInfo\n    oldSlugs\n    groups\n    jobTitle\n    organization\n    careerStage\n    biography {\n      ...RevisionDisplay\n    }\n    howOthersCanHelpMe {\n      ...RevisionDisplay\n    }\n    howICanHelpOthers {\n      ...RevisionDisplay\n    }\n    profileTagIds\n    profileTags {\n      ...TagPreviewFragment\n    }\n    organizerOfGroupIds\n    organizerOfGroups {\n      ...localGroupsBase\n    }\n    programParticipation\n    website\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    githubProfileURL\n    frontpagePostCount\n    afSequenceCount\n    afSequenceDraftCount\n    sequenceDraftCount\n    moderationStyle\n    moderationGuidelines {\n      ...RevisionDisplay\n    }\n    bannedUserIds\n    location\n    googleLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    mongoLocation\n    shortformFeedId\n    viewUnreviewedComments\n    auto_subscribe_to_my_posts\n    auto_subscribe_to_my_comments\n    autoSubscribeAsOrganizer\n    petrovPressedButtonDate\n    petrovOptOut\n    sortDraftsBy\n    email\n    emails\n    banned\n    ...SharedUserBooleans\n    noindex\n    paymentEmail\n    paymentInfo\n    goodHeartTokens\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n  }\n"): (typeof documents)["\n  fragment UsersProfile on User {\n    ...UsersMinimumInfo\n    oldSlugs\n    groups\n    jobTitle\n    organization\n    careerStage\n    biography {\n      ...RevisionDisplay\n    }\n    howOthersCanHelpMe {\n      ...RevisionDisplay\n    }\n    howICanHelpOthers {\n      ...RevisionDisplay\n    }\n    profileTagIds\n    profileTags {\n      ...TagPreviewFragment\n    }\n    organizerOfGroupIds\n    organizerOfGroups {\n      ...localGroupsBase\n    }\n    programParticipation\n    website\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    githubProfileURL\n    frontpagePostCount\n    afSequenceCount\n    afSequenceDraftCount\n    sequenceDraftCount\n    moderationStyle\n    moderationGuidelines {\n      ...RevisionDisplay\n    }\n    bannedUserIds\n    location\n    googleLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    mongoLocation\n    shortformFeedId\n    viewUnreviewedComments\n    auto_subscribe_to_my_posts\n    auto_subscribe_to_my_comments\n    autoSubscribeAsOrganizer\n    petrovPressedButtonDate\n    petrovOptOut\n    sortDraftsBy\n    email\n    emails\n    banned\n    ...SharedUserBooleans\n    noindex\n    paymentEmail\n    paymentInfo\n    goodHeartTokens\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersCurrent on User {\n    ...UsersProfile\n\n    beta\n    email\n    services\n    acceptedTos\n    pageUrl\n    banned\n    isReviewed\n    nullifyVotes\n    hideIntercom\n    hideNavigationSidebar\n    hideCommunitySection\n    expandedFrontpageSections\n    hidePostsRecommendations\n    currentFrontpageFilter\n    frontpageSelectedTab\n    frontpageFilterSettings\n    hideFrontpageFilterSettingsDesktop\n    allPostsTimeframe\n    allPostsSorting\n    allPostsFilter\n    allPostsShowLowKarma\n    allPostsIncludeEvents\n    allPostsHideCommunity\n    allPostsOpenSettings\n    draftsListSorting\n    draftsListShowArchived\n    draftsListShowShared\n    lastNotificationsCheck\n    bannedUserIds\n    bannedPersonalUserIds\n    moderationStyle\n    noKibitz\n    showHideKarmaOption\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    commentSorting\n    location\n    googleLocation\n    mongoLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    nearbyEventsNotifications\n    nearbyEventsNotificationsLocation\n    nearbyEventsNotificationsRadius\n    nearbyPeopleNotificationThreshold\n    hideFrontpageMap\n    emailSubscribedToCurated\n    subscribedToDigest\n    unsubscribeFromAll\n    emails\n    whenConfirmationEmailSent\n    hideSubscribePoke\n    hideMeetupsPoke\n    hideHomeRHS\n    noCollapseCommentsFrontpage\n    noCollapseCommentsPosts\n    noSingleLineComments\n    showCommunityInRecentDiscussion\n    karmaChangeNotifierSettings\n    karmaChangeLastOpened\n    shortformFeedId\n    viewUnreviewedComments\n    recommendationSettings\n    theme\n\n    bookmarkedPostsMetadata\n\n    hiddenPostsMetadata\n    auto_subscribe_to_my_posts\n    auto_subscribe_to_my_comments\n    autoSubscribeAsOrganizer\n    noExpandUnreadCommentsReview\n    reviewVotesQuadratic\n    reviewVotesQuadratic2019\n    reviewVotesQuadratic2020\n    hideTaggingProgressBar\n    hideFrontpageBookAd\n    hideFrontpageBook2019Ad\n\n    abTestKey\n    abTestOverrides\n\n    sortDraftsBy\n    reactPaletteStyle\n\n    petrovPressedButtonDate\n    petrovLaunchCodeDate\n    petrovOptOut\n    lastUsedTimezone\n    ...SharedUserBooleans\n\n    acknowledgedNewUserGuidelines\n    notificationSubforumUnread\n    subforumPreferredLayout\n    \n    hideJobAdUntil\n    criticismTipsDismissed\n    \n    allowDatadogSessionReplay\n    hideFrontpageBook2020Ad\n\n    hideDialogueFacilitation\n    optedInToDialogueFacilitation\n    revealChecksToAdmins\n    notificationNewDialogueChecks\n    notificationYourTurnMatchForm\n\n    showDialoguesList\n    showMyDialogues\n    showMatches\n    showRecommendedPartners\n    hideActiveDialogueUsers\n\n    hideSunshineSidebar\n    optedOutOfSurveys\n    postGlossariesPinned\n    generateJargonForDrafts\n    generateJargonForPublishedPosts\n  }\n"): (typeof documents)["\n  fragment UsersCurrent on User {\n    ...UsersProfile\n\n    beta\n    email\n    services\n    acceptedTos\n    pageUrl\n    banned\n    isReviewed\n    nullifyVotes\n    hideIntercom\n    hideNavigationSidebar\n    hideCommunitySection\n    expandedFrontpageSections\n    hidePostsRecommendations\n    currentFrontpageFilter\n    frontpageSelectedTab\n    frontpageFilterSettings\n    hideFrontpageFilterSettingsDesktop\n    allPostsTimeframe\n    allPostsSorting\n    allPostsFilter\n    allPostsShowLowKarma\n    allPostsIncludeEvents\n    allPostsHideCommunity\n    allPostsOpenSettings\n    draftsListSorting\n    draftsListShowArchived\n    draftsListShowShared\n    lastNotificationsCheck\n    bannedUserIds\n    bannedPersonalUserIds\n    moderationStyle\n    noKibitz\n    showHideKarmaOption\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    commentSorting\n    location\n    googleLocation\n    mongoLocation\n    mapLocation\n    mapLocationSet\n    mapMarkerText\n    htmlMapMarkerText\n    nearbyEventsNotifications\n    nearbyEventsNotificationsLocation\n    nearbyEventsNotificationsRadius\n    nearbyPeopleNotificationThreshold\n    hideFrontpageMap\n    emailSubscribedToCurated\n    subscribedToDigest\n    unsubscribeFromAll\n    emails\n    whenConfirmationEmailSent\n    hideSubscribePoke\n    hideMeetupsPoke\n    hideHomeRHS\n    noCollapseCommentsFrontpage\n    noCollapseCommentsPosts\n    noSingleLineComments\n    showCommunityInRecentDiscussion\n    karmaChangeNotifierSettings\n    karmaChangeLastOpened\n    shortformFeedId\n    viewUnreviewedComments\n    recommendationSettings\n    theme\n\n    bookmarkedPostsMetadata\n\n    hiddenPostsMetadata\n    auto_subscribe_to_my_posts\n    auto_subscribe_to_my_comments\n    autoSubscribeAsOrganizer\n    noExpandUnreadCommentsReview\n    reviewVotesQuadratic\n    reviewVotesQuadratic2019\n    reviewVotesQuadratic2020\n    hideTaggingProgressBar\n    hideFrontpageBookAd\n    hideFrontpageBook2019Ad\n\n    abTestKey\n    abTestOverrides\n\n    sortDraftsBy\n    reactPaletteStyle\n\n    petrovPressedButtonDate\n    petrovLaunchCodeDate\n    petrovOptOut\n    lastUsedTimezone\n    ...SharedUserBooleans\n\n    acknowledgedNewUserGuidelines\n    notificationSubforumUnread\n    subforumPreferredLayout\n    \n    hideJobAdUntil\n    criticismTipsDismissed\n    \n    allowDatadogSessionReplay\n    hideFrontpageBook2020Ad\n\n    hideDialogueFacilitation\n    optedInToDialogueFacilitation\n    revealChecksToAdmins\n    notificationNewDialogueChecks\n    notificationYourTurnMatchForm\n\n    showDialoguesList\n    showMyDialogues\n    showMatches\n    showRecommendedPartners\n    hideActiveDialogueUsers\n\n    hideSunshineSidebar\n    optedOutOfSurveys\n    postGlossariesPinned\n    generateJargonForDrafts\n    generateJargonForPublishedPosts\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersCurrentCommentRateLimit on User {\n    _id\n    rateLimitNextAbleToComment(postId: $postId)\n  }\n"): (typeof documents)["\n  fragment UsersCurrentCommentRateLimit on User {\n    _id\n    rateLimitNextAbleToComment(postId: $postId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersCurrentPostRateLimit on User {\n    _id\n    rateLimitNextAbleToPost(eventForm: $eventForm)\n  }\n"): (typeof documents)["\n  fragment UsersCurrentPostRateLimit on User {\n    _id\n    rateLimitNextAbleToPost(eventForm: $eventForm)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserBookmarkedPosts on User {\n    _id\n    bookmarkedPosts {\n      ...PostsList\n    }\n  }\n"): (typeof documents)["\n  fragment UserBookmarkedPosts on User {\n    _id\n    bookmarkedPosts {\n      ...PostsList\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserKarmaChanges on User {\n    _id\n    karmaChanges {\n      totalChange\n      updateFrequency\n      startDate\n      endDate\n      nextBatchDate\n      posts {\n        _id\n        scoreChange\n        postId\n        title\n        slug\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n      }\n      comments {\n        _id\n        scoreChange\n        commentId\n        description\n        postId\n        postTitle\n        postSlug\n        tagSlug\n        tagName\n        tagCommentType\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n      }\n      tagRevisions {\n        _id\n        scoreChange\n        tagId\n        tagSlug\n        tagName\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n      }\n      todaysKarmaChanges {\n        posts {\n          _id\n          scoreChange\n          postId\n          title\n          slug\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n        comments {\n          _id\n          scoreChange\n          commentId\n          description\n          postId\n          postTitle\n          postSlug\n          tagSlug\n          tagName\n          tagCommentType\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n        tagRevisions {\n          _id\n          scoreChange\n          tagId\n          tagSlug\n          tagName\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n      }\n      thisWeeksKarmaChanges {\n        posts {\n          _id\n          scoreChange\n          postId\n          title\n          slug\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n        comments {\n          _id\n          scoreChange\n          commentId\n          description\n          postId\n          postTitle\n          postSlug\n          tagSlug\n          tagName\n          tagCommentType\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n        tagRevisions {\n          _id\n          scoreChange\n          tagId\n          tagSlug\n          tagName\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment UserKarmaChanges on User {\n    _id\n    karmaChanges {\n      totalChange\n      updateFrequency\n      startDate\n      endDate\n      nextBatchDate\n      posts {\n        _id\n        scoreChange\n        postId\n        title\n        slug\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n      }\n      comments {\n        _id\n        scoreChange\n        commentId\n        description\n        postId\n        postTitle\n        postSlug\n        tagSlug\n        tagName\n        tagCommentType\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n      }\n      tagRevisions {\n        _id\n        scoreChange\n        tagId\n        tagSlug\n        tagName\n        addedReacts {\n          reactionType\n          userId\n        }\n        eaAddedReacts\n      }\n      todaysKarmaChanges {\n        posts {\n          _id\n          scoreChange\n          postId\n          title\n          slug\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n        comments {\n          _id\n          scoreChange\n          commentId\n          description\n          postId\n          postTitle\n          postSlug\n          tagSlug\n          tagName\n          tagCommentType\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n        tagRevisions {\n          _id\n          scoreChange\n          tagId\n          tagSlug\n          tagName\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n      }\n      thisWeeksKarmaChanges {\n        posts {\n          _id\n          scoreChange\n          postId\n          title\n          slug\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n        comments {\n          _id\n          scoreChange\n          commentId\n          description\n          postId\n          postTitle\n          postSlug\n          tagSlug\n          tagName\n          tagCommentType\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n        tagRevisions {\n          _id\n          scoreChange\n          tagId\n          tagSlug\n          tagName\n          addedReacts {\n            reactionType\n            userId\n          }\n          eaAddedReacts\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersBannedFromUsersModerationLog on User {\n    _id\n    slug\n    displayName\n    bannedUserIds\n    bannedPersonalUserIds\n  }\n"): (typeof documents)["\n  fragment UsersBannedFromUsersModerationLog on User {\n    _id\n    slug\n    displayName\n    bannedUserIds\n    bannedPersonalUserIds\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SunshineUsersList on User {\n    ...UsersMinimumInfo\n    karma\n    htmlBio\n    website\n    createdAt\n    email\n    emails\n    commentCount\n    maxCommentCount\n    postCount\n    maxPostCount\n    voteCount\n    smallUpvoteCount\n    bigUpvoteCount\n    smallDownvoteCount\n    bigDownvoteCount\n    banned\n    reviewedByUserId\n    reviewedAt\n    signUpReCaptchaRating\n    mapLocation\n    needsReview\n    sunshineNotes\n    sunshineFlagged\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n    snoozedUntilContentCount\n    nullifyVotes\n    deleteContent\n    \n    moderatorActions {\n      ...ModeratorActionDisplay\n    }\n    usersContactedBeforeReview\n    associatedClientIds {\n      clientId\n      firstSeenReferrer\n      firstSeenLandingPage\n      userIds\n    }\n    altAccountsDetected\n\n    voteReceivedCount\n    smallUpvoteReceivedCount\n    bigUpvoteReceivedCount\n    smallDownvoteReceivedCount\n    bigDownvoteReceivedCount\n\n    recentKarmaInfo\n    lastNotificationsCheck\n  }\n"): (typeof documents)["\n  fragment SunshineUsersList on User {\n    ...UsersMinimumInfo\n    karma\n    htmlBio\n    website\n    createdAt\n    email\n    emails\n    commentCount\n    maxCommentCount\n    postCount\n    maxPostCount\n    voteCount\n    smallUpvoteCount\n    bigUpvoteCount\n    smallDownvoteCount\n    bigDownvoteCount\n    banned\n    reviewedByUserId\n    reviewedAt\n    signUpReCaptchaRating\n    mapLocation\n    needsReview\n    sunshineNotes\n    sunshineFlagged\n    postingDisabled\n    allCommentingDisabled\n    commentingOnOtherUsersDisabled\n    conversationsDisabled\n    snoozedUntilContentCount\n    nullifyVotes\n    deleteContent\n    \n    moderatorActions {\n      ...ModeratorActionDisplay\n    }\n    usersContactedBeforeReview\n    associatedClientIds {\n      clientId\n      firstSeenReferrer\n      firstSeenLandingPage\n      userIds\n    }\n    altAccountsDetected\n\n    voteReceivedCount\n    smallUpvoteReceivedCount\n    bigUpvoteReceivedCount\n    smallDownvoteReceivedCount\n    bigDownvoteReceivedCount\n\n    recentKarmaInfo\n    lastNotificationsCheck\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserAltAccountsFragment on User {\n    ...SunshineUsersList\n    IPs\n  }\n"): (typeof documents)["\n  fragment UserAltAccountsFragment on User {\n    ...SunshineUsersList\n    IPs\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SharedUserBooleans on User {\n    walledGardenInvite\n    hideWalledGardenUI\n    walledGardenPortalOnboarded\n    taggingDashboardCollapsed\n    usernameUnset\n  }\n"): (typeof documents)["\n  fragment SharedUserBooleans on User {\n    walledGardenInvite\n    hideWalledGardenUI\n    walledGardenPortalOnboarded\n    taggingDashboardCollapsed\n    usernameUnset\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersMapEntry on User {\n    _id\n    displayName\n    username\n    fullName\n    slug\n    mapLocationLatLng {\n      lat\n      lng\n    }\n    mapLocationSet\n    htmlMapMarkerText\n  }\n"): (typeof documents)["\n  fragment UsersMapEntry on User {\n    _id\n    displayName\n    username\n    fullName\n    slug\n    mapLocationLatLng {\n      lat\n      lng\n    }\n    mapLocationSet\n    htmlMapMarkerText\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersEdit on User {\n    ...UsersCurrent\n    biography {\n      ...RevisionEdit\n    }\n    # Moderation Guidelines editor information\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n\n    # UI Settings\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    hideIntercom\n    commentSorting\n    currentFrontpageFilter\n    noCollapseCommentsPosts\n    noCollapseCommentsFrontpage\n    noSingleLineComments\n    hideCommunitySection\n    showCommunityInRecentDiscussion\n    hidePostsRecommendations\n    beta\n    theme\n\n    # Emails\n    email\n    whenConfirmationEmailSent\n    emailSubscribedToCurated\n    subscribedToDigest\n    unsubscribeFromAll\n    hasAuth0Id\n\n    # Moderation\n    moderatorAssistance\n    collapseModerationGuidelines\n    bannedUserIds\n    bannedPersonalUserIds\n    noKibitz\n    showHideKarmaOption\n\n    # Ban & Purge\n    nullifyVotes\n    deleteContent\n    banned\n\n    # Name\n    username\n    displayName\n    fullName\n\n    # Location\n    mongoLocation\n    googleLocation\n    location\n    \n    # Map Location (public)\n    mapLocation\n    \n    # Privacy settings\n    hideFromPeopleDirectory\n    allowDatadogSessionReplay\n\n    # Admin & Review\n    reviewedByUserId\n\n    # Alignment Forum\n    reviewForAlignmentForumUserId\n    groups\n    afApplicationText\n    afSubmittedApplication\n\n    # Karma Settings\n    karmaChangeLastOpened\n    karmaChangeNotifierSettings\n\n    notificationShortformContent\n    notificationCommentsOnSubscribedPost\n    notificationRepliesToMyComments\n    notificationRepliesToSubscribedComments\n    notificationSubscribedUserPost\n    notificationSubscribedUserComment\n    notificationSubscribedTagPost\n    notificationSubscribedSequencePost\n    notificationPostsInGroups\n    notificationPrivateMessage\n    notificationSharedWithMe\n    notificationAlignmentSubmissionApproved\n    notificationEventInRadius\n    notificationRSVPs\n    notificationCommentsOnDraft\n    notificationPostsNominatedReview\n    notificationGroupAdministration\n    notificationSubforumUnread\n    notificationNewMention\n    notificationNewDialogueChecks\n    notificationYourTurnMatchForm\n\n    hideFrontpageMap\n    hideTaggingProgressBar\n    hideFrontpageBookAd\n    hideFrontpageBook2020Ad\n\n    deleted\n    permanentDeletionRequestedAt\n\n    twitterProfileURLAdmin\n  }\n"): (typeof documents)["\n  fragment UsersEdit on User {\n    ...UsersCurrent\n    biography {\n      ...RevisionEdit\n    }\n    # Moderation Guidelines editor information\n    moderationGuidelines {\n      ...RevisionEdit\n    }\n\n    # UI Settings\n    markDownPostEditor\n    hideElicitPredictions\n    hideAFNonMemberInitialWarning\n    hideIntercom\n    commentSorting\n    currentFrontpageFilter\n    noCollapseCommentsPosts\n    noCollapseCommentsFrontpage\n    noSingleLineComments\n    hideCommunitySection\n    showCommunityInRecentDiscussion\n    hidePostsRecommendations\n    beta\n    theme\n\n    # Emails\n    email\n    whenConfirmationEmailSent\n    emailSubscribedToCurated\n    subscribedToDigest\n    unsubscribeFromAll\n    hasAuth0Id\n\n    # Moderation\n    moderatorAssistance\n    collapseModerationGuidelines\n    bannedUserIds\n    bannedPersonalUserIds\n    noKibitz\n    showHideKarmaOption\n\n    # Ban & Purge\n    nullifyVotes\n    deleteContent\n    banned\n\n    # Name\n    username\n    displayName\n    fullName\n\n    # Location\n    mongoLocation\n    googleLocation\n    location\n    \n    # Map Location (public)\n    mapLocation\n    \n    # Privacy settings\n    hideFromPeopleDirectory\n    allowDatadogSessionReplay\n\n    # Admin & Review\n    reviewedByUserId\n\n    # Alignment Forum\n    reviewForAlignmentForumUserId\n    groups\n    afApplicationText\n    afSubmittedApplication\n\n    # Karma Settings\n    karmaChangeLastOpened\n    karmaChangeNotifierSettings\n\n    notificationShortformContent\n    notificationCommentsOnSubscribedPost\n    notificationRepliesToMyComments\n    notificationRepliesToSubscribedComments\n    notificationSubscribedUserPost\n    notificationSubscribedUserComment\n    notificationSubscribedTagPost\n    notificationSubscribedSequencePost\n    notificationPostsInGroups\n    notificationPrivateMessage\n    notificationSharedWithMe\n    notificationAlignmentSubmissionApproved\n    notificationEventInRadius\n    notificationRSVPs\n    notificationCommentsOnDraft\n    notificationPostsNominatedReview\n    notificationGroupAdministration\n    notificationSubforumUnread\n    notificationNewMention\n    notificationNewDialogueChecks\n    notificationYourTurnMatchForm\n\n    hideFrontpageMap\n    hideTaggingProgressBar\n    hideFrontpageBookAd\n    hideFrontpageBook2020Ad\n\n    deleted\n    permanentDeletionRequestedAt\n\n    twitterProfileURLAdmin\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersAdmin on User {\n    _id\n    username\n    createdAt\n    isAdmin\n    displayName\n    email\n    slug\n    groups\n    services\n    karma\n  }\n"): (typeof documents)["\n  fragment UsersAdmin on User {\n    _id\n    username\n    createdAt\n    isAdmin\n    displayName\n    email\n    slug\n    groups\n    services\n    karma\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersWithReviewInfo on User {\n    ...UsersMinimumInfo\n    reviewVoteCount\n    email\n  }\n"): (typeof documents)["\n  fragment UsersWithReviewInfo on User {\n    ...UsersMinimumInfo\n    reviewVoteCount\n    email\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersProfileEdit on User {\n    _id\n    slug\n    displayName\n    jobTitle\n    organization\n    careerStage\n    profileImageId\n    biography {\n      ...RevisionEdit\n    }\n    howOthersCanHelpMe {\n      ...RevisionEdit\n    }\n    howICanHelpOthers {\n      ...RevisionEdit\n    }\n    profileTagIds\n    organizerOfGroupIds\n    organizerOfGroups {\n      ...localGroupsBase\n    }\n    programParticipation\n    mapLocation\n    website\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    githubProfileURL\n  }\n"): (typeof documents)["\n  fragment UsersProfileEdit on User {\n    _id\n    slug\n    displayName\n    jobTitle\n    organization\n    careerStage\n    profileImageId\n    biography {\n      ...RevisionEdit\n    }\n    howOthersCanHelpMe {\n      ...RevisionEdit\n    }\n    howICanHelpOthers {\n      ...RevisionEdit\n    }\n    profileTagIds\n    organizerOfGroupIds\n    organizerOfGroups {\n      ...localGroupsBase\n    }\n    programParticipation\n    mapLocation\n    website\n    linkedinProfileURL\n    facebookProfileURL\n    blueskyProfileURL\n    twitterProfileURL\n    githubProfileURL\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersCrosspostInfo on User {\n    _id\n    username\n    slug\n    fmCrosspostUserId\n  }\n"): (typeof documents)["\n  fragment UsersCrosspostInfo on User {\n    _id\n    username\n    slug\n    fmCrosspostUserId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersOptedInToDialogueFacilitation on User {\n    _id\n    displayName\n  }\n"): (typeof documents)["\n  fragment UsersOptedInToDialogueFacilitation on User {\n    _id\n    displayName\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserOnboardingAuthor on User {\n    _id\n    displayName\n    profileImageId\n    karma\n    jobTitle\n    organization\n  }\n"): (typeof documents)["\n  fragment UserOnboardingAuthor on User {\n    _id\n    displayName\n    profileImageId\n    karma\n    jobTitle\n    organization\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UsersSocialMediaInfo on User {\n    ...UsersProfile\n    twitterProfileURLAdmin\n  }\n"): (typeof documents)["\n  fragment UsersSocialMediaInfo on User {\n    ...UsersProfile\n    twitterProfileURLAdmin\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SuggestAlignmentUser on User {\n    ...UsersMinimumInfo\n    afKarma\n    afPostCount\n    afCommentCount\n    reviewForAlignmentForumUserId\n    groups\n    afApplicationText\n    afSubmittedApplication\n  }\n"): (typeof documents)["\n  fragment SuggestAlignmentUser on User {\n    ...UsersMinimumInfo\n    afKarma\n    afPostCount\n    afCommentCount\n    reviewForAlignmentForumUserId\n    groups\n    afApplicationText\n    afSubmittedApplication\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagRelVotes on Vote {\n    _id\n    userId\n    voteType\n    power\n    documentId\n    votedAt\n    isUnvote\n    tagRel {\n      ...WithVoteTagRel\n    }\n  }\n"): (typeof documents)["\n  fragment TagRelVotes on Vote {\n    _id\n    userId\n    voteType\n    power\n    documentId\n    votedAt\n    isUnvote\n    tagRel {\n      ...WithVoteTagRel\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TagVotingActivity on Vote {\n    ...TagRelVotes\n    tagRel {\n      ...TagRelFragment\n    }\n  }\n"): (typeof documents)["\n  fragment TagVotingActivity on Vote {\n    ...TagRelVotes\n    tagRel {\n      ...TagRelFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserVotes on Vote {\n    _id\n    userId\n    voteType\n    power\n    cancelled\n    documentId\n    votedAt\n    isUnvote\n    collectionName\n  }\n"): (typeof documents)["\n  fragment UserVotes on Vote {\n    _id\n    userId\n    voteType\n    power\n    cancelled\n    documentId\n    votedAt\n    isUnvote\n    collectionName\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment UserVotesWithDocument on Vote {\n    ...UserVotes\n    comment {\n      ...CommentsListWithParentMetadata\n    }\n    post {\n      ...PostsListWithVotes\n    }\n  }\n"): (typeof documents)["\n  fragment UserVotesWithDocument on Vote {\n    ...UserVotes\n    comment {\n      ...CommentsListWithParentMetadata\n    }\n    post {\n      ...PostsListWithVotes\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query getCurrentUser {\n      currentUser {\n        ...UsersCurrent\n      }\n    }\n    \n  "): (typeof documents)["\n    query getCurrentUser {\n      currentUser {\n        ...UsersCurrent\n      }\n    }\n    \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Lightcone2024FundraiserStripeAmounts {\n      Lightcone2024FundraiserStripeAmounts\n    }\n  "): (typeof documents)["\n    query Lightcone2024FundraiserStripeAmounts {\n      Lightcone2024FundraiserStripeAmounts\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment SubscribedPostAndCommentsFeed on SubscribedPostAndComments {\n    _id\n    post {\n      ...PostsList\n    }\n    comments {\n      ...CommentsList\n    }\n    expandCommentIds\n    postIsFromSubscribedUser\n  }\n"): (typeof documents)["\n  fragment SubscribedPostAndCommentsFeed on SubscribedPostAndComments {\n    _id\n    post {\n      ...PostsList\n    }\n    comments {\n      ...CommentsList\n    }\n    expandCommentIds\n    postIsFromSubscribedUser\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;