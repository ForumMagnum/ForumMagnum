name: Run tests
on:
  push:
  pull_request:
    branches-ignore:
      - ea-deploy
  workflow_dispatch:
env:
  BROWSERSLIST_IGNORE_OLD_DATA: 1
jobs:
  runLint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Environment
      uses: ./.github/actions/setupEnvironment
    - run: yarn run eslint

  runTypecheck:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Environment
      uses: ./.github/actions/setupEnvironment
    - run: yarn run tsc

  checkCodeGeneration:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
    env:
      NODE_OPTIONS: "--max_old_space_size=4096"
      SLOW_QUERY_REPORT_CUTOFF_MS: "-1"
      PG_URL: postgres://postgres:password@localhost:5433/postgres
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Environment
      uses: ./.github/actions/setupEnvironment
    - name: Setup database
      run: psql postgres://postgres:password@localhost:5433/postgres -f schema/accepted_schema.sql
    - name: Start the server
      uses: JarvusInnovations/background-action@v1
      with:
        run: yarn start-ci &
        wait-on: http://localhost:3000/api/health
        wait-for: 1m
        tail: true
        log-output: true
        log-output-resume: stderr
    - name: Run code generation (EA Forum)
      run: |
        yarn ea-command-ci 'Globals.generateTypesAndSQLSchema()'
    - name: Throw if code changed
      run: if [[ `git status --porcelain ./schema ./packages` ]]; then git status --porcelain ./schema ./packages; echo "Changes detected - run yarn generate"; exit 1; fi
    - name: Switch forum type
      run: |
        sed -i -e 's/"forumType": "EAForum"/"forumType": "LessWrong"/g' settings-test.json
    - name: Run code generation (LessWrong)
      run: |
        yarn ea-command-ci 'Globals.generateTypesAndSQLSchema()'
    - name: Throw if forum schemas differ
      run: if [[ `git status --porcelain ./schema ./packages` ]]; then git status --porcelain ./schema ./packages; echo "LessWrong/EA Forum database schemas differ"; exit 1; fi

  runPlaywrightTests:
    # Pin Ubuntu to 22.04 to avoid a problem installing browser dependencies.
    # This can probably be changed back to ubuntu-latest in the future when the
    # bugs are ironed out.
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox]
    services:
      postgres:
        image: ankane/pgvector
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
    env:
      NODE_OPTIONS: "--max_old_space_size=4096"
      SLOW_QUERY_REPORT_CUTOFF_MS: "-1"
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Environment
      uses: ./.github/actions/setupEnvironment
    - name: Setup database
      run: |
        psql postgres://postgres:password@localhost:5433/postgres -f schema/accepted_schema.sql
        psql postgres://postgres:password@localhost:5433/postgres -f playwright/fixtures.sql
    - name: Install browsers
      run: yarn playwright install ${{ matrix.project }} --with-deps
    - name: Run playwright tests
      run: yarn playwright test --project ${{ matrix.project }}
    - name: Upload playwright report
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: Playwright report ${{ matrix.project }}
        path: playwright-report
    - name: Upload playwright test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: Playwright test results ${{ matrix.project }}
        path: test-results

  runCrosspostTests:
    # Pin Ubuntu to 22.04 to avoid a problem installing browser dependencies.
    # This can probably be changed back to ubuntu-latest in the future when the
    # bugs are ironed out.
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
    services:
      postgresLocal:
        image: ankane/pgvector
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
      postgresForeign:
        image: ankane/pgvector
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5434:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
    env:
      NODE_OPTIONS: "--max_old_space_size=4096"
      SLOW_QUERY_REPORT_CUTOFF_MS: "-1"
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Environment
      uses: ./.github/actions/setupEnvironment
    - name: Setup databases
      run: |
        psql postgres://postgres:password@localhost:5433/postgres -f schema/accepted_schema.sql
        psql postgres://postgres:password@localhost:5433/postgres -f playwright/fixtures.sql
        psql postgres://postgres:password@localhost:5434/postgres -f schema/accepted_schema.sql
        psql postgres://postgres:password@localhost:5434/postgres -f playwright/fixtures.sql
    - name: Install browsers
      run: yarn playwright install chromium --with-deps
    - name: Run crossposting tests
      run: yarn playwright-test-crosspost
    - name: Upload crosspost report
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: Crosspost report
        path: playwright-report
    - name: Upload crosspost test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: Crosspost test results
        path: test-results

  runUnitTests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Environment
      uses: ./.github/actions/setupEnvironment
    - run: yarn run unit-ci
    - uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: Upload schema to accept
        path: schema/schema_to_accept.sql
    - name: Save coverage report
      uses: coverallsapp/github-action@v2
      with:
        file: unit-coverage/lcov.info
        format: lcov
        flag-name: Unit
        parallel: true

  runIntegrationTests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector
        env:
          POSTGRES_DB: unittest_jest_template
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
    env:
      PG_URL: postgres://postgres:postgres@localhost:5432/postgres
      NODE_OPTIONS: "--max_old_space_size=4096"
      SLOW_QUERY_REPORT_CUTOFF_MS: "-1"
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Environment
      uses: ./.github/actions/setupEnvironment
    - name: Setup database schema
      run: yarn create-integration-db-ci
    - name: yarn run integration-ci
      run: yarn run integration-ci
    - name: Save coverage report
      uses: coverallsapp/github-action@v2
      with:
        file: integration-coverage/lcov.info
        format: lcov
        flag-name: Integration
        parallel: true

  runPostgresBootstrap:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector
        env:
          POSTGRES_DB: bootstrap_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
    env:
      PG_URL: postgres://postgres:postgres@localhost:5432/bootstrap_db
      SETTINGS_FILE: ./settings-test.json
      NODE_OPTIONS: "--max_old_space_size=4096"
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Environment
      uses: ./.github/actions/setupEnvironment
    - name: Execute Accepted Schema
      run: psql $PG_URL -f ./schema/accepted_schema.sql
    - name: Run Database Bootstrap
      run: yarn migrate up

  uploadCoverageReports:
    needs: [runUnitTests, runIntegrationTests]
    runs-on: ubuntu-latest
    steps:
    - name: Upload to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        parallel-finished: true
